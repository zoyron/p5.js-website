/*
  * @name ऑपरेटर वरीयता
  * @description यदि आप स्पष्ट रूप से उस क्रम का उल्लेख नहीं करते हैं जिसमें a
  * अभिव्यक्ति का मूल्यांकन किया जाता है, उनका मूल्यांकन ऑपरेटर के आधार पर किया जाता है
  * वरीयता। उदाहरण के लिए, "4+2*8" कथन में, 2 होगा
  * पहले 8 से गुणा करें और फिर परिणाम 4 में जोड़ दिया जाएगा।
  * ऐसा इसलिए है क्योंकि "*" की "+" की तुलना में अधिक प्राथमिकता है। कन्नी काटना
  * कार्यक्रम को पढ़ने में अस्पष्टता, यह अनुशंसा की जाती है कि कथन है
  * को "4+(2*8)" लिखा जाता है। मूल्यांकन के क्रम को नियंत्रित किया जा सकता है
  * कोड में कोष्ठक लगाने के माध्यम से। ऑपरेटर की एक तालिका
  * वरीयता नीचे दी गई है।
  */
// सर्वोच्च प्राथमिकता सूची में सबसे ऊपर है और
// सबसे नीचे सबसे नीचे है।
// गुणक: * /%
// योजक: + -
// संबंधपरक: <> <= >=
// समानता: ==!=
// तार्किक और: &&
// तार्किक या: ||
// असाइनमेंट: = += -= *= /= %=
function setup() {
  createCanvas(710, 400);
  background(51);
  noFill();
  stroke(51);

  stroke(204);
  for (let i = 0; i < width - 20; i += 4) {
     // 30 को 70 में जोड़ा जाता है और फिर मूल्यांकन किया जाता है
     // यदि यह "i" के वर्तमान मान से अधिक है
     // स्पष्टता के लिए, "if (i> (30 + 70)) {" के रूप में लिखें
    if (i > 30 + 70) {
      line(i, 0, i, 50);
    }
  }

  stroke(255);
   // 2 को 8 से गुणा किया जाता है और परिणाम 4 . में जोड़ा जाता है
   // स्पष्टता के लिए, "रेक्ट (5 + (2 * 8), 0, 90, 20);" के रूप में लिखें।
  rect(4 + 2 * 8, 52, 290, 48);
  rect((4 + 2) * 8, 100, 290, 49);

  stroke(153);
  for (let i = 0; i < width; i += 2) {
     // संबंधपरक बयानों का मूल्यांकन किया जाता है
     // पहले, और फिर तार्किक और कथन और
     // अंत में तार्किक OR. स्पष्टता के लिए, इस प्रकार लिखें:
     // "अगर (((i> 20) && (i <50)) || ((i> 100) && (i <चौड़ाई-20))) {"
    if ((i > 20 && i < 50) || (i > 100 && i < width - 20)) {
      line(i, 151, i, height - 1);
    }
  }
}
