/*
 * @name 操作符优先级
 * @description 如果没有明确地指明表达式求值的次序，表达式将根据操作符的优先级来求值。
 * 例如，在 "4+2*8" 的语句中, 2 会先乘 8，其结果再加上 4。
 * 这是因为 "*" 的优先级比 "+" 的高。
 * 为了避免读取程序时的模凌两可，建议将该语句写成 "4+(2*8)"。
 * 在代码中加上括号可以控制求值的次序。
 * 以下是操作符优先级列表。
 */
// 最高级（最先执行）的位于列表上方，最低级（最后执行）的位于下方。
// 乘法: * / %
// 加法: + -
// 比较: < > <= >=
// 相等: == !=
// 逻辑与 (AND): &&
// 逻辑或 (OR): ||
// 赋值: = += -= *= /= %=
function setup() {
  createCanvas(710, 400);
  background(51);
  noFill();
  stroke(51);

  stroke(204);
  for (let i = 0; i < width - 20; i += 4) {
    // 30 和 70 先相加，其结果再和现在的 i 值比较大小
    // 更清楚的写法是："if (i > (30 + 70)) {"
    if (i > 30 + 70) {
      line(i, 0, i, 50);
    }
  }

  stroke(255);
  // 2 和 8 先相乘，其结果再加 4
  // 更清楚的写法是："rect(5 + (2 * 8), 0, 90, 20);"
  rect(4 + 2 * 8, 52, 290, 48);
  rect((4 + 2) * 8, 100, 290, 49);

  stroke(153);
  for (let i = 0; i < width; i += 2) {
    // 先算关系表达式，再是逻辑与 (AND)，最后是逻辑或 (OR)
    // 更清楚的写法是： 
    // "if(((i > 20) && (i < 50)) || ((i > 100) && (i < width-20))) {"
    if ((i > 20 && i < 50) || (i > 100 && i < width - 20)) {
      line(i, 151, i, height - 1);
    }
  }
}
