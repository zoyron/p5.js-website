Skip-To-Content: Skip to content
Language-Settings: Language Settings
Sidebar-Title: Site Navigation
Home: Home
Editor: Editor
Download: Download
Donate: Donate
Start: Get Started
Reference: Reference
Libraries: Libraries
Learn: Learn
Teach: Teach
Examples: Examples
Books: Books
Community: Community
Contribute: Contribute
Forum: Forum
Showcase: Showcase
footerxh1: Credits
footer1: 'p5.js is currently led by '
footer3: ' and was created by '
footer4: '. p5.js is developed by a community of collaborators, with support from the '
footer5: ' and '
footer6: '. Identity and graphic design by '
footer7: '. '
footer8: 'Info'
footer9: '.'
tagline1: Processing fun times JavaScript quirkiness
tagline2: Processing simplicity times JavaScript flexibility
tagline3: Processing intuition times JavaScript power
tagline4: Processing creativity times JavaScript dynamism
tagline5: Processing community times JavaScript community
tagline6: the power of Processing times the reach of JavaScript
tagline7: The p5.js community stands in solidarity with Black Lives Matter.
home:
  start-creating: Start creating with the p5 Editor!
  p1xh1: Hello!
  p1x1: >-
    p5.js is a JavaScript library for creative coding, with a focus on making
    coding accessible and inclusive for artists, designers, educators,
    beginners, and anyone else! p5.js is free and open-source because we believe
    software, and the tools to learn it, should be accessible to everyone.
  p1x2: >-
    Using the metaphor of a sketch, p5.js has a full set of drawing
    functionality. However, you’re not limited to your drawing canvas. You can
    think of your whole browser page as your sketch, including HTML5 objects for
    text, input, video, webcam, and sound.
  p2xh2: Community
  p2x1: >-
    We are a community of, and in solidarity with, people from every gender
    identity and expression, sexual orientation, race, ethnicity, language,
    neuro-type, size, disability, class, religion, culture, subculture,
    political opinion, age, skill level, occupation, and background. We
    acknowledge that not everyone has the time, financial means, or capacity to
    actively participate, but we recognize and encourage involvement of all
    kinds. We facilitate and foster access and empowerment. We are all learners.
  p2x2: 'p5.js is an interpretation of '
  p2x3: ' for today’s web. We hold events and operate with support from the '
  p2x4: .
  p2x5: 'Learn more about '
  p2x6: our community
  p2x7: .
  p3xh2: Get Started
  p3xp1: 'Make your first sketch in the '
  p3xp2: '. Learn more about sketching with p5.js on the '
  p3xp3: Get Started page
  p3xp4: ' and everything you can do in the '
  p3xp5: Reference
  p3xp6: .
  p4xh2: Get Involved
  p4xp1: 'There are many ways to contribute to p5.js:'
  p4xp2: Involvement Options
  p4xp3: Share something you've made!
  p4xp4: Teach a workshop or class.
  p4xp5: Organize a meet-up.
  p4xp6: Contribute to the codebase.
  sketch_credits: Sketch Credits
  sketch_info: Hunminjeongeum2020 created by Seonghyeon Kim
copyright:
  copyright-title: Copyright Information
  copyright1: 'The p5.js library is free software; you can redistribute it and/or modify it
    under the terms of the '
  copyright2: ' as published by the Free Software Foundation, version 2.1.'
  copyright3: 'The Reference for the language is under a '
  copyright4: ' license which makes it possible to reuse this content for non-commercial purposes if it is credited.'
get started:
  get-started-title: Get Started
  get-started1: >-
    This page walks you through setting up a p5.js project and making your first
    sketch.
  get-started2: 'The easiest way to start is using the '
  get-started3: p5.js editor
  get-started4: ', you can open the web editor and can scroll down to '
  get-started5: Your First Sketch
  get-started6: >-
    . If you would like to work on the desktop version of p5.js you can
    scroll down to
  get-started7: downloading instructions
  get-started-button: 'Copy'
  settingUp-title: Setting up p5.js with an editor on your own computer
  download-title: Downloading a copy of the p5.js library
  hosted-title: Using a hosted version of the p5.js library
  download1: 'The easiest way to start is by using the empty example that comes with the '
  download2: p5.js complete
  download3: ' download.'
  download8: 'After download, you need to set up a local server. See instructions '
  download9: here
  download10: '. Run your local server within the downloaded folder and on your browser, go to '
  download11: 'http://localhost:{your-port-num}/empty-example'
  download4: >-
    If you look in index.html, you'll notice that it links to the file p5.js. If
    you would like to use the minified version (compressed for faster page
    loading), change the link to p5.min.js.
  download5: >-
    Alternatively, you can link to a p5.js file hosted online. All versions of
    p5.js are stored in a CDN (Content Delivery Network). You can find a history
    of these versions in the
  download6: '. In this case you can change the link to:'
  download7: 'A sample HTML page might look like this:'
  environment-title: Environment
  environment1: 'To run p5.js in your computer you will need a text editor. You can use the '
  environmentlink: 'http://en.wikipedia.org/wiki/Source_code_editor'
  environment2: ' code editor '
  environment3: 'of your choice. Instructions for getting set up with '
  environment4: ' are included below, other good editor options include '
  environment5: ' and '
  environment6: >-
    If you are a screen reader user and not using the p5 web editor, you may
    want to use
  environment7: ' or '
  environment8: >-
    Open Sublime. Go to the File menu and choose Open... and choose the folder
    that your html and js files are located in. On the left sidebar, you should
    find the folder name at the top, with a list of the files contained in the
    folder directly below.
  environment9: >-
    Click on your sketch.js file and it will open on the right where you can
    edit it.
  environment10: p5 starter code opened up in sublime editor.
  environment11: >-
    Open the index.html file in your browser by double clicking on it in your
    file manager or type:
  environment12: 'file:///the/file/path/to/your/html'
  environment14: ' (or '
  environment15: 'http://localhost:{your-port-num}/empty-example'
  environment16: ' if you are using a local server)'
  environment13: ' in the address bar to view your sketch.'
  your-first-sketch-title: Your First Sketch
  your-first-sketch-intro1: 'In the '
  your-first-sketch-intro2: 'https://editor.p5js.org/'
  your-first-sketch-intro3: p5.js web editor
  your-first-sketch-intro4: ' you should find the following code:'
  your-first-sketch1: 'After '
  your-first-sketch2: ' include this line of code: '
  your-first-sketch3: 'Now your code should be like this: '
  your-first-sketch4: >-
    The line you just added draws an ellipse, with its center 50 pixels over
    from the left and 50 pixels down from the top, with a width and height of 80
    pixels.
  your-first-sketch5: On the editor press play to display your code in action!
  your-first-sketch6: >-
    If you are using a screen reader, you must turn on the accessible outputs in
    the p5 online editor, outside the editor you must add the accessibility
    library in your html. To learn more visit&#32;
  your-first-sketch7: 'using p5 with a screen reader tutorial'
  your-first-sketch8: >-
    If you've typed everything correctly, this will appear in the display
    window:
  your-first-sketch9: canvas has a circle of width and height 50 at position 80 x and 80 y
  your-first-sketch10: >-
    If nothing appears, the editor may be having trouble understanding what
    you’ve typed. If this happens, make sure that you've copied the example code
    exactly: the numbers should be contained within parentheses and have commas
    between each of them, the line should end with a semicolon, and ellipse has
    to be spelled correctly.
  your-first-sketch11: >-
    One of the most difficult things about getting started with programming is
    that you have to be very specific about the syntax. The browser isn't always
    smart enough to know what you mean, and can be quite fussy about the
    placement of punctuation. You'll get used to it with a little practice. In
    the bottom left of the editor you will find the console section. Here, you
    can find messages from the editor with details about any errors it
    encounters.
  your-first-sketch12: >-
    Next, we'll skip ahead to a sketch that's a little more exciting. Modify the
    last example to try this:
  your-first-sketch13: >-
    This program creates a canvas that is 400 pixels wide and 400 pixels high,
    and then starts drawing white circles at the position of the mouse. When a
    mouse button is pressed, the circle color changes to black. Run the code,
    move the mouse, and click to experience it.
  your-first-sketch14: canvas has multiple circles drawn on it following the path of the mouse
  first-sketch-heading1: Code snippet with ellipse
  first-sketch-heading2: Note for screenreader users
  first-sketch-heading3: Code snippet with interaction
  what-next-title: What Next?
  learn1: 'Check out the '
  learn2: learn page
  learn3: ' and '
  learn4: examples page
  learn5: ' for more.'
  learn6: 'Watch '
  learn7: The Coding Train
  learn8: ' and '
  learn9: Kadenze
  learn10: ' video tutorials.'
  reference1: 'View the '
  reference2: ' reference'
  reference3: ' for full documentation.'
  learn11: 'If you wish to use p5 with a screenreader, check out the '
  learn12: p5 with a screenreader tutorial
  processing-transition1: 'If you have used Processing in the past, read the '
  processing-transition2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  processing-transition3: Processing transition tutorial
  processing-transition4: ' to learn how to convert from Processing to p5.js, and the main differences between them.'
  book1: >-
    Parts of this tutorial were adapted from the book, Getting Started with
    p5.js, by Lauren McCarthy, Casey Reas, and Ben Fry, O'Reilly / Make 2015.
    Copyright © 2015. All rights reserved. Last modified at the p5.js 2019
    Contributors Conference.
download:
  Download: Download
  download-intro: >-
    Welcome! While titled "Download" this page actually contains a collection of
    links to either download the library or begin working with it online. We've
    tried to order things to reflect what a beginner might want first, to
    resources that more experienced programmers may be looking for.
  editor-title: Editor
  p5.js-editor: p5.js Editor
  p5.js-editor-intro: >-
    This link redirects you to the p5.js Editor online so you can begin using
    p5.js immediately.
  editor-includes: 'Start coding using the p5.js Editor, no setup required!'
  complete-library-title: Complete Library
  complete-library-intro1: >-
    This is a download containing the p5.js library file, the p5.sound addon,
    and an example project. It does not contain an editor. Visit
  complete-library-intro2: Get Started
  complete-library-intro3: ' to learn how to setup a p5.js project.'
  p5.js-complete: p5.js complete
  includes-1: 'Includes:'
  includes-2: 'p5.js, p5.sound.js, and an example project'
  includes-3: 'Version '
  single-files-title: Single Files
  single-files-intro: >-
    These are downloads or links to the p5.js library file. No additional
    contents are included.
  single-file: 'Single file: '
  p5.js-uncompressed: Full uncompressed version
  compressed: Compressed version
  link: 'Link: '
  statically-hosted-file: Statically hosted file
  etc-title: Github Resources
  older-releases: Previous versions (older releases and changelog)
  github-repository: Code repository (GitHub)
  report-bugs: 'Report issues, bugs, and errors'
  supported-browsers: 'Supported browsers '
  support-title: Support p5.js!
  support-options: Support Options
  support-1:
    'We need your help! p5.js is free, open-source software. We want to make our community as open
    and inclusive as possible. You can support this work by making a donation to
    the '
  support-2: >-
    , the organization that supports p5.js.
    Your donation supports software development for p5.js, education resources
    like code examples and tutorials,
  support-3: Fellowships
  support-4: ', and '
  support-5: community events.
  support-17: >-
    p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in
    Pittsburgh (Image credit: Taeyoon Choi)
  support-18: >-
    Processing Fellow Saskia Freeke is organizing Code Liberation x Processing
    workshops in London (Image credit: Code Liberation Foundation)
  support-19: >-
    Learning to Teach, Teaching to Learn conference with SFPC (Image credit:
    Kira Simon-Kennedy)
  support-20: >-
    Processing Foundation Fellow Cassie Tarakajian's workshop at Code Art Miami
    (Image credit: Christian Arévalo Photography)
  support-21: >-
    Taeyoon Choi and ASL interpretor at Signing Coders p5.js workshop (Image
    credit: Taeyoon Choi)
  support-22: 'Google Summer of Code kickoff (Image credit: Taeyoon Choi)'
  support-23: >-
    Processing Foundation Fellow Cassie Tarakajian's workshop at Code Art Miami
    (Image credit: Christian Arévalo Photography)
  support-24: >-
    Luisa Pereira and Yeseul Song helping facilitate a sign language based p5.js
    workshop led by Taeyoon Choi (Image credit: Taeyoon Choi)
  support-25: >-
    p5.js Contributors Conference at CMU STUDIO for Creative Inquiry in
    Pittsburgh (Image credit: Taeyoon Choi)
  support-26: >-
    Processing Fellow Digital Citizens Lab hosts a panel on STEM teaching at the
    International Center of Photography (Image credit: International Center of
    Photography)
  support-27: >-
    Participants at p5.js workshop in Santiago, Chile, led by Aarón
    Montoya-Moraga (Image credit: Aarón Montoya-Moraga.)
  support-28: >-
    Claire Kearney-Volpe helping facilitate a sign language based p5.js workshop
    led by Taeyoon Choi (Image credit: Taeyoon Choi)
  support-29: >-
    Processing Foundation Fellow DIY Girls run a creative coding program in Los
    Angeles (Image credit: DIY Girls)
  support-30: Processing Fellow Digital Citizens Lab
  support-31: Bicoastal p5.js meetup at UCLA DMA and NYU ITP
  support-32: The Processing Foundation
  support-33: ' was founded in 2012 after more than a decade of work with the original Processing software. The Foundation’s mission is to promote software literacy within the visual arts, and visual literacy within technology-related fields — and to make these fields accessible to diverse communities. Our goal is to empower people of all interests and backgrounds to learn how to program and make creative work with code, especially those who might not otherwise have access to these tools and resources.'
  support-17-alt: ''
  support-18-alt: ''
  support-19-alt: ''
  support-20-alt: ''
  support-21-alt: ''
  support-22-alt: ''
  support-23-alt: ''
  support-24-alt: ''
  support-25-alt: ''
  support-26-alt: ''
  support-27-alt: ''
  support-28-alt: ''
  support-29-alt: ''
  support-30-alt: ''
  support-31-alt: ''
learn:
  learn-title: Learn
  teach-title2: Teach
  learn1: >-
    These tutorials provide more in-depth or step-by-step overviews of
    particular topics. Check out the
  learn2: examples page
  learn3: to explore short demonstrations of various p5.js topics.
  introduction-to-p5js-title: Introduction to p5.js
  hello-p5js-title: Hello p5.js
  hello-p5js: >-
    This short video will introduce you to the library and what you can do with
    it.
  getting-started-title: Getting Started
  getting-started: >-
    Welcome to p5.js! <br> This introduction covers the basics of setting up a
    p5.js project.
  p5js-overview-title: p5.js overview
  p5js-overview: An overview of the main features of p5.js.
  p5js-processing-title: p5.js and Processing
  p5js-processing: >-
    The main differences between the two, and how to convert from one to the
    other.
  p5-screen-reader-title: p5 with a screen reader
  p5-screen-reader: Setting up p5 so that it can be used easily with a screen reader.
  using-local-server-title: Using a local server
  accessible-labels-title: Writing accessible canvas descriptions
  accessible-labels: Using labels to make your code accessible to screen readers.
  accessible-labels-intro: Introduction
  accessible-labels-intro-1: >-
    In this tutorial, you'll learn how to use <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    , <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, 
    and <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>. These functions add labels to 
    your canvas so that it’s readable for screen readers and other assistive technologies.
  accessible-labels-what-is-labeling: What is labeling?
  accessible-labels-what-is-labeling-1: >-
    When you use the <a class = "code" href = "https://p5js.org/reference/#/p5/createCanvas">createCanvas()</a> function, you 
    create a canvas HTML element. This canvas element displays the image generated by your code as a bitmap (a raster graphic made up of pixels). 
    Unlike most HTML elements, the canvas doesn’t provide any description about its contents to screen readers. 
    That’s why we created the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions. 
    These functions add labels to your canvas that tell the screen reader how to describe it.
  accessible-labels-why-labeling-matters: Why labeling matters
  accessible-labels-why-labeling-matters-1: >-
    Screen readers (and text-to-speech software) are helpful for lots of people, <a href = "https://www.w3.org/WAI/perspective-videos/speech/" target="_blank" rel="noopener noreferrer">
    regardless of ability or context</a>. For example, a visually impaired person searching the web might use a screen reader to 
    understand the contents of a site. If a site’s code isn’t properly labeled for assistive technologies, 
    the screen reader software won’t be able to communicate what’s on the site to its user. Someone else 
    might be using a text-to-speech software because they have dyslexia and find listening to the site’s 
    content more comprehensible than reading it. There are also people who use these assistive software 
    to multi-task, so they can listen to an article on the web and wash dishes, or complete other chores. 
  accessible-labels-why-labeling-matters-2: >-
    No matter the purpose or person, making sure your code is readable by these assistive software allows 
    more people to engage with your work in meaningful ways.
  accessible-labels-available-labels: Available labeling functions
  accessible-labels-available-labels-1: p5.js offers four different functions for labeling your canvas
  accessible-labels-available-labels-li-1: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> provides a description of the canvas contents. 
    This function's parameters include: <span class = "code">text</span>, the label itself; and <span class = "code">display</span>, 
    an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-2: >- 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> describes a specific element or a 
    specific grouping of elements in a canvas. This function's parameters include: <span class = "code">name</span>, the title for the label; 
    <span class = "code">text</span>, the label itself; and <span class = "code">display</span>, an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-3: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generates a list describing the canvas size, color, 
    as well as each visual element’s color, position, and the area it covers within the canvas. This function’s only parameter is 
    <span class = "code">display</span>, an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-4: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, like <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, 
    generates a list of the canvas' qualities and elements. Along with this list, this function also creates an HTML table that plots the 
    spatial location of each shape within the canvas. This function's only parameter is <span class = "code">display</span>, an optional parameter 
    to set the visibility of the label.
  accessible-labels-prerequisites: Prerequisites
  accessible-labels-prerequisites-1: >-
    Your project's code should be near completion before you begin labeling. To write clear and effective 
    labels, you should have a clear understanding about what visuals your code creates within the canvas 
    element. 
  accessible-labels-prerequisites-2: >-
    For example, if you started writing your labels before you had a clear understanding of the resulting 
    visual of your canvas, your labels and your visuals may communicate different messages, like the code 
    example below:
  accessible-labels-steps-for-labeling: Steps for labeling your p5.js code
  accessible-labels-steps-for-labeling-step-1: 1. Plan your labeling strategy
  accessible-labels-steps-for-labeling-step-1-1: >-
    Your labeling strategy will change based on your project’s complexity and purpose.
  accessible-labels-steps-for-labeling-step-1-2: >-
    No matter how complicated your project may be, always provide a brief description of your canvas in 
    <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a> using the 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> function. If you do not provide any labels in your code, 
    screen readers will describe your canvas as a blank HTML element.
  accessible-labels-steps-for-labeling-step-1-3: >-
    Place this label in the <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a> section of your code, 
    and provide a 1-3 sentence description of your canvas in its <span class = "code">text</span> parameter. This description should only provide details about 
    the visual elements of your canvas. 
  accessible-labels-steps-for-labeling-step-1-4: >-
    As stated previously, you do not need to begin your description with “A p5 canvas element…” or anything similar, since the 
    screen reader will declare the element type before reading your label.
  accessible-labels-steps-for-labeling-step-1-5: >-
    Along with the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> label, use either the 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, 
    or <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> 
    function to add more detailed labels within your code.
  accessible-labels-steps-for-labeling-step-1-6: >-
    The <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions can 
    describe the shapes on your canvas, but they can’t interpret your intention in using the shapes. Keep context in mind when choosing 
    which function(s) to use. Is it better to describe the flower as “eight circles and a rectangle”, or as “a flower with red 
    petals and a green stem”? What kind of labeling will provide the best description of your canvas? If 
    you are creating larger visuals with many shapes, use <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> 
    to label each group of shapes.
  accessible-labels-steps-for-labeling-step-1-7: >-
    Do not use both the <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions to describe the same canvas. Using both will 
    cause similar descriptions to appear twice, which is confusing to screen readers. The same goes for 
    using <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> with 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> labels. It’s best to choose one function to 
    supplement your <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> label.
  accessible-labels-steps-for-labeling-step-1-complex: Complex projects
  accessible-labels-steps-for-labeling-step-1-complex-1: >-
    Use vanilla ARIA labeling and custom-built fallback labels instead of p5’s labeling functions if your canvas:
  accessible-labels-steps-for-labeling-step-1-complex-li-1: >-
    Has content that changes extensively via external interactive elements (elements outside the canvas)
  accessible-labels-steps-for-labeling-step-1-complex-li-2: >-
    Interacts with DOM elements written outside of the canvas code
  accessible-labels-steps-for-labeling-step-1-complex-li-3: >-
    Requires the user’s attention if the canva's visual content changes
  accessible-labels-steps-for-labeling-step-1-complex-li-4: >-
    Has complex element layouts that cannot be accurately labeled with the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, or 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions
  accessible-labels-steps-for-labeling-step-1-complex-2: >-
    For more information about fallback content, visit <a href = "https://www.w3.org/html/wg/wiki/DefinitionFallBackContent" target="_blank" rel="noopener noreferrer">W3C’s Wiki</a>. 
    For more information about complex ARIA labeling, visit <a href = "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes" target="_blank" rel="noopener noreferrer">Mozilla’s "ARIA states and properties"</a> 
    and <a href = "https://www.w3.org/TR/using-aria/" target="_blank" rel="noopener noreferrer">W3C’s "Using ARIA"</a>.
  accessible-labels-steps-for-labeling-step-2: 2. Write your main and supporting label(s)
  accessible-labels-steps-for-labeling-step-2-1: >-
    Begin labeling your canvas using the function(s) that best serve your users.
  accessible-labels-steps-for-labeling-step-2-2: >-
    While labeling, only provide descriptions of the visual aspects of your canvas. You don’t need to 
    describe how or what functions create the visuals present on the canvas, only how the end result 
    visuals appear within the canvas.
  accessible-labels-steps-for-labeling-step-2-using-de: Using <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
  accessible-labels-steps-for-labeling-step-2-using-de-1: >-
    When using the <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> function to label your code, provide a unique title and a description 
    no more than 1-2 sentences long. Only label the parts of your code that depict the most important visual 
    aspects of your canvas.
  accessible-labels-steps-for-labeling-step-2-using-de-2: >-
    Within each <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> label, discuss the important qualities of that element. Is the element 
    animated? Is the element interactive? What meaning does the element provide to the project?
  accessible-labels-steps-for-labeling-step-2-using-de-3: >-
    If your canvas contains any <a class = "code" href = "https://p5js.org/reference/#/p5/text">text()</a> elements that are important to the general understanding of the 
    image, make a separate label for them. Label any legible text with quotation marks around it in the 
    label, as in <span class = "code">describeElement("Text", "The words 'hello, world' displayed in green at the center of a 
    black canvas.")</span>.
  accessible-labels-steps-for-labeling-step-2-using-de-4: >-
    You don’t need to start each label with “A p5 canvas…” or something similar. The screen reader will 
    call out the element type before reading your labels:
  accessible-labels-steps-for-labeling-step-2-using-de-5: >-
    Limit the number of <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> functions present within your code as much as possible. If you 
    have to use more than 10 <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> functions to describe your canvas, consider using a labeling 
    strategy that affords more complexity (such as vanilla ARIA labeling).
  accessible-labels-steps-for-labeling-step-2-using-go-to: Using <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> or <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>
  accessible-labels-steps-for-labeling-step-2-using-go-to-1: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    generate their information based on the code of the visual element, such as its size, color, and shape. 
    Unlike <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, you only need to use one label to describe all 
    your canvas's visual elements.
  accessible-labels-steps-for-labeling-step-2-animated: Projects with animated or interactive elements
  accessible-labels-steps-for-labeling-step-2-animated-1: >-
    Individual interactive elements, such as HTML buttons, dropdowns, or inputs, don’t need labels. These 
    elements are built outside of the p5.js canvas and are interpreted by screen readers. However, this 
    means the <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions won’t provide any information about these interactive 
    inputs.
  accessible-labels-steps-for-labeling-step-2-animated-2: >-
    If a canvas element is animated and/or interactive, represent its current state or qualities in the label. 
    So long as you place the functions within the <a class = "code" href = "https://p5js.org/reference/#/p5/draw">draw()</a> function, 
    they will automatically update with the shape’s new information (except for <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    and <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, 
    which will update even when listed in <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a>). If you are using 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, use template strings to update the element’s description:
  accessible-labels-steps-for-labeling-step-2-do-donts: Labeling do’s and don’ts
  accessible-labels-steps-for-labeling-step-2-do-donts-1: >-
    <i>Don’t</i> use screen reader labels as a way of commenting your code. Labels should only summarize the 
    resulting visual elements within a canvas. If you overuse screen reader labels, you may end up 
    complicating the screen reader’s interpretation of the canvas rather than helping it.
  accessible-labels-steps-for-labeling-step-2-do-donts-2: >-
    <i>Do</i> make your label descriptions short and accurate. Use full sentences for your labels, and write 
    in the present tense when describing elements.
  accessible-labels-steps-for-labeling-step-3: 3. Test your labels
  accessible-labels-steps-for-labeling-step-3-1: >-
    Be sure to test your labels before publishing your sketch. Labels are only available to screen readers 
    by default.To see the output during development, pass <span class = "code">LABEL</span> as the last argument to the function.
  accessible-labels-steps-for-labeling-step-3-2: >-
    When testing your labels, consider the following questions:
  accessible-labels-steps-for-labeling-step-3-2-li-1: >-
    Do your canvas labels provide enough information for someone to understand the sketch’s purpose? 
  accessible-labels-steps-for-labeling-step-3-2-li-2: >-
    If this canvas exists on a web page among other content, would someone have a good understanding of how the canvas relates to its 
    surrounding context?
  accessible-labels-steps-for-labeling-step-3-3: >-
    Be sure to remove the <span class = "code">LABEL</span> argument once you’ve tested the output. With <span class = "code">LABEL</span> 
    active, screen readers are forced to read the fallback text and the visible label text when focused on the canvas. This is 
    confusing for them.
  accessible-labels-steps-for-labeling-step-3-4: >-
    You may also download a screen reader and use it to test your code. For more information about using 
    screen readers, visit <a href = "https://www.w3schools.com/accessibility/accessibility_screen_readers.php" target="_blank" rel="noopener noreferrer">W3 School’s "Accessibility Screen Readers"</a>.
  accessible-labels-conclusion: Conclusion
  accessible-labels-conclusion-1: >-
    Once you've tested your labels, your canvas should be accessible to screen reader technology!
  accessible-labels-conclusion-2: >-
    If you would like more information about ARIA labeling, visit <a href = "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA" target="_blank" rel="noopener noreferrer">MDN’s ARIA</a>.
  accessible-labels-conclusion-3: >-
    <i>Notice any errors or typos? Please let us know. If you would like to contribute to this tutorial, 
    feel free to issue a <a href = "https://github.com/processing/p5.js-website" target="_blank" rel="noopener noreferrer">pull request</a>!</i>
  using-local-server: 'How to set up a local server on Mac OSX, Windows, or Linux.'
  p5js-wiki-title: p5.js wiki
  p5js-wiki: Additonal documentation and tutorials contributed by the community
  connecting-p5js-title: Connecting p5.js
  creating-libraries-title: Creating libraries
  creating-libraries: Creating p5.js addon libraries.
  nodejs-and-socketio-title: node.js and socket.io
  nodejs-and-socketio: 'Using a node.js server with p5.js, communication via socket.io.'
  programming-topics-title: Programming topics
  beyond-the-canvas-title: Beyond the canvas
  beyond-the-canvas: Creating and manipulating elements on the page beyond the canvas.
  getting-started-in-webgl-other-tutorials-title: Other Tutorials
  getting-started-in-webgl-other-tutorials-p: >-
    This tutorial is part of a series about the basics of using WebGL in p5.js. Check out each of these other tutorials below.
  getting-started-in-webgl-other-tutorials-tut1: Coordinates and Transformations
  getting-started-in-webgl-other-tutorials-tut2: Creating Custom Geometry in WebGL
  getting-started-in-webgl-other-tutorials-tut3: Styling and Appearance
  getting-started-in-webgl-other-tutorials-tut4: Introduction to Shaders
  getting-started-in-webgl-other-tutorials-you-are-here: (you are here)
  getting-started-in-webgl-title: Getting Started in WebGL
  getting-started-in-webgl-glossary-title: Glossary
  getting-started-in-webgl-coords-and-transform-title: Coordinates and Transformations
  getting-started-in-webgl-coords-and-transform: Basics of 3D setup, coordinates, and transformations
  getting-started-in-webgl-coords-and-transform-p1x1: >- 
    p5.js is a powerful tool for creating 2D graphics but it's also capable of 3D graphics.
    This tutorial will introduce new concepts for creating 3D sketches with p5.js.
  getting-started-in-webgl-coords-and-transform-toc-title: Table of Contents 
  getting-started-in-webgl-coords-and-transform-heading1: What is WebGL?
  getting-started-in-webgl-coords-and-transform-p2x1: >- 
    WebGL is a library that gives us the tools we need to create 3D graphics within a web browser. To put it simply,
    it allows us to do all kinds of math to help arrange and display objects in 3D. p5.js makes it easier to work with WebGL
    through its special WebGL mode.
  getting-started-in-webgl-coords-and-transform-p3x1: >- 
      Working in 3D introduces a lot of complexity, especially when a sketch involves motion, texture, lighting, and
      more. Luckily for us, computers have special hardware that is particularly
      well suited to performing those calculations, the graphics processing unit (GPU). The GPU is capable of
      processing many things simultaneously, which is especially important when we're dealing with pixels and many shapes in space.
  getting-started-in-webgl-coords-and-transform-p4x1: >- 
    Let's get started by setting up the p5.js to use WebGL, by passing WEBGL as a third parameter into <a class="code">createCanvas()</a>.
  getting-started-in-webgl-coords-and-transform-heading2: >-
    3D Coordinate Space: Positioning in 3D
  getting-started-in-webgl-coords-and-transform-info1x1: >-
    If coordinates systems aren't making sense it might be helpful to revisit the tutorial titled 
  getting-started-in-webgl-coords-and-transform-info1x2: >-
    Coordinate System and Shapes
  getting-started-in-webgl-coords-and-transform-p5x1: >- 
    One of the most fundamental differences between working in 2D and working in 3D is the most obvious: there is
    one more dimension to work with. In addition to the horizontal and vertical position (x and y axes) of an
    element in our drawing, 3D adds depth, the z-axis. 
  getting-started-in-webgl-coords-and-transform-p6x1: >- 
    When drawing in 2D, the point (0,0) is located at the top left corner of the screen. In WebGL mode, the
    origin of the sketch (0,0,0) is located in the middle of the screen. By default, the x-axis goes left-to-right,
    y-axis goes up-to-down, and the z-axis goes from further-to-closer.
  getting-started-in-webgl-coords-and-transform-heading3: >-
    Transformations: Position and Size of 3D Shapes
  getting-started-in-webgl-coords-and-transform-p7x1: >-
    p5.js has a few methods, 
  getting-started-in-webgl-coords-and-transform-p7x2: >-  
    and 
  getting-started-in-webgl-coords-and-transform-p7x3: >-  
    that we can use to position and orient objects
    within space. Each of these methods affect what is known as the <em>model matrix</em>. Collectively these are
    known as the <em>transformation</em> of an object. These methods are available for both 2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-subheading1: >-
    translate(): Moving Objects in Space
  getting-started-in-webgl-coords-and-transform-p8x1: >-
    moves the origin in a
    given direction. Anything drawn after we call <a class="code">translate()</a> will be
    positioned relative to that point. <a class="code">translate()</a> accepts arguments for x, y, and z
    values. Use the sliders in the sketch above to change the translation of the box and see how it moves along
    each axis. The code below demonstrates simple translation on a <a class="code">box()</a> shape.
  getting-started-in-webgl-coords-and-transform-subheading2: >-
    rotate(): Orienting Objects in Space
  getting-started-in-webgl-coords-and-transform-p9x1: >-
    reorients whatever is
    drawn after it.
  getting-started-in-webgl-coords-and-transform-p10x1: >-
    There are a few methods that can be used to rotate an object in 3D. Most of the time it's easiest to call
    methods like 
  getting-started-in-webgl-coords-and-transform-p10x2: >-
    and 
  getting-started-in-webgl-coords-and-transform-p10x3: >-   
    , which each allow for rotation around a specific axis.
    Each of these methods accept a single argument specifying the angle of rotation. Try moving the sliders in the
    example above to see how rotation is performed on each axis. The code below shows each of these methods
    in use.
  getting-started-in-webgl-coords-and-transform-p11x1: >-
    By default p5.js will expect angles to be in radians. Radians use numbers from 0 - <a class="code">TWO_PI</a> to specify an
    angle. To use degrees, either convert degrees to radians using <a class="code">radians()</a>, or use
    <a class="code">angleMode(DEGREES)</a>.
  getting-started-in-webgl-coords-and-transform-info2x1: >-
    You can also use 
  getting-started-in-webgl-coords-and-transform-info2x2: >- 
    , which allows
    you to specify which axis you'd like to rotate around using a vector as the second argument.
  getting-started-in-webgl-coords-and-transform-subheading3: >-
    scale(): Size in Space
  getting-started-in-webgl-coords-and-transform-p12x1: >-
    changes the size of whatever is
    drawn after it. Like the other methods described so far, it accepts arguments for x, y, and z values.
  getting-started-in-webgl-coords-and-transform-heading4: >-
    The Order of Transformations Matters!
  getting-started-in-webgl-coords-and-transform-p13x1: >-
    Something that can feel unpredictable at first is the order of transformations. Each transformation always affects
    the next one. For example, if <a class="code">rotate()</a> is called, followed by <a class="code">translate()</a>, the direction of that translation will
    be affected by the rotation. The entire coordinate system is rotating and moving, not just the shape itself. 
  getting-started-in-webgl-coords-and-transform-p14x1: >-
    Transformations can be performed in any order, but using <strong>translate</strong>, <strong>rotate</strong>, and then <strong>scale</strong> will be the most intuitive.
    Translation, followed by rotation, produces the effect of moving the shape <em>and then</em> rotating around that new location.
  getting-started-in-webgl-coords-and-transform-p15x1: >-
    In the below example, try changing the order of <a class="code">translate()</a> and <a
    class="code">rotateY()</a> and see how it affects where the object is
    drawn.
  getting-started-in-webgl-coords-and-transform-p16x1: >-
    p5.js also has some methods that can control when transformations are applied: 
  getting-started-in-webgl-coords-and-transform-p16x2: >-
    and
  getting-started-in-webgl-coords-and-transform-p16x3: >-
    . <a class="code">push()</a> and <a
    class="code">pop()</a> make it easier to move objects
    individually. The <a class="code">push()</a> method saves the current transformations and 
    style settings. Then, after performing new transformations, the <a class="code">pop()</a> method is used to restore us to the the original transformations. The result is that 
    whatever transformations or styling changes that are made between <a class="code">push()
    </a> and <a class="code">pop()</a> are isolated to that portion of the code. If you don’t 
    use <a class="code">push()</a> and
    <a class="code">pop()</a>, you have to keep track of whatever transformations have already taken place, which
    can get complicated
    and difficult to follow. Consider this following example, which places two boxes in our sketch. To position the second box
    without <a class="code">push()</a> and <a class="code">pop()</a>, you have to account for the first transformation. This 
    can be a lot to keep track of in a more complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p17x1: >-
    Now, let's try the same code with <a class="code">push()</a> and <a class="code">pop()</a>. Now we can just
    translate the object where we want it, without
    having to remember where our coordinate system lies.
  getting-started-in-webgl-coords-and-transform-info3x1: >-
    <p>While this is a more advanced topic, each of these transformations affect what is called the model matrix.
    The
    transformation matrix is combined with the view matrix and the projection matrix, both of which help simulate
    the view of a camera, and this combination results in our 3D scene! </p>
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
    Learn more about Model View Projection
    </a>
  getting-started-in-webgl-coords-and-transform-p18x1: >-
    In the below example, try removing <a class="code">push()</a> and <a class="code">pop()</a> to see how the
    transformations affect the second object
    that is drawn. 
  getting-started-in-webgl-coords-and-transform-heading5: >-
    Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-p19x1: >- 
    So far we have only been using <a class="code">box()</a> but p5.js has seven different predefined geometries
    that you can use in your sketch. These basic predefined geometries are often referred to as 'primitives'.
  getting-started-in-webgl-coords-and-transform-p20x1: >- 
    These primitive shape methods are:     
  getting-started-in-webgl-coords-and-transform-p20x2: >-
    and
  getting-started-in-webgl-coords-and-transform-p21x1: >- 
    It is also possible to create custom geometry, either from scratch or from 3D models created in another
    program.
    More information about custom geometry can be found in the 
  getting-started-in-webgl-coords-and-transform-p21x2: >-   
    Custom Geometry tutorial    
  getting-started-in-webgl-coords-and-transform-heading6: >-
    Conclusion
  getting-started-in-webgl-coords-and-transform-p22x1: >-
    By having basic control over a 3D coordinate space, transformations, 
    and basic shapes, you should be able to begin creating basic scenes
    in 3D. The tutorials that follow this in the Getting Started in WebGL series
    will introduce custom geometries, allow you to tweak the appearance of 
    the scene, and introduce you to some basic shader programming to push
    your sketches further.
  getting-started-in-webgl-coords-and-transform-glossary-term1-title: GPU
  getting-started-in-webgl-coords-and-transform-glossary-term1-definition: >-
    The GPU (Graphics Processing Unit) is a piece of hardware that is particularly well
    suited for performing many calculations in parallel, making it powerful for 3D graphics.
  getting-started-in-webgl-coords-and-transform-glossary-term2-title: Model
  getting-started-in-webgl-coords-and-transform-glossary-term2-definition: A custom 3D geometry that can be saved and loaded from a file.
  getting-started-in-webgl-coords-and-transform-glossary-term3-title: Matrix
  getting-started-in-webgl-coords-and-transform-glossary-term3-definition: A special array that can hold information about the transformation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term4-title: Camera
  getting-started-in-webgl-coords-and-transform-glossary-term4-definition: The viewpoint of a 3D scene.
  getting-started-in-webgl-coords-and-transform-glossary-term5-title: Transform
  getting-started-in-webgl-coords-and-transform-glossary-term5-definition: Also referred to as <em>transformation</em>, this refers to the combined scale, rotation, and translation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term6-title: Vertex
  getting-started-in-webgl-coords-and-transform-glossary-term6-definition: A point in 3D space, with an x, y, z position.
  getting-started-in-webgl-coords-and-transform-glossary-term7-title: Face
  getting-started-in-webgl-coords-and-transform-glossary-term7-definition: A collection of three points that create a solid surface.
  getting-started-in-webgl-custom-geometry-title: Creating Custom Geometry in WebGL
  getting-started-in-webgl-custom-geometry: Creating custom geometry in WebGL
  getting-started-in-webgl-custom-geometry-p1x1: >-
    p5.js has a number of basic shapes, like <a class="code">box()</a> or <a class="code">sphere()</a>, but p5.js
    is also capable of rendering complex custom geometry, both from 3D model files or from code. This tutorial will walk through how to import 3D models into p5.js, as well as how
    to create geometry from scratch.
  getting-started-in-webgl-custom-geometry-info1x1: 'If you are new to 3D check out the '
  getting-started-in-webgl-custom-geometry-info1x2: ' tutorial.'
  getting-started-in-webgl-custom-geometry-toc-title: Table of Contents
  getting-started-in-webgl-custom-geometry-heading1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-p2x1: >-
    Custom geometry can be imported into p5.js using either OBJ or STL files. These files are usually generated in
    a 3D modeling tool like Blender, which offers much more control when constructing a 3D scene. This is done using
    the 
  getting-started-in-webgl-custom-geometry-p2x2: >-  
    method, which should be used within <a class="code">preload()</a>. Then you can use the 
  getting-started-in-webgl-custom-geometry-p2x3: >-     
    function to draw the model, as demonstrated in the example below.
  getting-started-in-webgl-custom-geometry-p3x1: >-
    A common issue that can come up with custom models is scaling. Depending on how the model is constructed, it
    might be a much different size when drawn in p5.js, or even be too small to be drawn at all. The
    <a class="code">loadModel()</a> method includes a normalize parameter that will resize the model to something that works better in
    p5.js.
  getting-started-in-webgl-custom-geometry-info2x1: >-
    Note that there is currently no support for STL files with color, although you
    can add color using materials or textures, which you can learn about in the 
  getting-started-in-webgl-custom-geometry-info2x2: >-  
    Styling and Appearance    
  getting-started-in-webgl-custom-geometry-info2x3: >-  
    tutorial.
  getting-started-in-webgl-custom-geometry-heading2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-p4x1: >-
    Geometry can also be defined procedurally using code. This is a great way to create geometry that moves or is
    formed using your own set of rules. There are a number of methods that can be used to create 3D geometry in a
    way that is similar to 2D drawing in p5.js. For example, methods like <a class="code">quad()</a>, <a class="code">triangle()</a>, <a class="code">rect()</a>, and <a class="code">circle()</a> each have extra parameters that make it possible to use them in 3D.
  getting-started-in-webgl-custom-geometry-p5x1: >-
    There are other methods that offer greater control of the geometry. A shape can be defined point-by-point using
  getting-started-in-webgl-custom-geometry-p5x2: >-
    and 
  getting-started-in-webgl-custom-geometry-p5x3: >-
    This following example shows how
    these methods can be used to construct a 3D shape mathematically.
  getting-started-in-webgl-custom-geometry-p6x1: >-
    There is also a powerful class, 
  getting-started-in-webgl-custom-geometry-p6x1_: >-  
    , which p5.js uses internally for <a class="code">loadModel()</a> but can also be used to
    define custom geometry, offering tools that can be helpful in calculating faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x2: >-
    In 3D, a face refers to a collection of three or four points that make up a surface, giving our
    geometry the appearance of being solid. A normal is the direction that is perpendicular to the face, which helps p5.js calculate lighting across the surface.
  getting-started-in-webgl-custom-geometry-p6x3: >-
    In the following example, <a class="code">p5.Geometry</a> is used to plot a grid of points for the geometry. Then, <a class="code">computeFaces()</a> is used to give the geometry
    a solid appearance and <a class="code">computeNormals()</a> allows our geometry to have proper lighting.
  getting-started-in-webgl-custom-geometry-heading3: Conclusion
  getting-started-in-webgl-custom-geometry-p7x1: >-
    Now you should be able to create custom geometry, making it possible to create
    unique shapes, both from other tools and from code. Spend some time working
    with a variety of 3D modeling tools so you can find the one that works best for you.
  getting-started-in-webgl-custom-geometry-glossary-term1-title: Procedural
  getting-started-in-webgl-custom-geometry-glossary-term1-definition: Meaning that something is defined mathematically, instead of from stored data, like a file.
  getting-started-in-webgl-custom-geometry-glossary-term2-title: Model
  getting-started-in-webgl-custom-geometry-glossary-term2-definition: A representation of geometry.
  getting-started-in-webgl-custom-geometry-glossary-term3-title: STL
  getting-started-in-webgl-custom-geometry-glossary-term3-definition: >-
    STL (most often standing for "standard tesselation language") is a file format for 3D models. 
    It only stores information about the geometry.
  getting-started-in-webgl-custom-geometry-glossary-term4-title: OBJ
  getting-started-in-webgl-custom-geometry-glossary-term4-definition: >- 
    OBJ is an open file format that stores geometry data as well as some material and texture data. In p5.js, we
    are limited to its geometry, although an image can still be mapped to the surface using textures.
  getting-started-in-webgl-custom-geometry-glossary-term5-title: Faces
  getting-started-in-webgl-custom-geometry-glossary-term5-definition: The solid surface that is generated between three points.
  getting-started-in-webgl-custom-geometry-glossary-term6-title: Normals
  getting-started-in-webgl-custom-geometry-glossary-term6-definition: The direction that is perpendicular to a face, which is often needed when calculating lighting or using materials. 
  getting-started-in-webgl-custom-geometry-glossary-term7-title: Normalization
  getting-started-in-webgl-custom-geometry-glossary-term7-definition: Changing something so that it fits within a standard range.
  getting-started-in-webgl-appearance-title: Styling and Appearance
  getting-started-in-webgl-appearance: The basics of materials and lighting in WebGL
  getting-started-in-webgl-appearance-p0x1: >-
    Creating in 3D is about more than just geometry. Cameras, lights, and materials are an
    important part of creating a visually interesting 3D scene. p5.js has a number of tools
    that make it possible to transform the appearance of our geometry.
  getting-started-in-webgl-appearance-toc-title: Table of Contents 
  getting-started-in-webgl-appearance-heading1: Camera and View
  getting-started-in-webgl-appearance-p1x1: >-
    The camera is an essential piece of a 3D scene; it gives us the sense of space and dimension that we are
    often looking for in 3D. In p5.js, the WebGL mode provides us with a perspective camera by default, but we can
    change this using 
  getting-started-in-webgl-appearance-p1x2: >-  
    or 
  getting-started-in-webgl-appearance-p2x1: >-
    A <em>perspective camera</em> skews objects so they appear to get smaller as they get further away, vanishing
    at a single point in the distance. This is in contrast to an <em>orthographic camera</em>, where the 
    geometry stays the same size as it gets further away and has no vanishing point. 
  getting-started-in-webgl-appearance-p3x1: >-
    One setting that we can change with a perspective camera is the <em>field-of-view</em>, or FOV. This is the 
    term that is used to describe how much our camera can see, measured as an angle. In simple examples it might appear
    to have a zoom-like effect, but it also affects the way that shapes change size in the distance.
  getting-started-in-webgl-appearance-p4x1: >-
    Another important term when working with cameras in 3D is the camera <em>frustum</em>. The frustum of the camera is the
    shape of the camera's view, a pyramid-like shape within which geometry can be displayed. The frustum includes a <em>near and far plane</em>.
    The near plane defines the minimum distance that geometry must be from the camera to be rendered. The far plane defines the maximum
    distance that the geometry can be from the camera. Each of these can be changed to affect how close and how far the camera can see. This process
    of selectively including geometry is sometimes referred to as 'clipping'.
  getting-started-in-webgl-appearance-p5x1: >-
    Cameras can be moved by passing arguments to <a class="code">camera()</a>, but constantly moving and adjusting the camera in code can be tedious, especially when you are experimenting with
    ideas. p5.js has a special camera method, 
  getting-started-in-webgl-appearance-p5x2: >-  
    , that can be used to zoom, pan,
    and position the camera using the mouse.
  getting-started-in-webgl-appearance-p6x1: >-
    A scene can have multiple cameras, but only one camera can be active at a time. Sketches in p5.js will default
    to having a single perspective camera, but that can be changed by calling either <a
      class="code">perspective()</a>
    (with new parameters) or <a class="code">ortho()</a>. <a class="code">camera()</a> can be used to change the
    position of the active camera and the position that the camera is looking at. Try it out in the sketch below.
  getting-started-in-webgl-appearance-heading2: Lighting
  getting-started-in-webgl-appearance-p7x1: >-
    Lighting is another essential part of a 3D scene. To be able to convey shape and depth in 3D is necessary to
    have a light source. p5.js has a few different types of light that can be used in a sketch.
  getting-started-in-webgl-appearance-lighting-list1: >-
    Ambient light makes everything display a little brighter, with no consideration for light position or
    direction.
  getting-started-in-webgl-appearance-lighting-list2: >-
    A directional light shines from one direction, which can be especially useful for communicating depth in
    a scene, or when a scene needs a 'sun' light. This method accepts a color and direction.
  getting-started-in-webgl-appearance-lighting-list3: >-
    A point light emits from a single point in all directions, similar to something like a lightbulb. This
    method accepts a color and a position for the light.
  getting-started-in-webgl-appearance-lighting-list4: >-
    A spot light emits from a single point in a single direction. This light is cast in a conical shape and
    it's radius and concentration can be adjusted.
  getting-started-in-webgl-appearance-lighting-list5: >-
    noLights() makes it so that all subsequent geometry is rendered without any lighting. This can be useful
    when you want flat, unshaded geometry.
  getting-started-in-webgl-appearance-p8x1: >-
    These lights should be used within <a class="code">draw()</a>. Up to 5 lights can be used in a scene
    simultaneously, allowing you to compose a scene with varied and complex lighting sources. 
    Try checking and unchecking the boxes in the following interactive example to see how lighting can
    be blended together. For each active light source there are visual indicators of their position or
    direction, just know that these are here for illustrative purposes!
  getting-started-in-webgl-appearance-p9x1: >-
    In this next example, try commenting and uncommenting each light and experiment with their parameters.
  getting-started-in-webgl-appearance-heading3: Materials and Textures
  getting-started-in-webgl-appearance-p10x1: >-
    Objects can appear differently based on their material. Materials dictate how
    light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be
    varied, making objects shiny, rough, or even textured with images.
  getting-started-in-webgl-appearance-p11x1: >-
    In this interactive example, try selecting each of the different materials to see how they
    affect the appearance of the geometry. You can move your mouse and see the effect that a directional light has on the material. 
  getting-started-in-webgl-appearance-p12x1: >-
    Try commenting and uncommenting the different lights in this example:
  getting-started-in-webgl-appearance-p13x1: >-
    More custom materials can be achieved through using <a class="code">texture()</a>. In short, these are images
    that can be mapped onto the surface of a geometry. These textures can be imported from an image and can even be
    generated within code using shaders. To map a texture to your geometry, use <a class="code">loadImage()</a> 
    within <a class="code">preload()</a>, then call <a class="code">texture()</a> before drawing your shape.
  getting-started-in-webgl-appearance-info1x1: >-
    While they are useful for changing the appearance of your geometry, shaders are a bit beyond the scope of this 
    tutorial, so make sure to check out the 
  getting-started-in-webgl-appearance-info1x2: >-  
    Introduction to Shaders
  getting-started-in-webgl-appearance-info1x3: >-    
    page when you are ready. 
  getting-started-in-webgl-appearance-heading4: Conclusion
  getting-started-in-webgl-appearance-p14x1: >-
    Being able to have control over the camera, lighting, and materials will give you much more flexibility
    to decide how your sketch looks, and it will open up the possibilities for you to introduce your own
    style to your 3D sketches. The following tutorial in the Getting Started in WebGL series will introduce you
    to shaders, which will make it possible to change the appearance of your sketch in even more interesting ways.
  getting-started-in-webgl-appearance-glossary-term1-title: Camera
  getting-started-in-webgl-appearance-glossary-term1-definition: The viewpoint of a 3D scene
  getting-started-in-webgl-appearance-glossary-term2-title: Perspective
  getting-started-in-webgl-appearance-glossary-term2-definition: A camera projection that gives the appearance of depth, achieved by making objects in the distance appear smaller.
  getting-started-in-webgl-appearance-glossary-term3-title: Orthographic
  getting-started-in-webgl-appearance-glossary-term3-definition: >-
    A camera projection that is <em>orthogonal</em> and unaffected by depth. It gives the appearance of being
    two-dimensional.
  getting-started-in-webgl-appearance-glossary-term4-title: Field-of-View
  getting-started-in-webgl-appearance-glossary-term4-definition: The angle representing how much can be seen by the camera.
  getting-started-in-webgl-appearance-glossary-term5-title: Frustum
  getting-started-in-webgl-appearance-glossary-term5-definition: The geometric shape representing the full area that can be viewed by the camera.
  getting-started-in-webgl-appearance-glossary-term6-title: Near and Far Plane
  getting-started-in-webgl-appearance-glossary-term6-definition: >-
    The near plane represents the minimum distance a geometry must be from the camera to be displayed, while
    the far plane represents the maximum distance.
  getting-started-in-webgl-appearance-glossary-term7-title: Clipping
  getting-started-in-webgl-appearance-glossary-term7-definition: Selectively showing some geometry and not others, such as when geometry falls outside of the camera frustum.
  getting-started-in-webgl-shaders-title: Introduction to Shaders
  getting-started-in-webgl-shaders: The basics of creating shaders within p5js using WebGL
  getting-started-in-webgl-shaders-p0x1: >-
    Shaders are special programs that run on the graphics processing unit, or GPU, that can do some incredible
    things. They take advantage of the
    GPU to process many pixels at once, making them fast and particularly well suited for certain tasks, like
    generating noise, applying filters like blur, or shading polygons. Shader programming can feel daunting at
    first, requiring a different approach than the 2D drawing of p5.js. This document will outline the basics 
    of shader programming and point you towards other resources.
  getting-started-in-webgl-shaders-toc-title: Table of Contents 
  getting-started-in-webgl-shaders-heading1: Setup
  getting-started-in-webgl-shaders-p1x1: >-
    p5.js is a great tool for working with shaders because it handles a lot of the WebGL setup so you can focus on
    the shader code itself. Before we can get started with shaders we have to set up our canvas so that it uses
    p5.js WebGL model.
  getting-started-in-webgl-shaders-p2x1: >-
    A shader program consists of two parts, a <strong>vertex shader</strong> and a <strong>fragment
      shader</strong>. The vertex shader affects where the 3D geometry is drawn on the screen and the fragment
    shader is responsible for affecting the color output. Each of these live in separate files and are loaded into
    p5.js using <a class="code">loadShader()</a>. Once a shader is loaded it can be used within <a
      class="code">draw()</a>. The following example will show
    how to set up a basic shader within p5.js:
  getting-started-in-webgl-shaders-heading2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-p3x1: >-
    So now you might be wondering what we actually write in these shader files! Shader files are written in
    Graphics Library Shading Language, or GLSL, and have a very different syntax and structure than we are familiar
    with. GLSL has a
    syntax that resembles C, which means it comes with a handful of concepts that aren't present in JavaScript.
  getting-started-in-webgl-shaders-p4x1: >-
    For one, the shading language is much more strict about types. Each variable you create has to be labeled with
    the kind of data it is storing. Here is a list of some of the common types:
  getting-started-in-webgl-shaders-typelist: |
    vec2(x,y)     // a vector of two floats
    vec3(r,g,b)   // a vector of three floats
    vec4(r,g,b,a) // a vector of four floats
    float         // a number with decimal points
    int           // a whole number without decimal points
    sampler2D     // a reference to a texture
  getting-started-in-webgl-shaders-p5x1: >-
    In general the shading language is much more strict than JavaScript. A missing semicolon for example is not
    allowed and will result in an error message. You can't use different types of numbers, like floats or integers
    interchangeably.
  getting-started-in-webgl-shaders-p6x1: >-
    First let's look at a basic vertex shader:
  getting-started-in-webgl-shaders-p7x1: >-
    This vertex shader begins with an <em>attribute</em>, which p5.js uses to share vertex position information
    with the shader. This
    attribute is a <a class="code">vec3</a>, meaning it contains a value for x, y, and z. Attributes are special
    variable types that are
    only used in the vertex shader and are typically provided by p5.js. When you use p5.js methods like <a class="code">rect()</a> or 
    <a class="code">vertex()</a>, p5.js passes the vertex information to the shader automatically.
  getting-started-in-webgl-shaders-p8x1: >-
    All vertex shaders require a function, <a class="code">main()</a>, within which we position our vertices. In
    this example, the
    vertex shader repositions our vertices so that the shader output takes up the full sketch. At the end of <a
      class="code">main()</a>,
    we have to assign a value to <a class="code">gl_Position</a>.
  getting-started-in-webgl-shaders-p9x1: >-
    Don't worry if this doesn't make a ton of sense yet. The vertex shader plays an important role but it is often
    just responsible for making sure what we create in our fragment shader displays properly on the geometry. You'll
    probably find yourself reusing the same vertex shaders in many of your projects.
    The fragment shader on the other hand is responsible for the color output of our shader and is where we will do
    a lot of our shader programming. Here is a very simple fragment shader that will just display the color red:
  getting-started-in-webgl-shaders-p10x1: >-
    The fragment shader begins with a line specifying the float 'precision'.
    This value can either be <a class="code">lowp</a>, <a class="code">mediump</a>, or <a class="code">highp</a>, although you will likely
    use <a class="code">mediump</a>, or <a class="code">highp</a> in certain situations.
  getting-started-in-webgl-shaders-p11x1: >-
    And similar to the vertex shader, our fragment shader also requires a <a class="code">main()</a> function, but instead of
    setting <a class="code">gl_Position</a>, we will assign a color to <a class="code">gl_FragColor</a>.
  getting-started-in-webgl-shaders-p12x1: >-
    The variable, <a class="code">myColor</a>, is defined as a <a class="code">vec4</a>, meaning it stores 4 values. Since we are dealing with color,
    those four values are red, green, blue, and alpha. Shaders don't use 0 - 255 for colors like our sketches do, instead they use
    values between 0.0 and 1.0.
  getting-started-in-webgl-shaders-p13x1: >-
    Now that we have a vertex shader and a fragment shader, these can be saved to separate files (shader.vert and
    shader.frag respectively), and loaded into our sketch using <a class="code">loadShader()</a>.
  getting-started-in-webgl-shaders-heading3: >-
    Uniforms: Passing data from sketch to shader
  getting-started-in-webgl-shaders-p14x1: >-
    A simple shader like this can be useful by itself, but there are times when it's necessary to communicate
    variables from the p5.js sketch to a shader. This is when uniforms come in. Uniforms are special variables that
    can be sent from a sketch to a shader. These make it possible to have much more control over a shader. For example,
    you could use the p5.js method <a class="code">millis()</a> to pass a 'time' uniform to our sketch to introduce motion.
    In the shader, uniforms are defined at the top of the file, outside of <a class="code">main()</a>. In
    this following fragment shader
    we are creating a color uniform, <a class="code">myColor</a>, that will allow us to change the color from our sketch.
  getting-started-in-webgl-shaders-p15x1: >-
    Back in our p5.js sketch, this color can now be sent using <a class="code">setUniform()</a>:
  getting-started-in-webgl-shaders-p16x1: >-
    There are also <em>attributes</em>, which are usually used to share certain data about the geometry between the
    sketch and the vertex shader, and <em>varying</em> variables, which share data between the vertex shader and the
    fragment shader.
    This makes it possible to use position or other geometry data within our fragment shaders.
  getting-started-in-webgl-shaders-p17x1: >-
    Now with the texture coordinate attribute assigned to the varying variable, we can use the texture coordinate
    in our fragment shader. The result in the example below is a blue and magenta visualization of our texture coordinates.
  getting-started-in-webgl-shaders-info1x1: >-
    p5.js handles a lot of attributes and uniforms for us, and <a
    href="https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/contributor_docs/webgl_mode_architecture.md">you
    can view a list of all of the attributes that p5.js sends to the shader</a>.
  getting-started-in-webgl-shaders-heading4: >-
    Conclusion
  getting-started-in-webgl-shaders-p18x1: >-
    With these skills you will be able to create some basic shaders, but shader programming can go incredibly deep,
    and there are many shader topics that go beyond this tutorial. Shaders in p5.js can be a powerful tool for
    creating visuals, effects, and even textures that can be mapped to your 3D geometry.
  getting-started-in-webgl-shaders-p19x1: >-
    Want to keep learning more about shaders? Check out some of these websites!
  getting-started-in-webgl-shaders-resources: >-
    <li><a href="https://thebookofshaders.com/">The Book of Shaders</a>, a shader guide by Patricio Gonzalez Vivo
      and
      Jen Lowe.</li>
    <li><a href="https://itp-xstory.github.io/p5js-shaders/#/">P5.js shaders</a>, a shader guide by Casey Conchinha
      and
      Louise Lessél.</li>
    <li><a href="https://www.shadertoy.com/">Shadertoy</a>, a massive online collection of shaders that are written in a browser editor.</li>
    <li><a href="https://github.com/aferriss/p5jsShaderExamples">p5jsShaderExamples</a>, a collection of resources
      by
      Adam Ferriss.</li>
  getting-started-in-webgl-shaders-glossary-term1-title: Shader
  getting-started-in-webgl-shaders-glossary-term1-definition: >-
    A special graphics card program that can efficiently produce many visual effects and filters.
  getting-started-in-webgl-shaders-glossary-term2-title: GLSL
  getting-started-in-webgl-shaders-glossary-term2-definition: >-
    Graphics Library Shader Language (GLSL) is a programming language that is used to write shaders.
  getting-started-in-webgl-shaders-glossary-term3-title: Uniform
  getting-started-in-webgl-shaders-glossary-term3-definition: >-
    A variable that is passed from your sketch to a shader.
  getting-started-in-webgl-shaders-glossary-term4-title: Vector
  getting-started-in-webgl-shaders-glossary-term4-definition: >-
    A data type that stores a group of numbers, most commonly two, three, or four, to represent colors, positions,
    and more.
  getting-started-in-webgl-shaders-glossary-term5-title: Float
  getting-started-in-webgl-shaders-glossary-term5-definition: >-
    A data type that stores floating point numbers, which can have a decimal point.
  getting-started-in-webgl-shaders-glossary-term6-title: Int
  getting-started-in-webgl-shaders-glossary-term6-definition: >-
    A data type that stores integers, which are whole numbers without a decimal.
  getting-started-in-webgl-shaders-glossary-term7-title: Sampler
  getting-started-in-webgl-shaders-glossary-term7-definition: >-
    A data type that represents a texture being passed into the shader.
  getting-started-in-webgl-shaders-glossary-term8-title: Attribute
  getting-started-in-webgl-shaders-glossary-term8-definition: >-
    A GLSL variable that is generated in the p5.js sketch and made available in the vertex shader. For most
    situations these are provided by p5.js.
  getting-started-in-webgl-shaders-glossary-term9-title: Texture
  getting-started-in-webgl-shaders-glossary-term9-definition: >-
    An image that is passed into a shader program.
  getting-started-in-webgl-shaders-glossary-term10-title: Type
  getting-started-in-webgl-shaders-glossary-term10-definition: >-
    A label describing the characterics of a piece of data, such as an int, a float, a vector, etc.
  getting-started-in-webgl-shaders-glossary-term11-title: Vertex Shader
  getting-started-in-webgl-shaders-glossary-term11-definition: >-
    The part of a shader program that is responsible for positioning geometry in 3D space.
  getting-started-in-webgl-shaders-glossary-term12-title: Fragment Shader
  getting-started-in-webgl-shaders-glossary-term12-definition: >-
    The part of a shader program that is responsible for the color and appearance of each pixel output by the
    shader.
  getting-started-in-webgl-framebuffers-title: Layered Rendering with Framebuffers
  getting-started-in-webgl-framebuffers: >-
    Setting up sketches that draw in multiple stages or access 3D depth information.
  color-title: Color
  color: An introduction to digital color.
  coordinate-system-and-shapes-title: Coordinate System and Shapes
  coordinate-system-and-shapes: Drawing simple shapes and using the coordinate system.
  interactivity-title: Interactivity
  interactivity: Introduction to interactivity with the mouse and keyboard.
  program-flow-title: Program Flow
  program-flow: Introduction to controlling program flow in p5.js.
  curves-title: Curves
  curves: >-
    An introduction to the three types of curves in p5.js: arcs, spline curves,
    and Bézier curves.
  becoming-a-better-programmer-title: Becoming a better programmer
  debugging-title: Debugging
  debugging: Field guide to debugging for everyone.
  optimizing-title: Optimizing p5.js code for performance
  optimizing: >-
    A tutorial of tips and tricks for optimizing your code to make it run faster
    and smoother.
  test-driven-development-title: Unit testing and test driven development
  test-driven-development: >-
    Save yourself from agony on install day. What is unit testing and how to use
    it? By Andy Timmons.
  contributing-to-the-community-title: Contributing to the community
  development-title: Development
  development: Getting started and overview for contributing to development.
  looking-inside-title: Looking inside p5
  looking-inside: >-
    A friendly intro to the file structure and tools for p5.js development, by
    Luisa Pereira.
  writing-tutorial-title: Writing a tutorial
  writing-tutorial: A guide to writing a p5.js programming tutorial.
  writing-a-tutorial-title: Guide to contributing p5.js tutorials
  writing-a-tutorial-author: This tutorial was written by Tega Brain.
  writing-a-tutorial-1: >-
    We invite educators, contributors and general enthusiasts to contribute p5js
    tutorials. The p5js project makes creative coding and open source
    development more accessible to a diverse community and we are excited to
    publish tutorials on all aspects of the development process. Our learning
    materials so far include guides on learning p5, programming technique and
    how to contribute to an open source project.
  writing-a-tutorial-2: >-
    We welcome new written tutorial contributions and this guide outlines the
    steps of how to propose, prepare and contribute.
  writing-a-tutorial-how-start-title: 'How to get started:'
  writing-a-tutorial-how-start-1: 'Check that your proposed topic has not already been covered. There is '
  writing-a-tutorial-how-start-2: a working spreadsheet here
  writing-a-tutorial-how-start-3: >-
    that outlines in progress tutorials. If your topic is listed as in progress,
    perhaps you can add to work being done and contribute to preparing existing
    work for publication so please reach out to us.
  writing-a-tutorial-how-start-4: >-
    If your topic is not already covered and is not listed as in progress,
    please write a few sentences on what you propose to cover and email us this
    description at education@p5js.org.
  writing-a-tutorial-how-prepare-title: 'How to prepare a p5js tutorial for publication online:'
  writing-a-tutorial-how-prepare-1: >-
    When your tutorial is ready for publication, please follow these steps to
    prepare your content for the p5js website.
  writing-a-tutorial-how-prepare-2: 'Prepare the content of your tutorial as a tutorial-name.hbs file with '
  writing-a-tutorial-how-prepare-3: this basic structure
  writing-a-tutorial-how-prepare-4: '. As is shown in this file, it must contain a header as shown below:'
  writing-a-tutorial-how-prepare-5: >-
    The folder containing your tutorial will be placed in the 'tutorials' folder
    of the p5js site. The file called index.hbs is the
  writing-a-tutorial-how-prepare-6: 'p5.js tutorials landing page,'
  writing-a-tutorial-how-prepare-7: ' and the test-tutorial.hbs file is the test tutorial.'
  writing-a-tutorial-how-prepare-8: 'All content should go in the:'
  writing-a-tutorial-how-prepare-9: >-
    tags on the page, with formatting defined by the &lt;h1&gt; and &lt;h2&gt;
    tags, the &lt;p&gt; paragraph tags as is done shown on the
  writing-a-tutorial-how-prepare-10: test tutorial page.
  writing-a-tutorial-how-prepare-11: >-
    If your tutorial contains images, they are to be placed in the assets folder
    of the p5 site, in the location src/assets/learn/test-tutorial/images as
    shown below.
  writing-a-tutorial-how-prepare-12: 'To correctly format code in the html of the page use the tag:'
  writing-a-tutorial-embedding-title: Embedding p5.js sketches
  writing-a-tutorial-embedding-1: >-
    Using p5js means you can illustrate your tutorial with animated, interactive
    or editable code examples to demonstrate programming concepts. Your examples
    should be prepared as p5.js sketches and can be embedded into the tutorial
    in two ways.
  writing-a-tutorial-embedding-2: 'If the example is to be editable like in '
  writing-a-tutorial-embedding-3: the reference pages
  writing-a-tutorial-embedding-4: ' of the p5js site, the p5 sketch should be embedded into the html page using the p5js widget. Follow '
  writing-a-tutorial-embedding-5: 'this guide '
  writing-a-tutorial-embedding-6: 'on how to embed p5js sketches using the widget written by '
  writing-a-tutorial-embedding-7: . You can also explore this in action on the
  writing-a-tutorial-embedding-8: ' test tutorial page'
  writing-a-tutorial-embedding-9: .
  writing-a-tutorial-embedding-10: >-
    If the example is to be animated and/or interactive but not editable. The
    p5.js sketch should be embedded into the page as an iframe as described
    below.
  writing-a-tutorial-iframe-title: Embed a p5 sketch using an iframe
  writing-a-tutorial-iframe-1: >-
    An iframe is like creating a window through which you can explore another
    page, sandboxed from the rest of your page. In this case it will be a window
    to the index.html containing your p5.js sketch.
  writing-a-tutorial-iframe-2: >-
    Put your p5 sketches in the /src/assets/learn folder of the site, in a
    folder labelled with the name of your sketch as shown in the screenshot.
    This is where all the images and p5 sketches linked by iframe should be
    stored.
  writing-a-tutorial-iframe-3: >-
    In the subfolders containing your p5 examples there should be a sketch.js
    file and the embed.html file for the sketch.
  writing-a-tutorial-iframe-4: >-
    Make sure your embed.html file has the correct paths to the p5 libraries of
    the site. If your file structure is the same as above, the path to the p5.js
    library should be "../../../js/p5.min.js".
  writing-a-tutorial-iframe-5: >-
    You can then embed the p5js index files as iframes in the .hbs file that
    contains your tutorial content. The embed code for the iframe would then
    be:
  writing-a-tutorial-iframe-6: >-
    Styling for the iframe (this could directly into the post or in a
    stylesheet):
  writing-a-tutorial-iframe-7: 'Here you can find the naked sketch running: '
  writing-a-tutorial-iframe-8: 'And here it is embedded in the p5 site using the code below:  '
  writing-a-tutorial-iframe-9: >-
    One thing to note is that you need to manually set the size of the iframe,
    so it works best if things are a standard size.
  writing-a-tutorial-iframe-10: >-
    Also note that the links to the p5.js library files do not happen from the
    .eps page with all the tutorial content. Instead they will be located in the
    html page that is rendering your sketch (in this case, called embed.html).
  writing-a-tutorial-iframe-11: 'More information on embedding p5.js sketches can be found '
  writing-a-tutorial-embed-iframe-12: here.
  writing-a-tutorial-finishing-title: Finishing up
  writing-a-tutorial-finishing-1: >-
    Once your have finished writing your tutorial and your content has been
    given the thumbs up. Fork the p5.js website repository, prepare your content
    as described above and then issue a pull request to the p5.js website
    repository so we can publish your contribution!
  writing-a-tutorial-finishing-2: Thank you!
  color-description1: >-
    This tutorial is from the book Learning Processing by Daniel Shiffman,
    published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It
    was ported to P5 by Kelly Chang. If you find any errors or have comments,
  color-description2: ' please let us know.'
  color-p1x1: >-
    In the digital world, when we want to talk about a color, precision is
    required. Saying "Hey, can you make that circle bluish-green?" will not do.
    Color, rather, is defined as a range of numbers. Let's start with the
    simplest case: black & white or grayscale. 0 means black, 255 means white.
    In between, every other number—50, 87, 162, 209, and so on—is a shade of
    gray ranging from black to white.
  color-p2x1: 'By adding the '
  color-p2x2: ' and '
  color-p2x3: ' functions before something is drawn, we can set the color of any given shape. There is also the function '
  color-p2x4: ', which sets a background color for the window. Here''s an example.'
  color-code1: |-
    background(255);    // Setting the background to white
     stroke(0);          // Setting the outline (stroke) to black
     fill(150);          // Setting the interior of a shape (fill) to grey
     rect(50,50,75,100); // Drawing the rectangle
  color-p3x1: 'Stroke or fill can be eliminated with the functions: '
  color-p3x2: ' and '
  color-p3x3: >-
    . Our instinct might be to say "stroke(0)" for no outline, however, it is
    important to remember that 0 is not "nothing", but rather denotes the color
    black. Also, remember not to eliminate both—with
  color-p3x4: ' and '
  color-p3x5: ', nothing will appear!'
  color-p4x1: >-
    In addition, if we draw two shapes, p5.js will always use the most recently
    specified stroke and fill, reading the code from top to bottom.
  color-rgb-title: RGB Color
  color-rgb-p1x1: >-
    Remember finger painting? By mixing three "primary" colors, any color could
    be generated. Swirling all colors together resulted in a muddy brown. The
    more paint you added, the darker it got. Digital colors are also constructed
    by mixing three primary colors, but it works differently from paint. First,
    the primaries are different: red, green, and blue (i.e., "RGB" color). And
    with color on the screen, you are mixing light, not paint, so the mixing
    rules are different as well.
  color-rgb-li1: Red + Green = Yellow
  color-rgb-li2: Red + Blue = Purple
  color-rgb-li3: Green + Blue = Cyan (blue-green)
  color-rgb-li4: Red + Green + Blue = White
  color-rgb-li5: No colors = Black
  color-rgb-p2x1: >-
    This assumes that the colors are all as bright as possible, but of course,
    you have a range of color available, so some red plus some green plus some
    blue equals gray, and a bit of red plus a bit of blue equals dark purple.
    While this may take some getting used to, the more you program and
    experiment with RGB color, the more it will become instinctive, much like
    swirling colors with your fingers. And of course you can't say "Mix some red
    with a bit of blue," you have to provide an exact amount. As with grayscale,
    the individual color elements are expressed as ranges from 0 (none of that
    color) to 255 (as much as possible), and they are listed in the order R, G,
    and B. You will get the hang of RGB color mixing through experimentation,
    but next we will cover some code using some common colors.
  color-transparency-title: Color Transparency
  color-transparency-p1x1: >-
    In addition to the red, green, and blue components of each color, there is
    an additional optional fourth component, referred to as the color's "alpha".
    Alpha means transparency and is particularly useful when you want to draw
    elements that appear partially see-through on top of one another. The alpha
    values for an image are sometimes referred to collectively as the "alpha
    channel" of an image.
  color-transparency-p2x1: >-
    It is important to realize that pixels are not literally transparent, this
    is simply a convenient illusion that is accomplished by blending colors.
    Behind the scenes, p5.js takes the color numbers and adds a percentage of
    one to a percentage of another, creating the optical perception of blending.
    (If you are interested in programming "rose-colored" glasses, this is where
    you would begin.)
  color-transparency-p3x1: >-
    Alpha values also range from 0 to 255, with 0 being completely transparent
    (i.e., 0% opaque) and 255 completely opaque (i.e., 100% opaque).
  color-custom-ranges-title: Custom Color Ranges
  color-custom-ranges-p1x1: >-
    RGB color with ranges of 0 to 255 is not the only way you can handle color
    in p5.js, in fact, it allows us to think about color any way we like. For
    example, you might prefer to think of color as ranging from 0 to 100 (like a
    percentage). You can do this by specifying a custom
  color-custom-ranges-p2x1: >-
    The above function says: "OK, we want to think about color in terms of red,
    green, and blue. The range of RGB values will be from 0 to 100."
  color-custom-ranges-p3x1: >-
    Although it is rarely convenient to do so, you can also have different
    ranges for each color component:
  color-custom-ranges-p4x1: >-
    Now we are saying "Red values go from 0 to 100, green from 0 to 500, blue
    from 0 to 10, and alpha from 0 to 255."
  color-custom-ranges-p5x1: >-
    Finally, while you will likely only need RGB color for all of your
    programming needs, you can also specify colors in the HSB (hue, saturation,
    and brightness) mode. Without getting into too much detail, HSB color works
    as follows:
  color-custom-ranges-li1x1: Hue
  color-custom-ranges-li1x2: '—The color type, ranges from 0 to 360 by default.'
  color-custom-ranges-li2x1: Saturation
  color-custom-ranges-li2x2: '—The vibrancy of the color, 0 to 100 by default.'
  color-custom-ranges-li3x1: Brightness
  color-custom-ranges-li3x2: '—The, well, brightness of the color, 0 to 100 by default.'
  color-custom-ranges-p6x1: 'With '
  color-custom-ranges-p6x2: ' you can set your own ranges for these values. Some prefer a range of 0-360 for hue (think of 360 degrees on a color wheel) and 0-100 for saturation and brightness (think of 0-100%).'
  coordinate-system-description1: 'This tutorial is from the book '
  coordinate-system-description2: Learning Processing
  coordinate-system-description3: ' by Daniel Shiffman, published by Morgan Kaufmann, © 2008 Elsevier Inc. All rights reserved. It was ported to p5.js by Alex Yixuan Xu. If you find any errors or have comments, please '
  coordinate-system-description4: let us know
  coordinate-system-description5: .
  coordinate-system-description-title: Coordinate System and Shapes
  coordinate-system-description-p1x1: >-
    Before we begin programming with p5, we must first channel our eighth grade
    selves, pull out a piece of graph paper, and draw a line. The shortest
    distance between two points is a good old fashioned line, and this is where
    we begin, with two points on that graph paper.
  coordinate-system-description-p2x1: >-
    The above figure shows a line between point A (1,0) and point B (4,5). If
    you wanted to direct a friend of yours to draw that same line, you would
    give them a shout and say "draw a line from the point one-zero to the point
    four-five, please." Well, for the moment, imagine your friend was a computer
    and you wanted to instruct this digital pal to display that same line on its
    screen. The same command applies (only this time you can skip the
    pleasantries and you will be required to employ a precise formatting). Here,
    the instruction will look like this:
  coordinate-system-description-p3x1: >-
    Even without having studied the syntax of writing code, the above statement
    should make a fair amount of sense. We are providing a command (which we
    will refer to as a "function") for the machine to follow entitled "line." In
    addition, we are specifying some arguments for how that line should be
    drawn, from point A (1,0) to point B (4,5). If you think of that line of
    code as a sentence, the function is a verb and the arguments are the objects
    of the sentence. The code sentence also ends with a semicolon instead of a
    period.
  coordinate-system-description-p4x1: >-
    The key here is to realize that the computer screen is nothing more than a
    fancier piece of graph paper. Each pixel of the screen is a coordinate - two
    numbers, an "x" (horizontal) and a "y" (vertical) - that determines the
    location of a point in space. And it is our job to specify what shapes and
    colors should appear at these pixel coordinates.
  coordinate-system-description-p5x1: >-
    Nevertheless, there is a catch here. The graph paper from eighth grade
    ("Cartesian coordinate system") placed (0,0) in the center with the y-axis
    pointing up and the x-axis pointing to the right (in the positive direction,
    negative down and to the left). The coordinate system for pixels in a
    computer window, however, is reversed along the y-axis. (0,0) can be found
    at the top left with the positive direction to the right horizontally and
    down vertically.
  coordinate-system-simple-shapes-title: Simple Shapes
  coordinate-system-simple-shapes-p1x1: >-
    The vast majority of p5 programming examples are visual in nature. These
    examples, at their core, involve drawing shapes and setting pixels. Let's
    begin by looking at four primitive shapes.
  coordinate-system-simple-shapes-p2x1: >-
    For each shape, we will ask ourselves what information is required to
    specify the location and size (and later color) of that shape and learn how
    p5 expects to receive that information. In each of the diagrams below, we'll
    assume a window with a width of 100 pixels and height of 100 pixels.
  coordinate-system-simple-shapes-p3x1: 'A '
  coordinate-system-simple-shapes-p3x2: ' is the easiest of the shapes and a good place to start. To draw a point, we only need an x and y coordinate.'
  coordinate-system-simple-shapes-p4x1: 'A '
  coordinate-system-simple-shapes-p4x2: ' isn''t terribly difficult either and simply requires two points: (x1,y1) and (x2,y2):'
  coordinate-system-simple-shapes-p5x1: 'Once we arrive at drawing a '
  coordinate-system-simple-shapes-p5x2: >-
    , things become a bit more complicated. In p5, a rectangle is specified by
    the coordinate for the top left corner of the rectangle, as well as its
    width and height.
  coordinate-system-simple-shapes-p6x1: >-
    A second way to draw a rectangle involves specifying the centerpoint, along
    with width and height. If we prefer this method, we first indicate that we
    want to use the
  coordinate-system-simple-shapes-p6x2: ' mode before the instruction for the rectangle itself. Note that p5 is case-sensitive.'
  coordinate-system-simple-shapes-p7x1: >-
    Finally, we can also draw a rectangle with two points (the top left corner
    and the bottom right corner). The mode here is
  coordinate-system-simple-shapes-p7x2: . Note this example gives the same result on screen as the example above.
  coordinate-system-simple-shapes-p8x1: 'Once we have become comfortable with the concept of drawing a rectangle, an '
  coordinate-system-simple-shapes-p8x2: ' is a snap. In fact, it is identical to '
  coordinate-system-simple-shapes-p8x3: ' with the difference being that an ellipse is drawn where the bounding box of the rectangle would be. The default mode for '
  coordinate-system-simple-shapes-p8x4: ' is '
  coordinate-system-simple-shapes-p8x5: ', rather than '
  coordinate-system-simple-shapes-p8x6: .
  coordinate-system-simple-shapes-p9x1: >-
    Now let's look at what some code with shapes in more complete form, with
    canvas dimensions of 200 by 200. Note the use of the createCanvas() function
    to specify the width and height of the canvas.
  curves-description1: 'This tutorial is written by J David Eisenberg and ported by Sally Chen. If you see any errors or have comments, '
  curves-description2: ' please let us know.'
  curves-description3: 'This work is licensed under a '
  curves-description4: ' Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.'
  curves-p1x1: 'This short tutorial introduces you to the three types of curves in p5.js: arcs, spline curves, and Bézier curves.'
  curves-arcs-title: ' Arcs '
  curves-arcs-p1x1: 'Arcs are the simplest curves to draw, it is defined an arc as a section of an ellipse. You call the function with these parameters:'
  curves-arcs-p2x1: 'arc (x, y, w, h, start, stop, [mode])'
  curves-arcs-p3x1: >-
    The first four parameters (x,y,w,h) define the boundary box for your arc and the next two (start, stop), are the start and stop angles for the arc. These angles are given in radians
    and are measured clockwise with zero degrees pointing east and PI radians equals 180°.
  curves-spline-curves-title: 'Spline Curves'
  curves-spline-curves-p1x1: >-
    Arcs are fine, but they’re plain. The next function, curve(), lets you draw curves that aren’t necessarily part of an arc. This function draws what is technically called a Rom-Catmull Spline.
    To draw the curve, you must specify the (x, y) coordinates of the points where the curve starts and ends. You must also specify two control points which determine the direction and amount of curvature.
    The first two and last two parameters are the control points of the curve.
    A call to curve() uses these parameters:
  curves-spline-curves-p2x1: 'curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);'
  curves-spline-curves-p3x1: 'How do the control points affect the way the curve looks?'
  curves-spline-curves-p4x1: 'The tangent to the curve at the start point is parallel to the line between control point one and the end of the curve. The tangent to the curve at the end point is parallel to the line between the start point and control point 2.'
  curves-spline-curves-p5x1: 'The following diagram shows a curve and the points can be dragged to show how the control point affects the curve:'
  curves-continuous-spline-curves-title: 'Continuous Spline Curves'
  curves-continuous-spline-curves-p1x1: >-
    In isolation, a single curve() is not particularly appealing. To draw a continuous curve through several points, you are better off using the curveVertex() function.
    You can only use this function when you are creating a shape with the beginShape() and endShape() functions.In common usage, people use the first point of the curve
    as the first control point and the last point of the curve as the last control point.
  curves-bezier-curves-title: 'Bézier Curves'
  curves-bezier-curves-p1x1: >-
    Though better than arcs, spline curves don’t seem to have those graceful, swooping curves that say “art.” For those, you need to draw Bézier curves with the bezier() function.
    As with spline curves, the bezier() function has eight parameters, but the order is different. The first two and last two parameters are the start and end points while middle 
    four points are the control points.
  curves-bezier-curves-p2x1: ' bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2); '
  curves-bezier-curves-p3x1: >-
    While it is difficult to visualize how the control points affect a curve(), it is slightly easier to see how the control points affect Bézier curves.
    Imagine two poles and several rubber bands. The poles connect the control points to the endpoints of the curve. A rubber band connects the tops of the poles.
    Two more rubber bands connect the midpoints of the poles to the midpoint of the first rubber band. One more rubber band connects their midpoints.
    The center of that last rubber band is tied to the curve. This diagram helps to explain, the points can be moved to change the curve.
  curves-continuous-bezier-curves-title: ' Continuous Bézier Curves'
  curves-continuous-bezier-curves-p1x1: >-
    Just as curveVertex() allows you to make continuous spline curves, bezierVertex() lets you make continuous Bézier curves.
    Again, you must be within a beginShape() / endShape() sequence. You must use vertex(startX, startY) to specify the starting anchor point of the curve.
    Subsequent points are specified with a call to:
  curves-continuous-bezier-curves-p2x1: 'bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);'
  curves-continuous-bezier-curves-p3x1: >-
    Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to make two curves A and B smoothly continuous, the last control point of A,
    the last point of A, and the first control point of B have to be on a straight line.
  curves-summary-title: 'Summary'
  curves-summary-li1: 'Use arc() when you need a segment of a circle or an ellipse. You can’t make continuous arcs or use them as part of a shape.'
  curves-summary-li2: 'Use curve() when you need a small curve between two points. Use curveVertex() to make a continuous series of curves as part of a shape.'
  curves-summary-li3: 'Use bezier() when you need long, smooth curves. Use bezierVertex() to make a continuous series of Bézier curves as part of a shape.'
  teach-desc: 'Teach a p5 workshop or class, or create teaching materials!'
libraries:
  Libraries: Libraries
  core-libraries: Core Libraries
  community-libraries: Community Libraries
  libraries-created-by: 'Created by:'
  p5.sound: >-
    p5.sound extends p5 with Web Audio functionality including audio input,
    playback, analysis and synthesis.
  asciiart: >-
    p5.asciiart is a simple and easy to use image - to - ASCII art converter for
    p5js.
  p5.ble: >-
    A Javascript library that enables communication between BLE devices and p5
    sketches.
  p5.bots: >-
    With p5.bots you can interact with your Arduino (or other microprocessor)
    from within the browser. Use sensor data to drive a sketch; use a sketch to
    drive LEDs, motors, and more!
  p5.bezier: A library helps draw high-degree Bézier curves with unlimited points.
  p5.clickable: 'Event driven, easy-to-use button library for p5.js.'
  p5.cmyk.js: CMYK ColorSpace
  p5.collide2D: >-
    p5.collide2D provides tools for calculating collision detection for 2D
    geometry with p5.js.
  CO2Budget.js: >-
    This library opens up the idea of the CO2-Countdown to creative communities of 
    coders, designers and artists associated with p5*js and JavaScript.
  p5.createloop: Create animation loops with noise and GIF exports in one line of code.
  p5.dimensions: >-
    p5.dimensions extends p5.js' vector functions to work in any number of
    dimensions.
  p5.EasyCam: >-
    Simple 3D camera control with inertial pan, zoom, and rotate. Major
    contributions by Thomas Diewald.
  p5.experience: >-
    Extensive library for p5.js that adds additional event-listening
    functionality for creating canvas-based web applications.
  p5.func: >-
    p5.func is a p5 extension that provides new objects and utilities for
    function generation in the time, frequency, and spatial domains.
  p5.geolocation: >-
    p5.geolocation provides techniques for acquiring, watching, calculating, and
    geofencing user locations for p5.js.
  p5.glitch: p5.glitch extends p5.js for glitching images and binary files.
  p5.gibber: p5.gibber provides rapid music sequencing and audio synthesis capabilities.
  grafica.js: >-
    grafica.js lets you add simple but highly configurable 2D plots to your
    p5.js sketches.
  p5.gui: p5.gui generates a graphical user interface for your p5.js sketches.
  p5.j5: >-
    The full Johnny-Five.io Nodebots/robotics library for Arduino and other 
    microcontrollers made to work directly in browser with WebSerial or WebUSB.
  p5.localmessage: >-
    p5.localmessage provides a simple interface to send messages locally from
    one sketch to another for easy multi-window sketching!
  marching: 'Raster to vector conversion, isosurfaces.'
  mappa: >-
    Mappa provides a set of tools for working with static maps, tile maps, and
    geo-data. Useful when building geolocation-based visual representations.
  ml5.js: >-
    ml5.js builds on Tensorflow.js and provides friendly access to machine
    learning algorithms and models in the browser.
  numero: A friendly and intuitive math library for p5.js.
  pdl.library: >-
    A set of functions and classes to create interactive diagrams for teaching 
    and learning physics.
  p5play: >-
    p5play is for creating interactive art and games with the Box2D physics engine.
    It provides sprites, animations, improved input detection, and more!
  p5.particle: >-
    The Particle and Fountain objects can be used to create data-driven effects
    that are defined through user structures or JSON input and user-draw
    functions.
  p5.party: >-
    p5.party is a library for easily creating networked multiuser games, apps, 
    and sketches.
  p5.Polar: >-
    p5.Polar provides mathematical abstractions making it easy to create
    create beautiful, kaleidoscopic, radial patterns.
  react-p5: This library lets you integrate p5 Sketches into your React App.
  p5.recorder: Record sketch canvas and audio.
  p5.Riso: >-
    p5.Riso is a library for generating files suitable for Risograph printing.
    It helps turn your sketches into multi-color prints.
  rita.js: >-
    RiTa.js provides a set of natural language processing objects for generative
    literature.
  Rotating knobs: Make knobs you can rotate with custom graphics and return value ranges.
  p5.scenemanager: >-
    p5.SceneManager helps you create sketches with multiple states / scenes.
    Each scene is a like a sketch within the main sketch.
  p5.screenPosition: Adds the screenX and screenY functionality from Processing to P5js.
  p5.scribble: >-
    Draw 2D primitives in a sketchy look. Created by Janneck Wullschleger, based
    on a port of the original Processing library
  p5.serialport: >-
    p5.serialport enables serial communication between devices that support serial
    (RS-232) and p5 sketches running in the browser.
  Shape5: >-
    Shape5 is a 2D primative library for elementary students who are learning to
    code for the first time.
  p5.shape.js: A library built to add more simple shapes to the p5.js framework.
  P5.slides: p5.slides is a presentation platform written in p5.js.
  p5snap: >-
    p5snap is a command-line interface that creates and saves snapshots 
    of a p5 sketch on an interval.
  p5.speech: >-
    p5.speech provides simple, clear access to the Web Speech and Speech
    Recognition APIs, allowing for the easy creation of sketches that can talk
    and listen.
  p5.start2d.js: 'p5 extension for 2D static art using px, mm, cm or inches'
  p5.tiledmap: >-
    p5.tiledmap provides drawing and helper functions to include maps in your
    sketches.
  TiledPlay: >-
    A small library to bridge the functionality of p5.js, p5.play.js and 
    p5.tiled.js to easily create 2D platformer games using javascript.
  p5.touchgui: A multi-touch and mouse GUI Library for p5.js.
  tramontana: >-
    Tramontana is a platform for easily use many devices (iOS, Android,
    tramontana Board, ...) to create interactive environments, interactive
    spaces or just prototype experiences at scale and in space.
  TurtleGFX: >-
    TurtleGFX allows to code with Turtle Graphics in JavaScript. 
    Great for education and creative coding.
  p5.tween: >-
    With p5.tween you can create easily animations as tween for your objects and 
    shapes.
  vida: >-
    Vida is a simple library that adds camera (or video) based motion detection
    and blob tracking functionality to p5js.
  p5.voronoi: >-
    p5.voronoi provides a set of tools to draw and utilize voronoi diagrams in
    your p5.js sketches.
  p5.wasm: >-
    p5.wasm is an addon library written in Rust and compiled to WebAssembly that 
    implements common functions found in p5.js.
  p5.xr: A library for creating VR and AR sketches with p5.
  p5.3D: 3D Text and Images in WebGL.
  WEBMIDI.js: Easily send and receive MIDI messages from p5.
  p5.buttons: A library that aims to de-complicate scripting buttons.
  p5.button: >-
    Small one function library to design and render simple or styled buttons 
    directly in p5.js canvas.
  p5.math.js: >-
    The mathematical operations of JavaScript have been converted into simple 
    human language so that they can understand really quickly.
  p5LiveMedia: Real time audio, video, canvas, and data sharing.
  P5.Create: >-
    P5.Create is a library which provides save, animation, collision and tag 
    functions designed for efficient game creation.
  p5.quadrille.js: p5.js quadrille library.
  p5.animS: p5.animS animates p5.js shapes by rendering their drawing processes.
  I_AM_UI: A UserInterface library.
  simple.js: Helper functions and defaults for young and new coders.
  p5.timer: >-
    This library performs asynchronous timing functions like countdowns, 
    one-shot timers, % time elapsed and encapsulates the millis() function and 
    other related calculations that often clog up your code. 
  c2.js: >-
    c2.js is a JavaScript library for creative coding based on computational 
    geometry, physics simulation, evolutionary algorithm and other modules.
  Concave Hull: Calculate a Concave Hull from a set of points in 2D space.
  p5.joystick: Connect and play with physical joysticks
  p5.webserial: >-
    A library for interacting with Serial devices from within the browser, 
    based on Web Serial API (available on Chrome and Edge).
  p5.pattern: A pattern drawing library for p5.js.
  p5.jacdac: Plug-and-play micro-controllers for p5js
  p5.PatGrad: p5.PatGrad let's you add patterns and gradients to your sketches.
  p5.projection: Easy projection mapping of sketches onto real world surfaces
  p5.filterRenderer: >-
    A library for p5.js WebGL mode to draw with depth blur and shadows.
  p5.capture: >-
    p5.capture provides a simple GUI to easily record p5.js animations and output 
    video files in various formats (webm, gif, mp4, png, jpg, and webp).
  p5.input: Adds more key support for p5.js.
  p5.web-serial: >-
    A p5.js library for using the Web Serial API to access devices like Arduino, 
    no setup required.
  p5.wasm.core: A web assembly core for p5.js.
  p5.videorecorder: Record your canvas as a video file with audio.
  p5.mapper: >-
    p5.mapper is a projection mapping library for p5.js. This library makes it 
    easy to code and keystone interactive, algorithmic sketches.
  p5.teach: >-
    A beginner friendly math animation library for p5.js. Created with mentorship  
    from Nick McIntyre and Jithin KS.
  p5.fab: p5.fab controls digital fabrication machines from p5.js.
  p5.utils: >-
    A set of utilities and additional features for my creative coding class aiming 
    to help students.
  using-a-library-title: Using a library
  using-a-library1: >-
    A p5.js library can be any JavaScript code that extends or adds to the p5.js
    core functionality. There are two categories of libraries. Core libraries (
  using-a-library3: >-
    ) are part of the p5.js distribution, while contributed libraries are
    developed, owned, and maintained by members of the p5.js community.
  using-a-library4: >-
    To include a library in your sketch, link it into your HTML file, after you
    have linked in p5.js. An example HTML file might look like this:
  create-your-own-title: Create Your Own
  create-your-own1: p5.js welcomes libraries contributed by others! Check out the
  create-your-own2: libraries tutorial
  create-your-own3: for more specifics about how to create one. If you have created a library and would like to have it included on this
    page,
  create-your-own4: >-
     submit this form!
community:
  community-title: Community
  community-statement-title: p5.js Community Statement
  community-statement1: >-
    p5.js is a community interested in exploring the creation of art and design
    with technology.
  community-statement2: >-
    We are a community of, and in solidarity with, people from every gender
    identity and expression, sexual orientation, race, ethnicity, language,
    neuro-type, size, ability, class, religion, culture, subculture, political
    opinion, age, skill level, occupation, and background. We acknowledge that
    not everyone has the time, financial means, or capacity to actively
    participate, but we recognize and encourage involvement of all kinds. We
    facilitate and foster access and empowerment. We are all learners.
  community-statement3: >-
    We like these hashtags: #noCodeSnobs (because we value community over
    efficiency), #newKidLove (because we all started somewhere), #unassumeCore
    (because we don't assume knowledge), and #BlackLivesMatter (because of
    course).
  in-practice-title: 'In practice:'
  in-practice1: ' We are not code snobs. We do not assume knowledge or imply there are things that somebody should know. '
  in-practice2: >-
    We insist on actively engaging with requests for feedback regardless of
    their complexity.
  in-practice3: >-
    We welcome newcomers and prioritize the education of others. We strive to
    approach all tasks with the enthusiasm of a newcomer. Because we believe
    that newcomers are just as valuable in this effort as experts.
  in-practice4: >-
    We consistently make the effort to actively recognize and validate multiple
    types of contributions.
  in-practice5: We are always willing to offer help or guidance.
  in-times-conflict-title: 'In times of conflict:'
  in-times-conflict1: We listen.
  in-times-conflict2: We clearly communicate while acknowledging other's feelings.
  in-times-conflict3: >-
    We admit when we're wrong, apologize, and accept responsibility for our
    actions.
  in-times-conflict4: We are continuously seeking to improve ourselves and our community.
  in-times-conflict5: We keep our community respectful and open.
  in-times-conflict6: We make everyone feel heard.
  in-times-conflict7: We are mindful and kind in our interactions.
  in-the-future-title: 'In the future:'
  in-the-future1: The future is now.
  notes-title: Notes
  notes1: 'Please also visit our '
  notes2: p5.js Code of Conduct
  notes3: '. The p5.js Community Statement is licensed under a '
  notes4: Creative Commons license
  notes5: . Please feel free to share and remix with attribution.
  contribute-title: Contribute
  contribute1: >-
    Our community is always looking for enthusiasts to help in all different
    ways.
  develop-title: Develop.
  develop1: GitHub
  develop2: ' is the main place where code is collected, issues are documented, and discussions about code are had. Check out the '
  develop3: ' development tutorial'
  develop4: ' to get started, or '
  develop5: create your own library.
  document-title: Document.
  document1: ' Everyone loves documentation. Help is needed '
  document2: porting examples
  document3: ', and'
  document4: ' adding documentation'
  document5: ', and creating tutorials.'
  teach-title: Teach.
  teach1: ' Teach a workshop, a class, a friend, a collaborator! Tag @p5xjs on Twitter and we will do our best to share what you''re doing.'
  create-title: Create.
  create1: ' p5.js is looking for designers, artists, coders, programmers to bring your creative and amazing work to show on the front page and inspire other people. Submit your work to '
  create2: hello@p5js.org
  create3: .
  donate-title: Donate.
  donate1: ' p5.js is free and open source and made by artists. Help support the development of p5.js through a donation to the '
  donate2: Processing Foundation
  donate3: .
  contributors-conference-title: p5.js Contributors Conference
  contributors-conference1: 'While most work happens online, we also convene IRL. We''ve had two contributors conferences held at the '
  contributors-conference2: >-
    at Carnegie Mellon University in Pittsburgh, PA. Artists, designers,
    developers, educators, and got together to advance the p5.js project.
  participants-title: Participants
  support-title: Support
  support1: Our contributor conference took place at the
  support2: >-
    at Carnegie Mellon University, an academic laboratory for atypical,
    anti-disciplinary, and inter-institutional research at the intersections of
    arts, science, technology, and culture.
  support3: This event was made possible by a grant from the
  support4: and generous support from the
  support5: and
  support6: Thank you!
  mailing-list-title: Mailing list
  mailing-list-1: >-
    Enter your email address to receive occasional updates from the Processing
    Foundation.
  2015contributors-conference-title: Contributors Conference 2015
  2015contributors-conference-date: May 25-31
  2015contributors-conference1: 'A group of approximately 30 participants gathered spent a week at the '
  2015contributors-conference2: >-
    , advancing the code, documentation, and community outreach tools of the
    p5.js programming environment. Participants came from as far away as Hong
    Kong, Seattle, Los Angeles, Boston and New York. Most were working
    professionals in the fields of creative technology, interaction design, and
    new-media arts, but the group also included a half-dozen undergraduate and
    graduate students from Carnegie Mellon’s Schools of Art and Architecture.
  2015contributors-conference3: Photos by Taeyoon Choi
  2015contributors-conference-diversity-title: Diversity
  2015contributors-conference-diversity1: >-
    Alongside technical development, one of the main focuses of this conference
    was outreach, community, and diversity. The conference began with a panel
  2015contributors-conference-diversity2: >-
    Diversity: Seven Voices on Race, Gender, Ability &amp; Class for FLOSS and
    the Internet
  2015contributors-conference-diversity3: '. '
  2015contributors-conference-diversity4: Organized by
  2015contributors-conference-diversity5: and
  2015contributors-conference-diversity6: ', '
  2015contributors-conference-diversity7: >-
    the panel took place Tuesday, 25 May 2015 in Kresge Auditorium at Carnegie
    Mellon University. Speakers included
  2015contributors-conference-diversity8: and
  2015contributors-conference-diversity9: .
  2015cc_1: Diverse group of participants smile and make a p5 sign with their hands
  2015cc_2: 'Participants jump, smile and throw their hands in the air on a green lawn'
  2015cc_3: Woman presenting the p5.js community statement from her laptop
  2015cc_4: >-
    Woman expressively speaks into a microphone while two male collaborators
    look on
  2015cc_5: Participants attentively smile and listen to a presentation
  2015cc_6: Woman reads about p5.js into a microphone to three female students
  2015cc_7: >-
    Participants sit in a circle around a white board with sticky notes on it
    while a female student speaks into a microphone
  2015cc_8: >-
    Participants sit around a table looking at each others laptops and compare
    code
  2015cc_9: Whiteboard with different colored sticky and written notes about programming
  2015cc_10: >-
    Woman speaking into a microphone about valuing different skill sets while a
    group of participants with laptops look at her powerpoint in a classroom
  2015cc_11: >-
    Woman speaks at a podium in an auditorium while three participants sit on
    the stage and another three are skyping in on the stage screen
  2015cc_12: Overhead view of a classroom with participants working on their laptops
  2015cc_13: Five people having a discussion in a circle
  2015cc_14: Five people in a circle with their laptops sharing their notes
  2015cc_15: Man in a classroom with a microphone speaking out to a group of participants
  2019contributors-conference-title: Contributors Conference 2019
  2019contributors-conference-date: August 13-18
  2019contributors-conference1: 'An interdisciplinary group of 35 participants gathered at the '
  2019contributors-conference2: >-
    , advancing the code, documentation, and community outreach tools and
    exploring the current landscape of the p5.js programming environment.
    Comprising a diverse range of participants within the fields of creative
    technology, interaction design, and new media arts, the conference was aimed
    at fostering dialogue through a multidisciplinary lens. Working groups
    focused on several topic areas: Access; Music and Code in Performance;
    Landscape of Creative Tech; and Internationalization.
  2019contributors-conference3: Videos by Qianqian Ye
  2019contributors-conference4: Photos by Jacquelyn Johnson
  outputs: Outputs
  output1: >-
    . An implementation of highly flexible triangle, square, hexagon, and
    octagon girds for p5.js. Created by Aren Davey.
  output2: >-
    . A set of template files for building a multi-device, multiplayer game
    where multiple clients can connect to a specified host page. Created by L05.
  output3: Experiments using
  output3-1: >-
    , testing early implementations of softCompile, OSC interfacing and added
    connectivity with demo for MIDI setup. A p5.js collaborative live-coding vj
    environment! Created by Ted Davis.
  output4: >-
    A panel on Blackness and Gender in Virtual Space led by American Artist,
    with shawné michaelain holloway and LaJuné McMillian.
  output5: Workshops led by Everest Pipkin and Jon Chambers.
  output6: 'A prototype of a '
  output6-1: notebook interface for p5.js.
  output6-2: Created by Allison Parrish.
  output7: >-
    New art installations by Stalgia Grigg, LaJuné McMillian, Aatish Bhatia, and
    Jon Chambers.
  output8: p5.js Global Contributor's Toolkit.
  output8-1: >-
    Created by Aarón Montoya-Moraga, Kenneth Lim, Guillermo Montecinos, Qianqian
    Ye,  Dorothy R. Santos, and Yasheng She.
  output9: How to write non-violent creative code.
  output9-1: ' A zine led by Olivia Ross.'
  output10: >-
    An overhaul of the p5.js website for accessibility. Including updates for
    screen reader accessibility, and improvements to the home, download, getting
    started, and reference pages. With contributions from Claire Kearney-Volpe,
    Sina Bahram, Kate Hollenbach, Olivia Ross, Luis Morales-Navarro, Lauren
    McCarthy, and Evelyn Masso.
  output11: >-
    Collaborative performances by Luisa Pereira, Jun Shern Chan, Shefali Nayak,
    Sona Lee, Ted Davis, and Carlos Garcia.
  output12: A performance by Natalie Braginsky.
  output13: >-
    A design of the p5.js library system for the p5 Editor. Created by Cassie
    Tarakajian and Luca Damasco.
  output14: >-
    Prototypes connecting p5 to other libraries. Created by Alex Yixuan Xu and
    Lauren Valley.
  output15: A closing campfire circle led by Golan Levin.
  2019cc_1: Man at a podium giving a presentation to the group
  2019cc_2: Participants sitting at a long table having lunch and a discussion
  2019cc_3: 'Participants in a classroom, some working on their laptops, others talking '
  2019cc_4: Classroom of participants working on their laptops
  2019cc_5: Participants in a meeting in a dark classroom
  2019cc_6: Woman giving presentation in a classroom of diverse participants
  2019cc_7: Participants conversing in a busy classroom
  2019cc_8: Woman with microphone speaking to fellow participants in a classroom
  2019cc_9: >-
    Participant speaks at a podium in front of projected text about the problem
    with anonymyzing data
  2019cc_10: >-
    Person with a microphone speaking to fellow participants in front of text
    that reads p5.js will not add any new features except those that increase
    access
  2019cc_11: 'Woman speaking into a microphone talking to fellow participants '
  2019cc_12: A man with a microphone speaking to fellow participants
  2019cc_13: Participants sit in a classroom towards the speakers listening intently
  2019cc_14: 'Classroom of participants facing a speaker listen intently '
  2019cc_15: >-
    Woman with microphone speaking to fellow participants with the text sacred
    boundaries in the projection behind her
  2019cc_16: >-
    Overhead view of participants listening to a panel of people with an image
    of a 3d rendered man on it
  2019cc_17: >-
    Participants sit around a table with their laptops and observe code on a
    screen
  2019cc_18: Woman sitting next to a lifesize teddy bear works on her laptop
  2019cc_19: Participants standing outside smiling
  2019cc_20: Four participants standing in a circle conversing
  2019cc_21: Participants sitting outside eating lunch together
  2019cc_22: >-
    Participants sitting around a large U shaped table looking towards the front
    of the classroom
  2019cc_23: >-
    Man sitting in front of the classroom speaking energetically into a
    microphone
  2019cc_24: >-
    Group photo of participants smiling enthusiastically with their hands in the
    air
  2019cc_25: Group of people sit around campfire made from four LCD monitors.
  p5js-community-event-title: p5.js Community Events
  2022-p5js-access-day-title: p5.js Access Day 2022
  2022-p5js-access-day-date: May 21, 2022
  2022-p5js-access-day-organizer: Organizer and curator 
  2022-p5js-access-day-coordinator: Event Coordinator and Video Producer 
  2022-p5js-access-day-description: >-
    The p5.js Access Day is a virtual conference to talk about access in 
    open-source software for the arts (OSSTA) and greater issues beyond the software. 
    The day-long online event features four themed-sessions — Critical Web 
    Accessibility, Disability Arts, Access & Community Building, and Access 
    via Translation. It provides space for contributors of p5.js and experienced 
    practitioners from outside OSSTA projects to share their knowledge, perspectives, 
    and dreams for building greater access to technical and arts spaces.  
  2022-p5js-access-day-recap-video: p5.js Access Day 2022 Recap Video
  2022-p5js-access-day-recap-video-asl: p5.js Access Day 2022 Recap Video with ASL Interpretation
  2022-p5js-access-day-moderator: Moderator
  2022-p5js-access-day-speakers: Speakers
  2022-p5js-access-day-session-0: Event Opening
  2022-p5js-access-day-session-1: Critical Web Accessibility
  2022-p5js-access-day-session-2: Disability Arts
  2022-p5js-access-day-session-3: Access & Community Building
  2022-p5js-access-day-session-4: Access via Translation
  2022-p5js-access-day-session-5: Event Closing
  2022-p5js-access-day-production: Event Production
  2022-p5js-access-day-advisor: Event Advisor
  2022-p5js-access-day-asl: Live ASL Interpretation
  2022-p5js-access-day-designer: Graphic Designer
  2022-p5js-access-day-tech-support: Live Event Tech Support
  2022-p5js-access-day-transcriber: Closed Captioning Transcription Support
  2022-p5js-access-day-asl-support: Live ASL Support
books:
  books-title: Books
  book-1-title: Getting Started with p5.js
  book-1-authors: 'Lauren McCarthy, Casey Reas, and Ben Fry. Illustrations by Taeyoon Choi.'
  book-1-publisher: 'Published October 2015, Maker Media. '
  book-1-pages: '246 pages. '
  book-1-type: Paperback.
  book-1-description: >-
    Written by the lead p5.js developer and the founders of Processing, this
    book provides an introduction to the creative possibilities of today's Web,
    using JavaScript and HTML.
  book-1-order-a: Order Print/Ebook from O'Reilly
  book-1-order-b: Order from Amazon
  book-2-title: Introduction to p5.js (Spanish Edition)
  book-2-authors: >-
    Lauren McCarthy, Casey Reas, and Ben Fry. Translated by Aarón
    Montoya-Moraga. Ilustraciones de Taeyoon Choi.
  book-2-publisher: 'Published 2018, Processing Foundation, Inc. '
  book-2-pages: '246 pages. '
  book-2-type: Soft cover.
  book-2-description: >-
    Written by the lead p5.js developer and the founders of Processing, this
    book provides an introduction to the creative possibilities of today's Web,
    using JavaScript and HTML.
  book-2-order-a: Order the PDF from The Processing Foundation Press
  book-2-order-b: Order the physical version from Amazon
  book-3-title: Generative Design
  book-3-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub and Claudius Lazzeroni.'
  book-3-publisher: 'Published October 30, 2018, Princeton Architectural Press; Reprint edition. '
  book-3-pages: '255 pages. '
  book-3-type: Paperback.
  book-3-description: >-
    By using simple languages such as JavaScript in p5.js, artists and makers
    can create everything from interactive typography and textiles to 3D-printed
    furniture to complex and elegant infographics.
  book-3-order-a: Order from Princeton Architectural Press
  book-3-order-b: Order from Amazon
  book-4-title: Generative Gestaltung (German Edition)
  book-4-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub and Claudius Lazzeroni.'
  book-4-publisher: 'Published March 1, 2018, Schmidt Hermann Verlag. '
  book-4-pages: '256 pages. '
  book-4-type: Hardcover.
  book-4-description: >-
    By using simple languages such as JavaScript in p5.js, artists and makers
    can create everything from interactive typography and textiles to 3D-printed
    furniture to complex and elegant infographics.
  book-4-order-a: Order from Verlag Hermann Schmidt
  book-4-order-b: Order from Amazon
  book-5-title: Learn JavaScript with p5.js
  book-5-authors: Engin Arslan.
  book-5-publisher: 'Published 2018, Apress. '
  book-5-pages: '217 pages. '
  book-5-type: Paperback.
  book-5-description: >-
    Learn coding from scratch in a highly engaging and visual manner using the
    vastly popular JavaScript with the programming library p5.js. The skills you
    will acquire from this book are highly transferable to a myriad of
    industries and can be used towards building web applications, programmable
    robots, or generative art.
  book-5-order-a: Order from Apress
  book-5-order-b: Order from Amazon
  book-6-title: "Aesthetic Programming: A Handbook of Software Studies"
  book-6-authors: 'Winnie Soon, Geoff Cox. '
  book-6-publisher: 'Published  2020, Open Humanities Press. '
  book-6-pages: '298 pages. '
  book-6-type: Hardcover.
  book-6-description: >-
    Using p5.js, this book introduces and demonstrates the reflexive practice
    of aesthetic programming, engaging with learning to program as a way to
    understand and question existing technological objects and paradigms,
    and to explore the  potential for reprogramming wider eco-socio-technical systems.
  book-6-order-a: Download the PDF (FREE)
  book-6-order-b: Order from Barnes & Noble
examples:
  Examples: Examples
  back-examples: Back to Examples
  Structure: Structure
  Form: Form
  Data: Data
  Arrays: Arrays
  Control: Control
  Image: Image
  Color: Color
  Math: Math
  Simulate: Simulate
  Interaction: Interaction
  Objects: Objects
  Lights: Lights
  Motion: Motion
  Instance_Mode: Instance Mode
  Dom: DOM
  Drawing: Drawing
  Transform: Transform
  Typography: Typography
  3D: 3D
  Input: Input
  Advanced_Data: Advanced Data
  Sound: Sound
  Mobile: Mobile
  Hello_P5: Hello p5
reference:
  Reference: Reference
showcase:
  showcase-title: Showcase
  showcase-intro1: 'Introducing Showcase, created by '
  showcase-intro2: ' in 2019 and currently curated by '
  showcase-intro3: >-
    We're celebrating how people are using p5.js to make creative work,
    learning, and open source more interesting and inclusive. Together, we make
    community. During Summer 2019, we asked a few creators to share more about
    how they've used p5.js through different projects and pieces.
  showcase-intro4: >-
    The Summer 2021 Showcase: The Love Ethic is now open for submissions, nominate someone's
    p5.js work or your own to be featured here! If Google is not available in your region, please email chankati@usc.edu to submit!
  nominate-project: Nominate a Project
  showcase-featuring: Featuring
  project-tag-art: Art
  project-tag-design: Design
  project-tag-code: Code
  project-tag-curriculum: Curriculum
  project-tag-documentation: Documentation
  project-tag-game: Game
  project-tag-library: Library
  project-tag-organizing: Organizing
  project-tag-tool: Tool
  project-tag-tutorial: Tutorial
  project-roni: Programmed Plotter Drawings
  credit-roni: Roni Cantor
  description-roni: >-
    Sine waves and lerps generated in p5.js, exported as SVG, and drawn with a
    plotter and pens.
  project-phuong: Airi Flies
  credit-phuong: Phuong Ngo
  description-phuong: >-
    In this game developed with p5.play, help Airi fly by saying PEW. Created to
    encourage people to get out of their comfort zone and feel more confident
    about themselves regardless of what they do and how they look or sound.
  project-daein: Chillin'
  credit-daein: Dae In Chung
  description-daein: >-
    An interactive typographic poster that uses a mobile device's motion sensor
    with p5.js.
  project-qianqian: Qtv
  credit-qianqian: Qianqian Ye
  description-qianqian: >-
    A video channel with 1-minute videos in Mandarin about creative coding, art,
    and technology, including p5.js tutorials for beginners. Available on
    YouTube, Instagram, Bilibili, and TikTok.
  project-casey-louise: p5.js Shaders
  credit-casey-louise: 'Casey Conchinha, Louise Lessél'
  description-casey-louise: 'A resource for learning the what, why, and how of using shaders in p5.js.'
  project-moon-xin: Moving Responsive Posters
  credit-moon-xin: 'Moon Jang, Xin Xin, and students'
  description-moon-xin: >-
    Browser-based moving posters that use graphical systems, transformation
    methods, and p5.js to address the connotations of a word less than 8
    letters. Designed by students for a graphic design course (Visual Narrative
    Systems) at the University of Georgia.
  created-by: Created By
  pronouns-female: (she/her)
  creator-from-roni-cantor: 'From Toronto, Canada'
  project-links: Project Links
  project-links-text-1-roni-cantor: Example sketch in p5.js Web Editor
  project-links-text-2-roni-cantor: AxiDraw V3 demo video
  project-q-1-1: What are you up to?
  project-q-1-2: How did you get started with p5.js?
  project-a-1-1-roni-cantor: >-
    I just graduated from Ryerson University's New Media program. Coming from 4
    years of coding and making robots, I decided to take a break and play with
    some more traditional forms of art—while still coding and playing with
    robots.
  project-a-1-2-roni-cantor: 'I first started using p5.js at '
  project-a-1-3-roni-cantor: '! After using '
  project-a-1-4-roni-cantor: ' for many years, I wanted to try something new.'
  project-q-2: How did you use p5.js in this project?
  project-a-2-1-roni-cantor: >-
    I used p5.js in this project to generate the sine wave and lerp (linear
    interpolation) formulas and display the visuals in the
  project-a-2-2-roni-cantor: >-
    . I then used a feature in my code that exported my programmed graphic into
    an
  project-a-2-3-roni-cantor: ' file. I needed an SVG file to give to the plotter—an '
  project-a-2-4-roni-cantor: >-
    —so that it understood where to draw the lines that I programmed. I sent
    this information to the plotter with a program called
  project-a-2-5-roni-cantor: '!'
  project-q-3: What's your favorite p5.js feature?
  project-a-3-roni-cantor: ' because lines are fun and "lerp" is a fun word to say!'
  project-q-4: >-
    Did you face any challenges working on this project? If so, how did you
    overcome them?
  project-a-4-roni-cantor: >-
    It was my first time using p5.js, Inkscape, and a plotter! I really
    benefited from the people around me who had used p5 before, as well as
    online guides and forums.
  project-q-5: What's a cool thing we should check out?
  project-a-5-roni-cantor: ' on Instagram—super cool analog plotter stuff.'
  project-q-6: Where can people learn more about you?
  project-a-6-roni-cantor: ' (Instagram)'
  project-resources: Project Resources
  creator-from-qianqian: 'Los Angeles, California'
  interview-link-qianqian: Processing Foundation interview with Qianqian Ye
  project-a-1-1-qianqian: I am a Chinese artist and designer based in Los Angeles.
  project-a-1-2-qianqian: >-
    My partner introduced me to p5.js, which I learned mainly by watching free
    online video tutorials. My first p5.js project was drawing some shapes with
    different colors.
  project-a-2-1-qianqian: >-
    This project started with an idea of teaching my mom, who lives in China and
    doesn’t speak English, to code with p5.js. This project was difficult on
    multiple levels, and I wanted to start by identifying the main reasons why
    it’s more challenging for someone like my mother to learn to code—primarily
    due to the lack of free creative coding education resources. Most of the
    free resources to learn creative coding are unavailable in China. The p5.js
    tutorials on YouTube as well as the p5.js Twitter and Instagram accounts are
    inaccessible in China because of internet censorship.
  project-a-2-2-qianqian: 'I learned a lot from YouTube videos such as the '
  project-a-2-3-qianqian: >-
    , but the more I watched coding tutorials online, the more I realized how
    difficult it is to find other womxn and people of color teaching coding,
    especially in Mandarin. I wanted to help other Chinese womxn relate to
    creative coding.
  project-a-2-4-qianqian: >-
    I am working on opening up the video channels to other Chinese creatives who
    want to contribute to the educational resource together, like interviews and
    guest tutorials. If you are interested in teaching/talking about creative
    coding in Mandarin, HMU!
  project-a-3-1-qianqian: 'The '
  project-a-3-2-qianqian: ' is my favorite feature. It makes web-based creative coding seamless.'
  project-a-4-1-qianqian: >-
    Learning to code in a second language was difficult and the lack of
    community made this process even harder. I hope to speak from my experience
    as a beginner and someone who once felt like an outsider to the creative
    coding and video tutorial world.
  project-a-4-2-qianqian: >-
    I spend a lot of time researching the latest technology for my videos. In
    the end, I decided on using my phone to record and iMovie to edit. I hope to
    encourage others that it doesn’t take a lot of expensive gears to get
    started making instructional videos.
  project-a-4-3-qianqian: >-
    Another issue I came across was my own fear of putting myself online. I
    first had to get over my anxiety of making mistakes in the videos or
    receiving negative comments online. Often womxn and people of color are
    targets for online harassment. I’m hoping to help set an example for other
    womxn and people of color that it’s ok to put yourselves online and
    strengthen your communities by sharing your knowledge. Eventually, we will
    be able to stop online harassment by creating strong diverse communities.
  project-a-5-1-qianqian: 'I am very excited about '
  project-a-5-2-qianqian: ' in LA.'
  creator-from-phuong: 'From Kyiv, Ukraine'
  project-a-1-1-phuong: 'I''m a creative coder and designer, a '
  link-1-phuong: Play Airi Flies!
  link-2-phuong: Code for AiriFlies on GitHub
  link-3-phuong: More info in Phuong Ngo's portfolio
  project-a-1-2-phuong: ' diversity scholarship recipient, and just a curious creature.'
  project-a-1-3-phuong: >-
    I was taking a course at the School of Machines in Berlin this summer
    called! "
  project-a-1-4-phuong: '," mainly taught by '
  project-a-2-1-phuong: >-
    I used p5.js to work on the visual part of the game. The animation sprites
    for Airi and the ghosts were drawn on an iPad app called
  project-a-2-2-phuong: ' and then integrated into '
  project-a-2-3-phuong: ' code. I mainly used examples at p5.play as a reference.'
  project-a-2-4-phuong: 'For the endless scrolling background, I found a '
  p5-sketch-by-chjno-phuong: p5 sketch by chjno
  project-a-2-5-phuong: >-
    . I set a condition so whenever the word "pew" or a mouse click was
    detected, the scrolling speed would change to make an illusion of Airi
    flying up. When the user does not do anything, the scrolling speed is
    negative, which makes it look like Airi is falling down.
  project-a-2-6-phuong: 'For sound recognition, I used '
  project-a-2-7-phuong: ' (currently, there is a beta version not available in public yet, but it will be very soon!). I added around 120 samples of my classmates saying the word "pew" with different intonations and 80 samples of background noise to train it. Then I integrated the model into the game with '
  project-a-3-1-phuong: >-
    I really love how easily you can create, manipulate, and delete HTML blocks
    and classes with the
  project-a-3-2-phuong: ' via '
  project-a-3-3-phuong: ' etc. But my most favorite function is '
  project-a-3-4-phuong: ', since this is where you create magic.'
  project-a-4-1-phuong: >-
    There were a lot of challenges simply because p5.js was something new to me.
    I did not work much with JavaScript in general before. Reading documentation
    and searching for similar examples helped a lot.
  project-a-5-1-phuong: 'Check out '
  school-of-machines-phuong: School of Machines' courses
  project-a-5-2-phuong: >-
    ! They try hard to connect the most creative people in the world and they do
    it well so far. ❤️
  pronouns-male: (he/him)
  creator-from-chung: 'From Baltimore, Maryland'
  link-1-casey-louise: p5.js Shaders guide
  link-2-casey-louise: Glitch collection of p5.js shader examples
  link-1-chung: View Chillin'
  link-2-chung: Code for Chillin' on GitHub
  link-3-chung: More info in Dae In Chung's Portfolio
  project-a-1-1-chung: >-
    I am a graphic designer and a faculty member at Maryland Institute College
    of Art, where I mainly teach coding (with p5.js and Processing, of course)
    and motion graphics.
  project-a-1-2-chung: 'I have been using '
  project-a-1-3-chung: ' for some time, and when p5.js came along, I started using it without a second thought because it was easy to convert existing Processing code and share projects online.'
  project-a-2-1-chung: >-
    This summer, I gave myself a challenge of making typographic posters with
    coding, and this is one of the posters I made. I didn’t know until very
    recently that I could use motion sensor data with p5.js. I was also watching
  dan-shiffman-matterjs-tutorial: Dan Shiffman’s matter.js tutorial videos
  project-a-2-2-chung: ', so I thought why not combine the two and practice what I was learning?'
  project-a-3-1-chung: >-
    There are many things I love about p5.js such as the online community and
    beginner friendliness. What I really like right now is the
  project-a-3-2-chung: >-
    , with which I can not only work online for myself but also share URLs
    quickly in the present mode. For this project in particular, I had to do a
    lot of testing on my phone, and it was much easier and quicker than
    committing to GitHub.
  project-a-4-1-chung: 'I had some troubles with handling font, alpha channel and z-depth in '
  project-a-4-2-chung: ' mode. I am still not happy with all my decisions. But in general, it was helpful to search the forum and not to forget to break down problems into smaller ones and iterate little by little. Also, I had issues with rendering out video files directly out of p5.js. Screen recording was not an option because of intermittent frame rate drops (my laptop is pretty slow). After doing some research, I decided to learn some basics of '
  project-a-4-3-chung: ' and build a tool for myself.'
  project-a-5-1-chung: >-
    As mentioned above, if you want to render out frames and video files out of
    p5.js sketches, check out my
  project-a-5-2-chung: ' and let me know what you think.'
  creator-from-casey-louise: 'From New York, New York'
  project-a-1-1-casey-louise: >-
    Casey: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces, physical and digital.
  project-a-1-2-casey-louise: >-
    Louise: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces based on sensor technologies.
  project-a-1-3-casey-louise: >-
    Casey: I started learning p5.js in 2018 in my first semester at ITP, though
    I had been dabbling in
  project-a-1-4-casey-louise: ' since 2012. I was introduced to Processing by my friend Pedro while I was studying graphic design, and it blew my mind. The idea of making my own tools for creating graphics and interactive art piqued my interest, but once I actually tried it, I was hooked. The first project I can remember was an eye that followed you around the screen, and it was sad when you left it alone.'
  project-a-1-5-casey-louise: >-
    Louise: I initially learned p5.js to make a website I was creating more
    playful. I’m a C# programmer, so this was a good segway into JavaScript for
    me.
  project-a-2-1-casey-louise: >-
    Casey: I was putting off learning shaders for a long time, and I was also
    curious if I could use them in p5.js. Then I heard about a grant for open
    source, storytelling, and learning resource projects at ITP called
  project-a-2-2-casey-louise: >-
    . Since I wasn't finding much in the way of p5.js + shader documentation, I
    decided to figure out how they're implemented in p5.js and create a resource
    for others to learn. When I told Louise about the project, she was
    immediately excited about learning and teaching shaders in p5.js. She's been
    great about making sure the project is a learning resource and not just a
    collection of examples.
  project-a-3-1-casey-louise: 'Casey: Does '
  project-a-3-2-casey-louise: ' count as a feature? I also love having the ability to share my programs on the web so that people don''t have to install special software or come to NYC to see my work.'
  project-a-3-3-casey-louise: 'Louise: My favorite feature is '
  project-a-3-4-casey-louise: ' and '
  project-a-3-5-casey-louise: ' for transformation of the coordinate system to make generative visuals.'
  project-a-4-1-casey-louise: >-
    Casey: The beginning of the project (figuring out how things work) was us
    reaching out to amazing people, asking questions, and asking for permission
    to use their examples in our project.
  adam-ferris-repo-casey-louise: Adam Ferriss' GitHub repo
  project-a-4-2-casey-louise: ' really laid the groundwork for us in understanding how shaders work in p5.js and provided a framework of approachable examples for us to build on. For some specific p5.js-related issues we were having, we reached out to '
  project-a-4-3-casey-louise: ' and '
  project-a-4-4-casey-louise: ' (who worked on the '
  webgl-casey-louise: WebGL implementation in p5.js
  project-a-4-5-casey-louise: '), and they were super helpful.'
  project-a-4-6-casey-louise: >-
    Louise: The learning curve was pretty steep for getting shaders into p5.
    Luckily, there were some very well-documented examples on GitHub by Adam
    Ferriss. Our aim was to do so in a way that a complete beginner can
    understand how to implement it, so it was as much a technical challenge as
    it was a challenge in teaching code to strangers and beginners. Here we drew
    inspiration from the way the
  openframeworks-book-casey-louise: openFrameworks book
  project-a-4-7-casey-louise: ' is written. A fun "hey, it’s not hard and you can do it too" approach is what we believe in.'
  project-a-5-1-casey-louise: 'Check out the '
  project-a-5-2-casey-louise: ' to explore our peers'' amazing grant projects!'
  pronouns-nonbinary: (they/them)
  creator-from-moon: 'From Athens, Georgia'
  posters-by: Posters By
  project-a-1-1-moon: >-
    Moon: I'm a graphic designer, visual artist, and design educator. This
    summer, I taught a graphic design course in the University of Georgia
    Cortona program in Italy, introducing some basics of p5.js. This fall, I am
    planning to teach and to study digital platforms at UGA.
  project-a-1-2-moon: 'My former colleague, '
  project-a-1-3-moon: ', invited me to '
  project-a-1-4-moon: ' in '
  pcd-la-moon: LA in January 2019
  project-a-1-5-moon: >-
    . They helped me with the tools and logics of p5.js. It was an excellent
    teaching and learning experience.
  project-a-2-1-moon: 'We followed basic tutorials, '
  codetrain-moon: Daniel's videos on YouTube
  project-a-2-2-moon: ', and '
  p5-reference-moon: Reference on the p5.js website
  project-a-2-3-moon: .
  project-a-3-1-moon: 'My favorite function is related to '
  project-a-3-2-moon: ' and '
  project-a-3-3-moon: ': '
  project-a-3-4-moon: >-
    . I was able to use and to teach this tool to visualize various ideas about
    time in motion.
  project-a-4-1-moon: >-
    It was challenging for me, a beginner, to understand the overall structure
    of p5.js and how code works in general. I had to repeat the p5.js basics a
    couple of times, and then I drew a chart to memorize and to teach the way I
    understood the p5.js structure and code with strong constraints I set up. It
    was an excellent teaching and learning experience.
  project-a-5-1-moon: 'Check out the '
  project-a-5-2-moon: ' in Milan, Italy.'
teach:
  teach-title2: Teach
  teach-intro1: >-
    Every teaching has its own unique goals, messages, conditions, and
    environments.
  teach-intro2: >-
    By documenting and sharing p5 workshops, classes, and materials, we hope to
    better connect the p5.js learner and educator communities around the world.
  teach-intro3: Share or recommend
  teach-intro4: 'your own teaching experiences, too!'
  teach-heading: p5 Teaching Resources
  teach-search-filter: Search Filter
  teach-filter1: 'Diversity & Inclusion : '
  teach-filter1-label1: Gender
  teach-filter1-label2: Race & Ethnicity
  teach-filter1-label3: Language
  teach-filter1-label4: Neuro-Type
  teach-filter1-label5: Ability
  teach-filter1-label6: Class
  teach-filter1-label7: Religion
  teach-filter1-label8: (Sub-)Culture
  teach-filter1-label9: Political Opinion
  teach-filter1-label10: Age
  teach-filter1-label11: Skill Level
  teach-filter1-label12: Occupation
  teach-filter1-label13: '#noCodeSnobs'
  teach-filter1-label14: '#newKidLove'
  teach-filter1-label15: '#unassumeCore'
  teach-filter1-label16: '#BlackLivesMatter'
  teach-filter2: 'Venue : '
  teach-filter2-label1: Africa
  teach-filter2-label2: Asia
  teach-filter2-label3: Europe
  teach-filter2-label4: North America
  teach-filter2-label5: Oceania
  teach-filter2-label6: South America
  teach-filter2-label7: 'Virtual-Online '
  teach-filter3: 'Year : '
  teach-filter4: 'Level of Difficulty : '
  teach-filter4-label1: Elementary
  teach-filter4-label2: Intermediate
  teach-filter4-label3: Advanced
  teach-case-subtitle1: Venue & Date
  teach-case-subtitle2: Participants
  teach-case-subtitle3: Level of Difficulty
  teach-case-subtitle4: Goals
  teach-case-subtitle5: Method & Materials
  teach-case1-title: Introduction to Video Game Programming in High School with p5.js
  teach-case1-lead-name: Emanuele Bolognesi
  teach-case1-image-alt: A group photo of 25 students with their teacher
  teach-case1-content1: '📍 High School Russell-Newton, Scandicci (FI), Italy. '
  teach-case1-content1-1: '02/06/2022 ~ 04/10/2022 every Saturday 10:00-11:00'
  teach-case1-content2: 25 students (15-16 years old) of an Italian High School. 11 girls and 14 boys
  teach-case1-content3: ' Elementary'
  teach-case1-content4: Introduce 10th grade students to simple video game programming using javascript and p5.js
  teach-case1-content5: 'Method: p5.js web editor'
  teach-case1-content5-1: The
  teach-case1-content5-2: works
  teach-case1-content5-3: of the students
  teach-case2-title: Fractal implementations
  teach-case2-lead-name: Mariana
  teach-case2-content1: 'Mars'
  teach-case2-content1-1: '06.02.2022 15:00~15:30'
  teach-case2-content2: 15
  teach-case2-content3: ' Advanced'
  teach-case2-content4: Introduce the theme of fractals and use p5js to implement them
  teach-case2-content5: 'Just '
  teach-case3-title: Introduction to Computational Media with p5.js
  teach-case3-lead-name: Barry Voeten
  teach-case3-content1: 'school'
  teach-case3-content1-1: 'entire course'
  teach-case3-content2: Dutch school kids, age 14-15
  teach-case3-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case3-content4: education
  teach-case3-content5: 'Syllabus'
  teach-case4-title: Calculadora de IMC
  teach-case4-lead-name: Dayana 
  teach-case4-content1: 'Youtube'
  teach-case4-content1-1: '00h: 30min'
  teach-case4-content2: Inscritos no canal do youtube, houveram 18 vizializações.
  teach-case4-content3: ' Elementary, Iniciante'
  teach-case4-content4: Auxiliar pessoas que estao iniciando na programação.
  teach-case4-content5: 'Editor Web do p5.js , Tutorial no youtube'
  teach-case5-title: Taller de Creative Coding
  teach-case5-lead-name: Federico Santana
  teach-case5-image-alt: Screen shot of the teacher is teaching on p5.js web editor online
  teach-case5-content1: 'https://www.twitch.tv/snowflakeFede'
  teach-case5-content1-1: 'every saturday 19:00-20:30PM (timezone: GMT-3)'
  teach-case5-content2: Soy yo nada más, pero me gusta invitar personas para programar en vivo cuando puedo. 
  teach-case5-content3: ' Elementary'
  teach-case5-content4: Hacer que más personas aprendan sobre el arte creativo y, a su vez, poder ir acercandolas al mundo de la matemática, todo en español. El curso está fuertemente inspirado en "The coding train" pero con acercamiento que va a la matemática y el arte creativo en su conjunto.
  teach-case5-content5: 'Sólo una colección de p5js donde subo los ejemplos que se hacen en vivo, acá:'
  teach-case6-title: '50+ CODING CLUB: MY VERY FIRST CODE ART WITH HANDY(🖐) AND FAMILY(👩‍👧‍👦)'
  teach-case6-lead-name: Inhwa Yeom
  teach-case6-image-alt: In-class photo 
  teach-case6-content1: 'Asia Culture Center, Gwangju, South Korea'
  teach-case6-content1-1: '27/11/2020~ 12/2020 every Friday and Saturday 2:00-4:00'
  teach-case6-content2: People who identify themselves as older adults (average age = 62.54), and their companions of all ages.
  teach-case6-content3: ' Elementary'
  teach-case6-content4: p5 for 50+ aims to enhance the digital literacy and rights of people going on 50+
  teach-case6-content5: 'p5 editor, p5for50+ web app, p5js.org, print out of code results'
  teach-case7-title: Introduction to p5js
  teach-case7-lead-name: Bérenger Recoules a.k.a b2renger
  teach-case7-image-alt: example picture
  teach-case7-content1: L'École de Design Nantes Atlantique - France
  teach-case7-content1-1: from 2018 and ongoing
  teach-case7-content2: Students from l'école de design Nantes Atlantique
  teach-case7-content3: ' Elementary'
  teach-case7-content4: get to know p5js and its functionalities (dom, audio, webgl etc.)
  teach-case7-content5: 'github readme : this a text tutorial to read in French.'
  teach-case8-title: I am starting a new one - 
  teach-case8-lead-name: Brinder Soin
  teach-case8-content1: 'New Jersey'
  teach-case8-content1-1: '12/28 - 12/30'
  teach-case8-content2: About 100 students from grades 7, 8 and 9 from various schools and locations.
  teach-case8-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case8-content4: Keeping children safe and learning in the time of covid and promote STEM education
  teach-case8-content5: 'Teacher created notes and worksheets and IDE p5 web editor'
  teach-case9-title: Programación Aplicada al Arte Visual e Interactivo
  teach-case9-lead-name: Sebastián Zavatarelli
  teach-case9-image-alt: A zoom class sharing p5.js web editor 
  teach-case9-content1: 'Buenos Aires, Argentina. Plataforma ZOOM'
  teach-case9-content1-1: '15/09/2020 ~ 14/10/2020 every Wednesday 6:30-9:00PM)'
  teach-case9-content2: Alrededor de 10 personas. La mayoría mujeres.
  teach-case9-content3: ' Elementary,  Intermediate'
  teach-case9-content4: El curso está destinado a artistas que quieran comenzar a utilizar las herramientas tecnológicas actuales para el desarrollo de sus obras. También puede ser aprovechado por aquellxs que quieran iniciarse en la programación de computadoras a través de un entorno de programación simple, visual, accesible y divertido.
  teach-case9-content5: 'p5.js web editor. Online a trvés de plataforma ZOOM y material subido en moodle'
  teach-case10-title: Painting with Code
  teach-case10-lead-name: Andreas Refsgaard
  teach-case10-content1: 'Copenhagen, Denmark'
  teach-case10-content1-1: '22/02/2020'
  teach-case10-content2: Participants were people . A wide range of people from 
  teach-case10-content3: ' Intermediate'
  teach-case10-content4: Get creatives, designers, artists and other people who don't typically use code introduced to p5.js
  teach-case10-content5: 'Website, p5.js editor'
  teach-case11-title: Signing Coders
  teach-case11-lead-name: Taeyoon Choi
  teach-case11-content1: 'BRIC, New York City.  USA
  Seoul Museum of Art, Seoul, South Korea.'
  teach-case11-content1-1: '5 Sessions, each 2~3 hours'
  teach-case11-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case11-content3: ' Elementary'
  teach-case11-content4: To help Deaf and Hard of Hearing students learn about computer programming through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case11-content5: 'We used p5.js Web editor and code examples on the website. 
  We also used dice, playing cards and various paper tools to help students learn about coding concepts. '
  teach-case12-title: Digital Weaving & Physical Computing Workshop Series
  teach-case12-lead-name: Qianqian Ye
  teach-case12-image-alt: In-class photo
  teach-case12-content1: 'Women’s Center for Creative Work, Los Angeles, CA, US'
  teach-case12-content1-1: '19/10/2019 ~ 02/11/2019, every Saturday 3-6pm'
  teach-case12-content2: 15 women and non-binary artists, designer, makers, programers. 
  teach-case12-content3: ' Elementary'
  teach-case12-content4: Over the course of three workshops, we’ll draw and create patterns using p5.js, an open-source graphical library; we’ll learn and apply computational concepts to transform patterns and finally, we’ll bring a weaving to life with electronic microcontrollers. 
  teach-case12-content5: 'Materials: Slides, p5.js web editor, pen and paper to draw pattern, physical pattern weaving tool
  Methods: small team session'
  teach-case12-content5-1: "Slides we used for the workshop:"
  teach-case13-title: p5.js à l'Ubuntu Party!
  teach-case13-lead-name: Basile Pesin
  teach-case13-content1: '2020 Ubuntu Party '
  teach-case13-content1-1: Cité des Sciences et de l''Industrie, Paris, France
  teach-case13-content2: 'Any age, including children and parents, young and older adults.'
  teach-case13-content3: Advanced
  teach-case13-content4: >-
    To introduce a new public to programming through fun and compelling
    examples.
  teach-case13-content5: >-
    Method: in-person workshop, 1 hour per session, with different participant
    each times. The students were using (Ubuntu) machines with the p5.js web
    editor. I was teaching using a video projector as well as a board.
  teach-case13-content5-1: >-
    Materials: The exercises I gave where accessible through p5.js web-editor
    links available in
  teach-case14-title: >-
    Making The Thing that Makes the Thing: Exploring Generative Art & Design
    with p5.js
  teach-case14-lead-name: Priti Pandurangan & Ajith Ranka
  teach-case14-image-alt: A group of participants collaborating to create some designs using the p5.js web editor on their laptops.
  teach-case14-content1: 'National Institute of Design, Bangalore'
  teach-case14-content1-1: '2020 February 8, 2:30-4:00 PM'
  teach-case14-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case14-content3: 'Priti: Intermediate & Ajith: Advanced'
  teach-case14-content4: >-
    To explore generative art &#x0026; design and recreate some classical works
    with p5.js.
  teach-case14-content5: 'Methods: In-person, collaborative, hands-on workshop.'
  teach-case14-content5-1: 'Materials: '
  teach-case14-content5-2: 'course page '
  teach-case14-content5-3: 'linking to sketches on the p5 editor, '
  teach-case14-content5-4: 'interactive reference guide '
  teach-case14-content5-5: to p5 basics
  teach-case15-title: CC Fest (Creative Coding Festival)
  teach-case15-lead-name: Saber
  teach-case15-speech: 'Love p5.js. It has meant so much to me, my students, and this community.'
  teach-case15-content1: ' New York, Los Angeles, San Francisco, Virtual-Online '
  teach-case15-content1-1: ' Twice a year in NYC for four years; once a year in LA for three years; once a year in SF for two years; now virtual'
  teach-case15-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case15-content3: Intermediate
  teach-case15-content4: >-
    To build a teacher and student community around p5 for middle and high
    school.
  teach-case15-content5: >-
    A half-day of workshop led by volunteer teachers. We saw lots of different
    methods and materials. Most used some sort of slides or documentation, some
    live coding using an editor, with work time for participant to remix.
  teach-case15-content5-1: CC Fest Lessons page
  teach-case15-content5-2: ' for teaching materials'
  teach-case15-content5-3: More photos
  teach-case16-title: Taller Introducción a la Programación Creativa con p5.js
  teach-case16-lead-name: Aarón Montoya-Moraga
  teach-case16-image-alt: A group of 20 people sitting on a large shared table with their laptops looking at a projected screen.
  teach-case16-speech: 'p5.js is my happy place '
  teach-case16-content1: ' PlusCode Media Arts Festival, Buenos Aires, Argentina & Virtual-Online '
  teach-case16-content1-1: ' 2018 November 14, 3 hours'
  teach-case16-content2: >-
    I had around 16 students in the workshop, and a team including 3 people from
    the PlusCode festival, and one person at the venue.
  teach-case16-content3: 'Elementary, Intermediate, Advanced'
  teach-case16-content4: >-
    Introduction to beginners and artists of graphic web programming and open
    source, using p5.js, in Spanish :)
  teach-case16-content5: 'I used the material on this '
  teach-case16-content5-1: GitHub repo
  teach-case16-content5-2: ', we used the p5.js web editor, we had a three hour long workshop'
  teach-case16-content5-3: '+CODE electronic art festival 2018, Argentina'
  teach-case16-content5-4: ', Medium'
  teach-case17-title: Introduction to Generative Drawing
  teach-case17-lead-name: Adam Herst
  teach-case17-speech: >-
    My greatest source of uncertainty in developing the workshop was whether it
    was trying to teach art to programmers or to teach programming to artists.
  teach-case17-content1: Inter/Access
  teach-case17-content1-1: ' (artist-run centre), Toronto, Ontario, Canada'
  teach-case17-content1-2: In-person with a self-paced workbook for remote work
  teach-case17-content1-3: ' 2020 February 12, 7PM-9PM'
  teach-case17-content2: 15 artists
  teach-case17-content3: Elementary
  teach-case17-content4: >-
    To introduce p5.js to artists with little or no programming experience and
    to suggest one way an analogue practice can migrate to a digital form.
  teach-case17-content5: >-
    A printed workbook with activities that used the p5.js web editor to show
    how translate an physical drawing into a digital drawing.
  teach-case17-content5-1: 'Processing Community Day 2019: Generative Drawing at Inter/Access'
  teach-case17-content5-2: Introduction to Generative Drawing Letter PDF
  teach-case17-content5-3: Introduction to Generative Drawing Booklet PDF
  teach-case18-title: 'Open Lecture, Creative Coding: 2020'
  teach-case18-lead-name: Shunsuke Takawo
  teach-case18-image-alt: A table on which there is a laptop, some sheets of papers, colorful pens and two automatic machines drawing something with a pen on a sheet.
  teach-case18-speech: >-
    I love p5.js because it's so easy to read and write code in p5.js. Coding in
    your everyday life!
  teach-case18-content1: ' Kyoto University of Art and Design, Kyoto, Japan & Virtual-Online '
  teach-case18-content1-1: ' 2020 March 16-18, 1-7 PM'
  teach-case18-content2: 'Students of Kyoto University of Art and Design, and anyone.'
  teach-case18-content3: Elementary
  teach-case18-content4: Making code as a tool for artistic expression.
  teach-case18-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case18-content5-1: Syllabus
  teach-case18-content5-2: Day 1
  teach-case18-content5-3: Day 2
  teach-case18-content5-4: Day 3
  teach-case18-content5-5: ', YouTube'
  teach-case19-title: Creative Coding for Static Graphics
  teach-case19-lead-name: Shunsuke Takawo
  teach-case19-speech: >-
    Coding in p5.js is a lot of fun. If you haven't started yet, I encourage you
    to give it a try!
  teach-case19-content1: ' FabCafe MTRL, Tokyo, Japan'
  teach-case19-content1-1: ' 2019 September 15, 4-7 PM '
  teach-case19-content2: Anyone who wants to try coding in p5.js.
  teach-case19-content3: Intermediate
  teach-case19-content4: To code from the graphic design's perspective.
  teach-case19-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case19-content5-1: Syllabus & Material
  teach-case20-title: Generative Typography
  teach-case20-lead-name: Dae In Chung
  teach-case20-image-alt: A image with black background displaying the letter 'b' in 5 different styles along with a menu with various styling options to choose.
  teach-case20-content1: ' Baltimore, Maryland, USA & Virtual-Online '
  teach-case20-content1-1: ' 2019 January 21 - May 08, every Wednesday, 4-10 PM'
  teach-case20-content2: 14 undergrads and grad students who had little to no experience in coding.
  teach-case20-content3: Elementary
  teach-case20-content4: Experiment with typographic forms and structures through computation.
  teach-case20-content5: 'Methods: online/offline lectures and critiques.'
  teach-case20-content5-1: 'Materials: p5js online editor, Github, youtube tutorials.'
  teach-case20-content5-2: Works of participants
  teach-case21-title: Machine Learning for the Web
  teach-case21-lead-name: Yining Shi
  teach-case21-image-alt: A group of 16 people sitting around tables with their laptops, mobile phones and some other accessories, facing towards a large television screen.
  teach-case21-content1: ' ITP, NYU, 370 Jay St, Brooklyn, NY 11201, USA'
  teach-case21-content1-1: '2019 March 09 - October 12, every Tuesday, 6:30-9:00 PM'
  teach-case21-content2: >-
    Students at Interactive Telecommunications Program, New York University. 16
    people.
  teach-case21-content3: 'Elementary, Intermediate'
  teach-case21-content4: >-
    The goal of this class is to learn and understand common machine learning
    techniques and apply them to generate creative outputs in the browser using
    ml5.js and p5.js.
  teach-case21-content5: >-
    This class is a mix of lectures, coding sessions, group discussions, and
    presentations. I used
  teach-case21-content5-1: GitHub
  teach-case21-content5-2: ' to host class syllabus and all the coding materials, Google Slides for lectures and p5.js Web Editor for live coding sessions. Every week, there were one-on-one office hours to talk about any difficulties of coming up with an idea for the homework or any coding changes.'
  teach-case21-content5-3: 'Methods: online/offline lectures and critiques.'
  teach-case22-title: Introduction to p5.js and JavaScript
  teach-case22-lead-name: Nico Reski
  teach-case22-content1: ' Currently available as self-study at own pace with accompanying slides, linked below.'
  teach-case22-content3: 'Beginner, Elementary'
  teach-case22-content4: >-
    Introduce learners (potentially with no coding experiences at all) to the
    very basics of p5.js (and JavaScript), in order to encourage creative coding
    and enable them to pursue own projects in a safe environment.
  teach-case22-content5: >-
    p5.js source code (for the introductory project), JavaScript source code
    (illustrating some basic JavaScript functionalities), accompanying slides in
    .pdf format, all hosted publicly on GitHub.
  teach-case22-content5-1: Overview
  teach-case22-content5-2: ' of the workshop and its contents (including all links to the material hosted on GitHub) on my academic webpage.'
  teach-case23-title: Digital Weaving & Physical Computing Workshop Series
  teach-case23-lead-name: Qianqian Ye & Evelyn Masso
  teach-case23-image-alt: This image is divided in two parts. The left part shows a group of 15 women sitting on chairs with their laptops and looking at a presentor who is explaining a code on a projected screen. The right part of the image shows a person learning weaving using a physical pattern and a weaving tool.
  teach-case23-content1: ' Womens Center for Creative Work (WCCW), Los Angeles, CA, US'
  teach-case23-content1-1: ' 2019 October 19 - November 02, every Saturday 3-6 PM'
  teach-case23-content2: '15 women and non-binary artists, designer, makers, programers. '
  teach-case23-content3: Elementary
  teach-case23-content4: >-
    Over the course of three workshops, we will draw and create patterns using
    p5.js, an open-source graphical library; we will learn and apply
    computational concepts to transform patterns and finally, we will bring a
    weaving to life with electronic microcontrollers.
  teach-case23-content5: 'Methods: small team session'
  teach-case23-content5-1: >-
    Materials: slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool.
  teach-case23-content5-2: 'Workshop Slide #1'
  teach-case23-content5-3: 'Workshop Slide #2'
  teach-case23-content5-4: Workshop Information
  teach-case23-content5-5: ' on WCCW website.'
  teach-case24-title: Signing Coders
  teach-case24-lead-name: Taeyoon Choi
  teach-case24-image-alt: Two volunteers explaining concepts using a white board and a screen to a bunch of deaf and hard of hearing students, each student facing a computer screen.
  teach-case24-speech: >-
    I'm working on a new series of coding class for Disabled students in South
    Korea. I'm researching about the pedagogy and translation. I plan to hold
    workshops in December 2020. The project is supported by the Open Society
    Foundation Human Rights Initiative and Korea Disability Arts & Culture
    Center.
  teach-case24-content1: ' WRIC, New York City, USA & Seoul Museum of Art, Seoul, South Korea.'
  teach-case24-content1-1: '5 Sessions, each 2~3 hours'
  teach-case24-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case24-content3: Elementary
  teach-case24-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case24-content5: >-
    We used p5.js Web editor and code examples on the website. We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts.
  teach-case24-content5-1: Syllabus & Material
  teach-case24-content5-2: More photos
  teach-workshops-heading: Upcoming Workshops
  teach-workshop1-title: CC Fest (Creative Coding Festival)
  teach-workshop1-time: 'May 2023, every Sunday 5-8pm'
  teach-workshop2-title: 'Making The Thing that Makes the Thing: Exploring Generative Art & Design with p5.js'
  teach-workshop2-time: 'March 2023, every Saturday 2-6pm'
  teach-workshop3-title: p5.js à l'Ubuntu Party!
  teach-workshop3-time: 'May 2023, every Sunday 5-8pm'
