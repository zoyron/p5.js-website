Skip-To-Content: Vai al contenuto
Language-Settings: Impostazioni della lingua
Sidebar-Title: Navigazione del sito
Home: Home
Editor: Editor
Download: Download
Donate: Donare
Start: Iniziare
Reference: Riferimenti
Libraries: Librerie
Learn: Imparare
Examples: Esempi
Books: Libri
Community: Community
Contribute: Contribuire
Forum: Forum
Showcase: Showcase
footerxh1: Meriti
footer1: 'p5.js è stato creato da '
footer3: ' e '
footer4: 'Web identity e graphic design di '
tagline1: il divertimento di Processing x l&apos;eccentricità di JavaScript
tagline2: la semplicità di Processing x la flessibilità di JavaScript
tagline3: l&apos;intuizione di Processing x il potere di JavaScript
tagline4: la creatività di Processing x la dinamicità di JavaScript
tagline5: la community di Processing x la community di JavaScript
tagline6: il potere di Processing x la portata di JavaScript
tagline7: La p5.js community esprime solidarietà con il movimento Black Lives Matter.
home:
  search-bar: Cerca su p5js.org
  blmnamelistending: 'e tanti altri, troppi da elencare qui...'
  blmstatement1: >-
    Questo sito è attualmente offline, come piccolo segno di rispetto e di
    solidarietà. La 
  blmstatement2: rimane disponibile.
  blmstatement3: 'Please consider donating to '
  blacklivesmatter: Black Lives Matter
  naacp: The NAACP Legal Defense and Educational Fund
  equaljustice: The Equal Justice Initiative
  bailfund: your local bail fund
  floydmemorial: George Floyd Memorial Fund
  start-creating: Inizia a creare con il p5 Editor!
  p1xh1: Ciao!
  p1x1: >-
    p5.js è una libreria JavaScript per il creative coding, che cerca di rendere
    la programmazione accessibile e inclusiva per artisti, designer, insegnanti,
    principianti e chiunque altro! p5.js è gratuito e open-source perchè
    crediamo che i software, e gli strumenti per imparare ad usarli, dovrebbero
    essere accessibili a tutti.
  p1x2: >-
    Usando la metafora di uno sketch, p5.js ha un set completo di funzionalità
    per disegnare. Non sei però limitato a dipingere nella tua tela. Puoi
    considerare l&apos;intera pagina del browser come un tuo sketch, inclusi gli
    oggetti HTML5 per testo, input, video, webcam e suono.
  p2xh2: Community
  p2x1: >-
    Siamo una community di, e in solidarietà con, persone di ogni identità ed
    espressione di genere, orientamento sessuale, razza, etnia, lingua, neuro
    tipo, taglia, disabilità, classe, religione, cultura, sottocultura, opinione
    politica, età, livello di abilità, occupazione, e origine. Riconosciamo che
    non tutti hanno il tempo, i mezzi finanziari o la capacità di partecipare
    attivamente, ma riconosciamo e incoraggiamo il coinvolgimento di tutti i
    tipi. Ci impegniamo a promuovere l&apos;eliminazione degli ostacoli e il
    potenziamento delle capacità. Siamo tutti studenti.
  p2x2: 'p5.js è un&apos;interpretazione di '
  p2x3: ' per il web di oggi. Organizziamo eventi e lavoriamo con il supporto della '
  p2x4: .
  p2x5: 'Scopri di più sulla '
  p2x6: nostra community
  p2x7: .
  p3xh2: Iniziare
  p3xp1: 'Realizza il tuo primo sketch nel '
  p3xp2: '. Scopri di più su come disegnare con p5.js nella '
  p3xp3: pagina iniziale.
  p3xp4: ' e tutto quello che puoi fare nei '
  p3xp5: Riferimenti
  p3xp6: .
  p4xh2: Partecipare
  p4xp1: 'Ci sono molti modi in cui puoi contribuire a p5.js:'
  p4xp2: Opzioni di partecipazione
  p4xp3: Condividi qualcosa che hai creato!
  p4xp4: Tieni un corso o un laboratorio.
  p4xp5: Organizza un incontro.
  p4xp6: Contribuisci al codice.
  sketch_by: di
  sketch_info: Sketch sulla Homepage sketch tratto dal lavoro della liceale Grace Obergfell
  sketch_info_link: >-
    CC Fest NYC, 8 giugno, un evento di programmazione gratuito e inclusivo per
    studenti ed insegnanti
copyright:
  copyright-title: Informazioni di Copyright
  copyright1: >-
    La libreria p5.js è software libero; lo si può redistribuire e/o modificare
    in base ai termini della 
  copyright2: ' come pubblicata dalla Free Software Foundation, versione 2.1.'
  copyright3: 'La sezione Riferimenti è sotto una licenza '
  copyright4: ' il che permette di riusare questo contenuto per fini non commerciali, se si concede il dovuto riconoscimento.'
get started:
  get-started-title: Iniziare
  get-started1: >-
    Questa pagina ti guida nella configurazione di un progetto p5.js e nella
    realizzazione del tuo primo sketch.
  get-started2: Il modo più semplice per iniziare è utilizzando l&apos;
  get-started3: editor p5.js
  get-started4: ', puoi aprire il web editor e andare alla sezione '
  get-started5: Il tuo Primo Sketch
  get-started6: '. Se desideri lavorare sulla versione desktop di p5.js, puoi andare sulle '
  get-started7: istruzioni di download
  settingUp-title: Configurare p5.js con un editor sul tuo computer
  download-title: Scaricare una copia della libreria p5.js
  hosted-title: Utilizzare una versione hosted della libreria p5.js
  download1: >-
    Il modo più semplice per iniziare è usando l&apos;esempio vuoto incluso nel
    download del 
  download2: p5.js completo
  download3: .
  download4: >-
    Se guardi nell&apos;index.html, noterai che contiene un link al file p5.js.
    Se desideri usare la versione minified (compressa per far caricare le pagine
    più rapidamente), cambia il link in p5.min.js.
  download5: >-
    In alternativa, puoi linkare ad un file p5.js online. Tutte le versioni di
    p5.js sono salvate in un CDN (Content Delivery Network). Puoi trovare la
    cronologia di queste versioni nel 
  download6: '. In questo caso puoi modificare il link in:'
  download7: 'Una pagina HTML d&apos;esempio potrebbe essere simile a questa:'
  download8: 'Può anche iniziare con questo '
  download9: ' modello.'
  environment-title: Ambiente di sviluppo
  environment1: >-
    Per eseguire p5.js sul tuo computer avrai bisogno di un editor di testo.
    Puoi usare l&apos; 
  environmentlink: 'https://it.wikipedia.org/wiki/Editor_di_testo'
  environment2: ' editor '
  environment3: 'che preferisci. Le istruzioni per la configurazione di '
  environment4: ' sono incluse qui sotto, altre valide opzioni sono '
  environment5: ' e '
  environment6: >-
    Se utilizzi uno screen reader e non usi il p5 web editor, ti consigliamo di
    scegliere 
  environment7: ' o '
  environment8: >-
    Avvia Sublime. Vai sul menu File e clicca Open... e seleziona la cartella in
    cui si trovano i tuoi file html e js. Sulla barra laterale sinistra troverai
    il nome della cartella sulla parte superiore, e la lista dei file contenuti
    nella cartella in basso.
  environment9: >-
    Clicca sul tuo file sketch.js e questo si aprirà sulla destra, dove potrai
    modificarlo. 
  environment10: il codice di avvio p5 nell&apos;editor sublime.
  environment11: >-
    Apri il file index.html con il tuo browser facendo doppio-click su di esso o
    scrivendo:
  environment12: 'file:///il/percorso/del/tuo/file/html'
  environment13: ' nella barra di indirizzo, per visualizzare il tuo sketch.'
  your-first-sketch-title: Il Tuo Primo Sketch
  your-first-sketch-intro1: 'Nel '
  your-first-sketch-intro2: 'https://editor.p5js.org/'
  your-first-sketch-intro3: web editor p5.js
  your-first-sketch-intro4: ' troverai il seguente codice:'
  your-first-sketch1: 'Dopo '
  your-first-sketch2: ' aggiungi questa riga di codice: '
  your-first-sketch3: 'Ora il tuo codice dovrebbe apparire così: '
  your-first-sketch4: >-
    La riga che hai appena aggiunto disegna un&apos;ellisse, il cui centro si
    trova a 50 pixel da sinistra e 50 pixel dall&apos;alto, e di larghezza e
    altezza pari a 80 pixel.
  your-first-sketch5: Nell&apos;editor premi play per eseguire il tuo codice!
  your-first-sketch6: >-
    Se stai usando uno screen reader, devi attivare gli output accessibili
    nell&apos;editor, al di fuori dell&apos;editor devi aggiungere la libreria
    di accessibilità al tuo html. Per saperne di più visita il 
  your-first-sketch7: tutorial per usare p5 con uno screen reader
  your-first-sketch8: >-
    Se hai scritto tutto correttamente, ti apparirà questo sulla finestra di
    visualizzazione:
  your-first-sketch9: >-
    canvas ha un cerchio di larghezza e altezza pari a 50 in posizione 80 x e 80
    y
  your-first-sketch10: >-
    Se non appare nulla l&apos;editor potrebbe avere difficoltà a capire cosa
    hai scritto. In quel caso assicurati di aver copiato bene il codice di
    esempio: i numeri devono essere contenuti nelle parentesi e separati da
    virgole, la riga deve terminare con un punto e virgola, e la parola
    "ellipse" deve essere scritta correttamente in inglese.
  your-first-sketch11: >-
    Una delle cose più difficili di iniziare a programmare è che bisogna essere
    molto precisi con la sintassi. Il browser non capisce sempre cosa vuoi dire
    ed è molto pignolo sulla punteggiatura. Con un po&apos; di pratica ci farai
    l&apos;abitudine. In basso a sinistra dell&apos;editor troverai la sezione
    console. Lì troverai dei messaggi dell&apos;editor con i dettagli
    riguardanti gli errori che si sono verificati.
  your-first-sketch12: >-
    Ora creiamo uno sketch un po&apos; più interessante. Modifica l&apos;ultimo
    esempio e prova questo:
  your-first-sketch13: >-
    Questo programma crea una canvas di dimensione 400 pixel in larghezza e
    altezza, poi inizia a disegnare cerchi nella posizione del mouse. Quando il
    tasto del mouse viene premuto il colore del cerchio diventa nero. Esegui il
    codice, muovi il mouse e clicca per provarlo.
  your-first-sketch14: canvas ha diversi cerchi disegnati che seguono il percorso del mouse
  first-sketch-heading1: Porzione di codice con ellisse
  first-sketch-heading2: Messaggio per coloro che utilizzano gli screen reader
  first-sketch-heading3: Porzione di codice con interazione
  what-next-title: E ora?
  learn1: 'Dai un&apos;occhiata alle pagine '
  learn2: Imparare
  learn3: ' ed '
  learn4: Esempi
  learn5: ' per ulteriori informazioni.'
  learn6: 'Guarda i video tutorial di '
  learn7: The Coding Train
  learn8: ' e '
  learn9: Kadenze
  learn10: .
  reference1: 'Visita i '
  reference2: ' Riferimenti'
  reference3: ' per leggere la documentazione completa.'
  learn11: 'Se vuoi utilizzare p5 con uno screen reader, visita il tutorial '
  learn12: p5 con uno screen reader
  processing-transition1: 'Se hai usato Processing in passato, leggi il '
  processing-transition2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  processing-transition3: tutorial di transazione da Processing
  processing-transition4: ' per imparare a convertire Processing in p5.js, e le differenze principali tra di loro.'
  book1: >-
    Parti di questo tutorial sono state adattate dal libro Getting Started with
    p5.js, di Lauren McCarthy, Casey Reas, e Ben Fry, O&apos;Reilly / Make 2015.
    Copyright © 2015. Tutti i diritti riservati. Ultima modifica alla Conferenza
    dei Contribuenti p5.js 2019.
download:
  Download: Download
  download-intro: >-
    Benvenuto! Anche se è intitolata "Download" questa pagina contiene in realtà
    una raccolta di link per scaricare la libreria o per iniziare a lavorare
    online. Abbiamo provato a ordinare le cose partendo da quello che potrebbe
    servire ad un principiante, per poi arrivare alle risorse destinate ai
    programmatori più esperti.
  editor-title: Editor
  p5.js-editor: Editor p5.js
  p5.js-editor-intro: >-
    Questo link ti reindirizza all&apos;Editor p5.js online, così potrai
    iniziare ad usare p5.js immediatamente.
  editor-includes: >-
    Inizia a programmare usando l&apos;Editor p5.js, senza bisogno di
    installazione!
  complete-library-title: Libreria completa
  complete-library-intro1: >-
    Questo download comprende il file della libreria p5.js, la componente
    aggiuntiva p5.sound, e un progetto esempio. Non contiene un editor. Visita 
  complete-library-intro2: Iniziare
  complete-library-intro3: ' per imparare a impostare un progetto p5.js.'
  p5.js-complete: p5.js completo
  includes-1: 'Comprende:'
  includes-2: 'p5.js, p5.sound.js, e un progetto esempio'
  includes-3: 'Versione '
  single-files-title: File Singoli
  single-files-intro: >-
    Questi sono download o link al file della libreria p5.js. Non sono inclusi
    contenuti aggiuntivi.
  single-file: 'File: '
  p5.js-uncompressed: Versione completa non compressa
  compressed: Versione compressa
  link: 'Link: '
  statically-hosted-file: File staticamente hosted
  etc-title: Risorse di Github
  older-releases: Versioni precedenti / registro dei cambiamenti
  github-repository: Repository del codice (GitHub)
  report-bugs: 'Segnala problemi, bug, e errori'
  supported-browsers: 'Browser supportati '
  support-title: Sostieni p5.js!
  support-options: Opzioni di Supporto
  support-1: >-
    We need your help! p5.js è gratuito e open-source. Vogliamo rendere la nostra community il più
    aperta e inclusiva possibile. You can support this work by making a donation to
    the 
  support-2: >-
    , the organization that supports p5.js.
    Your donation supports software development for p5.js, education resources
    like code examples and tutorials,
  support-3: borse di studio
  support-4: ', e '
  support-5: eventi per la community.
  support-17: >-
    Conferenza dei Contribuenti p5.js al CMU STUDIO for Creative Inquiry in
    Pittsburgh (Image credit: Taeyoon Choi)
  support-18: >-
    Saskia Freeke, stagista Processing, organizza i workshop Code Liberation x
    Processing a Londra (Image credit: Code Liberation Foundation)
  support-19: >-
    Conferenza Learning to Teach, Teaching to Learn in collaborazione con SFPC
    (Image credit: Kira Simon-Kennedy)
  support-20: >-
    Workshop di Cassie Tarakajian, stagista di Processing Foundation, al Code
    Art Miami (Image credit: Christian Arévalo Photography)
  support-21: >-
    Taeyoon Choi e un interpete della lingua dei segni al workshop Signing
    Coders p5.js (Image credit: Taeyoon Choi)
  support-22: 'Inizio di Google Summer of Code (Image credit: Taeyoon Choi)'
  support-23: >-
    Workshop di Cassie Tarakajian, stagista di Processing Foundation, al Code
    Art Miami (Image credit: Christian Arévalo Photography)
  support-24: >-
    Luisa Pereira e Yeseul Song contribuiscono alla realizzazione di un workshop
    p5.js in lingua dei segni condotto da Taeyoon Choi (Image credit: Taeyoon
    Choi)
  support-25: >-
    Conferenza dei Contribuenti p5.js al CMU STUDIO for Creative Inquiry in
    Pittsburgh (Image credit: Taeyoon Choi)
  support-26: >-
    Digital Citizens Lab, stagista Processing, organizza un panel
    sull&apos;insegnamento STEM all&apos;International Center of Photography
    (Image credit: International Center of Photography)
  support-27: >-
    Partecipanti al workshop p5.js a Santiago, Chile, condotto da Aarón
    Montoya-Moraga (Image credit: Aarón Montoya-Moraga.)
  support-28: >-
    Claire Kearney-Volpe contribuisce alla realizzazione di un workshop p5.js in
    lingua dei segni condotto da Taeyoon Choi (Image credit: Taeyoon Choi)
  support-29: >-
    DIY Girls, stagisti della Processing Foundation, realizzano un corso di
    programmazione creativa a Los Angeles (Image credit: DIY Girls)
  support-30: Processing Fellow Digital Citizens Lab
  support-31: Bicoastal p5.js meetup presso UCLA DMA e NYU ITP
  support-32: La Processing Foundation
  support-33: ' è stata fondata nel 2012 dopo oltre un decennio di lavoro con il software di Processing originale. La missione della fondazione è quella di promuovere l&apos;apprendimento di software nel campo delle arti visive, e la l&apos;apprendimento visuale nei campi legati alla tecnologia — e di rendere questi campi accessibili a diverse comunità. Il nostro obiettivo è di incoraggiare persone di tutti gli interessi o origini a imparare a programmare e creare opere creative con il codice, specialmente coloro che altrimenti non avrebbero accesso a questi strumenti e risorse.'
  support-17-alt: ''
  support-18-alt: ''
  support-19-alt: ''
  support-20-alt: ''
  support-21-alt: ''
  support-22-alt: ''
  support-23-alt: ''
  support-24-alt: ''
  support-25-alt: ''
  support-26-alt: ''
  support-27-alt: ''
  support-28-alt: ''
  support-29-alt: ''
  support-30-alt: ''
  support-31-alt: ''
learn:
  learn-title: Imparare
  learn1: >-
    Questi tutorial forniscono una panoramica più precisa e step-by-step di
    determinati argomenti. Dai un&apos;occhiata alle 
  learn2: pagine di esempio"
  learn3: per scoprire brevi dimostrazioni su vari argomenti p5.js.
  introduction-to-p5js-title: Introduzione a p5.js
  hello-p5js-title: Ciao p5.js
  hello-p5js: >-
    Questo breve video ti presenterà la libreria e tutto ciò che puoi realizzare
    con essa.
  getting-started-title: Iniziare
  getting-started: >-
    Benvenuto in p5.js! <br> Questa introduzione illustra le basi della
    creazione di un progetto p5.js.
  p5js-overview-title: panoramica di p5.js
  p5js-overview: Una panoramica delle caratteristiche principali di p5.js.
  p5js-processing-title: p5.js e Processing
  p5js-processing: >-
    Le differenze principali tra le due, e come effettuare una conversione da
    una all&apos;altra.
  p5-screen-reader-title: p5 con uno screen reader
  p5-screen-reader: >-
    Configurare p5 in modo che possa essere utilizzato facilmente con uno screen
    reader.
  accessible-labels-title: Writing accessible canvas descriptions
  accessible-labels: Using labels to make your code accessible to screen readers.
  accessible-labels-intro: Introduction
  accessible-labels-intro-1: >-
    In this tutorial, you'll learn how to use <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    , <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, 
    and <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>. These functions add labels to 
    your canvas so that it’s readable for screen readers and other assistive technologies.
  accessible-labels-what-is-labeling: What is labeling?
  accessible-labels-what-is-labeling-1: >-
    When you use the <a class = "code" href = "https://p5js.org/reference/#/p5/createCanvas">createCanvas()</a> function, you 
    create a canvas HTML element. This canvas element displays the image generated by your code as a bitmap (a raster graphic made up of pixels). 
    Unlike most HTML elements, the canvas doesn’t provide any description about its contents to screen readers. 
    That’s why we created the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions. 
    These functions add labels to your canvas that tell the screen reader how to describe it.
  accessible-labels-why-labeling-matters: Why labeling matters
  accessible-labels-why-labeling-matters-1: >-
    Screen readers (and text-to-speech software) are helpful for lots of people, <a href = "https://www.w3.org/WAI/perspective-videos/speech/" target="_blank" rel="noopener noreferrer">
    regardless of ability or context</a>. For example, a visually impaired person searching the web might use a screen reader to 
    understand the contents of a site. If a site’s code isn’t properly labeled for assistive technologies, 
    the screen reader software won’t be able to communicate what’s on the site to its user. Someone else 
    might be using a text-to-speech software because they have dyslexia and find listening to the site’s 
    content more comprehensible than reading it. There are also people who use these assistive software 
    to multi-task, so they can listen to an article on the web and wash dishes, or complete other chores. 
  accessible-labels-why-labeling-matters-2: >-
    No matter the purpose or person, making sure your code is readable by these assistive software allows 
    more people to engage with your work in meaningful ways.
  accessible-labels-available-labels: Available labeling functions
  accessible-labels-available-labels-1: p5.js offers four different functions for labeling your canvas
  accessible-labels-available-labels-li-1: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> provides a description of the canvas contents. 
    This function's parameters include: <span class = "code">text</span>, the label itself; and <span class = "code">display</span>, 
    an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-2: >- 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> describes a specific element or a 
    specific grouping of elements in a canvas. This function's parameters include: <span class = "code">name</span>, the title for the label; 
    <span class = "code">text</span>, the label itself; and <span class = "code">display</span>, an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-3: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generates a list describing the canvas size, color, 
    as well as each visual element’s color, position, and the area it covers within the canvas. This function’s only parameter is 
    <span class = "code">display</span>, an optional parameter to set the visibility of the label.
  accessible-labels-available-labels-li-4: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, like <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, 
    generates a list of the canvas' qualities and elements. Along with this list, this function also creates an HTML table that plots the 
    spatial location of each shape within the canvas. This function's only parameter is <span class = "code">display</span>, an optional parameter 
    to set the visibility of the label.
  accessible-labels-prerequisites: Prerequisites
  accessible-labels-prerequisites-1: >-
    Your project's code should be near completion before you begin labeling. To write clear and effective 
    labels, you should have a clear understanding about what visuals your code creates within the canvas 
    element. 
  accessible-labels-prerequisites-2: >-
    For example, if you started writing your labels before you had a clear understanding of the resulting 
    visual of your canvas, your labels and your visuals may communicate different messages, like the code 
    example below:
  accessible-labels-steps-for-labeling: Steps for labeling your p5.js code
  accessible-labels-steps-for-labeling-step-1: 1. Plan your labeling strategy
  accessible-labels-steps-for-labeling-step-1-1: >-
    Your labeling strategy will change based on your project’s complexity and purpose.
  accessible-labels-steps-for-labeling-step-1-2: >-
    No matter how complicated your project may be, always provide a brief description of your canvas in 
    <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a> using the 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> function. If you do not provide any labels in your code, 
    screen readers will describe your canvas as a blank HTML element.
  accessible-labels-steps-for-labeling-step-1-3: >-
    Place this label in the <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a> section of your code, 
    and provide a 1-3 sentence description of your canvas in its <span class = "code">text</span> parameter. This description should only provide details about 
    the visual elements of your canvas. 
  accessible-labels-steps-for-labeling-step-1-4: >-
    As stated previously, you do not need to begin your description with “A p5 canvas element…” or anything similar, since the 
    screen reader will declare the element type before reading your label.
  accessible-labels-steps-for-labeling-step-1-5: >-
    Along with the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> label, use either the 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, 
    or <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> 
    function to add more detailed labels within your code.
  accessible-labels-steps-for-labeling-step-1-6: >-
    The <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions can 
    describe the shapes on your canvas, but they can’t interpret your intention in using the shapes. Keep context in mind when choosing 
    which function(s) to use. Is it better to describe the flower as “eight circles and a rectangle”, or as “a flower with red 
    petals and a green stem”? What kind of labeling will provide the best description of your canvas? If 
    you are creating larger visuals with many shapes, use <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> 
    to label each group of shapes.
  accessible-labels-steps-for-labeling-step-1-7: >-
    Do not use both the <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions to describe the same canvas. Using both will 
    cause similar descriptions to appear twice, which is confusing to screen readers. The same goes for 
    using <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> with 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> labels. It’s best to choose one function to 
    supplement your <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a> label.
  accessible-labels-steps-for-labeling-step-1-complex: Complex projects
  accessible-labels-steps-for-labeling-step-1-complex-1: >-
    Use vanilla ARIA labeling and custom-built fallback labels instead of p5’s labeling functions if your canvas:
  accessible-labels-steps-for-labeling-step-1-complex-li-1: >-
    Has content that changes extensively via external interactive elements (elements outside the canvas)
  accessible-labels-steps-for-labeling-step-1-complex-li-2: >-
    Interacts with DOM elements written outside of the canvas code
  accessible-labels-steps-for-labeling-step-1-complex-li-3: >-
    Requires the user’s attention if the canva's visual content changes
  accessible-labels-steps-for-labeling-step-1-complex-li-4: >-
    Has complex element layouts that cannot be accurately labeled with the <a class = "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, or 
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions
  accessible-labels-steps-for-labeling-step-1-complex-2: >-
    For more information about fallback content, visit <a href = "https://www.w3.org/html/wg/wiki/DefinitionFallBackContent" target="_blank" rel="noopener noreferrer">W3C’s Wiki</a>. 
    For more information about complex ARIA labeling, visit <a href = "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes" target="_blank" rel="noopener noreferrer">Mozilla’s "ARIA states and properties"</a> 
    and <a href = "https://www.w3.org/TR/using-aria/" target="_blank" rel="noopener noreferrer">W3C’s "Using ARIA"</a>.
  accessible-labels-steps-for-labeling-step-2: 2. Write your main and supporting label(s)
  accessible-labels-steps-for-labeling-step-2-1: >-
    Begin labeling your canvas using the function(s) that best serve your users.
  accessible-labels-steps-for-labeling-step-2-2: >-
    While labeling, only provide descriptions of the visual aspects of your canvas. You don’t need to 
    describe how or what functions create the visuals present on the canvas, only how the end result 
    visuals appear within the canvas.
  accessible-labels-steps-for-labeling-step-2-using-de: Using <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
  accessible-labels-steps-for-labeling-step-2-using-de-1: >-
    When using the <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> function to label your code, provide a unique title and a description 
    no more than 1-2 sentences long. Only label the parts of your code that depict the most important visual 
    aspects of your canvas.
  accessible-labels-steps-for-labeling-step-2-using-de-2: >-
    Within each <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> label, discuss the important qualities of that element. Is the element 
    animated? Is the element interactive? What meaning does the element provide to the project?
  accessible-labels-steps-for-labeling-step-2-using-de-3: >-
    If your canvas contains any <a class = "code" href = "https://p5js.org/reference/#/p5/text">text()</a> elements that are important to the general understanding of the 
    image, make a separate label for them. Label any legible text with quotation marks around it in the 
    label, as in <span class = "code">describeElement("Text", "The words 'hello, world' displayed in green at the center of a 
    black canvas.")</span>.
  accessible-labels-steps-for-labeling-step-2-using-de-4: >-
    You don’t need to start each label with “A p5 canvas…” or something similar. The screen reader will 
    call out the element type before reading your labels:
  accessible-labels-steps-for-labeling-step-2-using-de-5: >-
    Limit the number of <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> functions present within your code as much as possible. If you 
    have to use more than 10 <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a> functions to describe your canvas, consider using a labeling 
    strategy that affords more complexity (such as vanilla ARIA labeling).
  accessible-labels-steps-for-labeling-step-2-using-go-to: Using <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> or <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>
  accessible-labels-steps-for-labeling-step-2-using-go-to-1: >-
    <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    generate their information based on the code of the visual element, such as its size, color, and shape. 
    Unlike <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, you only need to use one label to describe all 
    your canvas's visual elements.
  accessible-labels-steps-for-labeling-step-2-animated: Projects with animated or interactive elements
  accessible-labels-steps-for-labeling-step-2-animated-1: >-
    Individual interactive elements, such as HTML buttons, dropdowns, or inputs, don’t need labels. These 
    elements are built outside of the p5.js canvas and are interpreted by screen readers. However, this 
    means the <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and 
    <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions won’t provide any information about these interactive 
    inputs.
  accessible-labels-steps-for-labeling-step-2-animated-2: >-
    If a canvas element is animated and/or interactive, represent its current state or qualities in the label. 
    So long as you place the functions within the <a class = "code" href = "https://p5js.org/reference/#/p5/draw">draw()</a> function, 
    they will automatically update with the shape’s new information (except for <a class = "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    and <a class = "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, 
    which will update even when listed in <a class = "code" href = "https://p5js.org/reference/#/p5/setup">setup()</a>). If you are using 
    <a class = "code" href = "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, use template strings to update the element’s description:
  accessible-labels-steps-for-labeling-step-2-do-donts: Labeling do’s and don’ts
  accessible-labels-steps-for-labeling-step-2-do-donts-1: >-
    <i>Don’t</i> use screen reader labels as a way of commenting your code. Labels should only summarize the 
    resulting visual elements within a canvas. If you overuse screen reader labels, you may end up 
    complicating the screen reader’s interpretation of the canvas rather than helping it.
  accessible-labels-steps-for-labeling-step-2-do-donts-2: >-
    <i>Do</i> make your label descriptions short and accurate. Use full sentences for your labels, and write 
    in the present tense when describing elements.
  accessible-labels-steps-for-labeling-step-3: 3. Test your labels
  accessible-labels-steps-for-labeling-step-3-1: >-
    Be sure to test your labels before publishing your sketch. Labels are only available to screen readers 
    by default.To see the output during development, pass <span class = "code">LABEL</span> as the last argument to the function.
  accessible-labels-steps-for-labeling-step-3-2: >-
    When testing your labels, consider the following questions:
  accessible-labels-steps-for-labeling-step-3-2-li-1: >-
    Do your canvas labels provide enough information for someone to understand the sketch’s purpose? 
  accessible-labels-steps-for-labeling-step-3-2-li-2: >-
    If this canvas exists on a web page among other content, would someone have a good understanding of how the canvas relates to its 
    surrounding context?
  accessible-labels-steps-for-labeling-step-3-3: >-
    Be sure to remove the <span class = "code">LABEL</span> argument once you’ve tested the output. With <span class = "code">LABEL</span> 
    active, screen readers are forced to read the fallback text and the visible label text when focused on the canvas. This is 
    confusing for them.
  accessible-labels-steps-for-labeling-step-3-4: >-
    You may also download a screen reader and use it to test your code. For more information about using 
    screen readers, visit <a href = "https://www.w3schools.com/accessibility/accessibility_screen_readers.php" target="_blank" rel="noopener noreferrer">W3 School’s "Accessibility Screen Readers"</a>.
  accessible-labels-conclusion: Conclusion
  accessible-labels-conclusion-1: >-
    Once you've tested your labels, your canvas should be accessible to screen reader technology!
  accessible-labels-conclusion-2: >-
    If you would like more information about ARIA labeling, visit <a href = "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA" target="_blank" rel="noopener noreferrer">MDN’s ARIA</a>.
  accessible-labels-conclusion-3: >-
    <i>Notice any errors or typos? Please let us know. If you would like to contribute to this tutorial, 
    feel free to issue a <a href = "https://github.com/processing/p5.js-website" target="_blank" rel="noopener noreferrer">pull request</a>!</i>
  using-local-server-title: Usando un server locale
  using-local-server: 'Come configurare un server locale su Mac OSX, Windows, o Linux.'
  p5js-wiki-title: p5.js wiki
  p5js-wiki: Documentazione aggiuntiva ed esercitazioni fornite dalla community
  connecting-p5js-title: Collegamento a p5.js
  creating-libraries-title: Creazione di librerie
  creating-libraries: Creazione di librerie aggiuntive p5.js.
  nodejs-and-socketio-title: node.js e socket.io
  nodejs-and-socketio: 'Utilizzando un server node.js con p5.js, comunicazione tramite socket.io.'
  programming-topics-title: Argomenti di programmazione
  beyond-the-canvas-title: Oltre la tela
  beyond-the-canvas: Creare e manipolare gli elementi oltre la tela.
  3d-webgl-title: 3D/WebGL
  3d-webgl: >-
    Sviluppo di applicazioni grafiche avanzate in p5.js usando la modalità
    WEBGL.
  getting-started-in-webgl-other-tutorials-title: Other Tutorials
  getting-started-in-webgl-other-tutorials-p: >-
    This tutorial is part of a series about the basics of using WebGL in p5.js. Check out each of these other tutorials below.
  getting-started-in-webgl-other-tutorials-tut1: Coordinates and Transformations
  getting-started-in-webgl-other-tutorials-tut2: Creating Custom Geometry in WebGL
  getting-started-in-webgl-other-tutorials-tut3: Styling and Appearance
  getting-started-in-webgl-other-tutorials-tut4: Introduction to Shaders
  getting-started-in-webgl-other-tutorials-you-are-here: (you are here)
  getting-started-in-webgl-title: Getting Started in WebGL
  getting-started-in-webgl-coords-and-transform-title: Coordinates and Transformations
  getting-started-in-webgl-coords-and-transform: Basics of 3D setup, coordinates, and transformations
  getting-started-in-webgl-coords-and-transform-p1x1: >- 
    p5.js is a powerful tool for creating 2D graphics but it's also capable of 3D graphics.
    To get started in 3D there are some new concepts to learn and this document will introduce some ideas
    that will be important to any 3D sketch.
  getting-started-in-webgl-coords-and-transform-toc-title: Table of Contents 
  getting-started-in-webgl-coords-and-transform-toc1: What is WebGL
  getting-started-in-webgl-coords-and-transform-toc2: 3D Coordinate Space
  getting-started-in-webgl-coords-and-transform-toc3: Transformations
  getting-started-in-webgl-coords-and-transform-toc4: Order
  getting-started-in-webgl-coords-and-transform-toc5: Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-toc6: Conclusion
  getting-started-in-webgl-coords-and-transform-heading1: What is WebGL
  getting-started-in-webgl-coords-and-transform-p2x1: >- 
    WebGL is a library that gives us the tools we need to create 3D graphics within a web browser. To put it simply,
    it allows us to do all kinds of math that help arrange and display objects in 3D. p5.js makes it easier to work with WebGL
    through its special WebGL mode.
  getting-started-in-webgl-coords-and-transform-p3x1: >- 
      Working in 3D introduces a lot of complexity, especially when a sketch involves motion, texture, lighting, and
      more. Luckily for us, computers have special hardware that is particularly
      well suited to performing those calculations, the graphics processing unit (GPU). The GPU is capable of
      processing many things simultaneously, which is especially important when we're dealing with pixels and many shapes in space.
  getting-started-in-webgl-coords-and-transform-p4x1: >- 
    Let's get started by setting up the p5.js to use WebGL, by passing a third parameter into <a class="code">createCanvas()</a>.
  getting-started-in-webgl-coords-and-transform-heading2: >-
    3D Coordinate Space: Positioning in 3D
  getting-started-in-webgl-coords-and-transform-info1x1: >-
    If coordinates systems aren't making sense it might be helpful to revisit the tutorial titled
    <a href="{{root}}/learn/coordinate-system-and-shapes.html">Coordinate System and Shapes</a>.
  getting-started-in-webgl-coords-and-transform-p5x1: >- 
    One of the most fundamental differences between working in 2D and working in 3D is the most obvious: there is
    one more dimension to work with. In addition to the horizontal and vertical position (x and y axes) of an
    element in our drawing, 3D adds depth, the z-axis. 
  getting-started-in-webgl-coords-and-transform-p6x1: >- 
    When drawing in 2D, the point (0,0) is located at the top left corner of the screen. In WebGL mode, the
    origin of the sketch (0,0,0) is located in the middle of the screen. By default, the x-axis goes left-to-right,
    y-axis goes up-to-down, and the z-axis goes from further-to-closer.
  getting-started-in-webgl-coords-and-transform-heading3: >-
    Transformations: Position and Size of 3D Shapes
  getting-started-in-webgl-coords-and-transform-p7x1: >-
    p5.js has a few methods, <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>, <a
    class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to position and orient objects
    within space. Each of these methods affect what is known as the <em>model matrix</em>. Collectively these are
    known as the <em>transformation</em> of an object. These methods are available for both 2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-subheading1: >-
    translate(): Moving Objects in Space
  getting-started-in-webgl-coords-and-transform-p8x1: >-
    <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a> moves the origin in a
    given direction. Anything drawn after we call <a class="code">translate()</a> will be
    positioned relative to that point. <a class="code">translate()</a> accepts arguments for x, y, and z
    values. Use the sliders in the sketch above to change the translation of the box and see how it moves along
    each axis. The code below demonstrates simple translation on a <a class="code">box()</a> shape.
  getting-started-in-webgl-coords-and-transform-subheading2: >-
    rotate(): Orienting Objects in Space
  getting-started-in-webgl-coords-and-transform-p9x1: >-
    <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a> reorients whatever is
    drawn after it.
  getting-started-in-webgl-coords-and-transform-p10x1: >-
    There are a few methods that can be used to rotate an object in 3D. Most of the time it's easiest to call
    methods like like <a class="code" href="{{root}}/reference/#/p5/rotateX">rotateX()</a>, <a class="code"
      href="{{root}}/reference/#/p5/rotateY">rotateY()</a>, and <a class="code"
      href="{{root}}/reference/#/p5/rotateZ">rotateZ()</a>, which each allow for rotation around a specific axis.
    Each of these methods accept a single argument specifying the angle of rotation. Try moving the sliders in the
    example above to see how rotation is performed on each axis. The code below shows each of these methods
    in use.
  getting-started-in-webgl-coords-and-transform-p11x1: >-
    By default p5.js will expect angles to be in radians. Radians use numbers from 0 - <a class="code">TWO_PI</a> to specify an
    angle. To use degrees, either convert degrees to radians using <a class="code">radians()</a>, or use
    <a class="code">angleMode(DEGREES)</a>.
  getting-started-in-webgl-coords-and-transform-info2x1: >-
    <p>You can also use <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a>, which allows
    you to specify which axis you'd like to rotate around using a vector as the second argument.</p>
  getting-started-in-webgl-coords-and-transform-subheading3: >-
    scale(): Size in Space
  getting-started-in-webgl-coords-and-transform-p12x1: >-
    <a class="code" href="{{root}}/reference/#/p5/scale">scale()</a> changes the size of whatever is
    drawn after it. Like the other methods described so far, it accepts arguments for x, y, and z values.
  getting-started-in-webgl-coords-and-transform-heading4: >-
    The Order of Transformations Matters!
  getting-started-in-webgl-coords-and-transform-p13x1: >-
    Something that can feel unpredictable at first is the order of transformations. Each transformation always affects
    the next one. For example, if <a class="code">rotate()</a> is called, followed by <a class="code">translate()</a>, the direction of that translation will
    be affected by the rotation. The entire coordinate system is rotating and moving, not just the shape itself. 
  getting-started-in-webgl-coords-and-transform-p14x1: >-
    Transformations can be performed in any order, but using <strong>translate</strong>, <strong>rotate</strong>, and then <strong>scale</strong> will be the most intuitive.
    Translation, followed by rotation, produces the effect of moving the shape <em>and then</em> rotating around that new location.
  getting-started-in-webgl-coords-and-transform-p15x1: >-
    In the below example, try changing the order of <a class="code">translate()</a> and <a
    class="code">rotateY()</a> and see how it affects where the object is
    drawn.
  getting-started-in-webgl-coords-and-transform-p16x1: >-
    p5.js also has some methods that can control when transformations are applied: <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and <a
    class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. <a class="code">push()</a> and <a
    class="code">pop()</a> make it easier to move objects
    individually. The <a class="code">push()</a> method saves and sets aside the
    current transformations. The <a class="code">pop()</a> method restores those transformations. Whatever transformations that
    are made between <a
    class="code">push()</a> and <a class="code">pop()</a> will be isolated to that portion of the code. If you don’t use <a
    class="code">push()</a> and
    <a class="code">pop()</a>, you have to keep track of whatever transformations have already taken place, which
    can get complicated
    and difficult to follow. Consider this following example, which places two boxes in our sketch. To position the second box
    without <a class="code">push()</a> and <a class="code">pop()</a>, you have to account for the first transformation. This 
    can be a lot to keep track of in a more complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p17x1: >-
    Now, let's try the same code with <a class="code">push()</a> and <a class="code">pop()</a>. Now we can just
    translate the object where we want it, without
    having to remember where our coordinate system lies.
  getting-started-in-webgl-coords-and-transform-info3x1: >-
    <p>While this is a more advanced topic, each of these transformations affect what is called the model matrix.
    The
    transformation matrix is combined with the view matrix and the projection matrix, both of which help simulate
    the view of a camera, and this combination results in our 3D scene! </p>
    <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
    Learn more about Model View Projection
    </a>
  getting-started-in-webgl-coords-and-transform-p18x1: >-
    In the below example, try removing <a class="code">push()</a> and <a class="code">pop()</a> to see how the
    transformations affect the second object
    that is drawn. 
  getting-started-in-webgl-coords-and-transform-heading5: >-
    Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-p19x1: >- 
    So far we have only been using <a class="code">box()</a> but p5.js has seven different predefined geometries
    that you can use in your sketch. These basic predefined geometries are often referred to as 'primitives'.
  getting-started-in-webgl-coords-and-transform-p20x1: >- 
    These primitive shape methods are: <a class="code" href="{{root}}/reference/#/p5/box">box()</a>,
    <a class="code" href="{{root}}/reference/#/p5/plane">plane()</a>,
    <a class="code" href="{{root}}/reference/#/p5/sphere">sphere()</a>,
    <a class="code" href="{{root}}/reference/#/p5/ellipsoid">ellipsoid()</a>,
    <a class="code" href="{{root}}/reference/#/p5/cone">cone()</a>,
    <a class="code" href="{{root}}/reference/#/p5/cylinder">cylinder()</a>, and
    <a class="code" href="{{root}}/reference/#/p5/torus">torus()</a>.
  getting-started-in-webgl-coords-and-transform-p21x1: >- 
    It is also possible to create custom geometry, either from scratch or from 3D models created in another
    program.
    More information about custom geometry can be found the <a href="{{root}}/learn/getting-started-in-webgl-custom-geometry.html">Custom
    Geometry tutorial</a>.
  getting-started-in-webgl-coords-and-transform-heading6: >-
    Conclusion
  getting-started-in-webgl-coords-and-transform-p22x1: >-
    By having basic control over a 3D coordinate space, transformations, 
    and basic shapes, you should be able to begin creating basic scenes
    in 3D. The tutorials that follow this in the Getting Started in WebGL series
    will introduce custom geometries, allow you to tweak the appearance of 
    the scene, and introduce you to some basic shader programming to push
    your sketches further.
  getting-started-in-webgl-coords-and-transform-glossary-title: Glossary
  getting-started-in-webgl-coords-and-transform-glossary-term1-title: GPU
  getting-started-in-webgl-coords-and-transform-glossary-term1-definition: >-
    The GPU (Graphics Processing Unit) is a piece of hardware that is particularly well
    suited for performing many calculations in parallel, making it powerful for 3D graphics.
  getting-started-in-webgl-coords-and-transform-glossary-term2-title: Model
  getting-started-in-webgl-coords-and-transform-glossary-term2-definition: A custom 3D geometry that can be saved and loaded from a file.
  getting-started-in-webgl-coords-and-transform-glossary-term3-title: Matrix
  getting-started-in-webgl-coords-and-transform-glossary-term3-definition: A special array that can hold information about the transformation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term4-title: Camera
  getting-started-in-webgl-coords-and-transform-glossary-term4-definition: The viewpoint of a 3D scene.
  getting-started-in-webgl-coords-and-transform-glossary-term5-title: Transform
  getting-started-in-webgl-coords-and-transform-glossary-term5-definition: Also referred to as <em>transformation</em>, this refers to the combined scale, rotation, and translation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term6-title: Vertex
  getting-started-in-webgl-coords-and-transform-glossary-term6-definition: A point in 3D space, with an x, y, z position.
  getting-started-in-webgl-coords-and-transform-glossary-term7-title: Face
  getting-started-in-webgl-coords-and-transform-glossary-term7-definition: A collection of three points that create a solid surface.
  getting-started-in-webgl-custom-geometry-title: Creating Custom Geometry in WebGL
  getting-started-in-webgl-custom-geometry: Creating custom geometry in WebGL
  getting-started-in-webgl-custom-geometry-p1x1: >-
    p5.js has a number of basic shapes, like <a class="code">box()</a> or <a class="code">sphere()</a>, but p5.js
    is also capable of rendering complex custom geometry, both from 3D model files or from code. This tutorial will walk through how to import 3D models into p5.js, as well as how
    to create geometry from scratch.
  getting-started-in-webgl-custom-geometry-info1x1: 'If you are new to 3D check out the '
  getting-started-in-webgl-custom-geometry-info1x2: ' tutorial.'
  getting-started-in-webgl-custom-geometry-toc-title: Table of Contents 
  getting-started-in-webgl-custom-geometry-toc1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-toc2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-toc3: Conclusion
  getting-started-in-webgl-custom-geometry-toc4: Glossary
  getting-started-in-webgl-custom-geometry-heading1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-p2x1: >-
    Custom geometry can be imported into p5.js using either OBJ or STL files. These files are usually generated in
    a 3D modeling tool like Blender, which offers much more control when constructing a 3D scene. This is done using
    the <a class="code" href="{{root}}/reference/#/p5/loadModel">loadModel()</a> method, which should be used within <a class="code">preload()</a>.
  getting-started-in-webgl-custom-geometry-p3x1: >-
    A common issue that can come up with custom models is scaling. Depending on how the model is constructed, it
    might be a much different size when rendered in p5.js, or even be too small to be rendered at all. The
    <a class="code">loadModel()</a> method includes a normalize parameter that will resize the model to something that works better in
    p5.js.
  getting-started-in-webgl-custom-geometry-info2x1: >-
    Note that there is currently no support for STL files with color, although you
    can add color using materials or textures, which you can learn about in the <a href="{{root}}/learn/getting-started-in-webgl-appearance.html">Styling and Appearance</a> tutorial.
  getting-started-in-webgl-custom-geometry-heading2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-p4x1: >-
    Geometry can also be defined procedurally using code. This is a great way to create geometry that moves or is
    formed using your own set of rules. There are a number of methods that can be used to create 3D geometry in a
    way that is similar to 2D drawing in p5.js. For example, methods like <a class="code">quad()</a>, <a class="code">triangle()</a>, <a class="code">rect()</a>, and <a class="code">circle()</a> each have extra parameters that make it possible to use them in 3D.
  getting-started-in-webgl-custom-geometry-p5x1: >-
    There are other methods that offer greater control of the geometry. A shape can be defined point-by-point using
    <a class="code" href="{{root}}/reference/#/p5/beginShape">beginShape()</a>, <a class="code"
    href="{{root}}/reference/#/p5/vertex">vertex()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/endShape">endShape()</a>. This following example shows how
    these methods can be used to construct a 3D shape mathematically.
  getting-started-in-webgl-custom-geometry-p6x1: >-
    There is also a powerful class, <a class="code" href="{{root}}/reference/#/p5/p5.Geometry">p5.Geometry</a>, which p5 uses internally for <a class="code">loadModel()</a> but can also be used to
    define custom geometry, offering tools that can be helpful in calculating faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x2: >-
    In 3D, a face refers to a collection of three or four points that make up a surface, giving our
    geometry the appearance of being solid. A normal is the direction that is perpendicular to the face, which helps p5.js calculate lighting across the surface.
  getting-started-in-webgl-custom-geometry-p6x3: >-
    In the following example, <a class="code">p5.Geometry</a> is used to plot a grid of points for the geometry. Then, <a class="code">computeFaces()</a> is used to give the geometry
    a solid appearance and <a class="code">computeNormals()</a> allows our geometry to have proper lighting.
  getting-started-in-webgl-custom-geometry-heading3: Conclusion
  getting-started-in-webgl-custom-geometry-p7x1: >-
    Now you should be able to create custom geometry, making it possible to create
    unique shapes, both from other tools and from code. Spend some time working
    with a variety of 3D modeling tools so you can find the one that works best for you.
  getting-started-in-webgl-custom-geometry-glossary-title: Glossary
  getting-started-in-webgl-custom-geometry-glossary-term1-title: Procedural
  getting-started-in-webgl-custom-geometry-glossary-term1-definition: Meaning that something is defined mathematically, instead of from stored data, like a file.
  getting-started-in-webgl-custom-geometry-glossary-term2-title: Model
  getting-started-in-webgl-custom-geometry-glossary-term2-definition: A representation of geometry.
  getting-started-in-webgl-custom-geometry-glossary-term3-title: STL
  getting-started-in-webgl-custom-geometry-glossary-term3-definition: >-
    STL (most often standing for "standard tesselation language") is a file format for 3D models. 
    It only stores information about the geometry.
  getting-started-in-webgl-custom-geometry-glossary-term4-title: OBJ
  getting-started-in-webgl-custom-geometry-glossary-term4-definition: >- 
    OBJ is an open file format that stores geometry data as well as some material and texture data. In p5.js, we
    are limited to its geometry, although an image can still be mapped to the surface using textures.
  getting-started-in-webgl-custom-geometry-glossary-term5-title: Faces
  getting-started-in-webgl-custom-geometry-glossary-term5-definition: The solid surface that is generated between three points.
  getting-started-in-webgl-custom-geometry-glossary-term6-title: Normals
  getting-started-in-webgl-custom-geometry-glossary-term6-definition: The direction that is perpendicular to a face, which is often needed when calculating lighting or using materials. 
  getting-started-in-webgl-custom-geometry-glossary-term7-title: Normalization
  getting-started-in-webgl-custom-geometry-glossary-term7-definition: Changing something so that it fits within a standard range.
  getting-started-in-webgl-appearance-title: Styling and Appearance
  getting-started-in-webgl-appearance: The basics of materials and lighting in WebGL
  getting-started-in-webgl-appearance-p0x1: >-
    Creating in 3D is about more than just geometry. Cameras, lights, and materials are an
    important part of creating a visually interesting 3D scene. p5.js has a number of tools
    that make it possible to transform the appearance of our geometry.
  getting-started-in-webgl-appearance-toc-title: Table of Contents 
  getting-started-in-webgl-appearance-toc1: Camera and View
  getting-started-in-webgl-appearance-toc2: Lighting
  getting-started-in-webgl-appearance-toc3: Materials and Textures
  getting-started-in-webgl-appearance-toc4: Conclusion
  getting-started-in-webgl-appearance-toc5: Glossary
  getting-started-in-webgl-appearance-heading1: Camera and View
  getting-started-in-webgl-appearance-p1x1: >-
    The camera is an essential piece of a 3D scene; it gives us the sense of space and dimension that we are
    often looking for in 3D. In p5.js, the WebGL mode provides us with a perspective camera by default, but we can
    change this using <a class="code" href="{{root}}/reference/#/p5/perspective">perspective()</a> or <a
      class="code" href="{{root}}/reference/#/p5/ortho">ortho()</a>.
  getting-started-in-webgl-appearance-p2x1: >-
    A <em>perspective camera</em> skews objects so they appear to get smaller as they get further away, vanishing
    at a single point in the distance. This is in contrast to an <em>orthographic camera</em>, where the 
    geometry stays the same size as it gets further away and has no vanishing point. 
  getting-started-in-webgl-appearance-p3x1: >-
    One setting that we can change with a perspective camera is the <em>field-of-view</em>, or FOV. This is the 
    term that is used to describe how much our camera can see, measured as an angle. In simple examples it might appear
    to have a zoom-like effect, but it will change way that shapes will change size in the distance.
  getting-started-in-webgl-appearance-p4x1: >-
    Another important term when working with cameras in 3D is the camera <em>frustum</em>. The frustum of the camera the
    shape of the camera's view, a pyramid-like shape within which geometry can be displayed. The frustum includes a <em>near and far plane</em>.
    The near plane defines the minimum distance that geometry must be from the camera to be rendered. The far plane defines the maximum
    distance that the geometry can be from the camera. Each of these can be changed to affect how close and how far the camera can see. This process
    of selectively including geometry is sometimes referred to as 'clipping'.
  getting-started-in-webgl-appearance-p5x1: >-
    Cameras can be moved by passing arguments to <a class="code">camera()</a>, but constantly moving and adjusting the camera in code can be tedious, especially when you are experimenting with
    ideas. p5.js has a special camera method, <a class="code"
      href="{{root}}/reference/#/p5/orbitControl">orbitControl()</a>, that can be used to zoom, pan,
    and position the camera using the mouse.
  getting-started-in-webgl-appearance-p6x1: >-
    A scene can have multiple cameras, but only one camera can be active at a time. Sketches in p5.js will default
    to having a single perspective camera, but that can be changed by calling either <a
      class="code">perspective()</a>
    (with new parameters) or <a class="code">ortho()</a>. <a class="code">camera()</a> can be used to change the
    position of the active camera and the position that the camera is looking at. Try it out in the sketch below.
  getting-started-in-webgl-appearance-heading2: Lighting
  getting-started-in-webgl-appearance-p7x1: >-
    Lighting is another essential part of a 3D scene. To be able to convey shape and depth in 3D is necessary to
    have a light source. p5.js has a few different types of light that can be used in a sketch.
  getting-started-in-webgl-appearance-lighting-list1: >-
    Ambient light makes everything display a little brighter, with no consideration for light position or
    direction.
  getting-started-in-webgl-appearance-lighting-list2: >-
    A directional light shines from one direction, which can be especially useful for communicating depth in
    a scene, or when a scene needs a 'sun' light. This method accepts a color and direction.
  getting-started-in-webgl-appearance-lighting-list3: >-
    A point light emits from a single point in all directions, similar to something like a lightbulb. This
    method accepts a color and a position for the light.
  getting-started-in-webgl-appearance-lighting-list4: >-
    A spot light emits from a single point in a single direction. This light is cast in a conical shape and
    it's radius and concentration can be adjusted.
  getting-started-in-webgl-appearance-lighting-list5: >-
    noLights() makes it so that all subsequent geometry is rendered without any lighting. This can be useful
    when you want flat, unshaded geometry.
  getting-started-in-webgl-appearance-p8x1: >-
    These lights should be used within <a class="code">draw()</a>. Up to 5 lights can be used in a scene
    simultaneously, allowing you to compose a scene with varied and complex lighting sources. 
    Try checking and unchecking the boxes in the following interactive example to see how lighting can
    be blended together. For each active light source there are visual indicators of their position or
    direction, just know that these are here for illustrative purposes!
  getting-started-in-webgl-appearance-p9x1: >-
    In this next example, try commenting and uncommenting each light and experiment with their parameters.
  getting-started-in-webgl-appearance-heading3: Materials and Textures
  getting-started-in-webgl-appearance-p10x1: >-
    Objects can appear differently based on their material. Materials dictate how
    light interacts with the geometry and how color (or texture) gets applied to the object. Materials can be
    varied, making objects shiny, rough, or even textured with images.
  getting-started-in-webgl-appearance-p11x1: >-
    In this interactive example, try selecting each of the different materials to see how they
    affect the appearance of the geometry. You can move your mouse and see the effect that a directional light has on the material. 
  getting-started-in-webgl-appearance-p12x1: >-
    Try commenting and uncommenting the different lights in this example:
  getting-started-in-webgl-appearance-p13x1: >-
    More custom materials can be achieved through using <a class="code">texture()</a>. In short, these are images
    that can be mapped onto the surface of a geometry. These textures can be imported from an image and can even be
    generated within code using shaders. To map a texture to your geometry, use <a class="code">loadImage()</a> 
    within <a class="code">preload()</a>, then call <a class="code">texture()</a> before drawing your shape.
  getting-started-in-webgl-appearance-info1x1: >-
    While they are useful for changing the appearance of your geometry, shaders are a bit beyond the scope of this 
    tutorial, so make sure to check out the <a href="{{root}}/learn/introduction-to-shaders.html">Introduction to Shaders</a> 
    page when you are ready. 
  getting-started-in-webgl-appearance-heading4: Conclusion
  getting-started-in-webgl-appearance-p14x1: >-
    Being able to have control over the camera, lighting, and materials will give you much more flexibility
    to decide how your sketch looks, and it will open up the possibilities for you to introduce your own
    style to your 3D sketches. The following tutorial in the Getting Started in WebGL series will introduce you
    to shaders, which will make it possible to change the appearance of your sketch in even more interesting ways.
  getting-started-in-webgl-appearance-glossary-title: Glossary
  getting-started-in-webgl-appearance-glossary-term1-title: Camera
  getting-started-in-webgl-appearance-glossary-term1-definition: The viewpoint of a 3D scene
  getting-started-in-webgl-appearance-glossary-term2-title: Perspective
  getting-started-in-webgl-appearance-glossary-term2-definition: A projection that gives the appearance of depth, achieved by making objects in the distance appear smaller.
  getting-started-in-webgl-appearance-glossary-term3-title: Orthographic
  getting-started-in-webgl-appearance-glossary-term3-definition: >-
    A projection that is <em>orthogonal</em> and unaffected by depth. It gives the appearance of being
    two-dimensional.
  getting-started-in-webgl-appearance-glossary-term4-title: Field-of-View
  getting-started-in-webgl-appearance-glossary-term4-definition: The angle representing how much can be seen by the camera.
  getting-started-in-webgl-appearance-glossary-term5-title: Frustum
  getting-started-in-webgl-appearance-glossary-term5-definition: The geometric shape representing the full area that can be viewed by the camera.
  getting-started-in-webgl-appearance-glossary-term6-title: Near and Far Plane
  getting-started-in-webgl-appearance-glossary-term6-definition: >-
    The near plane represents the minimum distance a geometry must be from the camera to be displayed, while
    the far plane represents the maximum distance.
  getting-started-in-webgl-appearance-glossary-term7-title: Clipping
  getting-started-in-webgl-appearance-glossary-term7-definition: Selectively showing some geometry and not others, such as when geometry falls outside of the camera frustum.
  getting-started-in-webgl-shaders-title: Introduction to Shaders
  getting-started-in-webgl-shaders: The basics of creating shaders within p5js using WebGL
  getting-started-in-webgl-shaders-p0x1: >-
    Shaders are special programs that run on the graphics processing unit, or GPU, that can do some incredible
    things. They take advantage of the
    GPU to process many pixels at once, making them fast and particularly well suited for certain tasks, like
    generating noise, applying filters like blur, or shading polygons. Shader programming can feel daunting at
    first, requiring a different approach than the 2D drawing of p5.js. This document will outline the basics 
    of shader programming and point you towards other resources.
  getting-started-in-webgl-shaders-toc-title: Table of Contents 
  getting-started-in-webgl-shaders-toc1: Setup
  getting-started-in-webgl-shaders-toc2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-toc3: Uniforms
  getting-started-in-webgl-shaders-toc4: Conclusion
  getting-started-in-webgl-shaders-toc5: Glossary
  getting-started-in-webgl-shaders-heading1: Setup
  getting-started-in-webgl-shaders-p1x1: >-
    p5.js is a great tool for working with shaders because it handles a lot of the WebGL setup so you can focus on
    the shader code itself. Before we can get started with shaders we have to set up our canvas so that it uses
    p5.js WebGL model.
  getting-started-in-webgl-shaders-p2x1: >-
    A shader program consists of two parts, a <strong>vertex shader</strong> and a <strong>fragment
      shader</strong>. The vertex shader affects where the 3D geometry is drawn on the screen and the fragment
    shader is responsible for affecting the color output. Each of these live in separate files and are loaded into
    p5.js using <a class="code">loadShader()</a>. Once a shader is loaded it can be used within <a
      class="code">draw()</a>. The following example will show
    how to set up a basic shader within p5.js:
  getting-started-in-webgl-shaders-heading2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-p3x1: >-
    So now you might be wondering what we actually write in these shader files! Shader files are written in
    Graphics Library Shading Language, or GLSL, and have a very different syntax and structure than we are familiar
    with. GLSL has a
    syntax that resembles C, which means it comes with a handful of concepts that aren't present in JavaScript.
  getting-started-in-webgl-shaders-p4x1: >-
    For one, the shading language is much more strict about types. Each variable you create has to be labeled with
    the kind of data it is storing. Here is a list of some of the common types:
  getting-started-in-webgl-shaders-typelist: |
    vec2(x,y)     // a vector of two floats
    vec3(r,g,b)   // a vector of three floats
    vec4(r,g,b,a) // a vector of four floats
    float         // a number with decimal points
    int           // a whole number without decimal points
    sampler2D     // a reference to a texture
  getting-started-in-webgl-shaders-p5x1: >-
    In general the shading language is much more strict than JavaScript. A missing semicolon for example is not
    allowed and will result in an error message. You can't use different types of numbers, like floats or integers
    interchangeably.
  getting-started-in-webgl-shaders-p6x1: >-
    First let's look at a basic vertex shader:
  getting-started-in-webgl-shaders-p7x1: >-
    This vertex shader begins with an <em>attribute</em>, which p5.js uses to share vertex position information
    with the shader. This
    attribute is a <a class="code">vec3</a>, meaning it contains a value for x, y, and z. Attributes are special
    variable types that are
    only used in the vertex shader and are typically provided by p5.js.
  getting-started-in-webgl-shaders-p8x1: >-
    All vertex shaders require a function, <a class="code">main()</a>, within which we position our vertices. In
    this example, the
    vertex shader repositions our vertices so that the shader output takes up the full sketch. At the end of <a
      class="code">main()</a>,
    we have to assign a value to <a class="code">gl_Position</a>.
  getting-started-in-webgl-shaders-p9x1: >-
    Don't worry if this doesn't make a ton of sense yet. The vertex shader plays an important role but it is often
    just responsible for making sure what we create in our fragment shader displays properly on the geometry. You'll
    probably find yourself reusing the same vertex shaders in many of your projects.
    The fragment shader on the other hand is responsible for the color output of our shader and is where we will do
    a lot of our shader programming. Here is a very simple fragment shader that will just display the color red:
  getting-started-in-webgl-shaders-p10x1: >-
    The fragment shader begins with a line specifying the float 'precision'.
    this value you can either be lowp, mediump, or highp, although you will likely
    use mediump, or highp in certain situations.
  getting-started-in-webgl-shaders-p11x1: >-
    And similar to the vertex shader, our fragment shader also requires a <a class="code">main()</a> function, but instead of
    setting <a class="code">gl_Position</a>, we will assign a color to <a class="code">gl_FragColor</a>.
  getting-started-in-webgl-shaders-p12x1: >-
    The variable, <a class="code">myColor</a>, is defined as a <a class="code">vec4</a>, meaning it stores 4 values. Since we are dealing with color,
    those four values are red, green, blue, and alpha. Shaders don't use 0 - 255 for colors like our sketches do, instead they use
    values between 0.0 and 1.0.
  getting-started-in-webgl-shaders-p13x1: >-
    Now that we have a vertex shader and a fragment shader, these can be saved to separate files (shader.vert and
    shader.frag respectively), and loaded into our sketch using <a class="code">loadShader()</a>.
  getting-started-in-webgl-shaders-heading3: >-
    Uniforms: Passing data from sketch to shader
  getting-started-in-webgl-shaders-p14x1: >-
    A simple shader like this can be useful by itself, but there are times when it's necessary to communicate
    variables from the p5.js sketch to a shader. This is when uniforms come in. Uniforms are special variables that
    can be sent from a sketch to a shader. These make it possible to have much more control over a shader. For example,
    you could use the p5.js method <a class="code">millis()</a> to pass a 'time' uniform to our sketch to introduce motion.
    In the shader, uniforms are defined at the top of the file, outside of <a class="code">main()</a>. In
    this following fragment shader
    we are creating a color uniform, <a class="code">myColor</a>, that will allow us to change the color from our sketch.
  getting-started-in-webgl-shaders-p15x1: >-
    Back in our p5.js sketch, this color can now be sent using <a class="code">setUniform()</a>:
  getting-started-in-webgl-shaders-p16x1: >-
    There are also <em>attributes</em>, which are usually used to share certain data about the geometry between the
    sketch and the vertex shader, and <em>varying</em> variables, which share data between the vertex shader and the
    fragment shader.
    This makes it possible to use position or other geometry data within our fragment shaders.
  getting-started-in-webgl-shaders-p17x1: >-
    Now with the texture coordinate attribute assigned to the varying variable, we can use the texture coordinate
    in our fragment shader. The result in the example below is a blue and magenta visualization of our texture coordinates.
  getting-started-in-webgl-shaders-info1x1: >-
    p5.js handles a lot of attributes and uniforms for us, and <a
    href="https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/contributor_docs/webgl_mode_architecture.md">you
    can view a list of all of the attributes that p5.js sends to the shader</a>.
  getting-started-in-webgl-shaders-heading4: >-
    Conclusion
  getting-started-in-webgl-shaders-p18x1: >-
    With these skills you will be able to create some basic shaders, but shader programming can go incredibly deep,
    and there are many shader topics that go beyond this tutorial. Shaders in p5.js can be a powerful tool for
    creating visuals, effects, and even textures that can be mapped to your 3D geometry.
  getting-started-in-webgl-shaders-p19x1: >-
    Want to keep learning more about shaders? Check out some of these websites!
  getting-started-in-webgl-shaders-resources: >-
    <li><a href="https://thebookofshaders.com/">The Book of Shaders</a>, a shader guide by Patricio Gonzalez Vivo
      and
      Jen Lowe.</li>
    <li><a href="https://itp-xstory.github.io/p5js-shaders/#/">P5.js shaders</a>, a shader guide by Casey Conchinha
      and
      Louise Lessél.</li>
    <li><a href="https://www.shadertoy.com/">Shadertoy</a>, a massive online collection of shaders that are written in a browser editor.</li>
    <li><a href="https://github.com/aferriss/p5jsShaderExamples">p5jsShaderExamples</a>, a collection of resources
      by
      Adam Ferriss.</li>
  getting-started-in-webgl-shaders-glossary-title: Glossary
  getting-started-in-webgl-shaders-glossary-term1-title: Shader
  getting-started-in-webgl-shaders-glossary-term1-definition: >-
    A special graphics card program that can efficiently produce many visual effects and filters.
  getting-started-in-webgl-shaders-glossary-term2-title: GLSL
  getting-started-in-webgl-shaders-glossary-term2-definition: >-
    Graphics Library Shader Language (GLSL) is a programming language that is used to write shaders.
  getting-started-in-webgl-shaders-glossary-term3-title: Uniform
  getting-started-in-webgl-shaders-glossary-term3-definition: >-
    A variable that is passed from your sketch to a shader
  getting-started-in-webgl-shaders-glossary-term4-title: Vector
  getting-started-in-webgl-shaders-glossary-term4-definition: >-
    A data type that stores a group of numbers, most commonly two, three, or four, to represent colors, positions,
    and more.
  getting-started-in-webgl-shaders-glossary-term5-title: Float
  getting-started-in-webgl-shaders-glossary-term5-definition: >-
    A data type that stores floating point numbers, which can have a decimal point.
  getting-started-in-webgl-shaders-glossary-term6-title: Int
  getting-started-in-webgl-shaders-glossary-term6-definition: >-
    A data type that stores integers, which are whole numbers without a decimal.
  getting-started-in-webgl-shaders-glossary-term7-title: Sampler
  getting-started-in-webgl-shaders-glossary-term7-definition: >-
    A data type that represents a texture being passed into the shader.
  getting-started-in-webgl-shaders-glossary-term8-title: Attribute
  getting-started-in-webgl-shaders-glossary-term8-definition: >-
    A GLSL variable that is generated in the p5.js sketch and made available in the vertex shader. For most
    situations these are provided by p5.js.
  getting-started-in-webgl-shaders-glossary-term9-title: Texture
  getting-started-in-webgl-shaders-glossary-term9-definition: >-
    An image that passed into a shader program.
  getting-started-in-webgl-shaders-glossary-term10-title: Type
  getting-started-in-webgl-shaders-glossary-term10-definition: >-
    A label describing the characterics of a piece of data, such as an int, a float, a vector, etc.
  getting-started-in-webgl-shaders-glossary-term11-title: Vertex Shader
  getting-started-in-webgl-shaders-glossary-term11-definition: >-
    The part of a shader program that is responsible for positioning geometry in 3D space.
  getting-started-in-webgl-shaders-glossary-term12-title: Fragment Shader
  getting-started-in-webgl-shaders-glossary-term12-definition: >-
    The part of a shader program that is responsible for the color and appearance of each pixel output by the
    shader.    
  color-title: Colore
  color: Una introduzione ai colori digitali.
  coordinate-system-and-shapes-title: Sistema di Coordinate e Figure
  coordinate-system-and-shapes: Disegnare forme semplici e usare il sistema di coordinate.
  interactivity-title: Interattività
  interactivity: Introduzione all&apos;interattività con il mouse e la tastiera.
  program-flow-title: Flusso del programma
  program-flow: Introduzione al controllo del flusso di programma in p5.js.
  curves-title: Curve
  curves: >-
    Una introduzione a tre tipi di curve in p5.js: archi, curve spline, e curve
    di Bézier.
  becoming-a-better-programmer-title: Diventare un programmatore migliore
  debugging-title: Debuggare
  debugging: Guida al debugging.
  optimizing-title: Ottimizzazione del codice p5.js per le prestazioni
  optimizing: >-
    Un tutorial di suggerimenti e trucchi per ottimizzare il codice per renderlo
    più veloce e fluido.
  test-driven-development-title: Test unitari e sviluppo guidato dai test (TDD)
  test-driven-development: >-
    Salva te stesso dall&apos;agonia il giorno dell&apos;installazione. Che
    cos&apos;è il test unitario e come si usa? Di Andy Timmons.
  contributing-to-the-community-title: Contribuire alla community
  development-title: Sviluppo
  development: Guida introduttiva e panoramica per contribuire allo sviluppo.
  looking-inside-title: Guardando dentro p5
  looking-inside: >-
    Un&apos;introduzione amichevole alla struttura dei file e agli strumenti per
    lo sviluppo p5.js, di Luisa Pereira.
  writing-tutorial-title: Scrivere un tutorial
  writing-tutorial: Una guida su come creare tutorial sulla programmazione in p5.js.
  writing-a-tutorial-title: Guida per contribuire ai tutorial p5.js
  writing-a-tutorial-author: Questo tutorial è stato realizzato da Tega Brain.
  writing-a-tutorial-1: >-
    Invitiamo gli educatori, i collaboratori e in generale gli appassionati a
    contribuire ai tutorial di p5.js. Il progetto p5.js rende il creative coding
    e lo sviluppo open source più accessibili a una community variegata di
    persone e siamo entusiasti di pubblicare tutorial su tutte le sfaccettature
    del processo di sviluppo. Il nostro materiale didattico per il momento
    comprende guide per imparare p5, tecnica di programmazione e come
    contribuire ad un progetto open source.
  writing-a-tutorial-2: >-
    Accogliamo volentieri contributi nella forma di nuovi tutorial e questa
    guida serve proprio a spiegare le fasi di proposta, preparazione e
    contribuzione di tutorial.
  writing-a-tutorial-how-start-title: 'Come iniziare:'
  writing-a-tutorial-how-start-1: >-
    Verifica che l&apos;argomento da te proposto non sia stato già trattato.
    C&apos;è 
  writing-a-tutorial-how-start-2: uno spreadsheet
  writing-a-tutorial-how-start-3: >-
    che tiene traccia dei tutorial in lavorazione. Se l&apos;argomento da te
    scelto è nella lista dei tutorial già iniziati, puoi sempre arricchire un
    lavoro in corso d&apos;opera e contribuire preparando un tutorial già
    esistente alla pubblicazione, quindi non esitare a contattarci.
  writing-a-tutorial-how-start-4: >-
    Se il tuo argomento non è già stato affrontato o iniziato, scrivi qualche
    frase per spiegare quale tema proponi di trattare e inviaci questa
    descrizione per email a education@p5js.org.
  writing-a-tutorial-how-prepare-title: 'Come preparare un tutorial p5.js per la pubblicazione online:'
  writing-a-tutorial-how-prepare-1: >-
    Quando sei pronto per pubblicare il tuo tutorial, segui i passaggi seguenti
    per preparare il contenuto per il sito p5.js.
  writing-a-tutorial-how-prepare-2: 'Salva il contenuto del tuo tutorial in un file nome-tutorial.hbs con '
  writing-a-tutorial-how-prepare-3: questa struttura di base
  writing-a-tutorial-how-prepare-4: >-
    . Come viene mostrato in questo file, deve contenere un&apos;intestazione
    come quella qui sotto:
  writing-a-tutorial-how-prepare-5: >-
    La cartella contenente il tuo tutorial verrà verrà posizionata nella
    cartella "tutorial" del sito p5.js. Il file index.hbs è la 
  writing-a-tutorial-how-prepare-6: 'pagina iniziale dei tutorial p5.js,'
  writing-a-tutorial-how-prepare-7: ' e il file test-tutorial.hbs è il test di prova.'
  writing-a-tutorial-how-prepare-8: Tutto il contenuto deve essere incluso nei tag
  writing-a-tutorial-how-prepare-9: >-
    della pagina, e formattato con i tag &lt;h1&gt;, &lt;h2&gt; e i tag di
    paragrafo &lt;p&gt; come mostrato nella 
  writing-a-tutorial-how-prepare-10: pagina del tutorial di prova.
  writing-a-tutorial-how-prepare-11: >-
    Se il tuo tutorial contiene immagini, queste devono essere inserite nella
    cartella assets del sito, precisamente in
    src/assets/learn/test-tutorial/images, come mostrato qui sotto.
  writing-a-tutorial-how-prepare-12: 'Per formattare correttamente il codice nel html della pagina usa il tag:'
  writing-a-tutorial-embedding-title: Incorporare sketch p5.js
  writing-a-tutorial-embedding-1: >-
    Usare p5.js significa che puoi arricchire il tuo tutorial con esempi di
    codice animati, interattivi o modificabili per dimostrare concetti di
    programmazione. I tuoi esempi devono essere realizzati come sketch p5.js e
    possono essere inseriti nel tutorial in due modi.
  writing-a-tutorial-embedding-2: 'Se l&apos;esempio deve essere editabile, come nelle '
  writing-a-tutorial-embedding-3: pagine dei Riferimenti
  writing-a-tutorial-embedding-4: ' del sito p5.js, lo sketch p5.js deve essere incluso nella pagina html usando il widget p5.js. Segui '
  writing-a-tutorial-embedding-5: 'questa guida '
  writing-a-tutorial-embedding-6: 'su come inserire sketch p5.js usando il widget, scritta da '
  writing-a-tutorial-embedding-7: . Puoi trovare un esempio pratico nella
  writing-a-tutorial-embedding-8: ' pagina del tutorial di prova'
  writing-a-tutorial-embedding-9: .
  writing-a-tutorial-embedding-10: >-
    Se l&apos;esempio deve essere animato e/o interattivo, ma non editabile. Lo
    sketch p5.js deve essere incluso nella pagina come iframe, come descritto
    qui sotto.
  writing-a-tutorial-iframe-title: Inserisci uno sketch p5.js usando un iframe
  writing-a-tutorial-iframe-1: >-
    Un iframe è come creare una finestra attraverso cui puoi vedere
    un&apos;altra pagina, isolata dal resto della tua pagina. In questo caso
    sarà una finestra sul file index.html che contiene il tuo sketch p5.js. 
  writing-a-tutorial-iframe-2: >-
    Metti i tuoi sketch p5 nella cartella /src/assets/learn del sito, in una
    cartella etichettata con il nome del tuo sketch, come mostrato nello
    screenshot. Sarà qui che verranno memorizzate tutte le immagini e sketch p5
    collegati all&apos;iframe.
  writing-a-tutorial-iframe-3: >-
    Nelle sottocartelle contenenti il tuo esempio p5 deve esserci un file
    sketch.js e un file embed.html per lo sketch. 
  writing-a-tutorial-iframe-4: >-
    Assicurati che il tuo file embed.html abbia i percorsi corretti delle
    librerie p5 del sito. Se la struttura dei tuoi file è uguale a quella di cui
    sopra, il percorso per la libreria p5.js deve essere
    "../../../js/p5.min.js".
  writing-a-tutorial-iframe-5: >-
    Una volta verificato questo, puoi includere i file "index" di p5.js come
    iframe nel file .hbs che contiene il contenuto del tuo tutorial. Il codice
    di incorporamento per l&apos;iframe sarà quindi: 
  writing-a-tutorial-iframe-6: 'Styling dell&apos;iframe (direttamente nel file o nel foglio di stile):  '
  writing-a-tutorial-iframe-7: 'Qui puoi trovare lo sketch puro in esecuzione: '
  writing-a-tutorial-iframe-8: 'E qui è incorporato nel sito p5 usando il seguente codice:  '
  writing-a-tutorial-iframe-9: >-
    Una cosa da notare è che devi impostare manualmente la dimensione
    dell&apos;iframe, quindi funziona meglio se le cose sono di dimensioni
    standard.
  writing-a-tutorial-iframe-10: >-
    Si noti anche che i link ai file della libreria p5.js non provengono dalla
    pagina .eps con tutto il contenuto del tutorial. Bensì si troveranno nella
    pagina html che che sta elaborando il tuo sketch (che in questo caso si
    chiama embed.html).
  writing-a-tutorial-iframe-11: >-
    Ulteriori informazioni sull&apos;incorporamento di sketch p5.js sono
    disponibili 
  writing-a-tutorial-embed-iframe-12: qui.
  writing-a-tutorial-finishing-title: Ultimi dettagli
  writing-a-tutorial-finishing-1: >-
    Quando avrai finito di modificare il tuo tutorial e avrai ottenuto
    l&apos;approvazione, effettua un fork (copia) della repository
    p5.js-website, prepara il tutorial come mostrato sopra e apri una Pull
    Request nella stessa repository, così potremo pubblicare il tuo lavoro!
  writing-a-tutorial-finishing-2: Grazie!
  color-description1: >-
    Questo tutorial è preso dal libro Learning Processing di Daniel Shiffman,
    pubblicato da Morgan Kaufmann, © 2008 Elsevier Inc. Tutti i diritti
    riservati. È stato trascritto in p5 da Kelly Chang. Se trovi qualche errore
    o hai commenti, 
  color-description2: ' faccelo sapere.'
  color-p1x1: >-
    Nel mondo digitale, quando vogliamo parlare di un colore, è necessaria la
    precisione. Dire "Hey, puoi colorare quel cerchio di blu-verde?" non va
    bene. I colori vengono definiti come un array di numeri. Iniziamo con il
    caso più semplice: bianco & nero e scala di grigi. 0 significa nero, 255
    significa bianco. Ogni altro numero nel mezzo-50, 87, 162, 209, etc- è una
    sfumatura di grigio che va dal nero al bianco.
  color-p2x1: 'Aggiungendo le funzioni '
  color-p2x2: ' e '
  color-p2x3: ' prima di disegnare qualcosa, possiamo impostare il colore di ogni forma. Esiste inoltre la funzione '
  color-p2x4: ', che imposta un colore di sfondo per la finestra. Ecco un esempio.'
  color-code1: |-
    background(255);    // Imposta il colore di sfondo a bianco 
     stroke(0);          // Imposta il colore del contorno (stroke) a nero 
     fill(150);          // Imposta il colore di riempimento di una forma (fill) a grigio 
     rect(50,50,75,100); // Disegna il rettangolo
  color-p3x1: 'Il contorno e il riempimento possono essere eliminati con le funzioni: '
  color-p3x2: ' e '
  color-p3x3: >-
    . Istintivamente potremmo pensare di usare "stroke(0)" per eliminare il
    contorno, ma è importante tenere a mente che 0 non significa "niente", bensì
    indica il colore nero. Inoltre, ricorda di non eliminare entrambi: con 
  color-p3x4: ' e '
  color-p3x5: ', non apparirà nulla!'
  color-p4x1: >-
    Infine, se disegniamo due figure, p5.js userà sempre l&apos;ultima scelta di
    contorno e riempimento (leggendo il codice dall&apos;alto verso il basso).
  color-rgb-title: Colore RGB
  color-rgb-p1x1: >-
    Ricordi i colori a dita? Mischiando tre colori "primari" si poteva creare
    qualsiasi altro colore. Mescolare tutti i colori insieme creava un colore
    marrone fango, e più pittura aggiungevi, più scuro diventava. Anche i colori
    digitali vengono realizzati mescolando i tre colori primari, ma in un modo
    leggermente diverso. Innanzitutto, i colori primari sono diversi: rosso,
    verde e blu (in inglese red, green, e blue, da cui "RGB"). Inoltre, con i
    colori sullo schermo mescoli luce, non pittura, quindi anche le regole di
    miscelazione sono diverse.
  color-rgb-li1: Rosso + Verde = Giallo
  color-rgb-li2: Rosso + Blu = Viola
  color-rgb-li3: Verde + Blu = Ciano (Blu-Verde)
  color-rgb-li4: Rosso + Verde + Blu = Bianco
  color-rgb-li5: Nessun colore = Nero
  color-rgb-p2x1: >-
    Questo presuppone che i colori siano il più luminosi possibile, ma
    ovviamente è disponibile una gamma di colori, quindi un po&apos; di rosso
    con un po&apos; di verde e un po&apos; di blu genera il grigio, e un
    po&apos; di rosso con un po&apos; di blu crea il viola scuro. Anche se ci
    vorrà del tempo per abituarsi a questi concetti, più programmerai e
    sperimenterai con il colore RGB, più velocemente diventerà istintivo, come
    mescolare la vernice con le dita. Ovviamente non puoi dire "Mescola un
    po&apos; di rosso con un po&apos; di blu", devi fornire una quantità esatta.
    Per quanto riguarda la scala di grigio, i singoli elementi di colore vengono
    espressi come intervalli da 0 (assenza del colore) a 255 (presenza massima),
    e sono elencati nell&apos;ordine R (rosso), G (verde), e B (blu). Acquisirai
    maggiore familiarità con i colori RGB attraverso più esperimenti, ma in
    seguito introdurremo esempi di codice che utilizzano colori comuni.
  color-transparency-title: Trasparenza
  color-transparency-p1x1: >-
    Oltre alle componenti rosso, verde e blu di ogni colore, esiste una quarta
    componente opzionale chiamata "alfa" ("alpha", in inglese). Alfa indica la
    trasparenza ed è particolarmente utile quando si desidera disegnare elementi
    sovrapposti, ma comunque parzialmente visibili. Il valore alfa di una
    immagine viene chiamato anche il "canale alpha" di una immagine.
  color-transparency-p2x1: >-
    È importante importante notare che i pixel non sono veramente trasparenti,
    questa è semplicemente un&apos;illusione ottenuta mescolando i colori.
    Dietro le quinte, p5.js prende i numeri dei colori e aggiunge ad uno una
    percentuale dell&apos;altro, creando l&apos;illusione di una sfumatura. (Se
    sei interessato a programmare i famosi "rose-colored glasses", è qui che
    dovresti iniziare.)
  color-transparency-p3x1: >-
    Anche i valori di alfa vanno da 0 a 255, dove 0 è completamente trasparente
    (0% di opacità) e 255 è completamente opaco (100% di opacità).
  color-custom-ranges-title: Gamme di colori personalizzate
  color-custom-ranges-p1x1: >-
    Il modello RGB con valori tra 0 e 255 non è l&apos;unico modo per definire i
    colori in p5.js, che infatti ci permette di utilizzare più metodi. Per
    esempio, potremmo preferire una gamma di colori che va dallo 0 a 100 (come
    una percentuale). Per fare questo puoi usare 
  color-custom-ranges-p2x1: >-
    La funzione qui sopra dice: "OK, dobbiamo usare i valori rosso, verde e blu
    per definire i colori. I loro valori saranno compresi tra 0 e 100"
  color-custom-ranges-p3x1: >-
    Anche se è raramente conveniente, è anche possibile avere diverse gamme di
    colori per ogni componente di colore:
  color-custom-ranges-p4x1: >-
    Qui stiamo dicendo "I valori del rosso vanno da 0 a 100, il verde da 0 a
    500, il blu da 0 a 10 e l&apos;alfa da 0 a 255."
  color-custom-ranges-p5x1: >-
    Infine, anche se probabilmente basteranno i colori RGB per tutte le tue
    esigenze di programmazione, puoi anche utilizzare i colori nella modalità
    HSB (tonalità, saturazione e luminosità). Senza entrare troppo nei dettagli,
    i colori HSB funzionano così:
  color-custom-ranges-li1x1: Tonalità
  color-custom-ranges-li1x2: '—Il tipo di colore, i valori di default vanno da 0 a 255.'
  color-custom-ranges-li2x1: Saturazione
  color-custom-ranges-li2x2: '—La vivacità del colore, per default da 0 a 255.'
  color-custom-ranges-li3x1: Luminosità
  color-custom-ranges-li3x2: '—La luminosità del colore, per default da 0 a 255.'
  color-custom-ranges-p6x1: 'Con '
  color-custom-ranges-p6x2: ' puoi impostare i tuoi intervalli per questi valori. Alcuni preferiscono il range 0-360 per la tonalità (pensa ai 360 gradi di una ruota dei colori) e 0-100 per la saturazione e luminosità (pensa a 0-100%).'
  coordinate-system-description1: 'Questo tutorial è preso dal libro '
  coordinate-system-description2: Learning Processing
  coordinate-system-description3: ' di Daniel Shiffman, pubblicato da Morgan Kaufmann, © 2008 Elsevier Inc. Tutti i diritti riservati. È stato trascritto in p5 da Kelly Chang. Se trovi qualche errore o hai commenti '
  coordinate-system-description4: faccelo sapere
  coordinate-system-description5: .
  coordinate-system-description-title: Sistema di coordinate e forme
  coordinate-system-description-p1x1: >-
    Prima di iniziare a programmare con p5, dobbiamo tornare alla memoria della
    nostra scuola media, trovare un pezzo di carta millimetrata e tracciare una
    linea retta. La distanza più breve tra due punti è esattamente una linea
    retta, ed è qui che iniziamo, con due punti su quella carta millimetrata.
  coordinate-system-description-p2x1: ' La figura qui sopra mostra una linea tra il punto A (1,0) e il punto B (4,5). Se volessi indirizzare un tuo amico a disegnare quella stessa linea, gli urleresti "per favore, traccia una linea dal punto uno-zero al punto quattro-cinque." Ora immagina che il tuo amico sia un computer e che tu voglia spiegare a questo amico digitale come disegnare la stessa linea retta sullo schermo. In questo caso, puoi usare le stesse istruzioni (la differenza è che questa volta puoi saltare i convenevoli e ti verrà richiesto di utilizzare una formattazione precisa).  Qui, le istruzioni appariranno così:'
  coordinate-system-description-p3x1: >-
    Anche se non hai ancora studiato la sintassi della scrittura di un
    programma, le affermazioni di cui sopra dovrebbero comunque essere
    comprensibili. Forniamo al computer un&apos;istruzione da eseguire (che
    chiamiamo "funzione") per fargli tracciare una linea. Inoltre, forniamo
    anche alcuni parametri per specificare come dovrebbe essere disegnata: dal
    punto A (1,0) al punto B (4,5). Se pensiamo a questa riga di codice come ad
    una frase, la funzione è un verbo e il parametro è un oggetto. Questa frase
    di codice utilizza un punto e virgola come simbolo finale anziché un punto.
  coordinate-system-description-p4x1: >-
    La chiave qui è capire che lo schermo del computer non è altro che un pezzo
    di carta millimetrata più elaborato. Ogni pixel sullo schermo rappresenta
    una coordinata, ovvero due numeri: "x" (orizzontale) e "y" (verticale)
    rappresentano la posizione di un punto nello spazio. Il nostro compito è
    specificare quali forme e colori dovrebbero apparire in queste coordinate
    pixel.
  coordinate-system-description-p5x1: >-
    Tuttavia, c&apos;è una cosa da notare qui. La carta millimetrata della
    scuola media ("Sistema di coordinate cartesiane") posizionava (0,0) al
    centro con l&apos;asse y rivolto verso l&apos;alto e l&apos;asse x rivolto
    verso destra (nella direzione positiva, negativa verso il basso e verso la
    sinistra). Il sistema di coordinate per i pixel in una finestra del computer
    è, tuttavia, invertito lungo l&apos;asse y. (0,0) si trova nell&apos;angolo
    in alto a sinistra con la direzione positiva che punta orizzontalmente a
    destra e verticalmente in basso.
  coordinate-system-simple-shapes-title: Forme semplici
  coordinate-system-simple-shapes-p1x1: >-
    La stragrande maggioranza degli esempi di programmazione p5 sono di natura
    visiva. Questi esempi, alla base, riguardano il disegno di forme e
    l&apos;impostazione di pixel. Cominciamo guardando quattro forme primitive.
  coordinate-system-simple-shapes-p2x1: >-
    Per ogni forma, ci chiederemo quali informazioni sono necessarie per
    specificare la posizione e le dimensioni (e successivamente il colore) di
    quella forma e apprendere come p5 si aspetta di ricevere tali informazioni.
    In ciascuno dei diagrammi seguenti, useremo una finestra con una larghezza
    di 100 pixel e un&apos;altezza di 100 pixel.
  coordinate-system-simple-shapes-p3x1: 'Un '
  coordinate-system-simple-shapes-p3x2: ' è la forma più semplice ed un buon punto di partenza. Per disegnare un punto, abbiamo solo bisogno di una coordinata x e y.'
  coordinate-system-simple-shapes-p4x1: 'Neanche la '
  coordinate-system-simple-shapes-p4x2: ' è troppo difficile. Richiede semplicemente due punti: (x1,y1) e (x2,y2):'
  coordinate-system-simple-shapes-p5x1: 'Una volta che arriviamo a disegnare un '
  coordinate-system-simple-shapes-p5x2: >-
    , le cose diventano un po&apos; più complicate. In p5, un rettangolo è
    definito dalle coordinate per l&apos;angolo in alto a sinistra del
    rettangolo, dalla larghezza e dall&apos;altezza.
  coordinate-system-simple-shapes-p6x1: >-
    Un secondo modo per disegnare un rettangolo consiste nello specificare il
    punto centrale, con la larghezza e l&apos;altezza. Se preferiamo questo
    metodo, indichiamo innanzitutto che vogliamo usare la modalità 
  coordinate-system-simple-shapes-p6x2: ' prima delle istruzioni per il rettangolo stesso. Si noti che p5 è sensibile al maiuscolo / minuscolo.'
  coordinate-system-simple-shapes-p7x1: >-
    Infine, possiamo anche disegnare un rettangolo con due punti (l&apos;angolo
    in alto a sinistra e l&apos;angolo in basso a destra). La modalità qui è
  coordinate-system-simple-shapes-p7x2: >-
    . Nota che questo esempio realizza sullo schermo lo stesso risultato
    dell&apos;esempio sopra.
  coordinate-system-simple-shapes-p8x1: >-
    Quando avremo preso confidenza con il concetto di disegnare un rettangolo,
    un 
  coordinate-system-simple-shapes-p8x2: ' è un gioco da ragazzi. In effetti, è identica a '
  coordinate-system-simple-shapes-p8x3: >-
    con la differenza che l&apos;ellisse è disegnata dove dovrebbe essere la
    casella contenente il rettangolo. La modalità predefinita per 
  coordinate-system-simple-shapes-p8x4: ' è '
  coordinate-system-simple-shapes-p8x5: ', invece di '
  coordinate-system-simple-shapes-p8x6: .
  coordinate-system-simple-shapes-p9x1: >-
    Ora diamo un&apos;occhiata ad alcuni codici che utilizzano impostazioni di
    disegno più pratiche. Useremo una dimensione della tela di 200 per 200. Nota
    l&apos;uso della funzione createCanvas() per specificare la larghezza e
    l&apos;altezza della tela.
libraries:
  Libraries: Librerie
  core-libraries: Librerie di base
  community-libraries: Librerie della Community
  libraries-created-by: 'Realizzata da:'
  p5.sound: >-
    p5.sound estende p5 con funzionalità Web Audio tra cui input audio,
    riproduzione, analisi e sintesi.
  p5.accessibility: >-
    p5.accessibility rende la tela p5 più accessibile alle persone non vedenti e
    ipovedenti.
  asciiart: >-
    p5.asciiart è un convertitore di immagini ad ASCII semplice e facile da
    usare per p5.js.
  p5.ble: >-
    Una libreria JavaScript che consente la comunicazione tra dispositivi BLE e
    schizzi p5.
  p5.bots: >-
    Con p5.bots puoi interagire con il tuo Arduino (o altro microprocessore)
    dall&apos;interno del browser. Usa i dati del sensore per guidare uno
    schizzo; usa uno schizzo per guidare LED, motori e altro!
  p5.clickable: Libreria di pulsanti guidata dagli eventi e di facile utilizzo per p5.js.
  p5.cmyk.js: ColorSpace CMYK
  p5.collide2D: >-
    p5.collide2D fornisce strumenti per il calcolo del rilevamento delle
    collisioni per la geometria 2D con p5.js.
  p5.createloop: >-
    Crea loop di animazione con rumore ed esportazioni GIF in una riga di
    codice.
  p5.dimensions: >-
    p5.dimensions estende le funzioni vettoriali di p5.js per operare in
    qualsiasi numero di dimensioni.
  p5.EasyCam: >-
    Semplice controllo della videocamera 3D con panoramica inerziale, zoom e
    rotazione. Importante contributo di Thomas Diewald.
  p5.experience: >-
    Ampia libreria per p5.js che aggiunge ulteriori funzionalità di ascolto di
    eventi per la creazione di applicazioni Web basate su tela.
  p5.func: >-
    p5.func è un&apos;estensione p5 che fornisce nuovi oggetti e utilità per la
    generazione di funzioni nei domini di tempo, frequenza e spazio.
  p5.geolocation: >-
    p5.geolocation fornisce tecniche per acquisire, osservare, calcolare e
    georeferenziare le posizioni degli utenti per p5.js.
  p5.gibber: p5.gibber offre funzionalità di sequenziamento musicale e sintesi audio.
  grafica.js: >-
    grafica.js ti consente di aggiungere grafici 2D semplici ma altamente
    configurabili ai tuoi sketch p5.js.
  p5.gui: p5.gui genera un&apos;interfaccia utente grafica per i tuoi sketch p5.js.
  p5.localmessage: >-
    p5.localmessage fornisce una semplice interfaccia per inviare messaggi
    localmente da uno sketch all&apos;altro e quindi disegnare in più finestre!
  marching: 'Conversione da raster a vettoriale, isosuperfici.'
  mappa: >-
    Mappa fornisce una serie di strumenti per lavorare con mappe statiche e
    geo-dati, oltre ad altri strumenti utili per sviluppare rappresentazioni
    visive dei dati con geolocalizzazione.
  ml5.js: >-
    ml5.js si basa su Tensorflow.js e fornisce un facile accesso agli algoritmi
    e ai modelli di machine learning nel browser.
  p5play: >-
    p5play fornisce sprite, animazioni, funzioni di input e collisione per
    giochi e applicazioni simili.
  p5.particle: >-
    Gli oggetti Particle e Fountain possono essere utilizzati per creare effetti
    basati sui dati, che possono derivare dall&apos;interazione dell&apos;utente
    o dai file JSON.
  p5.Riso: >-
    p5.Riso è una libreria per la generazione di file adatti per la stampa
    Risograph. Aiuta a trasformare i tuoi sketch in stampe a più colori.
  rita.js: >-
    RiTa.js fornisce una serie di oggetti di elaborazione del linguaggio
    naturale per la letteratura generativa.
  Rotating knobs: >-
    Crea manopole che puoi ruotare con grafica personalizzata e restituire
    intervalli di valori.
  p5.scenemanager: >-
    p5.SceneManager ti aiuta a realizzare disegni con più stati/scene. Ogni
    scena è come un disegno nel disegno principale.
  p5.screenPosition: >-
    Aggiungi le variabili screenX e screenY con le coordinate del cursore sullo
    schermo.
  p5.scribble: >-
    Disegna primitive 2D di aspetto abbozzato. Creato da Janneck Wullschleger,
    basato su un porting della libreria di elaborazione originale
  p5.serial: >-
    p5.serial consente a diversi dispositivi di utilizzare la comunicazione
    seriale (RS-232) per comunicare con sketch p5 in un browser Web.
  Shape5: >-
    Shape5 è una libreria primitiva 2D per studenti di scuole elementari che
    stanno imparando a programmare per la prima volta.
  p5.shape.js: Una libreria creata per aggiungere più forme semplici al framework p5.js.
  p5.speech: >-
    p5.speech fornisce un accesso semplice e chiaro alle API di Web Speech e
    Speech Recognition, facilitando la creazione di sketch in grado di parlare e
    ascoltare.
  p5.start2d.js: 'estensione p5 per arte statica 2D usando px, mm, cm o pollici'
  p5.tiledmap: >-
    p5.tiledmap fornisce funzioni di disegno e di supporto per includere le
    mappe nei tuoi sketch.
  p5.touchgui: Una libreria di interfaccia grafica (GUI) multi-touch e mouse.
  tramontana: >-
    Tramontana è una piattaforma per utilizzare facilmente molti dispositivi
    (iOS, Android, tramontana Board,...) per creare ambienti interattivi, spazi
    interattivi o semplicemente testare esperimenti su larga scala.
  vida: >-
    Vida è una semplice libreria che aggiunge funzionalità di rilevamento del
    movimento e rilevamento BLOB basate su videocamera (o video) a p5js.
  p5.voronoi: >-
    p5.voronoi fornisce una serie di strumenti per disegnare e utilizzare
    diagrammi voronoi nei tuoi sketch p5.js.
  p5.3D: Testo 3D e immagini in WebGL.
  using-a-library-title: Come usare una libreria
  using-a-library1: >-
    Per libreria p5.js si intende qualsiasi codice JavaScript che estende o
    aggiunge alla funzionalità principale p5.js. Esistono due categorie di
    librerie. Le librerie di base (
  using-a-library3: >-
    ) che fanno parte della distribuzione ufficiale di p5.js, e le librerie
    fornite, che sono sviluppate, possedute e gestite dai membri della comunità
    p5.js.
  using-a-library4: >-
    Per includere una libreria nel tuo sketch, collegala al tuo file HTML, dopo
    aver effettuato il collegamento in p5.js. Qui sotto un file HTML di esempio:
  create-your-own-title: Crea la tua libreria
  create-your-own1: >-
    p5.js accoglie tutte le librerie aggiuntive create da esterni! Dai
    un&apos;occhiata al
  create-your-own2: tutorial sulle librerie
  create-your-own3: per maggiori dettagli su come crearne una.
  create-your-own4: >-
    Se hai creato una libreria e vorresti che fosse inclusa in questa pagina,
    invia questo modulo!
community:
  community-title: Community
  community-statement-title: Dichiarazione della community p5.js
  community-statement1: >-
    p5.js è una community interessata ad esplorare la creazione di arte e design
    con la tecnologia.
  community-statement2: >-
    Siamo una community di, e in solidarietà con, persone di ogni identità ed
    espressione di genere, orientamento sessuale, razza, etnia, lingua, neuro
    tipo, taglia, disabilità, classe, religione, cultura, sottocultura, opinione
    politica, età, livello di abilità, occupazione, e origine. Riconosciamo che
    non tutti hanno il tempo, i mezzi finanziari o la capacità di partecipare
    attivamente, ma riconosciamo e incoraggiamo il coinvolgimento di tutti i
    tipi. Ci impegniamo a promuovere l&apos;eliminazione degli ostacoli e il
    potenziamento delle capacità. Siamo tutti studenti.
  community-statement3: >-
    Ci piacciono questi hashtag: #noCodeSnobs (perché diamo valore alla comunità
    rispetto all&apos;efficienza), #newKidLove (perché tutti abbiamo iniziato da
    qualche parte), #unassumeCore (perché non presupponiamo conoscenze) e
    #BlackLivesMatter (il perché è ovvio).
  in-practice-title: 'In pratica:'
  in-practice1: >-
    Non siamo programmatori snob. Non assumiamo conoscenze preliminari o
    supponiamo che ci siano cose che tutti dovrebbero sapere. 
  in-practice2: >-
    Insistiamo nell&apos;essere attivamente coinvolti nelle richieste di
    feedback, indipendentemente dalla loro complessità.
  in-practice3: >-
    Accogliamo i nuovi arrivati e diamo priorità all&apos;apprendimento degli
    altri. Miriamo ad affrontare tutti i task con l&apos;entusiasmo di un
    principiante, perché crediamo che l&apos;impegno dei nuovi arrivati abbia lo
    stesso valore di quello degli esperti.
  in-practice4: >-
    Ci sforziamo costantemente di riconoscere e validare attivamente molteplici
    tipi di contribuzioni.
  in-practice5: Siamo sempre disposti a offrire aiuto o guida.
  in-times-conflict-title: 'In tempi di conflitto:'
  in-times-conflict1: Ascoltiamo.
  in-times-conflict2: Comunichiamo chiaramente riconoscendo i sentimenti degli altri.
  in-times-conflict3: >-
    Riconosciamo quando siamo nel torto, ci scusiamo e accettiamo la
    responsabilità delle nostre azioni.
  in-times-conflict4: Cerchiamo continuamente di migliorare noi stessi e la nostra comunità.
  in-times-conflict5: Manteniamo la nostra comunità rispettosa e aperta.
  in-times-conflict6: Facciamo in modo che tutti si sentano ascoltati.
  in-times-conflict7: Siamo attenti e cordiali nelle nostre interazioni.
  in-the-future-title: 'Nel futuro:'
  in-the-future1: Il futuro è ora.
  notes-title: Note
  notes1: 'Si prega di visitare anche il nostro '
  notes2: Codice di Condotta p5.js
  notes3: '. Questa Dichiarazione della p5.js Community è pubblicata sotto una '
  notes4: licenza Creative Commons
  notes5: . Sentiti libero di condividere e remixare con l&apos;attribuzione.
  contribute-title: Contribuire
  contribute1: >-
    La nostra comunità è sempre alla ricerca di appassionati che possano aiutare
    in modi diversi.
  develop-title: Sviluppare.
  develop1: GitHub
  develop2: ' è il luogo principale in cui viene raccolto il codice, vengono documentati i problemi e si tengono discussioni sul codice. Dai un&apos;occhiata al '
  develop3: ' tutorial di sviluppo'
  develop4: ' per iniziare, o '
  develop5: crea la tua libreria.
  document-title: Documentare.
  document1: ' Tutti amiamo la documentazione. Abbiamo bisogno di aiuto '
  document2: con l&apos;aggiunta di esempi
  document3: ', e'
  document4: ' di documentazione'
  document5: ', e con la realizzazione di tutorial.'
  teach-title: Insegnare.
  teach1: ' Tieni un seminario o una lezione, insegna ai tuoi amici e collaboratori! Tagga @p5xjs su Twitter e faremo del nostro meglio per condividere ciò che stai facendo.'
  create-title: Creare.
  create1: ' p5.js è alla ricerca di designer, artisti e programmatori per mettere in mostra il tuo lavoro creativo ed incredibile in prima pagina e ispirare altre persone. Invia il tuo lavoro a '
  create2: hello@p5js.org
  create3: .
  donate-title: Donare.
  donate1: ' p5.js è gratuito e open source e realizzato da artisti. Aiuta a supportare lo sviluppo di p5.js attraverso una donazione a '
  donate2: Processing Foundation
  donate3: .
  contributors-conference-title: Conferenza dei Collaboratori di p5.js
  contributors-conference1: >-
    Sebbene la maggior parte del lavoro avvenga online, ci incontriamo anche di
    persona. Abbiamo tenuto due conferenze dei contribuenti al 
  contributors-conference2: >-
    alla Carnegie Mellon University di Pittsburgh, Pennsylvania. Artisti,
    designer, sviluppatori, e educatori si sono riuniti per promuovere lo
    sviluppo di p5.js.
  participants-title: 'I partecipanti '
  support-title: Sostegno
  support1: La nostra conferenza dei contribuenti ha avuto luogo presso il
  support2: >-
    alla Carnegie Mellon University, un laboratorio accademico per la ricerca
    atipica, antidisciplinare e interistituzionale all&apos;incrocio tra arte,
    scienza, tecnologia e cultura.
  support3: Questo evento è stato reso possibile da una sovvenzione del
  support4: e dal generoso sostegno da parte di
  support5: e
  support6: Grazie!
  mailing-list-title: Mailing list
  mailing-list-1: >-
    Inserisci il tuo indirizzo email per ricevere aggiornamenti occasionali da
    Processing Foundation.
  2015contributors-conference-title: Conferenza dei Contribuenti 2015
  2015contributors-conference-date: 25-31 Maggio
  2015contributors-conference1: >-
    30 partecipanti di varie origini si sono riuniti e hanno trascorso una
    settimana a
  2015contributors-conference2: >-
    , per migliorare il codice, la documentazione, e gli strumenti di
    divulgazione della community sull&apos;ambiente di programmazione p5.js. I
    partecipanti provenivano da Hong Kong, Seattle, Los Angeles, Boston e New
    York. La maggior parte lavorava come professionista nei settori della
    tecnologia creativa, dell&apos;interaction design e delle arti dei nuovi
    media, ma il gruppo comprendeva anche una mezza dozzina di studenti
    universitari e laureati delle Scuole di arte e architettura di Carnegie
    Mellon.
  2015contributors-conference3: Foto di Taeyoon Choi
  2015contributors-conference-diversity-title: Diversità
  2015contributors-conference-diversity1: >-
    Oltre allo sviluppo tecnico, uno dei principali obiettivi di questa
    conferenza è stato la sensibilizzazione, la community e la diversità. La
    conferenza è iniziata con un panel
  2015contributors-conference-diversity2: >-
    Diversity: Seven Voices on Race, Gender, Ability &amp; Class for FLOSS and
    the Internet
  2015contributors-conference-diversity3: '. '
  2015contributors-conference-diversity4: Organizzato da
  2015contributors-conference-diversity5: e
  2015contributors-conference-diversity6: ', '
  2015contributors-conference-diversity7: >-
    il panel si è svolto martedì 25 maggio 2015 nell&apos;auditorium di Kresge
    alla Carnegie Mellon University. Gli speaker sono stati 
  2015contributors-conference-diversity8: e
  2015contributors-conference-diversity9: .
  2015cc_1: >-
    Diversi gruppi di partecipanti sorridono e fanno un segno p5 con le loro
    mani
  2015cc_2: >-
    I partecipanti saltano, sorridono e lanciano le mani in aria su un prato
    verde
  2015cc_3: Donna che presenta la dichiarazione della community p5.js dal suo laptop
  2015cc_4: >-
    La donna parla espressamente in un microfono mentre due collaboratori maschi
    lo guardano
  2015cc_5: I partecipanti sorridono attentamente e ascoltano una presentazione
  2015cc_6: La donna legge riguardo a p5.js in un microfono per tre studentesse
  2015cc_7: >-
    I partecipanti si siedono in cerchio attorno a una lavagna bianca con note
    adesive su di essa mentre una studentessa parla al microfono
  2015cc_8: >-
    I partecipanti si siedono intorno a un tavolo a guardare l&apos;altro laptop
    e confrontare il codice 
  2015cc_9: 'Lavagna con note adesive e scritte di colore diverso sulla programmazione '
  2015cc_10: >-
    Donna che parla al microfono della valutazione di diversi set di abilità
    mentre un gruppo di partecipanti con laptop guarda il suo powerpoint in una
    classe
  2015cc_11: >-
    La donna parla da un podio in un auditorium mentre tre partecipanti siedono
    sul palco e altri tre partecipano a una videochiamata
  2015cc_12: >-
    Vista dall&apos;alto di un&apos;aula con partecipanti che lavorano sui loro
    laptop
  2015cc_13: Cinque persone che hanno una discussione in cerchio
  2015cc_14: Cinque persone con i loro laptop che condividono le loro note in cerchio
  2015cc_15: Uomo in una classe con un microfono che parla a un gruppo di partecipanti
  2019contributors-conference-title: Conferenza dei Contribuenti 2019
  2019contributors-conference-date: 13-18 Agosto
  2019contributors-conference1: 'Un gruppo interdisciplinare di 35 partecipanti si è riunito al '
  2019contributors-conference2: >-
    , per migliorare il codice, la documentazione, gli strumenti di divulgazione
    della community ed esplorare l&apos;attuale panorama dell&apos;ambiente di
    programmazione p5.js. Composta da una vasta gamma di partecipanti nei
    settori della tecnologia creativa, dell&apos;interaction design e delle
    nuove arti mediatiche, la conferenza mirava a favorire il dialogo attraverso
    una lente multidisciplinare. I gruppi di lavoro si sono concentrati su
    diverse aree tematiche: accesso; Musica e codice nell&apos;esecuzione;
    Paesaggio della tecnologia creativa; e internazionalizzazione.
  2019contributors-conference3: Video di Qianqian Ye
  2019contributors-conference4: Foto di Jacquelyn Johnson
  outputs: Output
  output1: >-
    . L&apos;implementazione di modelli flessibili con forme di triangoli,
    quadrati, esagoni e ottagoni per p5.js. Creato da Aren Davey.
  output2: >-
    . Un set di file modello per la creazione di un gioco multiplayer
    multi-dispositivo in cui più client possono connettersi a una pagina host
    specificata. Creato da L05.
  output3: Esperimenti che usano
  output3-1: >-
    , per testare le funzioni dell&apos;interfaccia softCompile e OSC e la
    funzione di connettività è stata aggiunta nella dimostrazione del setup
    MIDI. Un ambiente VJ collaborativo per la programmazione live con p5.js!
    Creato da Ted Davis.
  output4: >-
    Un panel su Blackness and Gender in Virtual Space guidato da American
    Artist, con shawné michaelain holloway e LaJuné McMillian.
  output5: Workshop condotti da Everest Pipkin e Jon Chambers.
  output6: 'Un prototipo di un '
  output6-1: interfaccia per notebook per p5.js.
  output6-2: Creata da Allison Parrish.
  output7: >-
    Nuove installazioni artistiche di Stalgia Grigg, LaJuné McMillian, Aatish
    Bhatia e Jon Chambers.
  output8: Strumenti per contribuenti globali di p5.js.
  output8-1: >-
    Creato da Aarón Montoya-Moraga, Kenneth Lim, Guillermo Montecinos, Qianqian
    Ye, Dorothy R. Santos e Yasheng She.
  output9: Come scrivere codice creativo non violento.
  output9-1: ' Una zina guidata da Olivia Ross.'
  output10: >-
    Ristrutturazione del sito web p5.js per migliorarne l&apos;usabilità.
    Include progressi sull&apos;usabilità della lettura dello schermo e
    miglioramenti delle pagine Home, Download, Inizio e Riferimenti. Tra i
    collaboratori ci sono Claire Kearney-Volpe, Sina Bahram, Kate Hollenbach,
    Olivia Ross, Luis Morales-Navarro, Lauren McCarthy ed Evelyn Masso.
  output11: >-
    Performance collaborative di Luisa Pereira, Jun Shern Chan, Shefali Nayak,
    Sona Lee, Ted Davis, e Carlos Garcia.
  output12: Performance di Natalie Braginsky.
  output13: >-
    Una progettazione del sistema di librerie p5.js per l&apos;editor p5. Creato
    da Cassie Tarakajian e Luca Damasco.
  output14: >-
    Prototipi che collegano p5 ad altre librerie. Creato da Alex Yixuan Xu e
    Lauren Valley.
  output15: Un falò di chiusura guidato da Golan Levin.
  2019cc_1: >-
    Uomo su un podio universitario dando una presentazione a una classe
    affollata
  2019cc_2: I partecipanti seduti a un lungo tavolo a pranzo e una discussione
  2019cc_3: 'Partecipanti in una classe, alcuni lavorano sui loro laptop, altri parlano '
  2019cc_4: Aula di partecipanti che lavorano sui loro laptop
  2019cc_5: Partecipanti a una riunione in un&apos;aula buia
  2019cc_6: Donna che fa presentazione in un&apos;aula con diversi partecipanti
  2019cc_7: Partecipanti che conversano in un&apos;aula affollata
  2019cc_8: Donna con microfono che parla ai compagni partecipanti in una classe
  2019cc_9: >-
    Il partecipante al podio parla di fronte a un testo proiettato sul problema
    dell&apos;anonimizzazione dei dati
  2019cc_10: >-
    La persona con un microfono che parla agli altri partecipanti davanti al
    testo dove c&apos;è scritto che p5.js non aggiungerà nuove funzionalità
    tranne quelle che aumentano l&apos;accesso
  2019cc_11: 'Donna che parla in un microfono a parlare con gli altri partecipanti '
  2019cc_12: Un uomo con un microfono che parla agli altri partecipanti
  2019cc_13: >-
    I partecipanti si siedono in una classe verso gli oratori ascoltando
    attentamente
  2019cc_14: 'L&apos;aula dei partecipanti di fronte a un oratore ascolta attentamente '
  2019cc_15: >-
    Donna con microfono che parla ai compagni partecipanti con il testo sacred
    buondaries nella proiezione dietro di lei 
  2019cc_16: >-
    Vista dall&apos;alto dei partecipanti che ascoltano un pannello e vedono una
    proiezione di un&apos;immagine 3d sulla persona 
  2019cc_17: >-
    I partecipanti si siedono intorno a un tavolo con i loro laptop e osservano
    il codice su uno schermo
  2019cc_18: >-
    La donna seduta accanto ad un orsacchiotto a grandezza naturale lavora sul
    suo computer portatile
  2019cc_19: I partecipanti in piedi all&apos;aperto sorridendo
  2019cc_20: Quattro partecipanti in piedi in un cerchio conversando
  2019cc_21: Partecipanti seduti fuori a pranzo insieme
  2019cc_22: >-
    I partecipanti seduti attorno a un grande tavolo a forma di U guardano verso
    la parte anteriore della classe
  2019cc_23: Uomo seduto davanti all&apos;aula che parla energicamente in un microfono
  2019cc_24: >-
    Foto di gruppo dei partecipanti che sorridono con entusiasmo con le mani in
    aria
  2019cc_25: Gruppo di persone sedute attorno al fuoco da quattro monitor LCD.
books:
  books-title: Libri
  book-1-title: Getting Started with p5.js
  book-1-authors: 'Lauren McCarthy, Casey Reas, e Ben Fry. Illustrazioni di Taeyoon Choi.'
  book-1-publisher: 'Pubblicato ottobre 2015, Maker Media. '
  book-1-pages: '246 pagine. '
  book-1-type: Tascabile.
  book-1-description: >-
    Scritto dallo sviluppatore principale di p5.js e dai fondatori di
    Processing, questo libro fornisce un&apos;introduzione alle possibilità
    creative del Web di oggi, utilizzando JavaScript e HTML.
  book-1-order-a: Ordina Stampa/Ebook da O&apos;Reilly
  book-1-order-b: Ordina su Amazon
  book-2-title: Getting Started with p5.js (Edizione Spagnola)
  book-2-authors: >-
    Lauren McCarthy, Casey Reas, e Ben Fry. Traduzione di Aarón Montoya-Moraga.
    Illustrazioni di Taeyoon Choi.
  book-2-publisher: 'Pubblicato 2018, Processing Foundation, Inc. '
  book-2-pages: '246 pagine. '
  book-2-type: Copertina morbida.
  book-2-description: >-
    Scritto dallo sviluppatore principale di p5.js e dai fondatori di
    Processing, questo libro offre un&apos;introduzione alle possibilità
    creative del Web di oggi, utilizzando JavaScript e HTML.
  book-2-order-a: Ordina il PDF da The Processing Foundation Press
  book-2-order-b: Ordina una copia fisica su Amazon
  book-3-title: Generative Design
  book-3-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub e Claudius Lazzeroni.'
  book-3-publisher: >-
    Pubblicato 30 ottobre 2018, Princeton Architectural Press; Edizione di
    ristampa. 
  book-3-pages: '255 pagine. '
  book-3-type: Tascabile.
  book-3-description: >-
    Usando linguaggi semplici come JavaScript in p5.js, artisti e creatori
    possono creare di tutto, dalla tipografia interattiva ai tessuti, dai mobili
    stampati in 3D a infografiche complesse ed eleganti.
  book-3-order-a: Ordina su Princeton Architectural Press
  book-3-order-b: Ordina su Amazon
  book-4-title: Generative Gestaltung (German Edition)
  book-4-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub e Claudius Lazzeroni.'
  book-4-publisher: 'Pubblicato il 1 marzo 2018, Schmidt Hermann Verlag. '
  book-4-pages: '256 pagine. '
  book-4-type: Copertina rigida.
  book-4-description: >-
    Usando linguaggi semplici come JavaScript in p5.js, artisti e creatori
    possono creare di tutto, dalla tipografia interattiva ai tessuti, dai mobili
    stampati in 3D a infografiche complesse ed eleganti.
  book-4-order-a: Ordina su Verlag Hermann Schmidt
  book-4-order-b: Ordina su Amazon
  book-5-title: Learn JavaScript with p5.js
  book-5-authors: Engin Arslan.
  book-5-publisher: 'Pubblicato 2018, Apress. '
  book-5-pages: '217 pagine. '
  book-5-type: Tascabile.
  book-5-description: >-
    Impara a programmare da zero in un modo estremamente accattivante e visivo
    usando JavaScript con la libreria di programmazione p5.js. Le competenze che
    acquisirai da questo libro sono altamente trasferibili a una miriade di
    settori e possono essere utilizzate per la costruzione di applicazioni web,
    robot programmabili o arte generativa. 
  book-5-order-a: Ordina su Apress
  book-5-order-b: Ordina su Amazon
  book-6-title: "Aesthetic Programming: A Handbook of Software Studies"
  book-6-authors: 'Winnie Soon, Geoff Cox. '
  book-6-publisher: 'Published  2020, Open Humanities Press. '
  book-6-pages: '298 pages. '
  book-6-type: Hardcover.
  book-6-description: >-
    Using p5.js, this book introduces and demonstrates the reflexive practice 
    of aesthetic programming, engaging with learning to program as a way to 
    understand and question existing technological objects and paradigms, 
    and to explore the  potential for reprogramming wider eco-socio-technical systems.
  book-6-order-a: Download the PDF (FREE)
  book-6-order-b: Order from Barnes & Noble
examples:
  Examples: Esempi
  back-examples: Back to Examples
  Structure: Struttura
  Form: Forma
  Data: Dati
  Arrays: Vettore
  Control: Controllo
  Image: Immagine
  Color: Colore
  Math: Matematica
  Simulate: Simulazione
  Interaction: Interazione
  Objects: Oggetti
  Lights: Luci
  Motion: Movimento
  Instance_Mode: Modalità di istanza
  Dom: DOM
  Drawing: Disegno
  Transform: Trasformare
  Typography: Tipografia
  3D: 3D
  Input: Input
  Advanced_Data: Dati avanzati
  Sound: Suono
  Mobile: Dispositivi mobili
  Hello_P5: Hello p5
reference:
  Reference: Riferimenti
showcase:
  showcase-title: Showcase
  showcase-intro1: 'Vi presentiamo Showcase, a cura di '
  showcase-intro2: >-
    In questa sezione celebriamo il modo in cui le persone utilizzano p5.js per
    rendere il lavoro creativo, l&apos;apprendimento e l&apos;open source più
    interessanti e inclusivi. Insieme, siamo una comunità.
  showcase-intro3: >-
    Durante l&apos;estate del 2019, abbiamo chiesto ad alcuni creatori di
    condividere di più su come hanno usato p5.js. Nomina un lavoro p5.js, tuo o
    di qualcun altro, per essere presentato qui!
  nominate-project: Nomina un progetto
  showcase-featuring: Featuring
  project-tag-art: Art
  project-tag-design: Design
  project-tag-code: Code
  project-tag-curriculum: Curriculum
  project-tag-documentation: Documentation
  project-tag-game: Game
  project-tag-library: Library
  project-tag-organizing: Organizing
  project-tag-tool: Tool
  project-tag-tutorial: Tutorial
  project-roni: Programmed Plotter Drawings
  credit-roni: Roni Cantor
  description-roni: >-
    Onde sinusoidali e lerps generati in p5.js, esportati come SVG e disegnati
    con un plotter e penne.
  project-phuong: Airi Flies
  credit-phuong: Phuong Ngo
  description-phuong: >-
    In questo gioco sviluppato con p5.play, aiuta Airi a volare dicendo PEW.
    Creato per incoraggiare le persone a uscire dalla propria zona di comfort e
    sentirsi più sicuri di sé indipendentemente da ciò che fanno e da come
    appaiono o suonano.
  project-daein: Chillin&apos;
  credit-daein: Dae In Chung
  description-daein: >-
    Un poster tipografico interattivo che utilizza il sensore di movimento di un
    dispositivo mobile con p5.js.
  project-qianqian: Qtv
  credit-qianqian: Qianqian Ye
  description-qianqian: >-
    Un canale video con video di 1 minuto in mandarino sulla programmazione
    creativa, l&apos;arte e la tecnologia, tra cui tutorial p5.js per
    principianti. Disponibile su YouTube, Instagram, Bilibili e TikTok.
  project-casey-louise: p5.js Shaders
  credit-casey-louise: 'Casey Conchinha, Louise Lessél'
  description-casey-louise: 'Una risorsa per imparare cosa, perché e come usare gli shader in p5.js.'
  project-moon-xin: Moving Responsive Posters
  credit-moon-xin: 'Moon Jang, Xin Xin, and students'
  description-moon-xin: >-
    Poster mobili basati su browser che utilizzano sistemi grafici, metodi di
    trasformazione e p5.js per indirizzare le connotazioni di una parola di meno
    di 8 lettere. Progettato dagli studenti per un corso di graphic design
    (Visual Narrative Systems) presso l&apos;Università della Georgia.
  created-by: Realizzato da
  pronouns-female: (lei)
  creator-from-roni-cantor: 'Da Toronto, Canada'
  project-links: Link del progetto
  project-links-text-1-roni-cantor: Sketch di esempio nel web editor p5.js
  project-links-text-2-roni-cantor: AxiDraw V3 demo video
  project-q-1-1: Cosa stai facendo?
  project-q-1-2: Come hai iniziato con p5.js?
  project-a-1-1-roni-cantor: >-
    Mi sono appena laureata nel programma New Media della Ryerson University.
    Venendo da 4 anni di programmazione e creazione di robot, ho deciso di fare
    una pausa e giocare con alcune forme d&apos;arte più tradizionali, pur
    continuando a programmare e giocare con i robot.
  project-a-1-2-roni-cantor: 'Ho iniziato a usare p5.js al '
  project-a-1-3-roni-cantor: '! Dopo aver usato '
  project-a-1-4-roni-cantor: ' per molti anni, ho voluto provare qualcosa di nuovo.'
  project-q-2: Come hai usato p5.js in questo progetto?
  project-a-2-1-roni-cantor: >-
    Ho usato p5.js in questo progetto per generare le formule sinusoidali e lerp
    (interpolazione lineare) e visualizzare gli elementi visivi nel
  project-a-2-2-roni-cantor: >-
    . Ho quindi usato una funzione nel mio codice che ha esportato la mia
    grafica programmata in un file 
  project-a-2-3-roni-cantor: '. Avevo bisogno di un file SVG da dare al plotter (un '
  project-a-2-4-roni-cantor: >-
    ) in modo che capisse dove disegnare le linee che avevo programmato. Ho
    inviato queste informazioni al plotter con un programma chiamato 
  project-a-2-5-roni-cantor: '!'
  project-q-3: Qual è la tua funzione p5.js preferita?
  project-a-3-roni-cantor: ' perché le linee sono divertenti e "lerp" è una parola divertente da dire!'
  project-q-4: >-
    Hai affrontato difficoltà lavorando a questo progetto? Se è così, come le
    hai superate?
  project-a-4-roni-cantor: >-
    Era la prima volta che usavo p5.js, Inkscape e un plotter! Ho davvero
    beneficiato delle persone intorno a me che avevano usato p5 in precedenza,
    nonché di guide e forum online.
  project-q-5: Puoi dirci qualcosa di interessante che dovremmo esplorare?
  project-a-5-roni-cantor: ' su Instagram: cose fantastiche per il plotter analogico.'
  project-q-6: Dove possono cercare le persone per conoscerti meglio?
  project-a-6-roni-cantor: ' (Instagram)'
  project-resources: Risorse del progetto
  creator-from-qianqian: 'Los Angeles, California'
  interview-link-qianqian: Intervista a Processing Foundation con Qianqian Ye
  project-a-1-1-qianqian: Sono un artista e designer cinese con sede a Los Angeles.
  project-a-1-2-qianqian: >-
    Il mio partner mi ha fatto conoscere p5.js, che ho imparato principalmente
    guardando tutorial video online gratuiti. Il mio primo progetto p5.js è
    stato disegnare alcune forme con colori diversi.
  project-a-2-1-qianqian: >-
    Questo progetto è iniziato con l&apos;idea di insegnare a mia madre, che
    vive in Cina e non parla inglese, a programmare con p5.js. Questo progetto è
    stato difficile su più livelli e volevo iniziare identificando i motivi
    principali per cui è più difficile per qualcuno come mia madre imparare a
    programmare, principalmente a causa della mancanza di risorse gratuite per
    l&apos;apprendimento della programmazione creativa. La maggior parte delle
    risorse gratuite non è disponibile in Cina. I tutorial di p5.js su YouTube e
    gli account Twitter e Instagram di p5.js sono inaccessibili in Cina a causa
    della censura di Internet.
  project-a-2-2-qianqian: 'Ho imparato molto dai video di YouTube come il '
  project-a-2-3-qianqian: >-
    , ma più guardavo i tutorial di programmazione online, più mi rendevo conto
    di quanto fosse difficile trovare altre donne e persone di colore che
    insegnassero a programmare, specialmente in mandarino. Volevo aiutare altre
    donne cinesi a relazionarsi con la programmazione creativa.
  project-a-2-4-qianqian: >-
    Sto lavorando per rendere disponibili i canali video ad altri creativi
    cinesi che vogliono contribuire con me alla risorsa educativa, per esempio
    con interviste e tutorial con ospiti. Se sei interessato a insegnare/parlare
    di programmazione creativa in mandarino, fammelo sapere!
  project-a-3-1-qianqian: 'Il '
  project-a-3-2-qianqian: ' è la mia caratteristica preferita. Rende perfetta la programmazione creativa online.'
  project-a-4-1-qianqian: >-
    Imparare a programmare in una seconda lingua è stato difficile, e la
    mancanza di una community ha reso il processo ancora più arduo. Spero di
    parlare della mia esperienza di principiante e di qualcuno che una volta si
    sentiva un estraneo al mondo della programmazione creativa e dei video
    tutorial.
  project-a-4-2-qianqian: >-
    Trascorro molto tempo a fare ricerche sulle tecnologie più moderne per i
    miei video. Alla fine, ho deciso di utilizzare il mio telefono per
    registrare e iMovie per editare. Spero di dimostrare a tutti che non ci
    vogliono molti attrezzature costose per iniziare a fare video didattici.
  project-a-4-3-qianqian: >-
    Un altro problema che ho riscontrato è stata la mia paura di essere su
    Internet. Per prima cosa ho dovuto superare la mia ansia di commettere
    errori nei video o ricevere commenti negativi online. Spesso le donne e le
    persone di colore sono vittime di molestie online. Spero di aiutare a dare
    l&apos;esempio per altre donne e persone di colore che va bene online e
    rafforzare le loro comunità condividendo le loro conoscenze. Alla fine,
    saremo in grado di fermare il bullismo online creando comunità forti e
    diverse.
  project-a-5-1-qianqian: 'Sono molto entusiasmata per il '
  project-a-5-2-qianqian: ' a Los Angeles.'
  creator-from-phuong: 'Da Kyiv, Ukraine'
  project-a-1-1-phuong: >-
    Sono un programmatore creativo e designer, una beneficiaria della borsa di
    studio per la diversità della 
  link-1-phuong: Gioca a Airi Flies!
  link-2-phuong: Codice di AiriFlies su GitHub
  link-3-phuong: Maggiori informazioni sul portfolio di Phuong Ngo
  project-a-1-2-phuong: ', e in generale un essere curioso.'
  project-a-1-3-phuong: >-
    Quest&apos;estate stavo seguendo un corso alla School of Machines di Berlino
    intitolato "
  project-a-1-4-phuong: '," principalmente insegnato da '
  project-a-2-1-phuong: >-
    Ho usato p5.js per lavorare sulla parte visiva del gioco. Gli sprite di
    animazione per Airi e i fantasmi sono stati disegnati su un&apos;app per
    iPad chiamata 
  project-a-2-2-phuong: ' e poi integrati nel codice '
  project-a-2-3-phuong: . Ho usato principalmente esempi di p5.play come riferimento.
  project-a-2-4-phuong: 'Per lo sfondo a scorrimento infinito, ho trovato uno '
  p5-sketch-by-chjno-phuong: sketch p5 di chjno
  project-a-2-5-phuong: >-
    . Ho impostato una condizione in modo che ogni volta che venisse rilevata la
    parola "pew" o un clic del mouse, la velocità di scorrimento cambiasse per
    creare l&apos;illusione di Airi che vola verso l&apos;alto. Quando
    l&apos;utente non fa nulla, la velocità di scorrimento è negativa, il che fa
    sembrare che Airi stia cadendo.
  project-a-2-6-phuong: 'Per il riconoscimento del suono, ho usato '
  project-a-2-7-phuong: ' (al momento esiste una versione beta non ancora disponibile al pubblico, ma lo sarà molto presto!). Ho aggiunto circa 120 campioni dei miei compagni di classe che dicevano la parola "pew" con diverse intonazioni e 80 campioni di rumore di fondo per addestrarlo. Quindi ho integrato il modello nel gioco con '
  project-a-3-1-phuong: >-
    Adoro la facilità con cui puoi creare, manipolare ed eliminare blocchi e
    classi HTML con la 
  project-a-3-2-phuong: ' tramite '
  project-a-3-3-phuong: ' etc. Ma la mia funzione preferita è '
  project-a-3-4-phuong: ', poiché è qui che avviene la magia.'
  project-a-4-1-phuong: >-
    Ho affrontato molte sfide semplicemente perché p5.js era qualcosa di nuovo
    per me. In generale non avevo mai lavorato molto con JavaScript prima.
    Leggere la documentazione e cercare esempi simili ha aiutato molto.
  project-a-5-1-phuong: 'Date un&apos;occhiata ai '
  school-of-machines-phuong: corsi della School of Machines
  project-a-5-2-phuong: >-
    ! Si impegnano molto per connettere le persone più creative del mondo e
    finora hanno fatto un buon lavoro. ❤️
  pronouns-male: (lui)
  creator-from-chung: 'Da Baltimore, Maryland'
  link-1-casey-louise: p5.js Shaders guide
  link-2-casey-louise: Glitch collection of p5.js shader examples
  link-1-chung: View Chillin&apos;
  link-2-chung: Codice di Chillin&apos; su GitHub
  link-3-chung: Maggiorni informazioni sul Portfolio di Dae In Chung
  project-a-1-1-chung: >-
    Sono un graphic designer e membro della facoltà del Maryland Institute
    College of Art, dove insegno principalmente programmazione (con p5.js e
    Processing, ovviamente) e motion graphics.
  project-a-1-2-chung: 'Uso '
  project-a-1-3-chung: ' da un po &apos;di tempo ormai e quando è arrivato p5.js, ho iniziato a usarlo senza pensarci due volte perché era facile convertire il codice esistente di Processing e condividere progetti online.'
  project-a-2-1-chung: >-
    Quest&apos;estate mi sono sfidato a realizzare poster tipografici con la
    programmazione, e questo è uno dei poster che ho realizzato. Fino a poco
    tempo fa non sapevo che avrei potuto utilizzare i dati del sensore di
    movimento con p5.js. Stavo anche guardando 
  dan-shiffman-matterjs-tutorial: i video tutorial di Dan Shiffman sul matter.js
  project-a-2-2-chung: >-
    , al che ho pensato: perché non unire le due cose e mettere in pratica ciò
    che sto imparando?
  project-a-3-1-chung: >-
    Ci sono molte cose che amo di p5.js come la community online e
    l&apos;accoglienza e la comprensione riservate ai principianti. Quello che
    mi piace davvero in questo momento è il 
  project-a-3-2-chung: >-
    , con cui non solo posso lavorare online per me stesso, ma anche condividere
    rapidamente gli URL. Per questo progetto, in particolare, ho dovuto fare
    molti test sul mio telefono ed è stato molto più semplice e veloce rispetto
    ad utilizzare GitHub.
  project-a-4-1-chung: >-
    Ho avuto qualche difficoltà con la gestione di font, canale alfa e
    profondità z nella modalità 
  project-a-4-2-chung: >-
    . Non sono ancora completamente soddisfatto di tutte le mie decisioni. Ma in
    generale, è stato utile cercare nel forum e non dimenticare di scomporre i
    problemi in problemi più piccoli e iterare a poco a poco. Inoltre, ho avuto
    problemi nel rendering dei file video direttamente da p5.js. La
    registrazione dello schermo non era un&apos;opzione a causa di cadute di
    frequenza dei fotogrammi intermittenti (il mio laptop è piuttosto lento).
    Dopo aver fatto qualche ricerca, ho deciso di imparare i fondamenti di 
  project-a-4-3-chung: ' e costruire un tool da solo.'
  project-a-5-1-chung: >-
    Come accennato in precedenza, se desiderate eseguire il rendering di frame e
    file video dagli sketch p5.js, consultate il mio 
  project-a-5-2-chung: ' e fatemi sapere cosa ne pensate.'
  creator-from-casey-louise: 'Da New York, New York'
  project-a-1-1-casey-louise: >-
    Casey: Sono uno studente presso l&apos;ITP della New York University che si
    interessa di computer grafica e spazi interattivi, fisici e digitali.
  project-a-1-2-casey-louise: >-
    Louise: Sono uno studentessa presso l&apos;ITP della New York University che
    è interessata alla computer graphics e agli spazi interattivi basati sulle
    tecnologie dei sensori.
  project-a-1-3-casey-louise: >-
    Casey: Ho iniziato a studiare p5.js nel 2018 nel mio primo semestre presso
    ITP, anche se mi dilettavo con 
  project-a-1-4-casey-louise: ' dal 2012. Sono stato introdotto a Processing dal mio amico Pedro mentre studiavo graphic design e mi ha fatto impazzire. L&apos;idea di creare i miei strumenti per la creazione di grafica e arte interattiva ha suscitato il mio interesse, ma una volta che l&apos;ho provato, sono rimasto entusiasta. Il primo progetto che ricordo è un occhio che ti seguiva nello schermo e si intristiva quando lo lasciavi da solo.'
  project-a-1-5-casey-louise: >-
    Louise: Inizialmente ho imparato p5.js per rendere un sito Web che stavo
    creando più giocoso. Sono un programmatore C#, quindi per me è stato un buon
    modo per entrare a contatto con JavaScript.
  project-a-2-1-casey-louise: >-
    Casey: Rimandavo l&apos;apprendimento degli shader da molto tempo, ed ero
    anche curioso di poterli usare in p5.js. Poi ho sentito parlare di una
    sovvenzione per progetti open source, di storytelling e di risorse di
    apprendimento all&apos;ITP chiamata 
  project-a-2-2-casey-louise: >-
    . Dato che non trovavo molto sulla documentazione di p5.js + shader, ho
    deciso di capire come sono implementati in p5.js e creare una risorsa dove
    gli altri potessero imparare. Quando ho parlato a Louise del progetto, è
    stata immediatamente entusiasta di imparare e insegnare gli shader in p5.js.
    È stata bravissima a garantire che il progetto diventasse una risorsa di
    apprendimento e non solo una raccolta di esempi.
  project-a-3-1-casey-louise: 'Casey: '
  project-a-3-2-casey-louise: ' conta come funzionalità? Mi piace anche avere la possibilità di condividere i miei programmi sul Web in modo che le persone non debbano installare software speciali o venire a New York per vedere il mio lavoro.'
  project-a-3-3-casey-louise: 'Louise: La mia funzionalità preferita è '
  project-a-3-4-casey-louise: ' e '
  project-a-3-5-casey-louise: ' per la trasformazione del sistema di coordinate per creare elementi visivi generativi.'
  project-a-4-1-casey-louise: >-
    Casey: L&apos;inizio del progetto (capire come funzionano le cose) è
    consistito nel raggiungere persone straordinarie, porre domande e chiedere
    il permesso di utilizzare i loro esempi nel nostro progetto. 
  adam-ferris-repo-casey-louise: La repository GitHub di Adam Ferriss
  project-a-4-2-casey-louise: ' ci ha davvero dato le fondamenta per capire come funzionano gli shader in p5.js e ci ha fornito un quadro di esempi accessibili su cui basarci. Per alcuni problemi specifici relativi a p5.js che stavamo riscontrando, abbiamo contattato '
  project-a-4-3-casey-louise: ' e '
  project-a-4-4-casey-louise: ' (che lavoravano sull&apos;'
  webgl-casey-louise: implementazione WebGL in p5.js
  project-a-4-5-casey-louise: '), e sono stati super disponibili.'
  project-a-4-6-casey-louise: >-
    Louise: La curva di apprendimento era piuttosto ripida per implementare
    shader in p5. Fortunatamente, c&apos;erano alcuni esempi ben documentati su
    GitHub di Adam Ferriss. Il nostro obiettivo era farlo in modo che un
    principiante potesse capire come implementarlo, quindi era sia una sfida
    tecnica che una sfida nell&apos;insegnamento del codice a estranei e
    principianti. Qui abbiamo tratto ispirazione dal modo in cui è scritto il 
  openframeworks-book-casey-louise: openFrameworks book
  project-a-4-7-casey-louise: >-
    . Crediamo in un approccio del tipo "ehi, non è difficile e puoi farlo anche
    tu".
  project-a-5-1-casey-louise: Date un&apos;occhiata all&apos;
  project-a-5-2-casey-louise: ' per esplorare i fantastici progetti sovvenzionati dei nostri colleghi'
  pronouns-nonbinary: (loro)
  creator-from-moon: 'Da Athens, Georgia'
  posters-by: Posters By
  project-a-1-1-moon: >-
    Moon: Sono un graphic designer, artista visivo ed insegnante di design.
    Quest&apos;estate ho tenuto un corso di graphic design nel programma Cortona
    dell&apos;Università della Georgia in Italia, introducendo alcune basi di
    p5.js. Questo autunno, ho intenzione di insegnare e studiare piattaforme
    digitali presso UGA.
  project-a-1-2-moon: 'Il mio ex collega, '
  project-a-1-3-moon: ', mi ha invitato alla '
  project-a-1-4-moon: ' a '
  pcd-la-moon: Los Angeles nel Gennaio 2019
  project-a-1-5-moon: >-
    . Mi hanno aiutato con gli strumenti e le logiche di p5.js. È stata
    un&apos;ottima esperienza di insegnamento e apprendimento.
  project-a-2-1-moon: 'Abbiamo seguito tutorial di base, '
  codetrain-moon: i video di Daniel su YouTube
  project-a-2-2-moon: ', e '
  p5-reference-moon: i Riferimenti sul sito di p5.js
  project-a-2-3-moon: .
  project-a-3-1-moon: 'La mia funzione preferita è legata a '
  project-a-3-2-moon: ' e '
  project-a-3-3-moon: ': '
  project-a-3-4-moon: >-
    . Sono stato in grado di utilizzare e insegnare questo strumento per
    visualizzare varie idee sul tempo in movimento.
  project-a-4-1-moon: >-
    È stato difficile per me, come principiante, comprendere la struttura
    generale di p5.js e come funziona il codice in generale. Ho dovuto ripetere
    un paio di volte le basi di p5.js, e ho poi disegnato un grafico per
    memorizzare e insegnare come ho compreso la struttura e il codice di p5.js
    con forti restrizioni che ho impostato. È stata un&apos;ottima esperienza di
    insegnamento e apprendimento.
  project-a-5-1-moon: 'Date un&apos;occhiata alla '
  project-a-5-2-moon: ' a Milano, Italy.'
