Skip-To-Content: 건너뛰기
Language-Settings: 언어 설정
Sidebar-Title: 사이트 둘러보기
Home: 홈
Editor: 에디터
Download: 다운로드
Donate: 후원하기
Start: 시작하기
Reference: 레퍼런스
Libraries: 라이브러리
Learn: 배우기
Teach: 가르치기
Examples: 예제
Books: 출판물
Community: 커뮤니티
Contribute: 기여하기
Forum: 포럼
Showcase: 쇼케이스
footerxh1: 크레딧
footer1: p5.js는 현재 치안치안 예
footer3: ' 가 리드하고, 로렌 맥카시 '
footer4: ' 가 창안하였습니다. p5.js는 프로세싱 재단 '
footer5: ' 과 '
footer6: ' 의 지원으로, 협력자 커뮤니티와 함께 개발되었습니다. 아이덴티티 및 그래픽 디자인: 제럴 존슨 '
footer7: '. '
footer8: Info
footer9: .
tagline1: 프로세싱의 즐거움에 자바스크립트의 매력을 곱하다*
tagline2: 프로세싱의 간편함에 자바스크립트의 유연성을 곱하다*
tagline3: 프로세싱의 직관성에 자바스크립트의 강력함을 곱하다*
tagline4: 프로세싱의 창조성에 자바스크립트의 역동성을 곱하다*
tagline5: 프로세싱 커뮤니티에 자바스크립트 커뮤니티를 곱하다*
tagline6: 프로세싱의 강력함에 자바스크립트의 범용성을 곱하다*
tagline7: p5.js 커뮤니티는 Black Lives Matter와 연대합니다.
home:
  start-creating: p5 에디터로 프로젝트 시작하기
  p1xh1: 안녕하세요!
  p1x1: >-
    p5.js는 크리에이티브 코딩을 위한 자바스크립트 라이브러리로, 예술가, 디자이너, 교육자, 입문자, 그리고 모두에게 접근성 높고
    포용적인 언어를 지향합니다! p5.js는 무료 오픈 소스로 제공됩니다. 소프트웨어와 그 학습 도구가 모두에게 열려있어야 된다고 믿기
    때문입니다.
  p1x2: >-
    p5.js는 마치 스케치북과도 같으며 다양한 드로잉 기능을 제공합니다. p5.js를 이용하면 인터넷 브라우저 전체를 스케치북 삼아 그릴
    수 있을 뿐 아니라, 텍스트, 입력, 비디오, 웹캠, 그리고 사운드 등을 비롯한 각종 HTML 요소를 사용할 수 있습니다.
  p2xh2: 커뮤니티
  p2x1: >-
    우리는 다양한 성 정체성, 젠더 표현, 성적 지향, 인종, 민족, 언어, 사회, 규모, 능력, 계급, 종교, 문화, 하위 문화, 정치
    성향, 나이, 기술적 숙련도, 직업 등의 배경을 가진 사람들의 공동체이자 연대입니다. 모든 사람이 우리 커뮤니티에 시간과 에너지를 쓸 수
    있는 게 아닌 만큼, 우리는 여러분의 참여를 환영하고 독려하며, 또 접근성을 향상하기 위해 늘 노력합니다. 우리 모두는 언제나 배우는
    자들입니다.
  p2x2: 'p5.js는 프로세싱 '
  p2x3: ' 을 오늘날의 웹에 맞게 해석한 것입니다. p5의 행사와 모임은 프로세싱 재단 '
  p2x4: ' 의 지원을 받아 개최됩니다.'
  p2x5: 'Learn more about '
  p2x6: 커뮤니티
  p2x7: 에 대해 더 알아보세요.
  p3xh2: 시작하기
  p3xp1: '온라인 에디터인 '
  p3xp2: '에서 나만의 첫 스케치를 그려보세요! '
  p3xp3: 시작하기
  p3xp4: '에서 p5 스케치에 대해 알아보고, '
  p3xp5: 레퍼런스
  p3xp6: 로 더욱 많은 기능을 확인해보세요.
  p4xh2: 기여하기
  p4xp1: 'p5.js와 커뮤니티에 기여할 수 있는 방법은 다양합니다:'
  p4xp2: 기여 방법
  p4xp3: 나의 창작 프로젝트 공유하기
  p4xp4: p5 워크숍 또는 수업 운영하기
  p4xp5: 행사 또는 모임 주관하기
  p4xp6: 코딩 개발로 기여하기
  sketch_credits: 스케치 크레딧
  sketch_info: '훈민정음2020, 김성현'
copyright:
  copyright-title: 저작권
  copyright1: p5.js 라이브러리는 무료 소프트웨어입니다.
  copyright2: ' 자유 소프트웨어 재단(Free Software Foundation)의 조항(version 2.1.)에 따라 재배포 및 수정할 수 있습니다.'
  copyright3: 'p5.js의 레퍼런스는 '
  copyright4: ' 라이선스에 속하며, 크레딧 인용시 비영리 목적을 위해 재사용할 수 있습니다.'
get started:
  get-started-title: 시작하기
  get-started1: p5.js 프로젝트를 에디터에 설정하고 나의 첫 스케치를 만드는 방법을 소개합니다.
  get-started2: 가장 쉬운 방법은 인터넷에서
  get-started3: p5.js 웹에디터
  get-started4: '를 바로 사용하는 것입니다. 웹에디터를 켜고 '
  get-started5: 나의 첫 스케치
  get-started6: '로 내려가 코드 작성법을 확인하세요. p5.js를 데스크탑 에디터에서 사용하는 방법은 여기서 확인하세요:'
  get-started7: 데스크탑에 다운받기
  get-started-button: Copy
  settingUp-title: 데스크탑 에디터에 p5.js 설정하기
  download-title: 다운로드 & 파일 설정
  hosted-title: 호스팅된 p5.js 라이브러리 사용하기
  download1: 'The easiest way to start is by using the empty example that comes with the '
  download2: p5.js complete
  download3: 파일을 다운받아 시작하는 것이 가장 쉽고 간편합니다.
  download8: '다운로드 후에는 로컬 서버를 설정해야 합니다. '
  download9: 로컬 서버 설정 방법
  download10: '을 참고하세요. 다운로드 폴더를 사용하여 인터넷 브라우저에서 다음과같이 로컬 서버를 실행하세요. '
  download11: 'http://localhost:{당신의-포트(port)-넘버}/empty-example'
  download4: >-
    다운로드 파일 중, index.html 파일에는 p5.js 링크가 적혀있습니다. 로딩 시간을 단축하려면 해당 p5.js 링크를 그 간략
    버전인 p5.min.js로 아래와 같이 변경하면 됩니다. 
  download5: >-
    p5.js 파일의 온라인 링크를 직접 입력하는 방법도 있습니다. p5.js의 모든 버전은 CDN(Content Delivery
    Network)에 저장되어 있으며, 버전 히스토리는 여기서 확인할 수 있습니다: 
  download6: '. 링크를 다음과 같이 변경해보세요:'
  download7: '아래는 HTML 페이지 샘플입니다:'
  environment-title: 개발 환경
  environment1: '여러분이 사용하는 그 어떠한 '
  environmentlink: 'http://en.wikipedia.org/wiki/Source_code_editor'
  environment2: 코드 에디터
  environment3: '에서든 p5.js를 쓸 수 있습니다. 아래에 '
  environment4: ' 에디터를 설정하는 방법이 있습니다. 추천하는 또다른 에디터: '
  environment5: ', '
  environment6: ' p5 웹에디터는 스크린 리더 기능을 제공합니다. 웹에디터를 사용하지 않는 스크린 리더라면 다음의 데스크탑 에디터를 고려해보세요: '
  environment7: ' 나 '
  environment8: >-
    먼저, Sublime Text 2 에디터 프로그램을 실행하세요. File 메뉴를 열고 Open을 클릭한 후, html 파일과 js 파일이
    위치한 폴더를 선택하세요. 해당 폴더의 이름과 더불어 포함된 파일 리스트가 좌측 사이드바에 보일 것입니다.
  environment9: 'sketch.js 파일을 선택하면, 우측 편집 영역에서 파일이 열립니다. '
  environment10: Sublime 에디터에서 p5 템플릿 코드를 편집 중인 화면
  environment11: >-
    index.html 파일을 브라우저에서 열어볼까요? 파일 관리 시스템에서 index.html 파일을 더블 클릭하거나 브라우저 주소창에
    다음을 입력하세요:
  environment12: 'file:///나의/html/경로'
  environment14: ' (또는, 로컬 서버 사용시, '
  environment15: 'http://localhost:{당신의-포트(port)-넘버}/empty-example'
  environment16: )
  environment13: ' '
  your-first-sketch-title: 나의 첫 스케치
  your-first-sketch-intro1: '기존 프로세싱 사용자라면 다음의 페이지를 읽어보세요: '
  your-first-sketch-intro2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  your-first-sketch-intro3: 프로세싱 스케치를 p5.js로 변환하기 튜토리얼
  your-first-sketch-intro4: ' 에디터에 다음을 입력하세요:'
  your-first-sketch1: 'After '
  your-first-sketch2: >-
    위의 코드를 설명하자면 다음과 같습니다: "좌측 상단 모서리로부터 아래로 50px, 오른쪽으로 50px 떨어진 점을 중심으로 타원을
    그린다. 타원의 너비와 높이는 모두 80px로 한다." 
  your-first-sketch3: '스케치를 저장한 뒤 브라우저를 새로고침하면, 입력한 코드에 문제가 없는 한, 다음과 같은 화면을 볼 수 있습니다:'
  your-first-sketch4: >-
    주의: 스크린 리더를 사용하는 경우, p5 웹에디터에서 접근성 모드 출력(Accessible Outputs)을 활성화해야 합니다. 별도의
    에디터를 사용하는 경우, 접근성 라이브러리를 html 파일에 추가해야 합니다. 자세한 설명은 다음 링크를 참조하세요: 
  your-first-sketch5: 스크린 리더에서 p5를 사용하는 방법
  your-first-sketch6: >-
    If you are using a screen reader, you must turn on the accessible outputs in
    the p5 online editor, outside the editor you must add the accessibility
    library in your html. To learn more visit&#32;
  your-first-sketch7: 접근성 라이브러리란?
  your-first-sketch8: '캔버스에 폭과 높이가 50인 타원이 x 80, y 80의 위치에 그려져있다'
  your-first-sketch9: >-
    코드를 잘못 입력할 경우 화면에 아무것도 나타나지 않을 수 있습니다. 예제 코드를 정확히 따라 썼는지 확인해 보세요. 숫자는 (괄호)
    안에 포함하고, 각 숫자는 쉼표(,)로 구분해야 하며, 각 라인은 세미 콜론(;)으로 끝나야 합니다
  your-first-sketch10: >-
    프로그래밍 언어를 처음 접할 때 겪는 어려움 중 하나는 바로 까다로운 문법입니다. 브라우저는 우리가 표현하려는 게 무엇인지 스스로 파악할
    정도로 똑똑하지 않으며, 각 요소의 위치와 구두법에 매우 민감하답니다. 처음에는 이런 문법이 낯설게 느껴지겠지만, 연습을 통해 점차
    익숙해질 것입니다. 몇몇 브라우저는 코드 내 오류를 확인할 수 있는 자바 스크립트 '콘솔'을 제공합니다. 크롬(Chrome)의 경우,
    보기 > 개발자 > 자바 스크립트 콘솔을 클릭하여 '콘솔'을 활성화할 수 있습니다.
  your-first-sketch11: '이제 한층 더 재밌는 스케치를 만들어볼까요! 지난 예제의 코드를 에디터에서 삭제하고 아래의 코드를 입력해 보세요:'
  your-first-sketch12: >-
    이제 프로그램은 폭 640px, 높이 480px의 캔버스를 생성하고, 마우스 커서 위치에서 흰 원을 그리기 시작합니다. 마우스 버튼을
    누르고 있을 때는 원의 색이 검정색으로 바뀝니다. 마우스 위치에 대한 설명은 나중에 더 하기로 하고, 지금은 마우스를 움직이고 클릭하며
    스케치의 변화를 살펴보세요.
  your-first-sketch13: '캔버스 위의 마우스 궤적을 따라 여러 개의 원이 그려집니다:'
  your-first-sketch14: 캔버스 위의 마우스 궤적을 따라 여러 개의 원이 그려집니다.
  first-sketch-heading1: 타원과 코드 스니펫
  first-sketch-heading2: 스크린리더 사용자를 위한 참고 사항
  first-sketch-heading3: 인터랙션과 코드 스니펫
  what-next-title: 다음 단계
  learn1: '더 많은 정보는 '
  learn2: 배우기
  learn3: '와 '
  learn4: 예제
  learn5: 에서 확인할 수 있습니다.
  learn6: '또, '
  learn7: 코딩 트레인(The Coding Train)
  learn8: '과 '
  learn9: Kadenze
  learn10: 의 비디오 튜토리얼을 참고하세요.
  reference1: 'p5.js의 모든 함수 및 메소드, 그 외 문서는 '
  reference2: 레퍼런스
  reference3: 에서 확인하세요.
  learn11: '스크린 리더와 함께 p5를 사용하고 싶다면 다음을 확인하세요: '
  learn12: 스크린 리더 기반 p5 튜토리얼
  processing-transition1: '프로세싱을 p5.js로 전환하는 방법과 둘 간의 차이점이 궁금하다면, '
  processing-transition2: 'https://github.com/processing/p5.js/wiki/Processing-transition'
  processing-transition3: 프로세싱 스케치를 p5.js로 변환하기 튜토리얼
  processing-transition4: 을 읽어보세요.
  book1: >-
    본 튜토리얼의 일부는 로렌 맥카시(Lauren McCarthy), 캐시 리스(Casey Reas), 벤 프라이(Ben Fry),
    오라일리(O'Reilly) 저 Getting Started with p5.js 에서 발췌하였습니다. / Make 2015.
    Copyright 
download:
  Download: 다운로드
  download-intro: >-
    안녕하세요! 이 페이지는 온라인에서 바로 사용가능한 웹에디터와 각종 다운로드 링크를 소개합니다. 입문자에게 꼭 필요한 자료부터 숙련된
    개발자를 위한 리소스 모두를 포괄합니다.
  editor-title: 에디터
  p5.js-editor: p5.js 에디터
  p5.js-editor-intro: 아래의 링크는 온라인 p5.js 에디터로 연결됩니다.
  editor-includes: 별도 설치가 필요없는 p5.js 웹에디터로 지금 바로 코딩을 시작해보세요!
  complete-library-title: 모든 라이브러리
  complete-library-intro1: '아래의 링크는 p5.js 라이브러리 파일, p5.sound, 그리고 예제 프로젝트를 포함합니다. '
  complete-library-intro2: 시작하기
  complete-library-intro3: 에서 p5.js 프로젝트 설정 방법을 알아보세요.
  p5.js-complete: 모든 라이브러리
  includes-1: '포함 사항:'
  includes-2: 'p5.js, p5.sound.js, 예시 프로젝트 1개'
  includes-3: 'Version '
  single-files-title: 개별 라이브러리
  single-files-intro: '개별 라이브러리 파일입니다. '
  single-file: '개별 라이브러리: '
  p5.js-uncompressed: 개별 파일
  compressed: 압축 버전
  link: '링크: '
  statically-hosted-file: 정적 호스팅 파일
  etc-title: Github 리소스
  older-releases: 이전 버전 (구버전 및 업데이트 기록)
  github-repository: 코드 저장소 (GitHub)
  report-bugs: '이슈, 버그, 에러 보고하기'
  supported-browsers: '지원 브라우저 '
  support-title: p5.js를 후원해주세요!
  support-options: 후원 방법
  support-1: >-
    여러분의 도움이 필요합니다! p5.js는 무상의 오픈소스 소프트웨어입니다. 우리는 누구에게나 열려있고 포용적인 커뮤니티를 지향하며,
    여러분도 p5.js를 지원하는 프로세싱 재단(
  support-2: >-
    )에 후원을 통해 이에 동참할 수 있습니다. 여러분의 소중한 후원금은 p5.js 소프트웨어 개발과 더불어 코드 예제 및 튜토리얼을 비롯한
    교육 자료 제작에 쓰입니다. 또한, 다음과 같은 커뮤니티 활동을 위해서도 쓰입니다 : 
  support-3: 펠로우십
  support-4: ', '
  support-5: 커뮤니티 행사.
  support-17: '미국 피츠버그 CMU STUDIO for Creative Inquiry에서 진행된 p5.js 공헌자 컨퍼런스 (이미지 저작권: 최태윤)'
  support-18: >-
    프로세싱 재단 펠로우 Saskia Freeke이 런던에서 주관한 Liberation x Processing workshops (이미지
    저작권: Code Liberation Foundation)
  support-19: >-
    SPFC와 함께한 Learning to Teach, Teaching to Learn 컨퍼런스 (이미지 저작권: Kira
    Simon-Kennedy)
  support-20: >-
    프로세싱 재단 펠로우 Cassie Tarakajian가 Code Art Miami에서 진행한 워크숍 (이미지 저작권: Christian
    Arévalo Photography)
  support-21: 'Signing Coders p5.js workshop에서의 최태윤과 미국 수어(ASL) 해설자 (이미지 저작권: 최태윤)'
  support-22: '구글 썸머 오브 코드(Google Summer of Code) 킥오프 행사 (이미지 저작권: 최태윤)'
  support-23: >-
    프로세싱 재단 펠로우 Cassie Tarakajian가 Code Art Miami에서 진행한 워크숍 (이미지 저작권: Christian
    Arévalo Photography)
  support-24: '최태윤의 수어 기반 p5.js workshop에서 진행을 돕는 Luisa Pereira와 송예슬 (이미지 저작권: 최태윤)'
  support-25: '미국 피츠버그 CMU STUDIO for Creative Inquiry에서 진행된 p5.js 공헌자 컨퍼런스 (이미지 저작권: 최태윤)'
  support-26: >-
    프로세싱 재단 펠로우 Digital Citizens Lab가 International Center of Photography에서 주최한
    STEM 교육 패널 (이미지 저작권: International Center of Photography)
  support-27: >-
    칠레 산티아고에서 Aarón Montoya-Moraga가 진행한 p5.js workshop (이미지 저작권: Aarón
    Montoya-Moraga.)
  support-28: '최태윤의 수어 기반 p5.js workshop에서 진행을 돕는 Claire Kearney-Volpe (이미지 저작권: 최태윤)'
  support-29: >-
    프로세싱 재단 펠로우 DIY Girls가 미국 로스 엔젤레스(Los Angeles)에서 진행한 크리에이티브 코딩 프로그램 (이미지
    저작권: DIY Girls)
  support-30: 프로세싱 재단 펠로우 Digital Citizens Lab
  support-31: UCLA DMA와 NYU ITP 간의 동서-해안 p5.js 모임
  support-32: 프로세싱 재단
  support-33: >-
    은 10여년 간의 프로세싱 소프트웨어(Processing Software) 개발 활동을 거쳐 2012년에 설립되었습니다. 프로세싱 재단의
    사명은 시각 예술계에서의 소프트웨어 리터러시 및 기술 관련 분야에서의 시각적 리터러시를 증진하고, 나아가 이 두 분야에 대한 보다 많은
    사람들의 접근성을 향상하는 데에 있습니다. 우리는 다양한 이해 관계와 배경을 가진 사람들, 특히 코딩 학습 툴이나 자원에 대한 접근성이
    없는 이들의 크리에이티브 코딩 교육을 돕는 것을 목표로 삼습니다.
  support-17-alt: ''
  support-18-alt: ''
  support-19-alt: ''
  support-20-alt: ''
  support-21-alt: ''
  support-22-alt: ''
  support-23-alt: ''
  support-24-alt: ''
  support-25-alt: ''
  support-26-alt: ''
  support-27-alt: ''
  support-28-alt: ''
  support-29-alt: ''
  support-30-alt: ''
  support-31-alt: ''
learn:
  learn-title: 배우기
  teach-title2: 가르치기
  learn1: '깊이있고 순차적인 설명과 튜토리얼을 주제별로 제공합니다. p5.js 함수를 종류별로 알고싶다면 '
  learn2: 예제
  learn3: 를 클릭하세요.
  introduction-to-p5js-title: p5.js 소개
  hello-p5js-title: Hello p5.js
  hello-p5js: '이 영상을 통해 p5.js 라이브러리가 무엇인지, 또 어떻게 활용할 수 있는지 알아보세요.'
  getting-started-title: 시작하기
  getting-started: p5.js에 오신 것을 환영합니다. <br> 이 페이지는 p5.js 프로젝트 설정을 위한 기본 내용을 다룹니다.
  p5js-overview-title: p5.js 주요 기능
  p5js-overview: p5.js 주요 기능에 대한 개괄 설명을 확인하세요.
  p5js-processing-title: p5.js와 프로세싱
  p5js-processing: 'p5와 프로세싱 간의 주요 차이점, 그리고 변환 방법을 알아보세요.'
  p5-screen-reader-title: p5와 스크린 리더
  p5-screen-reader: 스크린 리더를 위한 p5 설정 방법을 알아보세요.
  using-local-server-title: 로컬 서버 사용하기
  accessible-labels-title: Writing accessible canvas descriptions
  accessible-labels: Using labels to make your code accessible to screen readers.
  accessible-labels-intro: Introduction
  accessible-labels-intro-1: >-
    In this tutorial, you'll learn how to use <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> , <a class =
    "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>,  and <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>. These
    functions add labels to  your canvas so that it’s readable for screen
    readers and other assistive technologies.
  accessible-labels-what-is-labeling: What is labeling?
  accessible-labels-what-is-labeling-1: >-
    When you use the <a class = "code" href =
    "https://p5js.org/reference/#/p5/createCanvas">createCanvas()</a> function,
    you  create a canvas HTML element. This canvas element displays the image
    generated by your code as a bitmap (a raster graphic made up of pixels). 
    Unlike most HTML elements, the canvas doesn’t provide any description about
    its contents to screen readers.  That’s why we created the <a class = "code"
    href = "https://p5js.org/reference/#/p5/describe">describe()</a>,  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions. 
    These functions add labels to your canvas that tell the screen reader how to
    describe it.
  accessible-labels-why-labeling-matters: Why labeling matters
  accessible-labels-why-labeling-matters-1: >-
    Screen readers (and text-to-speech software) are helpful for lots of people,
    <a href = "https://www.w3.org/WAI/perspective-videos/speech/"
    target="_blank" rel="noopener noreferrer"> regardless of ability or
    context</a>. For example, a visually impaired person searching the web might
    use a screen reader to  understand the contents of a site. If a site’s code
    isn’t properly labeled for assistive technologies,  the screen reader
    software won’t be able to communicate what’s on the site to its user.
    Someone else  might be using a text-to-speech software because they have
    dyslexia and find listening to the site’s  content more comprehensible than
    reading it. There are also people who use these assistive software  to
    multi-task, so they can listen to an article on the web and wash dishes, or
    complete other chores. 
  accessible-labels-why-labeling-matters-2: >-
    No matter the purpose or person, making sure your code is readable by these
    assistive software allows  more people to engage with your work in
    meaningful ways.
  accessible-labels-available-labels: Available labeling functions
  accessible-labels-available-labels-1: p5.js offers four different functions for labeling your canvas
  accessible-labels-available-labels-li-1: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> provides a
    description of the canvas contents.  This function's parameters include:
    <span class = "code">text</span>, the label itself; and <span class =
    "code">display</span>,  an optional parameter to set the visibility of the
    label.
  accessible-labels-available-labels-li-2: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    describes a specific element or a  specific grouping of elements in a
    canvas. This function's parameters include: <span class =
    "code">name</span>, the title for the label;  <span class =
    "code">text</span>, the label itself; and <span class =
    "code">display</span>, an optional parameter to set the visibility of the
    label.
  accessible-labels-available-labels-li-3: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> generates a
    list describing the canvas size, color,  as well as each visual element’s
    color, position, and the area it covers within the canvas. This function’s
    only parameter is  <span class = "code">display</span>, an optional
    parameter to set the visibility of the label.
  accessible-labels-available-labels-li-4: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>, like <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>,  generates a
    list of the canvas' qualities and elements. Along with this list, this
    function also creates an HTML table that plots the  spatial location of each
    shape within the canvas. This function's only parameter is <span class =
    "code">display</span>, an optional parameter  to set the visibility of the
    label.
  accessible-labels-prerequisites: Prerequisites
  accessible-labels-prerequisites-1: >-
    Your project's code should be near completion before you begin labeling. To
    write clear and effective  labels, you should have a clear understanding
    about what visuals your code creates within the canvas  element. 
  accessible-labels-prerequisites-2: >-
    For example, if you started writing your labels before you had a clear
    understanding of the resulting  visual of your canvas, your labels and your
    visuals may communicate different messages, like the code  example below:
  accessible-labels-steps-for-labeling: Steps for labeling your p5.js code
  accessible-labels-steps-for-labeling-step-1: 1. Plan your labeling strategy
  accessible-labels-steps-for-labeling-step-1-1: >-
    Your labeling strategy will change based on your project’s complexity and
    purpose.
  accessible-labels-steps-for-labeling-step-1-2: >-
    No matter how complicated your project may be, always provide a brief
    description of your canvas in  <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a> using the  <a class =
    "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    function. If you do not provide any labels in your code,  screen readers
    will describe your canvas as a blank HTML element.
  accessible-labels-steps-for-labeling-step-1-3: >-
    Place this label in the <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a> section of your code, 
    and provide a 1-3 sentence description of your canvas in its <span class =
    "code">text</span> parameter. This description should only provide details
    about  the visual elements of your canvas. 
  accessible-labels-steps-for-labeling-step-1-4: >-
    As stated previously, you do not need to begin your description with “A p5
    canvas element…” or anything similar, since the  screen reader will declare
    the element type before reading your label.
  accessible-labels-steps-for-labeling-step-1-5: >-
    Along with the <a class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a> label, use either
    the  <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>,  or <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>  function to
    add more detailed labels within your code.
  accessible-labels-steps-for-labeling-step-1-6: >-
    The <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions can 
    describe the shapes on your canvas, but they can’t interpret your intention
    in using the shapes. Keep context in mind when choosing  which function(s)
    to use. Is it better to describe the flower as “eight circles and a
    rectangle”, or as “a flower with red  petals and a green stem”? What kind of
    labeling will provide the best description of your canvas? If  you are
    creating larger visuals with many shapes, use <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>  to
    label each group of shapes.
  accessible-labels-steps-for-labeling-step-1-7: >-
    Do not use both the <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> and  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions to
    describe the same canvas. Using both will  cause similar descriptions to
    appear twice, which is confusing to screen readers. The same goes for  using
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> or  <a class =
    "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>
    with  <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    labels. It’s best to choose one function to  supplement your <a class =
    "code" href = "https://p5js.org/reference/#/p5/describe">describe()</a>
    label.
  accessible-labels-steps-for-labeling-step-1-complex: Complex projects
  accessible-labels-steps-for-labeling-step-1-complex-1: >-
    Use vanilla ARIA labeling and custom-built fallback labels instead of p5’s
    labeling functions if your canvas:
  accessible-labels-steps-for-labeling-step-1-complex-li-1: >-
    Has content that changes extensively via external interactive elements
    (elements outside the canvas)
  accessible-labels-steps-for-labeling-step-1-complex-li-2: Interacts with DOM elements written outside of the canvas code
  accessible-labels-steps-for-labeling-step-1-complex-li-3: Requires the user’s attention if the canva's visual content changes
  accessible-labels-steps-for-labeling-step-1-complex-li-4: >-
    Has complex element layouts that cannot be accurately labeled with the <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/describe">describe()</a>,  <a class =
    "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>,  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>, or  <a class
    = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> functions
  accessible-labels-steps-for-labeling-step-1-complex-2: >-
    For more information about fallback content, visit <a href =
    "https://www.w3.org/html/wg/wiki/DefinitionFallBackContent" target="_blank"
    rel="noopener noreferrer">W3C’s Wiki</a>.  For more information about
    complex ARIA labeling, visit <a href =
    "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes"
    target="_blank" rel="noopener noreferrer">Mozilla’s "ARIA states and
    properties"</a>  and <a href = "https://www.w3.org/TR/using-aria/"
    target="_blank" rel="noopener noreferrer">W3C’s "Using ARIA"</a>.
  accessible-labels-steps-for-labeling-step-2: 2. Write your main and supporting label(s)
  accessible-labels-steps-for-labeling-step-2-1: Begin labeling your canvas using the function(s) that best serve your users.
  accessible-labels-steps-for-labeling-step-2-2: >-
    While labeling, only provide descriptions of the visual aspects of your
    canvas. You don’t need to  describe how or what functions create the visuals
    present on the canvas, only how the end result  visuals appear within the
    canvas.
  accessible-labels-steps-for-labeling-step-2-using-de: >-
    Using <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
  accessible-labels-steps-for-labeling-step-2-using-de-1: >-
    When using the <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    function to label your code, provide a unique title and a description  no
    more than 1-2 sentences long. Only label the parts of your code that depict
    the most important visual  aspects of your canvas.
  accessible-labels-steps-for-labeling-step-2-using-de-2: >-
    Within each <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    label, discuss the important qualities of that element. Is the element 
    animated? Is the element interactive? What meaning does the element provide
    to the project?
  accessible-labels-steps-for-labeling-step-2-using-de-3: >-
    If your canvas contains any <a class = "code" href =
    "https://p5js.org/reference/#/p5/text">text()</a> elements that are
    important to the general understanding of the  image, make a separate label
    for them. Label any legible text with quotation marks around it in the 
    label, as in <span class = "code">describeElement("Text", "The words 'hello,
    world' displayed in green at the center of a  black canvas.")</span>.
  accessible-labels-steps-for-labeling-step-2-using-de-4: >-
    You don’t need to start each label with “A p5 canvas…” or something similar.
    The screen reader will  call out the element type before reading your
    labels:
  accessible-labels-steps-for-labeling-step-2-using-de-5: >-
    Limit the number of <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    functions present within your code as much as possible. If you  have to use
    more than 10 <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>
    functions to describe your canvas, consider using a labeling  strategy that
    affords more complexity (such as vanilla ARIA labeling).
  accessible-labels-steps-for-labeling-step-2-using-go-to: >-
    Using <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> or <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a>
  accessible-labels-steps-for-labeling-step-2-using-go-to-1: >-
    <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a> and <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    generate their information based on the code of the visual element, such as
    its size, color, and shape.  Unlike <a class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, you
    only need to use one label to describe all  your canvas's visual elements.
  accessible-labels-steps-for-labeling-step-2-animated: Projects with animated or interactive elements
  accessible-labels-steps-for-labeling-step-2-animated-1: >-
    Individual interactive elements, such as HTML buttons, dropdowns, or inputs,
    don’t need labels. These  elements are built outside of the p5.js canvas and
    are interpreted by screen readers. However, this  means the <a class =
    "code" href = "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>
    and  <a class = "code" href =
    "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> functions
    won’t provide any information about these interactive  inputs.
  accessible-labels-steps-for-labeling-step-2-animated-2: >-
    If a canvas element is animated and/or interactive, represent its current
    state or qualities in the label.  So long as you place the functions within
    the <a class = "code" href =
    "https://p5js.org/reference/#/p5/draw">draw()</a> function,  they will
    automatically update with the shape’s new information (except for <a class =
    "code" href = "https://p5js.org/reference/#/p5/textOutput">textOutput()</a> 
    and <a class = "code" href =
    "https://p5js.org/reference/#/p5/gridOutput">gridOutput()</a>,  which will
    update even when listed in <a class = "code" href =
    "https://p5js.org/reference/#/p5/setup">setup()</a>). If you are using  <a
    class = "code" href =
    "https://p5js.org/reference/#/p5/describeElement">describeElement()</a>, use
    template strings to update the element’s description:
  accessible-labels-steps-for-labeling-step-2-do-donts: Labeling do’s and don’ts
  accessible-labels-steps-for-labeling-step-2-do-donts-1: >-
    <i>Don’t</i> use screen reader labels as a way of commenting your code.
    Labels should only summarize the  resulting visual elements within a canvas.
    If you overuse screen reader labels, you may end up  complicating the screen
    reader’s interpretation of the canvas rather than helping it.
  accessible-labels-steps-for-labeling-step-2-do-donts-2: >-
    <i>Do</i> make your label descriptions short and accurate. Use full
    sentences for your labels, and write  in the present tense when describing
    elements.
  accessible-labels-steps-for-labeling-step-3: 3. Test your labels
  accessible-labels-steps-for-labeling-step-3-1: >-
    Be sure to test your labels before publishing your sketch. Labels are only
    available to screen readers  by default.To see the output during
    development, pass <span class = "code">LABEL</span> as the last argument to
    the function.
  accessible-labels-steps-for-labeling-step-3-2: 'When testing your labels, consider the following questions:'
  accessible-labels-steps-for-labeling-step-3-2-li-1: >-
    Do your canvas labels provide enough information for someone to understand
    the sketch’s purpose? 
  accessible-labels-steps-for-labeling-step-3-2-li-2: >-
    If this canvas exists on a web page among other content, would someone have
    a good understanding of how the canvas relates to its  surrounding context?
  accessible-labels-steps-for-labeling-step-3-3: >-
    Be sure to remove the <span class = "code">LABEL</span> argument once you’ve
    tested the output. With <span class = "code">LABEL</span>  active, screen
    readers are forced to read the fallback text and the visible label text when
    focused on the canvas. This is  confusing for them.
  accessible-labels-steps-for-labeling-step-3-4: >-
    You may also download a screen reader and use it to test your code. For more
    information about using  screen readers, visit <a href =
    "https://www.w3schools.com/accessibility/accessibility_screen_readers.php"
    target="_blank" rel="noopener noreferrer">W3 School’s "Accessibility Screen
    Readers"</a>.
  accessible-labels-conclusion: Conclusion
  accessible-labels-conclusion-1: >-
    Once you've tested your labels, your canvas should be accessible to screen
    reader technology!
  accessible-labels-conclusion-2: >-
    If you would like more information about ARIA labeling, visit <a href =
    "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA"
    target="_blank" rel="noopener noreferrer">MDN’s ARIA</a>.
  accessible-labels-conclusion-3: >-
    <i>Notice any errors or typos? Please let us know. If you would like to
    contribute to this tutorial,  feel free to issue a <a href =
    "https://github.com/processing/p5.js-website" target="_blank" rel="noopener
    noreferrer">pull request</a>!</i>
  using-local-server: '맥 OSX, 윈도우, 리눅스 상에서 로컬 서버 설정하기'
  p5js-wiki-title: p5.js 위키
  p5js-wiki: 커뮤니티의 기여로 제작된 레퍼런스와 튜토리얼
  connecting-p5js-title: p5.js에 연결하기
  creating-libraries-title: 라이브러리 만들기
  creating-libraries: p5.js 추가 라이브러리 만들기
  nodejs-and-socketio-title: node.js와 socket.io
  nodejs-and-socketio: 'p5.js로 node.js 서버 사용하기, socket.io로 연결, 통신하기'
  programming-topics-title: 프로그래밍 주제
  beyond-the-canvas-title: 캔버스 너머서
  beyond-the-canvas: 페이지상 캔버스 너머의 요소들 만들고 조작하기
  getting-started-in-webgl-other-tutorials-title: Other Tutorials
  getting-started-in-webgl-other-tutorials-p: >-
    This tutorial is part of a series about the basics of using WebGL in p5.js.
    Check out each of these other tutorials below.
  getting-started-in-webgl-other-tutorials-tut1: Coordinates and Transformations
  getting-started-in-webgl-other-tutorials-tut2: Creating Custom Geometry in WebGL
  getting-started-in-webgl-other-tutorials-tut3: Styling and Appearance
  getting-started-in-webgl-other-tutorials-tut4: Introduction to Shaders
  getting-started-in-webgl-other-tutorials-you-are-here: (you are here)
  getting-started-in-webgl-title: Getting Started in WebGL
  getting-started-in-webgl-glossary-title: Glossary
  getting-started-in-webgl-coords-and-transform-title: Coordinates and Transformations
  getting-started-in-webgl-coords-and-transform: 'Basics of 3D setup, coordinates, and transformations'
  getting-started-in-webgl-coords-and-transform-p1x1: >-
    p5.js is a powerful tool for creating 2D graphics but it's also capable of
    3D graphics. To get started in 3D there are some new concepts to learn and
    this document will introduce some ideas that will be important to any 3D
    sketch.
  getting-started-in-webgl-coords-and-transform-toc-title: Table of Contents
  getting-started-in-webgl-coords-and-transform-heading1: What is WebGL
  getting-started-in-webgl-coords-and-transform-p2x1: >-
    WebGL is a library that gives us the tools we need to create 3D graphics
    within a web browser. To put it simply, it allows us to do all kinds of math
    that help arrange and display objects in 3D. p5.js makes it easier to work
    with WebGL through its special WebGL mode.
  getting-started-in-webgl-coords-and-transform-p3x1: >-
    Working in 3D introduces a lot of complexity, especially when a sketch
    involves motion, texture, lighting, and more. Luckily for us, computers have
    special hardware that is particularly well suited to performing those
    calculations, the graphics processing unit (GPU). The GPU is capable of
    processing many things simultaneously, which is especially important when
    we're dealing with pixels and many shapes in space.
  getting-started-in-webgl-coords-and-transform-p4x1: >-
    Let's get started by setting up the p5.js to use WebGL, by passing a third
    parameter into <a class="code">createCanvas()</a>.
  getting-started-in-webgl-coords-and-transform-heading2: '3D Coordinate Space: Positioning in 3D'
  getting-started-in-webgl-coords-and-transform-info1x1: >-
    If coordinates systems aren't making sense it might be helpful to revisit
    the tutorial titled <a
    href="{{root}}/learn/coordinate-system-and-shapes.html">Coordinate System
    and Shapes</a>.
  getting-started-in-webgl-coords-and-transform-info1x2: Coordinate System and Shapes
  getting-started-in-webgl-coords-and-transform-p5x1: >-
    One of the most fundamental differences between working in 2D and working in
    3D is the most obvious: there is one more dimension to work with. In
    addition to the horizontal and vertical position (x and y axes) of an
    element in our drawing, 3D adds depth, the z-axis. 
  getting-started-in-webgl-coords-and-transform-p6x1: >-
    When drawing in 2D, the point (0,0) is located at the top left corner of the
    screen. In WebGL mode, the origin of the sketch (0,0,0) is located in the
    middle of the screen. By default, the x-axis goes left-to-right, y-axis goes
    up-to-down, and the z-axis goes from further-to-closer.
  getting-started-in-webgl-coords-and-transform-heading3: 'Transformations: Position and Size of 3D Shapes'
  getting-started-in-webgl-coords-and-transform-p7x1: >-
    p5.js has a few methods, <a class="code"
    href="{{root}}/reference/#/p5/translate">translate()</a>, <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/scale">scale()</a>, that we can use to
    position and orient objects within space. Each of these methods affect what
    is known as the <em>model matrix</em>. Collectively these are known as the
    <em>transformation</em> of an object. These methods are available for both
    2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-p7x2: 'and '
  getting-started-in-webgl-coords-and-transform-p7x3: >-
    that we can use to position and orient objects within space. Each of these
    methods affect what is known as the <em>model matrix</em>. Collectively
    these are known as the <em>transformation</em> of an object. These methods
    are available for both 2D and 3D drawing.
  getting-started-in-webgl-coords-and-transform-subheading1: 'translate(): Moving Objects in Space'
  getting-started-in-webgl-coords-and-transform-p8x1: >-
    <a class="code" href="{{root}}/reference/#/p5/translate">translate()</a>
    moves the origin in a given direction. Anything drawn after we call <a
    class="code">translate()</a> will be positioned relative to that point. <a
    class="code">translate()</a> accepts arguments for x, y, and z values. Use
    the sliders in the sketch above to change the translation of the box and see
    how it moves along each axis. The code below demonstrates simple translation
    on a <a class="code">box()</a> shape.
  getting-started-in-webgl-coords-and-transform-subheading2: 'rotate(): Orienting Objects in Space'
  getting-started-in-webgl-coords-and-transform-p9x1: >-
    <a class="code" href="{{root}}/reference/#/p5/rotate">rotate()</a> reorients
    whatever is drawn after it.
  getting-started-in-webgl-coords-and-transform-p10x1: >-
    There are a few methods that can be used to rotate an object in 3D. Most of
    the time it's easiest to call methods like like <a class="code"
    href="{{root}}/reference/#/p5/rotateX">rotateX()</a>, <a class="code"
      href="{{root}}/reference/#/p5/rotateY">rotateY()</a>, and <a class="code"
      href="{{root}}/reference/#/p5/rotateZ">rotateZ()</a>, which each allow for rotation around a specific axis.
    Each of these methods accept a single argument specifying the angle of
    rotation. Try moving the sliders in the example above to see how rotation is
    performed on each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p10x2: 'and '
  getting-started-in-webgl-coords-and-transform-p10x3: >-
    , which each allow for rotation around a specific axis. Each of these
    methods accept a single argument specifying the angle of rotation. Try
    moving the sliders in the example above to see how rotation is performed on
    each axis. The code below shows each of these methods in use.
  getting-started-in-webgl-coords-and-transform-p11x1: >-
    By default p5.js will expect angles to be in radians. Radians use numbers
    from 0 - <a class="code">TWO_PI</a> to specify an angle. To use degrees,
    either convert degrees to radians using <a class="code">radians()</a>, or
    use <a class="code">angleMode(DEGREES)</a>.
  getting-started-in-webgl-coords-and-transform-info2x1: >-
    <p>You can also use <a class="code"
    href="{{root}}/reference/#/p5/rotate">rotate()</a>, which allows you to
    specify which axis you'd like to rotate around using a vector as the second
    argument.</p>
  getting-started-in-webgl-coords-and-transform-info2x2: >-
    , which allows you to specify which axis you'd like to rotate around using a
    vector as the second argument.
  getting-started-in-webgl-coords-and-transform-subheading3: 'scale(): Size in Space'
  getting-started-in-webgl-coords-and-transform-p12x1: >-
    <a class="code" href="{{root}}/reference/#/p5/scale">scale()</a> changes the
    size of whatever is drawn after it. Like the other methods described so far,
    it accepts arguments for x, y, and z values.
  getting-started-in-webgl-coords-and-transform-heading4: The Order of Transformations Matters!
  getting-started-in-webgl-coords-and-transform-p13x1: >-
    Something that can feel unpredictable at first is the order of
    transformations. Each transformation always affects the next one. For
    example, if <a class="code">rotate()</a> is called, followed by <a
    class="code">translate()</a>, the direction of that translation will be
    affected by the rotation. The entire coordinate system is rotating and
    moving, not just the shape itself. 
  getting-started-in-webgl-coords-and-transform-p14x1: >-
    Transformations can be performed in any order, but using
    <strong>translate</strong>, <strong>rotate</strong>, and then
    <strong>scale</strong> will be the most intuitive. Translation, followed by
    rotation, produces the effect of moving the shape <em>and then</em> rotating
    around that new location.
  getting-started-in-webgl-coords-and-transform-p15x1: >-
    In the below example, try changing the order of <a
    class="code">translate()</a> and <a class="code">rotateY()</a> and see how
    it affects where the object is drawn.
  getting-started-in-webgl-coords-and-transform-p16x1: >-
    p5.js also has some methods that can control when transformations are
    applied: <a class="code" href="{{root}}/reference/#/p5/push">push()</a> and
    <a class="code" href="{{root}}/reference/#/p5/pop">pop()</a>. <a
    class="code">push()</a> and <a class="code">pop()</a> make it easier to move
    objects individually. The <a class="code">push()</a> method saves and sets
    aside the current transformations. The <a class="code">pop()</a> method
    restores those transformations. Whatever transformations that are made
    between <a class="code">push()</a> and <a class="code">pop()</a> will be
    isolated to that portion of the code. If you don’t use <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to keep
    track of whatever transformations have already taken place, which can get
    complicated and difficult to follow. Consider this following example, which
    places two boxes in our sketch. To position the second box without <a
    class="code">push()</a> and <a class="code">pop()</a>, you have to account
    for the first transformation. This  can be a lot to keep track of in a more
    complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p16x2: and
  getting-started-in-webgl-coords-and-transform-p16x3: >-
    . <a class="code">push()</a> and <a class="code">pop()</a> make it easier to
    move objects individually. The <a class="code">push()</a> method saves the
    current transformations and  style settings. Then, after performing new
    transformations, the <a class="code">pop()</a> method is used to restore us
    to the the original transformations. The result is that  whatever
    transformations or styling changes that are made between <a
    class="code">push() </a> and <a class="code">pop()</a> are isolated to that
    portion of the code. If you don’t  use <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to keep track of whatever transformations
    have already taken place, which can get complicated and difficult to follow.
    Consider this following example, which places two boxes in our sketch. To
    position the second box without <a class="code">push()</a> and <a
    class="code">pop()</a>, you have to account for the first transformation.
    This  can be a lot to keep track of in a more complex 3D scene. 
  getting-started-in-webgl-coords-and-transform-p17x1: >-
    Now, let's try the same code with <a class="code">push()</a> and <a
    class="code">pop()</a>. Now we can just translate the object where we want
    it, without having to remember where our coordinate system lies.
  getting-started-in-webgl-coords-and-transform-info3x1: >-
    <p>While this is a more advanced topic, each of these transformations affect
    what is called the model matrix. The transformation matrix is combined with
    the view matrix and the projection matrix, both of which help simulate the
    view of a camera, and this combination results in our 3D scene! </p> <a
    href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection">
    Learn more about Model View Projection </a>
  getting-started-in-webgl-coords-and-transform-p18x1: >-
    In the below example, try removing <a class="code">push()</a> and <a
    class="code">pop()</a> to see how the transformations affect the second
    object that is drawn. 
  getting-started-in-webgl-coords-and-transform-heading5: Basic Shapes in 3D
  getting-started-in-webgl-coords-and-transform-p19x1: >-
    So far we have only been using <a class="code">box()</a> but p5.js has seven
    different predefined geometries that you can use in your sketch. These basic
    predefined geometries are often referred to as 'primitives'.
  getting-started-in-webgl-coords-and-transform-p20x1: >-
    These primitive shape methods are: <a class="code"
    href="{{root}}/reference/#/p5/box">box()</a>, <a class="code"
    href="{{root}}/reference/#/p5/plane">plane()</a>, <a class="code"
    href="{{root}}/reference/#/p5/sphere">sphere()</a>, <a class="code"
    href="{{root}}/reference/#/p5/ellipsoid">ellipsoid()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cone">cone()</a>, <a class="code"
    href="{{root}}/reference/#/p5/cylinder">cylinder()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/torus">torus()</a>.
  getting-started-in-webgl-coords-and-transform-p20x2: and
  getting-started-in-webgl-coords-and-transform-p21x1: >-
    It is also possible to create custom geometry, either from scratch or from
    3D models created in another program. More information about custom geometry
    can be found the <a
    href="{{root}}/learn/getting-started-in-webgl-custom-geometry.html">Custom
    Geometry tutorial</a>.
  getting-started-in-webgl-coords-and-transform-p21x2: 'Custom Geometry tutorial    '
  getting-started-in-webgl-coords-and-transform-heading6: Conclusion
  getting-started-in-webgl-coords-and-transform-p22x1: >-
    By having basic control over a 3D coordinate space, transformations,  and
    basic shapes, you should be able to begin creating basic scenes in 3D. The
    tutorials that follow this in the Getting Started in WebGL series will
    introduce custom geometries, allow you to tweak the appearance of  the
    scene, and introduce you to some basic shader programming to push your
    sketches further.
  getting-started-in-webgl-coords-and-transform-glossary-term1-title: GPU
  getting-started-in-webgl-coords-and-transform-glossary-term1-definition: >-
    The GPU (Graphics Processing Unit) is a piece of hardware that is
    particularly well suited for performing many calculations in parallel,
    making it powerful for 3D graphics.
  getting-started-in-webgl-coords-and-transform-glossary-term2-title: Model
  getting-started-in-webgl-coords-and-transform-glossary-term2-definition: A custom 3D geometry that can be saved and loaded from a file.
  getting-started-in-webgl-coords-and-transform-glossary-term3-title: Matrix
  getting-started-in-webgl-coords-and-transform-glossary-term3-definition: >-
    A special array that can hold information about the transformation of a
    geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term4-title: Camera
  getting-started-in-webgl-coords-and-transform-glossary-term4-definition: The viewpoint of a 3D scene.
  getting-started-in-webgl-coords-and-transform-glossary-term5-title: Transform
  getting-started-in-webgl-coords-and-transform-glossary-term5-definition: >-
    Also referred to as <em>transformation</em>, this refers to the combined
    scale, rotation, and translation of a geometry.
  getting-started-in-webgl-coords-and-transform-glossary-term6-title: Vertex
  getting-started-in-webgl-coords-and-transform-glossary-term6-definition: 'A point in 3D space, with an x, y, z position.'
  getting-started-in-webgl-coords-and-transform-glossary-term7-title: Face
  getting-started-in-webgl-coords-and-transform-glossary-term7-definition: A collection of three points that create a solid surface.
  getting-started-in-webgl-custom-geometry-title: Creating Custom Geometry in WebGL
  getting-started-in-webgl-custom-geometry: Creating custom geometry in WebGL
  getting-started-in-webgl-custom-geometry-p1x1: >-
    p5.js has a number of basic shapes, like <a class="code">box()</a> or <a
    class="code">sphere()</a>, but p5.js is also capable of rendering complex
    custom geometry, both from 3D model files or from code. This tutorial will
    walk through how to import 3D models into p5.js, as well as how to create
    geometry from scratch.
  getting-started-in-webgl-custom-geometry-info1x1: 'If you are new to 3D check out the '
  getting-started-in-webgl-custom-geometry-info1x2: ' tutorial.'
  getting-started-in-webgl-custom-geometry-toc-title: Table of Contents
  getting-started-in-webgl-custom-geometry-heading1: Loading 3D Models from File
  getting-started-in-webgl-custom-geometry-p2x1: >-
    Custom geometry can be imported into p5.js using either OBJ or STL files.
    These files are usually generated in a 3D modeling tool like Blender, which
    offers much more control when constructing a 3D scene. This is done using
    the <a class="code" href="{{root}}/reference/#/p5/loadModel">loadModel()</a>
    method, which should be used within <a class="code">preload()</a>.
  getting-started-in-webgl-custom-geometry-p2x2: >-
    method, which should be used within <a class="code">preload()</a>. Then you
    can use the 
  getting-started-in-webgl-custom-geometry-p2x3: 'function to draw the model, as demonstrated in the example below.'
  getting-started-in-webgl-custom-geometry-p3x1: >-
    A common issue that can come up with custom models is scaling. Depending on
    how the model is constructed, it might be a much different size when
    rendered in p5.js, or even be too small to be rendered at all. The <a
    class="code">loadModel()</a> method includes a normalize parameter that will
    resize the model to something that works better in p5.js.
  getting-started-in-webgl-custom-geometry-info2x1: >-
    Note that there is currently no support for STL files with color, although
    you can add color using materials or textures, which you can learn about in
    the <a
    href="{{root}}/learn/getting-started-in-webgl-appearance.html">Styling and
    Appearance</a> tutorial.
  getting-started-in-webgl-custom-geometry-info2x2: 'Styling and Appearance    '
  getting-started-in-webgl-custom-geometry-info2x3: tutorial.
  getting-started-in-webgl-custom-geometry-heading2: Creating Basic Procedural Geometry
  getting-started-in-webgl-custom-geometry-p4x1: >-
    Geometry can also be defined procedurally using code. This is a great way to
    create geometry that moves or is formed using your own set of rules. There
    are a number of methods that can be used to create 3D geometry in a way that
    is similar to 2D drawing in p5.js. For example, methods like <a
    class="code">quad()</a>, <a class="code">triangle()</a>, <a
    class="code">rect()</a>, and <a class="code">circle()</a> each have extra
    parameters that make it possible to use them in 3D.
  getting-started-in-webgl-custom-geometry-p5x1: >-
    There are other methods that offer greater control of the geometry. A shape
    can be defined point-by-point using <a class="code"
    href="{{root}}/reference/#/p5/beginShape">beginShape()</a>, <a class="code"
    href="{{root}}/reference/#/p5/vertex">vertex()</a>, and <a class="code"
    href="{{root}}/reference/#/p5/endShape">endShape()</a>. This following
    example shows how these methods can be used to construct a 3D shape
    mathematically.
  getting-started-in-webgl-custom-geometry-p5x2: 'and '
  getting-started-in-webgl-custom-geometry-p5x3: >-
    This following example shows how these methods can be used to construct a 3D
    shape mathematically.
  getting-started-in-webgl-custom-geometry-p6x1: >-
    There is also a powerful class, <a class="code"
    href="{{root}}/reference/#/p5/p5.Geometry">p5.Geometry</a>, which p5 uses
    internally for <a class="code">loadModel()</a> but can also be used to
    define custom geometry, offering tools that can be helpful in calculating
    faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x1_: >-
    , which p5.js uses internally for <a class="code">loadModel()</a> but can
    also be used to define custom geometry, offering tools that can be helpful
    in calculating faces and normals. 
  getting-started-in-webgl-custom-geometry-p6x2: >-
    In 3D, a face refers to a collection of three or four points that make up a
    surface, giving our geometry the appearance of being solid. A normal is the
    direction that is perpendicular to the face, which helps p5.js calculate
    lighting across the surface.
  getting-started-in-webgl-custom-geometry-p6x3: >-
    In the following example, <a class="code">p5.Geometry</a> is used to plot a
    grid of points for the geometry. Then, <a class="code">computeFaces()</a> is
    used to give the geometry a solid appearance and <a
    class="code">computeNormals()</a> allows our geometry to have proper
    lighting.
  getting-started-in-webgl-custom-geometry-heading3: Conclusion
  getting-started-in-webgl-custom-geometry-p7x1: >-
    Now you should be able to create custom geometry, making it possible to
    create unique shapes, both from other tools and from code. Spend some time
    working with a variety of 3D modeling tools so you can find the one that
    works best for you.
  getting-started-in-webgl-custom-geometry-glossary-term1-title: Procedural
  getting-started-in-webgl-custom-geometry-glossary-term1-definition: >-
    Meaning that something is defined mathematically, instead of from stored
    data, like a file.
  getting-started-in-webgl-custom-geometry-glossary-term2-title: Model
  getting-started-in-webgl-custom-geometry-glossary-term2-definition: A representation of geometry.
  getting-started-in-webgl-custom-geometry-glossary-term3-title: STL
  getting-started-in-webgl-custom-geometry-glossary-term3-definition: >-
    STL (most often standing for "standard tesselation language") is a file
    format for 3D models.  It only stores information about the geometry.
  getting-started-in-webgl-custom-geometry-glossary-term4-title: OBJ
  getting-started-in-webgl-custom-geometry-glossary-term4-definition: >-
    OBJ is an open file format that stores geometry data as well as some
    material and texture data. In p5.js, we are limited to its geometry,
    although an image can still be mapped to the surface using textures.
  getting-started-in-webgl-custom-geometry-glossary-term5-title: Faces
  getting-started-in-webgl-custom-geometry-glossary-term5-definition: The solid surface that is generated between three points.
  getting-started-in-webgl-custom-geometry-glossary-term6-title: Normals
  getting-started-in-webgl-custom-geometry-glossary-term6-definition: >-
    The direction that is perpendicular to a face, which is often needed when
    calculating lighting or using materials.
  getting-started-in-webgl-custom-geometry-glossary-term7-title: Normalization
  getting-started-in-webgl-custom-geometry-glossary-term7-definition: Changing something so that it fits within a standard range.
  getting-started-in-webgl-appearance-title: Styling and Appearance
  getting-started-in-webgl-appearance: The basics of materials and lighting in WebGL
  getting-started-in-webgl-appearance-p0x1: >-
    Creating in 3D is about more than just geometry. Cameras, lights, and
    materials are an important part of creating a visually interesting 3D scene.
    p5.js has a number of tools that make it possible to transform the
    appearance of our geometry.
  getting-started-in-webgl-appearance-toc-title: Table of Contents
  getting-started-in-webgl-appearance-heading1: Camera and View
  getting-started-in-webgl-appearance-p1x1: >-
    The camera is an essential piece of a 3D scene; it gives us the sense of
    space and dimension that we are often looking for in 3D. In p5.js, the WebGL
    mode provides us with a perspective camera by default, but we can change
    this using <a class="code"
    href="{{root}}/reference/#/p5/perspective">perspective()</a> or <a
      class="code" href="{{root}}/reference/#/p5/ortho">ortho()</a>.
  getting-started-in-webgl-appearance-p1x2: 'or '
  getting-started-in-webgl-appearance-p2x1: >-
    A <em>perspective camera</em> skews objects so they appear to get smaller as
    they get further away, vanishing at a single point in the distance. This is
    in contrast to an <em>orthographic camera</em>, where the  geometry stays
    the same size as it gets further away and has no vanishing point. 
  getting-started-in-webgl-appearance-p3x1: >-
    One setting that we can change with a perspective camera is the
    <em>field-of-view</em>, or FOV. This is the  term that is used to describe
    how much our camera can see, measured as an angle. In simple examples it
    might appear to have a zoom-like effect, but it will change way that shapes
    will change size in the distance.
  getting-started-in-webgl-appearance-p4x1: >-
    Another important term when working with cameras in 3D is the camera
    <em>frustum</em>. The frustum of the camera the shape of the camera's view,
    a pyramid-like shape within which geometry can be displayed. The frustum
    includes a <em>near and far plane</em>. The near plane defines the minimum
    distance that geometry must be from the camera to be rendered. The far plane
    defines the maximum distance that the geometry can be from the camera. Each
    of these can be changed to affect how close and how far the camera can see.
    This process of selectively including geometry is sometimes referred to as
    'clipping'.
  getting-started-in-webgl-appearance-p5x1: >-
    Cameras can be moved by passing arguments to <a class="code">camera()</a>,
    but constantly moving and adjusting the camera in code can be tedious,
    especially when you are experimenting with ideas. p5.js has a special camera
    method, <a class="code"
      href="{{root}}/reference/#/p5/orbitControl">orbitControl()</a>, that can be used to zoom, pan,
    and position the camera using the mouse.
  getting-started-in-webgl-appearance-p5x2: ', that can be used to zoom, pan, and position the camera using the mouse.'
  getting-started-in-webgl-appearance-p6x1: >-
    A scene can have multiple cameras, but only one camera can be active at a
    time. Sketches in p5.js will default to having a single perspective camera,
    but that can be changed by calling either <a
      class="code">perspective()</a>
    (with new parameters) or <a class="code">ortho()</a>. <a
    class="code">camera()</a> can be used to change the position of the active
    camera and the position that the camera is looking at. Try it out in the
    sketch below.
  getting-started-in-webgl-appearance-heading2: Lighting
  getting-started-in-webgl-appearance-p7x1: >-
    Lighting is another essential part of a 3D scene. To be able to convey shape
    and depth in 3D is necessary to have a light source. p5.js has a few
    different types of light that can be used in a sketch.
  getting-started-in-webgl-appearance-lighting-list1: >-
    Ambient light makes everything display a little brighter, with no
    consideration for light position or direction.
  getting-started-in-webgl-appearance-lighting-list2: >-
    A directional light shines from one direction, which can be especially
    useful for communicating depth in a scene, or when a scene needs a 'sun'
    light. This method accepts a color and direction.
  getting-started-in-webgl-appearance-lighting-list3: >-
    A point light emits from a single point in all directions, similar to
    something like a lightbulb. This method accepts a color and a position for
    the light.
  getting-started-in-webgl-appearance-lighting-list4: >-
    A spot light emits from a single point in a single direction. This light is
    cast in a conical shape and it's radius and concentration can be adjusted.
  getting-started-in-webgl-appearance-lighting-list5: >-
    noLights() makes it so that all subsequent geometry is rendered without any
    lighting. This can be useful when you want flat, unshaded geometry.
  getting-started-in-webgl-appearance-p8x1: >-
    These lights should be used within <a class="code">draw()</a>. Up to 5
    lights can be used in a scene simultaneously, allowing you to compose a
    scene with varied and complex lighting sources.  Try checking and unchecking
    the boxes in the following interactive example to see how lighting can be
    blended together. For each active light source there are visual indicators
    of their position or direction, just know that these are here for
    illustrative purposes!
  getting-started-in-webgl-appearance-p9x1: >-
    In this next example, try commenting and uncommenting each light and
    experiment with their parameters.
  getting-started-in-webgl-appearance-heading3: Materials and Textures
  getting-started-in-webgl-appearance-p10x1: >-
    Objects can appear differently based on their material. Materials dictate
    how light interacts with the geometry and how color (or texture) gets
    applied to the object. Materials can be varied, making objects shiny, rough,
    or even textured with images.
  getting-started-in-webgl-appearance-p11x1: >-
    In this interactive example, try selecting each of the different materials
    to see how they affect the appearance of the geometry. You can move your
    mouse and see the effect that a directional light has on the material. 
  getting-started-in-webgl-appearance-p12x1: 'Try commenting and uncommenting the different lights in this example:'
  getting-started-in-webgl-appearance-p13x1: >-
    More custom materials can be achieved through using <a
    class="code">texture()</a>. In short, these are images that can be mapped
    onto the surface of a geometry. These textures can be imported from an image
    and can even be generated within code using shaders. To map a texture to
    your geometry, use <a class="code">loadImage()</a>  within <a
    class="code">preload()</a>, then call <a class="code">texture()</a> before
    drawing your shape.
  getting-started-in-webgl-appearance-info1x1: >-
    While they are useful for changing the appearance of your geometry, shaders
    are a bit beyond the scope of this  tutorial, so make sure to check out the
    <a href="{{root}}/learn/introduction-to-shaders.html">Introduction to
    Shaders</a>  page when you are ready. 
  getting-started-in-webgl-appearance-info1x2: Introduction to Shaders
  getting-started-in-webgl-appearance-info1x3: 'page when you are ready. '
  getting-started-in-webgl-appearance-heading4: Conclusion
  getting-started-in-webgl-appearance-p14x1: >-
    Being able to have control over the camera, lighting, and materials will
    give you much more flexibility to decide how your sketch looks, and it will
    open up the possibilities for you to introduce your own style to your 3D
    sketches. The following tutorial in the Getting Started in WebGL series will
    introduce you to shaders, which will make it possible to change the
    appearance of your sketch in even more interesting ways.
  getting-started-in-webgl-appearance-glossary-term1-title: Camera
  getting-started-in-webgl-appearance-glossary-term1-definition: The viewpoint of a 3D scene
  getting-started-in-webgl-appearance-glossary-term2-title: Perspective
  getting-started-in-webgl-appearance-glossary-term2-definition: >-
    A projection that gives the appearance of depth, achieved by making objects
    in the distance appear smaller.
  getting-started-in-webgl-appearance-glossary-term3-title: Orthographic
  getting-started-in-webgl-appearance-glossary-term3-definition: >-
    A projection that is <em>orthogonal</em> and unaffected by depth. It gives
    the appearance of being two-dimensional.
  getting-started-in-webgl-appearance-glossary-term4-title: Field-of-View
  getting-started-in-webgl-appearance-glossary-term4-definition: The angle representing how much can be seen by the camera.
  getting-started-in-webgl-appearance-glossary-term5-title: Frustum
  getting-started-in-webgl-appearance-glossary-term5-definition: >-
    The geometric shape representing the full area that can be viewed by the
    camera.
  getting-started-in-webgl-appearance-glossary-term6-title: Near and Far Plane
  getting-started-in-webgl-appearance-glossary-term6-definition: >-
    The near plane represents the minimum distance a geometry must be from the
    camera to be displayed, while the far plane represents the maximum distance.
  getting-started-in-webgl-appearance-glossary-term7-title: Clipping
  getting-started-in-webgl-appearance-glossary-term7-definition: >-
    Selectively showing some geometry and not others, such as when geometry
    falls outside of the camera frustum.
  getting-started-in-webgl-shaders-title: Introduction to Shaders
  getting-started-in-webgl-shaders: The basics of creating shaders within p5js using WebGL
  getting-started-in-webgl-shaders-p0x1: >-
    Shaders are special programs that run on the graphics processing unit, or
    GPU, that can do some incredible things. They take advantage of the GPU to
    process many pixels at once, making them fast and particularly well suited
    for certain tasks, like generating noise, applying filters like blur, or
    shading polygons. Shader programming can feel daunting at first, requiring a
    different approach than the 2D drawing of p5.js. This document will outline
    the basics  of shader programming and point you towards other resources.
  getting-started-in-webgl-shaders-toc-title: Table of Contents
  getting-started-in-webgl-shaders-heading1: Setup
  getting-started-in-webgl-shaders-p1x1: >-
    p5.js is a great tool for working with shaders because it handles a lot of
    the WebGL setup so you can focus on the shader code itself. Before we can
    get started with shaders we have to set up our canvas so that it uses p5.js
    WebGL model.
  getting-started-in-webgl-shaders-p2x1: >-
    A shader program consists of two parts, a <strong>vertex shader</strong> and
    a <strong>fragment
      shader</strong>. The vertex shader affects where the 3D geometry is drawn on the screen and the fragment
    shader is responsible for affecting the color output. Each of these live in
    separate files and are loaded into p5.js using <a
    class="code">loadShader()</a>. Once a shader is loaded it can be used within
    <a
      class="code">draw()</a>. The following example will show
    how to set up a basic shader within p5.js:
  getting-started-in-webgl-shaders-heading2: Shading Language (GLSL)
  getting-started-in-webgl-shaders-p3x1: >-
    So now you might be wondering what we actually write in these shader files!
    Shader files are written in Graphics Library Shading Language, or GLSL, and
    have a very different syntax and structure than we are familiar with. GLSL
    has a syntax that resembles C, which means it comes with a handful of
    concepts that aren't present in JavaScript.
  getting-started-in-webgl-shaders-p4x1: >-
    For one, the shading language is much more strict about types. Each variable
    you create has to be labeled with the kind of data it is storing. Here is a
    list of some of the common types:
  getting-started-in-webgl-shaders-typelist: |
    vec2(x,y)     // a vector of two floats
    vec3(r,g,b)   // a vector of three floats
    vec4(r,g,b,a) // a vector of four floats
    float         // a number with decimal points
    int           // a whole number without decimal points
    sampler2D     // a reference to a texture
  getting-started-in-webgl-shaders-p5x1: >-
    In general the shading language is much more strict than JavaScript. A
    missing semicolon for example is not allowed and will result in an error
    message. You can't use different types of numbers, like floats or integers
    interchangeably.
  getting-started-in-webgl-shaders-p6x1: 'First let''s look at a basic vertex shader:'
  getting-started-in-webgl-shaders-p7x1: >-
    This vertex shader begins with an <em>attribute</em>, which p5.js uses to
    share vertex position information with the shader. This attribute is a <a
    class="code">vec3</a>, meaning it contains a value for x, y, and z.
    Attributes are special variable types that are only used in the vertex
    shader and are typically provided by p5.js.
  getting-started-in-webgl-shaders-p8x1: >-
    All vertex shaders require a function, <a class="code">main()</a>, within
    which we position our vertices. In this example, the vertex shader
    repositions our vertices so that the shader output takes up the full sketch.
    At the end of <a
      class="code">main()</a>,
    we have to assign a value to <a class="code">gl_Position</a>.
  getting-started-in-webgl-shaders-p9x1: >-
    Don't worry if this doesn't make a ton of sense yet. The vertex shader plays
    an important role but it is often just responsible for making sure what we
    create in our fragment shader displays properly on the geometry. You'll
    probably find yourself reusing the same vertex shaders in many of your
    projects. The fragment shader on the other hand is responsible for the color
    output of our shader and is where we will do a lot of our shader
    programming. Here is a very simple fragment shader that will just display
    the color red:
  getting-started-in-webgl-shaders-p10x1: >-
    The fragment shader begins with a line specifying the float 'precision'.
    this value you can either be lowp, mediump, or highp, although you will
    likely use mediump, or highp in certain situations.
  getting-started-in-webgl-shaders-p11x1: >-
    And similar to the vertex shader, our fragment shader also requires a <a
    class="code">main()</a> function, but instead of setting <a
    class="code">gl_Position</a>, we will assign a color to <a
    class="code">gl_FragColor</a>.
  getting-started-in-webgl-shaders-p12x1: >-
    The variable, <a class="code">myColor</a>, is defined as a <a
    class="code">vec4</a>, meaning it stores 4 values. Since we are dealing with
    color, those four values are red, green, blue, and alpha. Shaders don't use
    0 - 255 for colors like our sketches do, instead they use values between 0.0
    and 1.0.
  getting-started-in-webgl-shaders-p13x1: >-
    Now that we have a vertex shader and a fragment shader, these can be saved
    to separate files (shader.vert and shader.frag respectively), and loaded
    into our sketch using <a class="code">loadShader()</a>.
  getting-started-in-webgl-shaders-heading3: 'Uniforms: Passing data from sketch to shader'
  getting-started-in-webgl-shaders-p14x1: >-
    A simple shader like this can be useful by itself, but there are times when
    it's necessary to communicate variables from the p5.js sketch to a shader.
    This is when uniforms come in. Uniforms are special variables that can be
    sent from a sketch to a shader. These make it possible to have much more
    control over a shader. For example, you could use the p5.js method <a
    class="code">millis()</a> to pass a 'time' uniform to our sketch to
    introduce motion. In the shader, uniforms are defined at the top of the
    file, outside of <a class="code">main()</a>. In this following fragment
    shader we are creating a color uniform, <a class="code">myColor</a>, that
    will allow us to change the color from our sketch.
  getting-started-in-webgl-shaders-p15x1: >-
    Back in our p5.js sketch, this color can now be sent using <a
    class="code">setUniform()</a>:
  getting-started-in-webgl-shaders-p16x1: >-
    There are also <em>attributes</em>, which are usually used to share certain
    data about the geometry between the sketch and the vertex shader, and
    <em>varying</em> variables, which share data between the vertex shader and
    the fragment shader. This makes it possible to use position or other
    geometry data within our fragment shaders.
  getting-started-in-webgl-shaders-p17x1: >-
    Now with the texture coordinate attribute assigned to the varying variable,
    we can use the texture coordinate in our fragment shader. The result in the
    example below is a blue and magenta visualization of our texture
    coordinates.
  getting-started-in-webgl-shaders-info1x1: >-
    p5.js handles a lot of attributes and uniforms for us, and <a
    href="https://github.com/processing/p5.js/blob/374acfb44588bfd565c54d61264df197d798d121/contributor_docs/webgl_mode_architecture.md">you
    can view a list of all of the attributes that p5.js sends to the shader</a>.
  getting-started-in-webgl-shaders-heading4: Conclusion
  getting-started-in-webgl-shaders-p18x1: >-
    With these skills you will be able to create some basic shaders, but shader
    programming can go incredibly deep, and there are many shader topics that go
    beyond this tutorial. Shaders in p5.js can be a powerful tool for creating
    visuals, effects, and even textures that can be mapped to your 3D geometry.
  getting-started-in-webgl-shaders-p19x1: Want to keep learning more about shaders? Check out some of these websites!
  getting-started-in-webgl-shaders-resources: >-
    <li><a href="https://thebookofshaders.com/">The Book of Shaders</a>, a
    shader guide by Patricio Gonzalez Vivo
      and
      Jen Lowe.</li>
    <li><a href="https://itp-xstory.github.io/p5js-shaders/#/">P5.js
    shaders</a>, a shader guide by Casey Conchinha
      and
      Louise Lessél.</li>
    <li><a href="https://www.shadertoy.com/">Shadertoy</a>, a massive online
    collection of shaders that are written in a browser editor.</li> <li><a
    href="https://github.com/aferriss/p5jsShaderExamples">p5jsShaderExamples</a>,
    a collection of resources
      by
      Adam Ferriss.</li>
  getting-started-in-webgl-shaders-glossary-term1-title: Shader
  getting-started-in-webgl-shaders-glossary-term1-definition: >-
    A special graphics card program that can efficiently produce many visual
    effects and filters.
  getting-started-in-webgl-shaders-glossary-term2-title: GLSL
  getting-started-in-webgl-shaders-glossary-term2-definition: >-
    Graphics Library Shader Language (GLSL) is a programming language that is
    used to write shaders.
  getting-started-in-webgl-shaders-glossary-term3-title: Uniform
  getting-started-in-webgl-shaders-glossary-term3-definition: A variable that is passed from your sketch to a shader
  getting-started-in-webgl-shaders-glossary-term4-title: Vector
  getting-started-in-webgl-shaders-glossary-term4-definition: >-
    A data type that stores a group of numbers, most commonly two, three, or
    four, to represent colors, positions, and more.
  getting-started-in-webgl-shaders-glossary-term5-title: Float
  getting-started-in-webgl-shaders-glossary-term5-definition: >-
    A data type that stores floating point numbers, which can have a decimal
    point.
  getting-started-in-webgl-shaders-glossary-term6-title: Int
  getting-started-in-webgl-shaders-glossary-term6-definition: 'A data type that stores integers, which are whole numbers without a decimal.'
  getting-started-in-webgl-shaders-glossary-term7-title: Sampler
  getting-started-in-webgl-shaders-glossary-term7-definition: A data type that represents a texture being passed into the shader.
  getting-started-in-webgl-shaders-glossary-term8-title: Attribute
  getting-started-in-webgl-shaders-glossary-term8-definition: >-
    A GLSL variable that is generated in the p5.js sketch and made available in
    the vertex shader. For most situations these are provided by p5.js.
  getting-started-in-webgl-shaders-glossary-term9-title: Texture
  getting-started-in-webgl-shaders-glossary-term9-definition: An image that passed into a shader program.
  getting-started-in-webgl-shaders-glossary-term10-title: Type
  getting-started-in-webgl-shaders-glossary-term10-definition: >-
    A label describing the characterics of a piece of data, such as an int, a
    float, a vector, etc.
  getting-started-in-webgl-shaders-glossary-term11-title: Vertex Shader
  getting-started-in-webgl-shaders-glossary-term11-definition: >-
    The part of a shader program that is responsible for positioning geometry in
    3D space.
  getting-started-in-webgl-shaders-glossary-term12-title: Fragment Shader
  getting-started-in-webgl-shaders-glossary-term12-definition: >-
    The part of a shader program that is responsible for the color and
    appearance of each pixel output by the shader.  
  getting-started-in-webgl-framebuffers-title: Layered Rendering with Framebuffers
  getting-started-in-webgl-framebuffers: >-
    Setting up sketches that draw in multiple stages or access 3D depth
    information.
  color-title: 색상
  color: 디지털 색상 소개
  coordinate-system-and-shapes-title: 좌표와 도형
  coordinate-system-and-shapes: 좌표계를 활용하여 간단한 도형 그리기
  interactivity-title: 인터랙션
  interactivity: 마우스 및 키보드 인터랙션 소개
  program-flow-title: 프로그램 흐름
  program-flow: p5.js에서 프로그램 플로우 조정하는 법 소개
  curves-title: 곡선
  curves: 'p5.js상의 곡선 3가지 소개: 아치형 곡선, 스플라인 곡선, 베지어 곡선'
  becoming-a-better-programmer-title: 더 나은 개발자 되기
  debugging-title: 디버깅
  debugging: 모두를 위한 디버깅 필드 가이드
  optimizing-title: ps.js 성능 최적화
  optimizing: 더 빠르고 부드러운 코딩을 위한 최적화 팁
  test-driven-development-title: 유닛 테스팅 및 테스트 기반 개발
  test-driven-development: '설치로 인한 고통에서 벗어나세요. 유닛 테스팅이란 무엇이고 어떻게 사용하는가? 제작: 앤디 티몬스(Andy Timmons)'
  contributing-to-the-community-title: 커뮤니티에 함께하기
  development-title: 개발
  development: 개발 기여 시작하기 및 둘러보기
  looking-inside-title: p5 들여다보기
  looking-inside: 'p5.js 개발용 파일 구조 및 도구에 대한 친절한 소개. 제작: 루이자 페레이라(Luisa Pereira)'
  writing-tutorial-title: 튜토리얼 만들기
  writing-tutorial: 프로그래밍 튜토리얼 제작 가이드.
  writing-a-tutorial-title: p5.js 튜토리얼 기여를 위한 가이드
  writing-a-tutorial-author: 이 튜토리얼은 테가 브레인(Tega Brain)이 제작하였습니다.
  writing-a-tutorial-1: >-
    p5.js 튜토리얼은 이에 열정을 느끼는 교육자와 모든 분들께 열려있습니다. p5.js 프로젝트는 보다 다양한 사람들을 위한 크리에이티브
    코딩 및 오픈 소스 개발을 추구하며, 모든 개발 과정을 공개하는 것을 하나의 즐거운 과정으로 여깁니다. 현재까지 제작된 튜토리얼은 p5
    학습, 프로그래밍 기술, 오픈소스 프로젝트 공헌 방법 등에 대한 내용을 다룹니다.
  writing-a-tutorial-2: '새로운 튜토리얼을 제안하거나, 튜토리얼 준비 및 기여에 대한 가이드라인 제작을 환영합니다.'
  writing-a-tutorial-how-start-title: '커뮤니티 기여 시작하기:'
  writing-a-tutorial-how-start-1: '우선, 제안하려는 튜토리얼이 현재 진행 중인 내용들과 겹치는 지의 여부를 이 '
  writing-a-tutorial-how-start-2: 스프레드시트
  writing-a-tutorial-how-start-3: >-
    에서 확인하세요. 만약 제안하고자 하는 튜토리얼 주제가 현재 진행 중인 것이라면, 해당 주제의 마무리 작업 또는 p5.js 웹사이트상의
    공개 작업에 참여할 수 있고 관련해서는 아래의 이메일로 연락주시면 감사하겠습니다. 
  writing-a-tutorial-how-start-4: >-
    제안하려는 튜토리얼이 스프레드시트 리스트에 포함되지 않는다면, 튜토리얼에 대한 간략한 설명을 education@p5js.org로
    보내주세요.
  writing-a-tutorial-how-prepare-title: 'p5.js 튜토리얼 온라인 공개 준비하기:'
  writing-a-tutorial-how-prepare-1: '튜토리얼을 p5.js 웹사이트상 공개할 준비가 되었다면, 다음의 단계를 따라주세요.'
  writing-a-tutorial-how-prepare-2: '튜토리얼 콘텐츠를 이 '
  writing-a-tutorial-how-prepare-3: 기본 구조
  writing-a-tutorial-how-prepare-4: '에 따라 tutorial-name.hbs 파일로 변환해주세요. 콘텐츠에는 아래와 같은 헤더(header)가 반드시 포함되어야 합니다:'
  writing-a-tutorial-how-prepare-5: '튜토리얼을 포함한 폴더는 p5js 웹사이트 상 ''tutorials'' 폴더에 배치됩니다. index.hbs 파일은 '
  writing-a-tutorial-how-prepare-6: p5.js 튜토리얼 랜딩 페이지
  writing-a-tutorial-how-prepare-7: '에 해당하며, test-tutorial.hbs 파일은 테스트 튜토리얼입니다.'
  writing-a-tutorial-how-prepare-8: 모든 콘텐츠는 페이지상
  writing-a-tutorial-how-prepare-9: >-
    태그에 포함되어야하며, &lt;h1&gt; 와 &lt;h2&gt; 태그, 그리고 &lt;p&gt; 문단 태그로서 문서 형식이 정의되어야
    합니다. 형식 예시는 다음의 페이지에서 확인해보세요:  
  writing-a-tutorial-how-prepare-10: 테스트 튜토리얼
  writing-a-tutorial-how-prepare-11: >-
    튜토리얼이 이미지 파일을 포함할 경우, p5 웹사이트의 에셋(assets) 폴더에 배치됩니다. 파일 경로는 아래와 같이
    src/assets/learn/test-tutorial/images에 해당합니다.
  writing-a-tutorial-how-prepare-12: '페이지의 HTML에 형식을 맞추기 위해 다음의 태그를 사용하세요:'
  writing-a-tutorial-embedding-title: 웹페이지에 p5.js 스케치 올리기(embedding)
  writing-a-tutorial-embedding-1: >-
    p5.js를 사용한다는 것은 튜토리얼 설명을 위해 예제에 각종 애니메이션, 인터랙션, 그리고 수정 기능을 포함할 수 있음을 뜻합니다. 이
    경우, 튜토리얼 예제는 p5.js 스케치의 형태로 준비되어야하며, 튜토리얼 페이지상 다음의 두가지 방식으로 임베드될 수 있습니다.
  writing-a-tutorial-embedding-2: 만약 튜토리얼 예제가 p5.js 웹페이지의
  writing-a-tutorial-embedding-3: 레퍼런스
  writing-a-tutorial-embedding-4: '와 같이 코드를 수정할 수 있는 형태라면, p5js 위젯을 사용하여 HTML 페이지에 임베드할 수 있습니다.'
  writing-a-tutorial-embedding-5: 이 가이드
  writing-a-tutorial-embedding-6: 를 따라 위젯으로 p5js를 임베드하는 방법에 대해 알아보세요. 가이드는
  writing-a-tutorial-embedding-7: '가 작성하였습니다. 이러한 사례에 해당하는 튜토리얼이 작동하는 모습은 '
  writing-a-tutorial-embedding-8: 테스트 튜토리얼 페이지
  writing-a-tutorial-embedding-9: 에서 확인할 수 있습니다.
  writing-a-tutorial-embedding-10: >-
    튜토리얼 예제가 애니메이션 그리고/또는 인터랙션을 포함하나 코드 수정 기능을 포함하지 않는다면, 다음과 같이 iframe을 사용하여
    p5.js 스케치를 페이지상 임베드할 수 있습니다.
  writing-a-tutorial-iframe-title: iframe을 사용하여 p5 스케치 임베드하기
  writing-a-tutorial-iframe-1: >-
    iframe은 한 페이지상 다른 페이지를 보기 위해 만드는 창문틀과도 같습니다. 이 창문틀을 따라 페이지상의 다른 내용들로부터 구분되는
    셈이지요. 이 경우, p5.js 스케치를 포함한 index.html를 보여주는 창문틀의 역할을 합니다. 
  writing-a-tutorial-iframe-2: >-
    스크린샷에 보이듯, p5 웹사이트 /src/assets/learn 폴더에 스케치의 이름을 딴 별도의 폴더를 새로이 생성하여 여러분의
    튜토리얼용 p5 스케치를 올리세요. 이 경로를 통해 iframe에서 보여줄 모든 이미지와 p5 스케치가 저장됩니다.
  writing-a-tutorial-iframe-3: 여러분의 p5 예제를 포함한 폴더의 하위에는 sketch.js 파일과 embed.html 파일이 반드시 있어야 합니다.
  writing-a-tutorial-iframe-4: >-
    embed.html 파일이 웹사이트의 p5 라이브러리와도 일치하는지를 확인하세요. 만약, 여러분의 파일 구조가 위와 같다면 p5.js
    라이브러리 경로는 "../../../js/p5.min.js" 일것 입니다.
  writing-a-tutorial-iframe-5: >-
    그리고나면, 튜토리얼 콘텐츠를 담고 있는 .hbs 파일상 p5js index 파일을 iframe의 형태로 임베드할 수 있습니다.
    iframe 임베드를 위한 코드는 다음과 같습니다: 
  writing-a-tutorial-iframe-6: 'iframe 서식 바꾸기:  '
  writing-a-tutorial-iframe-7: 'iframe을 이용한 무제 스케치 작동 확인하기: '
  writing-a-tutorial-iframe-8: '위의 스케치가 p5 site에 임베드된 모습:  '
  writing-a-tutorial-iframe-9: >-
    한가지 주의해야할 점은, iframe의 사이즈는 반드시 직접 조정해야된다는 것입니다. 특히, 튜토리얼 콘텐츠의 크기가 규격화된 경우
    그러합니다.
  writing-a-tutorial-iframe-10: >-
    또한, p5.js 라이브러리 파일 연결 링크는 튜토리얼 콘텐츠가 포함되어있는 .eps 페이지가 아닌, 스케치를 렌더링하는 별도의 html
    페이지에 위치합니다. (이 경우, 해당 html 페이지의 명칭은 embed.html입니다.)
  writing-a-tutorial-iframe-11: 'p5.js 스케치를 임베드하는 방법에 대해 더 알고 싶다면 다음의 링크를 확인하세요: '
  writing-a-tutorial-embed-iframe-12: 링크
  writing-a-tutorial-finishing-title: 마무리하기
  writing-a-tutorial-finishing-1: >-
    앞서 언급된 메일을 통해 튜토리얼 콘텐츠 확인을 마쳤다면, p5.js-website repository를 Fork 하세요. 그리고 상기된
    방법에 따라 콘텐츠를 준비하고 풀 리퀘스트(pull request)를 하여, 여러분의 기여 내용이 웹사이트에 공개될 수 있도록 하세요!
  writing-a-tutorial-finishing-2: 감사합니다!
  color-description1: >-
    이 튜토리얼은 다니엘 쉬프만(Daniel Shiffman) 저, 모건 카우프만(Morgan Kaufmann) 출판 도서 Learning
    Processing에서 발췌하였습니다 © 2008 Elsevier Inc. 또한, 발췌본은 켈리 장(Kelly Chang)에 의해 p5로
    옮겨졌습니다. 오류를 발견하거나 의견을 남기고 싶다면 
  color-description2: 언제든 알려주세요.
  color-p1x1: >-
    디지털 세상에서 색상에 대해 이야기할 땐, 아주 정밀한 표현이 필요합니다. 아쉽게도, "푸른빛의 초록색 원을 만들 수 있어?" 와 같은
    표현은 통하지 않습니다. 이 곳에서의 색상은 언제나 숫자와 범위값에 의해 정의됩니다. 간단한 예시로 시작해볼까요. 검정색, 하얀색, 또는
    회색 음영. 0은 검정색을, 255은 하얀색을, 그리고 그 사이에 존재하는 50, 87, 162, 209와 같은 다른 숫자들은 흑과 백
    사이의 회색 음영을 뜻합니다.
  color-p2x1: 도형을 그리기에 앞서 선그리기
  color-p2x2: ' 와 면채우기'
  color-p2x3: ' 함수를 사용하면 색상을 지정할 수 있습니다. 또, 배경'
  color-p2x4: ' 함수를 통해 윈도우창의 배경색을 지정할 수 있습니다. 한 번 예시를 볼까요.'
  color-code1: |-
    background(255);    // 배경색을 하얀색으로 정하기 
     stroke(0);          // 윤곽선(stroke)색을 검정색으로 정하기 
     fill(150);          // 면(fill)색을 회색으로 정하기 
     rect(50,50,75,100); // 사각형 그리기
  color-p3x1: '선그리기(Stroke)나 면채우기(fill)는 다음의 함수를 통해 제거할 수 있습니다: '
  color-p3x2: ' 과'
  color-p3x3: >-
    . 본능적으로 우리는 "stroke(0)" 를 통해 윤곽선을 제거할 수 있을 거라 생각하지만, 코딩 언어의 세계에서 0은 "아무것도
    없음"이 아니라, 검정색을 지칭합니다. 
  color-p3x4: ' 과 '
  color-p3x5: '를 사용하면 선도 색상도, 아무것도 보이지 않을 거에요!'
  color-p4x1: >-
    또한, 두개의 도형을 그릴 때 p5.js는 가장 마지막 줄에 지정된 stroke와 fill을 반영합니다. 코드를 위에서부터 아래로 읽고
    수행하기 때문이지요.
  color-rgb-title: RGB 색상
  color-rgb-p1x1: >-
    어린 시절 손가락으로 물감을 섞어본 기억이 있나요? 세가지의 "원색"을 사용하면, 그 어떠한 색상도 만들어 낼 수 있었지요. 여러가지
    물감을 섞다보면 진흙빛의 갈색이 탄생하기도 합니다. 물감을 더할 수록 색이 어두워지고요. 디지털 색상들 역시 삼원색을 섞는 원리를
    바탕으로 만들어졌지만, 물감과는 또다르게 작동합니다. 먼저, 디지털 색상에서의 삼원색은 빨강(red), 초록(green),
    파랑(blue) (일명, "RGB" 색상)을 뜻합니다. 또, 화면상 보이는 색상은 기본적으로 물감이 아닌 빛의 조합입니다. 따라서,
    색상이 조합되는 방식이 다른 것이지요.
  color-rgb-li1: 빨강 + 초록 = 노랑
  color-rgb-li2: 빨강 + 파랑 = 보라
  color-rgb-li3: 초록 + 파랑 = 청록
  color-rgb-li4: 빨강 + 초록 + 파랑 = 하양
  color-rgb-li5: 무채색 = 검정
  color-rgb-p2x1: >-
    이는 디지털 색상을 밝은 빛으로서 가정하는 데에서 비롯된 것인데, 색상 범위를 조정하여 원하는 색을 만들 수 있습니다. 예를 들어,
    빨강색에 초록색, 파랑색을 더하면 회색이 됩니다. 그리고 약간의 빨강색에 약간의 파랑색을 더하면 어두운 보라색이 됩니다. RGB 색상을
    더 많이 프로그래밍하고 실험할수록, 손가락으로 물감을 휘젔던 색상 본능만큼 디지털 색상에 따른 본능 역시 커질 것입니다. 한편, 우리는
    "빨강색 적당하게 쓰고 여기에 약간의 파란색을 섞어줘"라는 식으로도 말할 수 없습니다. 반드시 정확한 양을 지정해야합니다. 회색 음영과
    마찬가지로, 각각의 색상 요소는 0(색상 0가지)부터 255(최대한 많은 색상 수)에 이르는 범위 내에서 표현됩니다. 그리고 R, G,
    B의 순서에 따라 정렬됩니다. 이번엔 좀 더 일반적인 색상에 대해 알아볼까요
  color-transparency-title: 색상 투명도
  color-transparency-p1x1: >-
    R, G, B값에 더해, 각 색상을 구성하는 네 번째 요소가 있습니다. 일명 "알파(alpha)값"인데요, 알파는 색상의 투명도를
    말하고, 한 도형 위에 다른 도형을 얹을시 겹치는 지점을 보이게 할 때 유용하겠지요? 한 이미지에 대한 여러 알파값들을 통칭 "알파
    채널(alpha channel)"이라 부르기도 합니다.
  color-transparency-p2x1: >-
    픽셀은 그 자체로는 투명하지 않아요. 다만, 여러가지 색상을 섞어 마치 투명해보이는 듯한 착시현상을 만드는 것이지요. 이처럼 p5.js는
    한 색상값과 다른 색상값들 간의 비율차를 이용하여 마치 이들이 섞인것처럼 보이게 만든답니다. (만약 여러분이 "장밋빛" 안경을
    프로그래밍하고자 했다면 바로 이 지점부터 이해하고 넘어가면 되겠지요?)
  color-transparency-p3x1: >-
    알파값은 0부터 255 사이 조정가능합니다. 0은 완전히 투명한 상태(즉, 0% 투명도)이고 255는 완전히 불투명한 상태(즉, 100%
    투명도)입니다.
  color-custom-ranges-title: 색상 조정 범위
  color-custom-ranges-p1x1: ' p5.js에서 다룰 수 있는 색채는 0부터 255까지에 이르는 RGB뿐만이 아닙니다. 사실 우리가 원하는대로 그 범위를 조정할 수도 있지요! 예를 들어, 색상 범위를 마치 퍼센티지처럼 0부터 100으로 설정할 수도 있습니다. 색상 범위 커스터마이징은 다음의 간단한 함수를 통해 가능합니다:'
  color-custom-ranges-p2x1: '위의 함수는: "난 RGB색상에 대해 조정하고싶고, 그 색상 범위는 0부터 100으로 설정하고 싶어"라고 말하는 것입니다.'
  color-custom-ranges-p3x1: '조금 더 복잡하긴 하지만, 아래와 같은 방법을 통해 R, G, B 각 색상별로도 조정 범위를 설정할 수 있습니다:'
  color-custom-ranges-p4x1: >-
    위의 내용은 "빨강(R)은 0부터 100까지, 초록(G)은 0부터 500가지, 파랑(B)은 0부터 10까지, 그리고 투명도는 0부터
    255까지 설정하고 싶어"라고 말하는 것이지요.
  color-custom-ranges-p5x1: >-
    여러분은 사실상 RGB값 설정만으로도 프로그래밍에 필요한 모든 색상을 누릴 수 있을텐데요, 마지막으로 RGB 외에 조정할 수 있는 색상
    요소인 HSB(색조 Hue, 채도 Saturation, 밝기 Brightness)를 소개합니다
  color-custom-ranges-li1x1: 색조 Hue
  color-custom-ranges-li1x2: '—색상의 종류, 기본 범위 0부터 360까지'
  color-custom-ranges-li2x1: 채도 Saturation
  color-custom-ranges-li2x2: '—색상의 생생함 정도, 기본 범위 0부터 100까지'
  color-custom-ranges-li3x1: 밝기 Brightness
  color-custom-ranges-li3x2: '—(당연히) 색상의 밝은 정도, 기본 범위 0부터 100까지'
  color-custom-ranges-p6x1: '이 '
  color-custom-ranges-p6x2: ' 함수를 이용하여 HSB값 범위 또한 설정할 수 있습니다. 어떤 사람들은 색조(Hue)를 0부터 360까지 설정하거나(위의 사진처럼 360도의 둥근 색상띠가 생각나지요), 채도와 밝기는 0부터 100까지 설정(0-100% 퍼센티지와 유비되지요)하는 것을 선호하기도 합니다.'
  coordinate-system-description1: '이 튜토리얼은 다니엘 쉬프만(Daniel Shiffman)저, 모건 카우프만(Morgan Kaufmann) 출판 도서 '
  coordinate-system-description2: Learning Processing
  coordinate-system-description3: ' 에서 발췌하였습니다.by © 2008 Elsevier Inc. All rights reserved. 또한 발췌본은 알렉스 이쑤안 쑤(Alex Yixuan Xu)에 의해 p5로 옮겨졌습니다. 오류를 발견하거나 의견을 남기고 싶다면 '
  coordinate-system-description4: 언제든 알려주세요
  coordinate-system-description5: .
  coordinate-system-description-title: 좌표와 도형
  coordinate-system-description-p1x1: >-
    p5로 프로그래밍을 시작하기 전에, 먼저 중학교 2학년 시절의 우리를 떠올리며 연습장에 선 하나를 그려볼까요? 두 개의 점을 그린 뒤 그
    사이를 연결하면 하나의 선분이 탄생합니다. 연습장 위 이 두개의 점과 둘간을 연결하는 선. 바로 여기가 우리의 시작점입니다.
  coordinate-system-description-p2x1: >-
    여기 점A(1,0)과 점B(4,5) 사이의 선 하나가 보입니다. 만약 똑같은 선을 친구가 그릴 수 있게하려면 "1콤마 0에서 시작하는
    점에서부터 4콤마 5를 향해 선을 그려죠"라고 말하겠지요. 이제 그 친구가 컴퓨터라고 가정해볼까요? 우리의 컴퓨터 친구도 똑같은 선을
    그리게 하려면 위와 동일한 문장을 입력하면 됩니다. 좀 더 구체적인 형식을 갖춰 컴퓨터 친구에게 말을 건네볼까요?
  coordinate-system-description-p3x1: >-
    코딩 문법에 대해 익숙하지 않더라도 위 문장의 뜻을 어느정도 감잡을 수 있습니다. 우리는 일명 "함수"라 불리는 명령문을 통해 컴퓨터와
    대화하는 셈입니다. 여기서 "line"은 선을 그리는 함수입니다. 여기에 더해, 우리는 이 함수 내에서 구체적인 인수(argument)를
    지시할 수 있습니다. 예를 들어, 점 A (1,0)부터 점 B (4,5)까지라는 인수를 함수 괄호 안에 포함 시킨 것이지요. 코드 한
    줄을 하나의 문장으로 본다면, 함수는 동사(verb)이고 인수는 목적어(object)인 셈입니다. 단, 코드는 문장과 달리 마침표가
    아니라 "세미콜론(;)"으로 끝나는 점 주의하세요!
  coordinate-system-description-p4x1: >-
    컴퓨터 화면은 그저 좀 더 멋진 모양새를 갖춘 연습장과도 같습니다. 화면상의 각 픽셀은 x값(가로)과 y값(세로)이라는 두개의 숫자가
    합쳐진, 하나의 좌표값과도 같습니다. 그리고 이 좌표로 화면이라는 공간 내의 위치를 정하지요. 이제 우리는 이 픽셀 좌표값에 모양과
    색상을 더하면 됩니다.
  coordinate-system-description-p5x1: >-
    한가지 주의사항! 우리가 중학교 2학년 때 배운 "직교 좌표계"는 (0,0)을 중심에 두고, y축을 그 중심에서 위로, 그리고 x축을
    중심으로부터 오른쪽을 향해 뻗어나갑니다(양수일 경우엔 이러하고, 음수일 경우 각각 아래와 왼쪽을 향하지요.) 하지만, 컴퓨터 화면 속
    픽셀 좌표계에서의 y축은 그 반대로 적용됩니다. 픽셀 좌표계의 (0,0)은 화면상 좌측 최상단에 위치하고, y값이 증가할 수록 아래를
    향해 내려옵니다. x값은 그대로 오른쪽을 향해 증가합니다.
  coordinate-system-simple-shapes-title: 간단한 도형
  coordinate-system-simple-shapes-p1x1: >-
    여러분이 앞으로 마주할 p5 기반 프로그래밍 예제들은 본질적으로 시각적이고 조형적입니다. 다음 예제들의 핵심은 모양을 그리고 픽셀을
    설정하는 데에 있습니다. 4개의 기본 도형을 살펴보며 시작해볼까요!
  coordinate-system-simple-shapes-p2x1: >-
    위의 모양들을 그리기 위해 필요한 위치와 크기(그 다음, 색상까지도) 정보가 무엇일지 고민해볼까요. 아래의 도식들을 보면, 우리는 먼저
    너비 100 픽셀 그리고 높이 100 픽셀에 해당하는 창을 만듭니다.
  coordinate-system-simple-shapes-p3x1: '점그리기를 뜻하는 '
  coordinate-system-simple-shapes-p3x2: ' 함수는 우리가 그릴 수 있는 가장 쉬운 모양이자, 좋은 시작점이 됩니다. 점을 그리기 위해 우리는 x와 y 좌표값만 정하면 되지요.'
  coordinate-system-simple-shapes-p4x1: '선그리기를 뜻하는 '
  coordinate-system-simple-shapes-p4x2: ' 함수 역시 아주 어렵진 않습니다. 선을 그리기 위해 우리는 (x1,y1)과 (x2,y2)라는 두개의 좌표값만 필요합니다:'
  coordinate-system-simple-shapes-p5x1: '사각형 그리기 함수인 '
  coordinate-system-simple-shapes-p5x2: >-
    의 경우 약간 복잡합니다. p5에서 사각형은 그것이 그려지기 시작하는 상단 좌측의 좌표값과 더불어 너비(width)와
    높이(height)를 정하는 숫자들이 필요합니다.
  coordinate-system-simple-shapes-p6x1: >-
    사각형을 그리는 또 다른 방법으로, 중앙값, 너비(width), 높이값(height) 설정하기가 있습니다. 이 경우, 먼저 상단의
    setup() 함수에 센터 
  coordinate-system-simple-shapes-p6x2: ' 모드를 불러오고, 그 뒤에 사각형의 중앙값, 너비, 높이값을 지정해야 합니다. p5는 대문자와 소문자 구분에 민감하니 주의하세요!'
  coordinate-system-simple-shapes-p7x1: >-
    마지막으로, 점 두 개 만으로 사각형을 그리는 방법도 있습니다. 바로, 상단 좌측 코너와 하단 우측 코너의 좌표를 지정하는 것이지요.
    여기서 우리가 setup() 함수에 포함시킬 모드는 코너 
  coordinate-system-simple-shapes-p7x2: ' 입니다. 그 결과물은 위의 예제와 동일합니다.'
  coordinate-system-simple-shapes-p8x1: '사각형 그리기에 익숙해졌다면, 타원그리기 '
  coordinate-system-simple-shapes-p8x2: ' 는 식은죽 먹기지요. 타원을 그리는 원리는 '
  coordinate-system-simple-shapes-p8x3: ' 와 거의 동일하나, 다만 동일한 좌표값을 가진 사각형의 경계선 안쪽에 그려진다는 점에서 차이가 있습니다. '
  coordinate-system-simple-shapes-p8x4: ' 함수의 기본 모드 설정은 센터 '
  coordinate-system-simple-shapes-p8x5: '에 해당합니다. 코너 '
  coordinate-system-simple-shapes-p8x6: ' 모드로 그리기 위해선 별도 설정이 필요합니다.'
  coordinate-system-simple-shapes-p9x1: >-
    자, 이제 좀 더 완성도있는 그림을 그려볼까요! 아래의 코드는 200x200 픽셀 크기의 캔버스 위에 여러개의 도형을 그립니다.
    createCanvas() 함수를 사용하여 캔버스의 너비(width)와 높이(height)를 설정할 수 있습니다.
  curves-description1: >-
    This tutorial is written by J David Eisenberg and ported by Sally Chen. If
    you see any errors or have comments, 
  curves-description2: ' please let us know.'
  curves-description3: 'This work is licensed under a '
  curves-description4: ' Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.'
  curves-p1x1: >-
    This short tutorial introduces you to the three types of curves in p5.js:
    arcs, spline curves, and Bézier curves.
  curves-arcs-title: ' Arcs '
  curves-arcs-p1x1: >-
    Arcs are the simplest curves to draw, it is defined an arc as a section of
    an ellipse. You call the function with these parameters:
  curves-arcs-p2x1: 'arc (x, y, w, h, start, stop, [mode])'
  curves-arcs-p3x1: >-
    The first four parameters (x,y,w,h) define the boundary box for your arc and
    the next two (start, stop), are the start and stop angles for the arc. These
    angles are given in radians and are measured clockwise with zero degrees
    pointing east and PI radians equals 180°.
  curves-spline-curves-title: Spline Curves
  curves-spline-curves-p1x1: >-
    Arcs are fine, but they’re plain. The next function, curve(), lets you draw
    curves that aren’t necessarily part of an arc. This function draws what is
    technically called a Rom-Catmull Spline. To draw the curve, you must specify
    the (x, y) coordinates of the points where the curve starts and ends. You
    must also specify two control points which determine the direction and
    amount of curvature. The first two and last two parameters are the control
    points of the curve. A call to curve() uses these parameters:
  curves-spline-curves-p2x1: 'curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);'
  curves-spline-curves-p3x1: How do the control points affect the way the curve looks?
  curves-spline-curves-p4x1: >-
    The tangent to the curve at the start point is parallel to the line between
    control point one and the end of the curve. The tangent to the curve at the
    end point is parallel to the line between the start point and control point
    2.
  curves-spline-curves-p5x1: >-
    The following diagram shows a curve and the points can be dragged to show
    how the control point affects the curve:
  curves-continuous-spline-curves-title: Continuous Spline Curves
  curves-continuous-spline-curves-p1x1: >-
    In isolation, a single curve() is not particularly appealing. To draw a
    continuous curve through several points, you are better off using the
    curveVertex() function. You can only use this function when you are creating
    a shape with the beginShape() and endShape() functions.In common usage,
    people use the first point of the curve as the first control point and the
    last point of the curve as the last control point.
  curves-bezier-curves-title: Bézier Curves
  curves-bezier-curves-p1x1: >-
    Though better than arcs, spline curves don’t seem to have those graceful,
    swooping curves that say “art.” For those, you need to draw Bézier curves
    with the bezier() function. As with spline curves, the bezier() function has
    eight parameters, but the order is different. The first two and last two
    parameters are the start and end points while middle  four points are the
    control points.
  curves-bezier-curves-p2x1: ' bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2); '
  curves-bezier-curves-p3x1: >-
    While it is difficult to visualize how the control points affect a curve(),
    it is slightly easier to see how the control points affect Bézier curves.
    Imagine two poles and several rubber bands. The poles connect the control
    points to the endpoints of the curve. A rubber band connects the tops of the
    poles. Two more rubber bands connect the midpoints of the poles to the
    midpoint of the first rubber band. One more rubber band connects their
    midpoints. The center of that last rubber band is tied to the curve. This
    diagram helps to explain, the points can be moved to change the curve.
  curves-continuous-bezier-curves-title: ' Continuous Bézier Curves'
  curves-continuous-bezier-curves-p1x1: >-
    Just as curveVertex() allows you to make continuous spline curves,
    bezierVertex() lets you make continuous Bézier curves. Again, you must be
    within a beginShape() / endShape() sequence. You must use vertex(startX,
    startY) to specify the starting anchor point of the curve. Subsequent points
    are specified with a call to:
  curves-continuous-bezier-curves-p2x1: 'bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);'
  curves-continuous-bezier-curves-p3x1: >-
    Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to
    make two curves A and B smoothly continuous, the last control point of A,
    the last point of A, and the first control point of B have to be on a
    straight line.
  curves-summary-title: Summary
  curves-summary-li1: >-
    Use arc() when you need a segment of a circle or an ellipse. You can’t make
    continuous arcs or use them as part of a shape.
  curves-summary-li2: >-
    Use curve() when you need a small curve between two points. Use
    curveVertex() to make a continuous series of curves as part of a shape.
  curves-summary-li3: >-
    Use bezier() when you need long, smooth curves. Use bezierVertex() to make a
    continuous series of Bézier curves as part of a shape.
  teach-desc: 'Teach a p5 workshop or class, or create teaching materials!'
libraries:
  Libraries: 라이브러리
  core-libraries: 주요 라이브러리
  community-libraries: 커뮤니티 라이브러리
  libraries-created-by: '제작: '
  p5.sound: 'p5.sound는 p5에 웹 오디오 기능(오디오 입력, 재생, 분석 합성 등)을 추가합니다. '
  asciiart: >-
    p5.asciiart는 p5.js를 아스키(ASCII) 아트로 쉽고 간단하게 변환합니다. 한마디로, p5.js를 위한 아스키 아트
    컨버터입니다. 
  p5.ble: 'p5.ble은 BLE 기기와 p5 스케치를 연결합니다. '
  p5.bots: >-
    p5.bots를 통해 브라우저, 아두이노, 마이크로프로세서 간의 인터랙션을 만들 수 있습니다. 센서 데이터로 스케치를 만들거나,
    스케치에서 LED나 모터를 작동해보세요! 
  p5.bezier: >-
    p5.beizer는 조절점(control point) 개수 제한 없이 정교한 베지에 곡선(Bézier Curve)을 그릴 수 있게 해주는
    라이브러리입니다.
  p5.clickable: '사용이 편리한, 이벤트 기반 p5.js 버튼 라이브러리입니다.'
  p5.cmyk.js: CMYK 색상 모드.
  p5.collide2D: 'p5.collide2D는 p5.js로 만든 2D 도형들 간의 충돌을 감지합니다. '
  CO2Budget.js: '이 라이브러리는 p5 * js와 관련된 코더, 디자이너 및 아티스트의 크리에이티브 커뮤니티에 CO2 카운트 다운 아이디어를 제공합니다.'
  p5.createloop: '노이즈와 GIF 기반의 반복 애니메이션을 단 한 줄의 코드로 만들어보세요. '
  p5.dimensions: 'p5.dimensions은 p5.js의 벡터 기능을 확장하여 n차원에서 작동하도록 합니다. '
  p5.EasyCam: '패닝, 줌, 회전이 가능한 간단한 3D 카메라 컨트롤. Thomas Diewald가 핵심적으로 기여하였습니다. '
  p5.experience: '확장형 p5.js 라이브러리로, 캔버스 기반 웹 어플리케이션 제작을 위한 이벤트리스닝 기능을 추가할 수 있습니다. '
  p5.func: 'p5.func은 시간, 빈도, 그리고 공간 기능 생성을 위한 새로운 객체 및 기능을 제공합니다. '
  p5.geolocation: 'p5.geolocation은 사용자 위치를 획득, 관찰, 계산, 지오펜싱(geo-fencing)하기 위한 기술을 제공합니다. '
  p5.glitch: p5.glitch는 글리치 이미지와 이진(binary) 파일을 위한 p5.js 확장자입니다.
  p5.gibber: 'p5.gibber는 음악 시퀀싱 및 오디오 합성 기능을 빠른 속도로 제공합니다. '
  grafica.js: 'grafica.js는 p5.js 스케치상 변형이 쉬운 2D 플롯을 추가합니다. '
  p5.gui: 'p5.gui는 p5.js 스케치를 위한 그래픽 유저 인터페이스를 생성합니다. '
  p5.j5: >-
    The full Johnny-Five.io Nodebots/robotics library for Arduino and other 
    microcontrollers made to work directly in browser with WebSerial or WebUSB.
  p5.localmessage: 'p5.localmessage는 멀티윈도우 스케칭을 위한 스케치 간 로컬 메시지 전송 기능 및 인터페이스를 제공합니다. '
  marching: '래스터에서 벡터로의 변환, 등면.'
  mappa: 'Mappa는 정적 맵, 타일 맵, 지오 데이터 활용을 위한 툴을 제공합니다. 지리 정보 기반의 시각적 재현물을 제작할 때 용이합니다. '
  ml5.js: 'ml5.js는 Tensorflow.js를 기반으로하며, 머신러닝 알고리즘 및 모델에 대한 브라우저상의 접근성을 높입니다. '
  numero: 친숙하고 직관적인 수학 라이브러리입니다.
  pdl.library: 상호작용하는 도형을 통해 물리를 가르치고 배울 수 있게하는 함수와 클래스들입니다.
  p5play: 'p5play는 게임과 같은 어플리케이션 제작을 위한 스프라이트(sprite), 애니메이션, 인풋, 충돌 기능을 제공합니다. '
  p5.particle: '파티클은 사용자가 직접 제작한 구조나 기능, 또는 JSON 인풋 데이터를 사용하여 시각적 효과를 만드는 데에 쓰입니다. '
  p5.party: 'p5.party는 네트워크 기반의 멀티유저 게임, 앱, 그리고 스케치를 쉽게 만들 수 있게 하는 라이브러리입니다.'
  p5.Polar: p5.Polar는 수학적 추상화를 통해 아름답고 만화경 같은 방사형의 패턴을 쉽게 만들 수 있게 해 줍니다.
  react-p5: 이 라이브러리는 여러분의 p5 스케치와 리액트(React) 앱을 연동합니다.
  p5.recorder: 스케치 녹화 및 오디오 녹음 기능을 제공합니다.
  p5.Riso: 'p5.Riso는 석판화와 같은 파일을 생성하는 라이브러리입니다. 스케치를 다양한 색상의 판화처럼 만들어줍니다. '
  rita.js: 'RiTa.js는 제너레이티브 문학을 위한 자연어 처리 객체를 제공합니다. '
  Rotating knobs: 스킨과 반환값을 설정할 수 있는 나만의 노브(knob)를 만들어보세요
  p5.scenemanager: >-
    p5.SceneManager는 스케치를 여러 단계의 씬들로 구성할 수 있도록 합니다. 각각의 씬은 메인 스케치에 포함된 일부 스케치와도
    같습니다. 
  p5.screenPosition: 프로세싱의 screenX 및 screenY 기능을 p5js에 적용합니다.
  p5.scribble: '2D 기본 조형을 손그림으로 표현합니다. 제작: Janneck Wullschleger, 프로세싱 라이브러리 포트 기반 '
  p5.serialport: >-
    p5.serial enables serial communication between devices that support serial
    (RS-232) and p5 sketches running in the browser.
  Shape5: Shape5는 코딩을 처음 배우는 초등학생을 위한 2D 기본 조형 라이브러리입니다.
  p5.shape.js: p5.js 프레임워크에 더 많은 기본 도형을 추가하고자 제작된 라이브러리입니다.
  P5.slides: p5.slides is a presentation platform written in p5.js.
  p5snap: >-
    p5snap is a command-line interface that creates and saves snapshots of a  p5
    sketchp5snap is a command-line interface that creates and saves snapshots 
    of a p5 sketch on an interval.
  p5.speech: >-
    p5.speech는 웹 스피치 및 스피치 인식 API에 대한 접근 권한을 제공하여, 음성을 인식하고 출력할 수 있는 스케치를 쉽게 만들
    수 있게 합니다. 
  p5.start2d.js: '픽셀, 밀리미터, 센티미터 또는 인치 단위의 정적인 2D 아트를 만들기 위한 p5 확장 라이브러리입니다. '
  p5.tiledmap: 'p5.tiledmap은 스케치에 지도를 넣기 위한 드로잉 및 도움 기능을 제공합니다. '
  TiledPlay: >-
    A small library to bridge the functionality of p5.js, p5.play.js and 
    p5.tiled.js to easily create 2D platformer games using javascript.
  p5.touchgui: 'p5.js를 위한 멀티터치 및 마우스 그래픽 유저 인터페이스(GUI) 라이브러리 '
  tramontana: >-
    Tramontana는 인터랙티브 환경 및 공간을 생성하거나, 공간 속 스케일 기능을 프로토타이핑하기 위한 여러가지 기기(iOS,
    Android, tramontana Board, ...)를 쉽게 쓸 수 있도록 하는 플랫폼입니다. 
  TurtleGFX: >-
    TurtleGFX allows to code with Turtle Graphics in JavaScript.  Great for
    education and creative coding.
  p5.tween: >-
    With p5.tween you can create easily animations as tween for your objects
    and  shapes.
  vida: 'Vida는 카메라(또는 비디오) 기반의 모션 감지 및 얼룩(blob) 트래킹 기능을 더하는 p5js 라이브러리입니다. '
  p5.voronoi: 'p5.voronoi는 p5.js 스케치상 보로노이 다이어그램을 그리고 활용할 수 있는 툴을 제공합니다. '
  p5.wasm: >-
    p5.wasm is an addon library written in Rust and compiled to WebAssembly
    that  implements common functions found in p5.js.
  p5.xr: p5로 VR 및 AR 스케치를 작성하기위한 라이브러리.
  p5.3D: 'WebGL로 3D 텍스트 및 이미지를 쓸 수 있습니다. '
  WEBMIDI.js: Easily send and receive MIDI messages from p5.
  p5.buttons: A library that aims to de-complicate scripting buttons.
  p5.button: >-
    Small one function library to design and render simple or styled buttons 
    directly in p5.js canvas.
  p5.math.js: >-
    The mathematical operations of JavaScript have been converted into simple 
    human language so that they can understand really quickly.
  p5LiveMedia: 'Real time audio, video, canvas, and data sharing.'
  P5.Create: 'p5.create는 효율적인 게임 제작을 위해 설계된 저장, 애니메이션, 충돌 및 태그 기능을 제공하는 라이브러리입니다.'
  p5.quadrille.js: p5.js quadrille library.
  p5.animS: p5.animS animates p5.js shapes by rendering their drawing processes.
  I_AM_UI: UserInterface 라이브러리.
  simple.js: Helper functions and defaults for young and new coders.
  p5.timer: >-
    This library performs asynchronous timing functions like countdowns, 
    one-shot timers, % time elapsed and encapsulates the millis() function and 
    other related calculations that often clog up your code. 
  c2.js: >-
    c2.js is a JavaScript library for creative coding based on computational 
    geometry, physics simulation, evolutionary algorithm and other modules.
  Concave Hull: Calculate a Concave Hull from a set of points in 2D space.
  p5.joystick: 물리적 조이스틱으로 연결 및 플레이.
  p5.webserial: >-
    A library for interacting with Serial devices from within the browser, 
    based on Web Serial API (available on Chrome and Edge).
  p5.pattern: A pattern drawing library for p5.js.
  p5.jacdac: Plug-and-play micro-controllers for p5js
  p5.PatGrad: p5.PatGrad let's you add patterns and gradients to your sketches.
  p5.projection: Easy projection mapping of sketches onto real world surfaces
  p5.filterRenderer: A library for p5.js WebGL mode to draw with depth blur and shadows.
  p5.capture: >-
    p5.capture provides a simple GUI to easily record p5.js animations and
    output  video files in various formats (webm, gif, mp4, png, jpg, and webp).
  p5.input: Adds more key support for p5.js.
  p5.web-serial: >-
    A p5.js library for using the Web Serial API to access devices like
    Arduino,  no setup required.
  p5.wasm.core: A web assembly core for p5.js.
  p5.videorecorder: Record your canvas as a video file with audio.
  p5.mapper: >-
    p5.mapper is a projection mapping library for p5.js. This library makes it 
    easy to code and keystone interactive, algorithmic sketches.
  p5.teach: >-
    A beginner friendly math animation library for p5.js. Created with
    mentorship   from Nick McIntyre and Jithin KS.
  p5.fab: p5.fab controls digital fabrication machines from p5.js.
  p5.utils: >-
    A set of utilities and additional features for my creative coding class
    aiming  to help students.
  using-a-library-title: 라이브러리 이용하기
  using-a-library1: >-
    라이브러리란 p5.js의 핵심 기능을 확장하거나 추가하는 자바스크립트 코드를 말합니다. 라이브러리에는 크게 두 종류가 있습니다. 주요
    라이브러리인 
  using-a-library3: '의 경우 p5.js 자체 배포물인 반면, 커뮤니티 라이브러리는 커뮤니티 공헌자에 의해 개발, 소유, 유지됩니다.'
  using-a-library4: >-
    스케치에 라이브러리를 사용하려면 우선 스케치에 p5.js 링크를 걸고, 그 다음 HTML 파일에 라이브러리 링크를 걸면 됩니다. 링크가
    걸린 HTML 파일은 이렇게 보입니다:
  create-your-own-title: 나만의 라이브러리 만들기
  create-your-own1: 'p5.js는 여러분만의 라이브러리 제작을 환영합니다! 라이브러리 제작에 대해 더 알고 싶다면 '
  create-your-own2: 라이브러리 튜토리얼
  create-your-own3: '을 확인해보세요. 제작한 라이브러리를 이 페이지에 추가하고 싶다면 '
  create-your-own4: 이 문서를 제출하세요!
community:
  community-title: 커뮤니티
  community-statement-title: p5.js 커뮤니티 성명서
  community-statement1: p5.js는 기술을 재료삼아 예술과 디자인을 창작하는 커뮤니티입니다.
  community-statement2: >-
    우리는 다양한 성 정체성, 젠더 표현, 성적 지향, 인종, 민족, 언어, 사회, 규모, 능력, 계급, 종교, 문화, 하위 문화, 정치
    성향, 나이, 기술적 숙련도, 직업, 배경에 속한 사람들의 공동체이자 연대입니다. 모든 사람이 우리 커뮤니티에 시간과 에너지를 할애할 수
    있는 게 아니라는 걸 인지하고 있습니다. 그만큼 우리는 여러분의 참여를 환영하고 독려하며, 접근성을 향상하기 위해 늘 노력합니다. 우리
    모두는 언제나 배우는 자들입니다.
  community-statement3: >-
    우리가 좋아하는 해시태그는 #noCodeSnobs(우리는 효율성보다 커뮤니티를 우선시합니다), #newKidLove(우리는 모두 한 때
    입문자였으니깐요!), #unassumeCore(우리는 상대가 무엇을 알고 있는지에 대해 섣불리 가정하지 않습니다), and
    #BlackLivesMatter (말할 필요도 없이 중요한 사실이지요!) 입니다.
  in-practice-title: '실천:'
  in-practice1: >-
    우리는 '고고한' 개발자가 아닙니다. 상대가 이미 어떠한 것을 알고 있을거라 섣불리 가정하거나, 모든 사람이 반드시 알아야 할 지식이
    있다고 생각하지 않습니다. 
  in-practice2: '피드백이 필요한 경우, 언제든 적극적으로 응합니다.'
  in-practice3: >-
    우리는 입문자를 환영하며 타인의 학습을 우선순위에 둡니다. 또, 우리는 모든 업무를 수행할 때 초심자 시절의 열정을 잃지 않습니다. 우리
    커뮤니티에 있어 입문자는 숙련자만큼이나 중요한 가치를 더하는 존재입니다. 
  in-practice4: '우리는 언제나 모든 형태의 기여, 공헌, 참여를 적극적으로 인정하고 인증하고자 합니다.'
  in-practice5: 우리는 언제나 기꺼이 도움과 안내를 제공합니다.
  in-times-conflict-title: '갈등이 발생할 경우:'
  in-times-conflict1: '서로의 생각에 귀 기울입니다. '
  in-times-conflict2: '명확한 의사소통을 하되, 타인의 감정을 생각합니다.'
  in-times-conflict3: '우리가 잘못한 경우에는 그 잘못을 인정하고, 용서를 구하며, 행동에 대한 책임을 집니다. '
  in-times-conflict4: '더 나은 우리 자신과 커뮤니티를 향해 지속적으로 노력합니다. '
  in-times-conflict5: '서로 존중하며 개방된 자세를 유지합니다. '
  in-times-conflict6: '모든 사람의 의견을 존중하고 경청합니다. '
  in-times-conflict7: '사려깊고 친절한 태도로 소통합니다. '
  in-the-future-title: '미래에 우리는: '
  in-the-future1: 지금이 바로 미래입니다.
  notes-title: 유의사항
  notes1: 'Please also visit our '
  notes2: p5.js 행동 강령
  notes3: '을 참고하세요. p5.js 커뮤니티 성명서는 '
  notes4: 크리에이티브 커먼즈 라이선스(CC)
  notes5: 에 따라 라이선스가 부여됩니다. 크레딧과 함께 자유로이 공유하고 응용할 수 있습니다.
  contribute-title: 기여하기
  contribute1: '우리 커뮤니티는 다양한 방법으로 도움을 줄 수 있는 열정가 분들을 항시 찾고 있습니다. '
  develop-title: '개발: '
  develop1: GitHub
  develop2: '는 코드, 버그와 에러, 개발 이슈 등이 문서화되며, 관련 논의가 진행되는 곳입니다. p5.js 개발에 기여하려면'
  develop3: ' 개발 튜토리얼'
  develop4: '을 참고하거나, '
  develop5: 라이브러리를 제작해보세요.
  document-title: '문서화: '
  document1: '문서화 작업은 너무나도 소중하지요! 현재 도움이 필요한 부분으로는 '
  document2: 예제 이전하기
  document3: ','
  document4: ' 문서 추가하기'
  document5: ', 그리고 튜토리얼 제작이 있습니다.'
  teach-title: '가르치기: '
  teach1: ' 워크샵이나 수업을 통해 친구, 협업자에게 p5.js를 가르치는 것도 좋은 기여 방법입니다. 트위터에서 @p5xjs를 태그해주시면 여러분의 프로젝트를 공유할게요.'
  create-title: '창작하기: '
  create1: ' p5.js는 사용자들에게 영감을 줄 수 있는 프로젝트를 웹사이트 첫 페이지에 게재합니다. 디자이너, 예술가, 개발자, 프로그래머, 그 누구의 작업도 좋습니다! 여러분이 만든 창의적인 프로젝트를 다음의 메일 주소로 제출해보세요: '
  create2: hello@p5js.org
  create3: .
  donate-title: '함께하기: '
  donate1: ' p5.js는 예술가들이 만든 무료 오픈 소스입니다. '
  donate2: 프로세싱 재단
  donate3: ' 기부를 통해 p5.js를 후원해주세요!'
  contributors-conference-title: p5.js 공헌자 컨퍼런스
  contributors-conference1: >-
    대부분의 커뮤니티 활동은 온라인에서 진행되지만, 오프라인에서도 일어난답니다! 그동안 두 차례의 공헌자 컨퍼런스가 있었는데요, 미국
    피츠버그 소재 카네기 멜론 대학교(Carnegie Mellon University)의 
  contributors-conference2: '에서 진행된 것이 그 중 하나입니다. 예술가, 디자이너, 개발자, 교육자들이 모여 p5.js의 개선 방향에 대해 논의하였습니다.'
  participants-title: 참여자
  support-title: 지원
  support1: 공헌자 컨퍼러스는 카네기 멜론 대학교의
  support2: >-
    에서 열렸습니다. 이 곳은 예술, 과학, 기술, 그리고 문화의 교차점에서, 비정형적, 반-학제적 및 간-기관적 연구를 진행하는
    학술랩입니다.
  support3: '이 행사는 '
  support4: '의 기금과 '
  support5: 과
  support6: 의 지원 덕분에 가능했습니다. 감사합니다!
  mailing-list-title: 소식지 받기
  mailing-list-1: 프로세싱 재단의 정기 소식을 수신하려면 이메일 주소를 입력하세요.
  2015contributors-conference-title: 2015년 공헌자 컨퍼런스
  2015contributors-conference-date: 5월 25-31일
  2015contributors-conference1: '약 30여명의 참여자들이 '
  2015contributors-conference2: >-
    에 모여, p5.js의 프로그래밍 코드와 문서화 작업을 진전시키고, 커뮤니티를 확장하는 방안에 대해 논의하였습니다. 멀리서는 홍콩,
    그리고 시애틀, 로스 엔젤레스, 보스턴, 뉴욕 등지에서 찾아온 참여자들이 함께하였습니다. 대부분의 참여자들이 크리에이티브 기술, 인터랙션
    디자인, 그리고 뉴미디어 아트 분야의 전문 종사자였고, 카네기 멜론 미술 및 건축 대학교 출신의 학부생 및 대학원생도 6명 정도
    포함하였습니다.
  2015contributors-conference3: '사진 촬영: 최태윤(Taeyoon Choi)'
  2015contributors-conference-diversity-title: 다양성
  2015contributors-conference-diversity1: '기술 개발 문제 외에도 중요하게 다루어졌던 컨퍼런스 주제는 커뮤니티, 확장, 다양성이었습니다. 컨퍼런스는 패널'
  2015contributors-conference-diversity2: '다양성: 인종, 젠더, 능력에 대한 7가지의 목소리, FLOSS와 인터넷을 위한 수업'
  2015contributors-conference-diversity3: '과 함께 시작하였습니다. '
  2015contributors-conference-diversity4: '패널 진행은 '
  2015contributors-conference-diversity5: 과
  2015contributors-conference-diversity6: '가 맡았으며, '
  2015contributors-conference-diversity7: 2015년 5월 25일 화요일 카네기 멜론 대학교 Kresge Auditorium 에서 열렸습니다. 연사는
  2015contributors-conference-diversity8: 과
  2015contributors-conference-diversity9: 였습니다.
  2015cc_1: 다양한 배경 출신의 참여자들이 미소를 지으며 손으로 p5 사인을 만드는 모습
  2015cc_2: '잔디 위에서 뛰놀고, 웃으며, 손을 하늘 위로 들어올리는 참여자들의 모습'
  2015cc_3: 노트북으로 p5.js 커뮤니티 성명서를 발표하고 있는 여성
  2015cc_4: 마이크에 대고 열정적으로 말하고 있는 여성과 그를 쳐다보는 남성 협력자 두 명
  2015cc_5: 미소를 띄우며 발표를 경청하는 참여자들 모습
  2015cc_6: 마이크에 대고 3명의 여학생들을 향해 p5.js를 설명하는 여성
  2015cc_7: '여학생 한명이 마이크에 대고 발표하는 동안, 포스트잇이 붙은 화이트보드를 둘러앉은 참여자들의 모습'
  2015cc_8: 책상에 둘러앉아 서로의 노트북을 보며 코드를 비교하는 참여자들의 모습
  2015cc_9: 프로그래밍에 대한 노트가 적힌 여러가지 색의 포스트잇이 화이트보드에 붙어있는 모습
  2015cc_10: 한 교실에서 다양한 기술 능력의 가치를 존중하는 것에 대해 발표하는 여성과 그의 파워포인트를 바라보는 참여자들의 모습
  2015cc_11: >-
    대강당 무대 위 단상에서 발표하는 여성과 무대에 앉아있는 세명의 참여자들, 그리고 무대 위 스크린상의 스카이프 화면을 통해 보이는 또다른
    세명의 원격 참여자들
  2015cc_12: 노트북으로 작업하는 참여자들이 있는 교실 전경
  2015cc_13: 둥그렇게 앉아 토론하는 5명의 사람들
  2015cc_14: 노트북과 함께 둥그렇게 앉아 자신의 필기를 공유하는 5명의 사람들
  2015cc_15: 교실에서 참여자들을 향해 마이크로 발표하는 남성
  2019contributors-conference-title: 2019년 공헌자 컨퍼런스
  2019contributors-conference-date: 8월 13-18일
  2019contributors-conference1: '다학제적 배경을 지닌 35명의 참여자들이 '
  2019contributors-conference2: >-
    에 모여 p5.js의 프로그래밍 환경과 그 현주소를 탐색하고, 코드 및 문서 개발, 그리고 커뮤니티 확장 방법에 대해 논의하였습니다.
    참여자들은 크리에이티브 기술, 인터랙션 디자인, 뉴미디어 아트를 아우르는 다양한 분야의 종사자들로 구성되었으며, 컨퍼런스에서의 논의는
    이러한 다학제적인 시각을 바탕으로 진행되었습니다. 참여자 그룹은 접근성, 퍼포먼스 속 음악과 코딩, 크리에이티브 기술 지형, 그리고
    국제화를 포함한 여러 주제에 초점을 두었습니다.
  2019contributors-conference3: '비디오 촬영: 치안치안 예(Qianqian Ye)'
  2019contributors-conference4: '사진 촬영: 재클린 존슨(Jacquelyn Johnson)'
  outputs: 결과물
  output1: '. p5.js를 위한 아주 유연한 삼각형, 사각형, 육각형, 그리고 팔각형 묶음 구현. 제작: 아렌 데이비(Aren Davey)'
  output2: '. 복수의 클라이언트를 특정 호스트 페이지에 연결하는 멀티디바이스 및 멀티플레이어 게임을 위한 템플릿 파일. 제작: L05'
  output3: Experiments using
  output3-1: >-
    를 이용한 실험들. softCompile 및 OSC 인터페이스 초기 단계 구현과 더불어 MIDI 셋업에 연결한 데모. p5.js 협업
    라이브 코딩 VJ 환경 구현. 제작: 테드 데이비스(Ted Davis)
  output4: >-
    가상 공간에서의 블랙니스(Blackness)와 젠더를 다룬 패널, 아메리칸 아티스트(American Artist)가 진행하고 shawné
    michaelain holloway와 LaJuné McMillian이 함께함.
  output5: 에베레스트 핍킨(Everest Pipkin)과 존 챔버스(Jon Chambers)가 진행한 워크숍
  output6: 'A prototype of a '
  output6-1: p5.js를 위한 노트북 인터페이스
  output6-2: '의 프로토타입. 제작: 앨리슨 패리쉬(Allison Parrish)'
  output7: >-
    새로운 설치 예술 작품. 제작: Stalgia Grigg, LaJuné McMillian, Aatish Bhatia, 그리고 Jon
    Chambers.
  output8: p5.js의 전세계 공헌자를 위한 툴킷
  output8-1: >-
    제작: Aarón Montoya-Moraga, Kenneth Lim, Guillermo Montecinos, Qianqian Ye,
    Dorothy R. Santos, 그리고 Yasheng She.
  output9: '비폭력적 크리이에티브 코드 작성법. '
  output9-1: 올리비아 로스(Olivia Ross) 진행 잡지.
  output10: >-
    p5.js 웹사이트의 접근성에 대한 점검. 스크린 리더 접근성 향상 기능을 비롯하여, 홈, 다운로드, 시작하기, 레퍼런스 페이지 등을
    업데이트. 기여: Claire Kearney-Volpe, Sina Bahram, Kate Hollenbach, Olivia Ross,
    Luis Morales-Navarro, Lauren McCarthy, 그리고 Evelyn Masso
  output11: >-
    협업 퍼포먼스. 제작: Luisa Pereira, Jun Shern Chan, Shefali Nayak, Sona Lee, Ted
    Davis, 그리고 Carlos Garcia.
  output12: '퍼포먼스. 제작: 나탈리 브래긴스키(Natalie Braginsky)'
  output13: >-
    p5 에디터를 위한 p5.js 라이브러리 시스템 디자인. 제작: 캐시 타라카지안(Cassie Tarakajian)과 루카
    다마스코(Luca Damasco)
  output14: >-
    p5와 다른 라이브러리 연결을 위한 프로토타입들. 제작: 알렉스 이쑤안 쑤(Alex Yixuan Xu)와 로렌 밸리(Lauren
    Valley)
  output15: '클로징 캠프파이어. 진행: 골렌 레빈(Golan Levin)'
  2019cc_1: 단상 위에서 한 그룹을 향해 발표를 하는 남성
  2019cc_2: 긴 테이블에 앉아 점심을 먹으며 토론하는 참여자들
  2019cc_3: '교실 속 참가자들의 모습으로, 어떤 이들은 노트북으로 작업하고, 다른 이들은 대화를 나눈다'
  2019cc_4: 교실에서 노트북으로 작업하는 참여자들의 모습
  2019cc_5: 어두운 교실에서 미팅을 하는 참여자들
  2019cc_6: 여러 참여자들이 모인 교실에서 발표를 하는 여성
  2019cc_7: 많은 이들이 모여있는 교실에서 대화를 나누는 참가자들
  2019cc_8: 한 교실에서 동료 참여자를 향해 마이크에 대고 말하는 여성
  2019cc_9: 데이터 익명화의 문제점에 대한 글이 투사된 스크린과 그 앞 단상에서 말하는 참여자
  2019cc_10: >-
    "p5.js는 접근성을 향상을 위한 기능 외에는 향후 새로운 기능을 추가하지 않습니다"라고 적힌 텍스트 앞에 서서, 동료 참여자를 향해
    마이크에 대고 말하는 사람
  2019cc_11: 동료 참여자를 향해 마이크에 대고 말하는 여성
  2019cc_12: 동료 참여자를 향해 마이크에 대고 말하는 남성
  2019cc_13: '교실 속, 경청 중인 발표자들을 향해 앉아있는 참여자들'
  2019cc_14: '교실 속, 경청 중인 발표자를 마주하고 있는 참여자들'
  2019cc_15: '"신성한 경계"라 적힌 스크린을 뒤로하고, 동료 참여자를 향해 마이크에 대고 말하는 여성'
  2019cc_16: 3D 렌더링된 사람 이미지를 보여주는 패널에 경청하는 참여자들 전경
  2019cc_17: 노트북과 함께 테이블에 둘러앉아 TV 스크린 상의 코드를 살펴보는 참여자들
  2019cc_18: 등신 크기의 테디 베어 옆에 앉아 노트북으로 작업하는 여성
  2019cc_19: 밖에 나와 미소를 짓는 참여자들
  2019cc_20: 동그랗게 모여 서서 대화를 나누는 4명의 참여자들
  2019cc_21: 밖에 나와 앉아 함께 점심을 먹는 참여자들
  2019cc_22: 거대한 U자형 테이블에 둘러앉아 교실 앞쪽을 쳐다보는 참여자들
  2019cc_23: 교실 앞에 앉아 마이크에 대고 활력적으로 말하는 남성
  2019cc_24: 하늘 향해 손을 들고 활기차게 미소짓는 모습이 담긴 참여자 단체 사진
  2019cc_25: LCD 모니터로 만들어진 캠프파이어에 둘러앉은 사람들
  p5js-community-event-title: p5.js Community Events
  2022-p5js-access-day-title: p5.js Access Day 2022
  2022-p5js-access-day-date: May 21
  2022-p5js-access-day-organizer: Organizer and curator
  2022-p5js-access-day-coordinator: Event Coordinator and Video Producer
  2022-p5js-access-day-description: >-
    The p5.js Access Day is a virtual conference to talk about access in 
    open-source software for the arts (OSSTA) and greater issues beyond the
    software.  The day-long online event features four themed-sessions —
    Critical Web  Accessibility, Disability Arts, Access & Community Building,
    and Access  via Translation. It provides space for contributors of p5.js and
    experienced  practitioners from outside OSSTA projects to share their
    knowledge, perspectives,  and dreams for building greater access to
    technical and arts spaces.  
  2022-p5js-access-day-recap-video: p5.js Access Day 2022 Recap Video
  2022-p5js-access-day-recap-video-asl: p5.js Access Day 2022 Recap Video with ASL Interpretation
  2022-p5js-access-day-moderator: Moderator
  2022-p5js-access-day-speakers: Speakers
  2022-p5js-access-day-session-0: Event Opening
  2022-p5js-access-day-session-1: Critical Web Accessibility
  2022-p5js-access-day-session-2: Disability Arts
  2022-p5js-access-day-session-3: Access & Community Building
  2022-p5js-access-day-session-4: Access via Translation
  2022-p5js-access-day-session-5: Event Closing
  2022-p5js-access-day-production: Event Production
  2022-p5js-access-day-advisor: Event Advisor
  2022-p5js-access-day-asl: Live ASL Interpretation
  2022-p5js-access-day-designer: Graphic Designer
  2022-p5js-access-day-tech-support: Live Event Tech Support
  2022-p5js-access-day-transcriber: Closed Captioning Transcription Support
  2022-p5js-access-day-asl-support: Live ASL Support
books:
  books-title: 출판물
  book-1-title: Getting Started with p5.js (p5.js 시작하기)
  book-1-authors: 'Lauren McCarthy, Casey Reas, Ben Fry 저. 삽화: 최태윤.'
  book-1-publisher: '2015년 10월 Maker Media 출판. '
  book-1-pages: '246 페이지. '
  book-1-type: 페이퍼백.
  book-1-description: >-
    p5.js의 리드 개발자와 프로세싱의 창립자들이 저술한 이 책은, 자바스크립트와 HTML을 통해 오늘날 웹아 보다 창의적으로 사용될 수
    있는 가능성을 소개합니다.
  book-1-order-a: O'Reilly에서 인쇄물/e북 주문하기
  book-1-order-b: 아마존에서 주문하기
  book-2-title: Introduction to p5.js (스페인어 에디션)
  book-2-authors: >-
    Lauren McCarthy, Casey Reas, Ben Fry 저. <br> 번역: Aarón Montoya-Moraga. 삽화:
    최태윤.
  book-2-publisher: '2018년 Processing Foundation, Inc. 출판. '
  book-2-pages: '246 페이지. '
  book-2-type: 소프트커버.
  book-2-description: >-
    p5.js의 리드 개발자와 프로세싱의 창립자들이 저술한 이 책은, 자바스크립트와 HTML을 통해 오늘날 웹이 보다 창의적으로 사용될 수
    있는 가능성을 소개합니다.
  book-2-order-a: Processing Foundation Press에서 PDF 주문하기
  book-2-order-b: 아마존에서 인쇄물 주문하기
  book-3-title: Generative Design(제너레이티브 디자인)
  book-3-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub, Claudius Lazzeroni 저.'
  book-3-publisher: '2018년 10월 30일 Princeton Architectural Press 출판; 별쇄본. '
  book-3-pages: '255 페이지. '
  book-3-type: 페이퍼백.
  book-3-description: >-
    p5.js의 자바스크립트와 같은 간단한 언어를 통해, 예술가들과 창작자들은 인터랙티브 타이포그래피와 섬유로부터, 3D 프린팅 가구,
    그리고 복잡하고 우아한 인포그래픽 등에 이르는 모든 것을 만들 수 있습니다.
  book-3-order-a: Princeton Architectural Press에서 주문하기
  book-3-order-b: 아마존에서 주문하기
  book-4-title: Generative Gestaltung (제너레이티브 디자인 독일어 에디션)
  book-4-authors: 'Benedikt Gross, Hartmut Bohnacker, Julia Laub and Claudius Lazzeroni.'
  book-4-publisher: '2018년 1월 Schmidt Hermann Verlag 출판. '
  book-4-pages: 256 페이지.
  book-4-type: 하드커버.
  book-4-description: >-
    p5.js의 자바스크립트와 같은 간단한 언어를 통해, 예술가들과 창작자들은 인터랙티브 타이포그래피와 섬유로부터, 3D 프린팅 가구,
    그리고 복잡하고 우아한 인포그래픽 등에 이르는 모든 것을 만들 수 있습니다.
  book-4-order-a: Verlag Hermann Schmidt에서 주문하기
  book-4-order-b: 아마존에서 주문하기
  book-5-title: Learn JavaScript with p5.js <br> (p5.js로 자바스크립트 배우기)
  book-5-authors: Engin Arslan 저.
  book-5-publisher: '2018년 Apress 출판. '
  book-5-pages: 217 페이지.
  book-5-type: 페이퍼백.
  book-5-description: >-
    널리 사용되는 자바스크립트와 그 프로그래밍 라이브러리인 p5.js을 통해 아주 매력적이고 시각적인 방식으로 코딩에 입문하세요. 이 책에서
    습득할 수 있는 기술은 수많은 산업계에서도 호환되는 것이며, 웹 어플리케이션, 로봇 프로그래밍, 제너레이티브 아트를 제작하는 데에도
    쓰입니다.
  book-5-order-a: Apress에서 주문하기
  book-5-order-b: 아마존에서 주문하기
  book-6-title: >-
    Aesthetic Programming: A Handbook of Software Studies (미학적 프로그래밍: 소프트웨어학을 위한
    핸드북)
  book-6-authors: 'Winnie Soon, Geoff Cox 저. '
  book-6-publisher: '2020년 Open Humanities Press 출판. '
  book-6-pages: '298 페이지. '
  book-6-type: 하드커버.
  book-6-description: >-
    이 책은 p5.js 기반의 미학적 프로그래밍과 그 성찰적 실천을 소개합니다. 현존하는 기술적 대상과 패러다임을 이해하고 질문하며, 또 
    보다 넓은 생태-사회-기술 체제를 다시-프로그래밍 하는 가능성으로서의 프로그래밍 교육을 제시합니다.
  book-6-order-a: PDF 파일 다운로드 (무료)
  book-6-order-b: Barnes & Noble에서 주문하기
examples:
  Examples: 예제
  back-examples: 돌아가기
  Structure: 구조
  Form: 도형
  Data: 데이터
  Arrays: 배열
  Control: 컨트롤
  Image: 이미지
  Color: 색상
  Math: 수학
  Simulate: 시뮬레이션
  Interaction: 인터랙션
  Objects: 객체
  Lights: 조명
  Motion: 모션
  Instance_Mode: 인스턴스 모드
  Dom: DOM
  Drawing: 드로잉
  Transform: 변형
  Typography: 타이포그래피
  3D: 3D
  Input: 입력
  Advanced_Data: 고급 데이터
  Sound: 사운드
  Mobile: 모바일
  Hello_P5: 안녕 p5
reference:
  Reference: 레퍼런스
showcase:
  showcase-title: 쇼케이스
  showcase-intro1: '쇼케이스는 2019년 강예은 '
  showcase-intro2: '이 제작, 기획하였으며, 2020년에는 코니 리우 '
  showcase-intro3: >-
    가 새로운 기획을 선보입니다. 쇼케이스는 p5.js를 보다 흥미진진하고 포용적으로 만든 창작물, 학습물, 오픈 소스 사례들을 기쁘게
    소개합니다. 이렇게 우리는 함께 커뮤니티를 만들어 나가는게 아닐까요?:) 2019년 여름, 우리는 p5.js 기반의 다양한 프로젝트들을
    소개한 바 있습니다.
  showcase-intro4: 현재 2020년 여름 쇼케이스를 모집중입니다. 아래의 버튼을 눌러 자신 또는 타인의 p5.js 작업을 추천해주세요!
  nominate-project: 프로젝트 추천하기
  showcase-featuring: 선정 프로젝트
  project-tag-art: 예술
  project-tag-design: 디자인
  project-tag-code: 코드
  project-tag-curriculum: 커리큘럼
  project-tag-documentation: 문서화
  project-tag-game: 게임
  project-tag-library: 라이브러리
  project-tag-organizing: 행사 또는 모임
  project-tag-tool: 툴
  project-tag-tutorial: 튜토리얼
  project-roni: 각도기 드로잉 프로그램(Programmed Plotter Drawings)
  credit-roni: Roni Cantor
  description-roni: >-
    p5.js로 제작한 사인파(Sine wave)와 선형 보간(lerp)으로, 실물 각도기와 펜과 연결되어 드로잉하고, SVG 파일로
    내보내기 가능.
  project-phuong: 날아라 아이리(Airi Flies)
  credit-phuong: Phuong Ngo
  description-phuong: >-
    p5.play로 제작된 게임으로, PEW라고 말해 아이리(Airi)가 날 수 있도록 돕는다. 사용자들이 자신의 안전 지대를 벗어난
    곳에서도 행동, 외모, 발언에 상관없이 자신감을 갖게하고자 하는 취지에서 제작.
  project-daein: Chillin'
  credit-daein: 정대인(Dae In Chung)
  description-daein: 모바일 기기의 모션 센서와 p5.js를 활용한 인터랙티브 타이포그래픽 포스터
  project-qianqian: Qtv
  credit-qianqian: 치안치안 예(Qianqian Ye)
  description-qianqian: >-
    입문자를 위한 p5.js 튜토리얼을 포함하여, 코딩, 예술, 그리고 기술에 대해 다루는 1분 길이의 중국어 영상 채널들. 유투브,
    인스타그램, 비리비리(Bilibili), 틱톡(TikTok)에서 확인 가능.
  project-casey-louise: p5.js 셰이더(Shaders)
  credit-casey-louise: '캐시 콘치나(Casey Conchinha), 루이스 레셀(Louise Lessél)'
  description-casey-louise: '셰이더(Shaders)란 무엇이고, 이를 p5.js에서 왜, 그리고 어떻게 사용하는지 배울 수 있는 자료.'
  project-moon-xin: 움직이는 반응형 포스터(Moving Responsive Posters)
  credit-moon-xin: '장문(Moon Jang), 씬 씬(Xin Xin), 그리고 학생들'
  description-moon-xin: >-
    브라우저 기반의 움직이는 포스터로, 그래픽 시스템과 변형 메소드, 그리고 p5.js를 사용하여 8자 미만 단어가 내포하는 바를 표현.
    조지아 대학교(University of Georgia)의 그래픽 디자인 과정인 'Visual Narrative Systems'의
    수강생들이 디자인.
  created-by: Created By
  pronouns-female: (she/her)
  creator-from-roni-cantor: 'From Toronto, Canada'
  project-links: Project Links
  project-links-text-1-roni-cantor: Example sketch in p5.js Web Editor
  project-links-text-2-roni-cantor: AxiDraw V3 demo video
  project-q-1-1: What are you up to?
  project-q-1-2: How did you get started with p5.js?
  project-a-1-1-roni-cantor: >-
    I just graduated from Ryerson University's New Media program. Coming from 4
    years of coding and making robots, I decided to take a break and play with
    some more traditional forms of art—while still coding and playing with
    robots.
  project-a-1-2-roni-cantor: 'I first started using p5.js at '
  project-a-1-3-roni-cantor: '! After using '
  project-a-1-4-roni-cantor: ' for many years, I wanted to try something new.'
  project-q-2: How did you use p5.js in this project?
  project-a-2-1-roni-cantor: >-
    I used p5.js in this project to generate the sine wave and lerp (linear
    interpolation) formulas and display the visuals in the 
  project-a-2-2-roni-cantor: >-
    . I then used a feature in my code that exported my programmed graphic into
    an 
  project-a-2-3-roni-cantor: ' file. I needed an SVG file to give to the plotter—an '
  project-a-2-4-roni-cantor: >-
    —so that it understood where to draw the lines that I programmed. I sent
    this information to the plotter with a program called 
  project-a-2-5-roni-cantor: '!'
  project-q-3: What's your favorite p5.js feature?
  project-a-3-roni-cantor: ' because lines are fun and "lerp" is a fun word to say!'
  project-q-4: >-
    Did you face any challenges working on this project? If so, how did you
    overcome them?
  project-a-4-roni-cantor: >-
    It was my first time using p5.js, Inkscape, and a plotter! I really
    benefited from the people around me who had used p5 before, as well as
    online guides and forums.
  project-q-5: What's a cool thing we should check out?
  project-a-5-roni-cantor: ' on Instagram—super cool analog plotter stuff.'
  project-q-6: Where can people learn more about you?
  project-a-6-roni-cantor: ' (Instagram)'
  project-resources: Project Resources
  creator-from-qianqian: 'Los Angeles, California'
  interview-link-qianqian: Processing Foundation interview with Qianqian Ye
  project-a-1-1-qianqian: I am a Chinese artist and designer based in Los Angeles.
  project-a-1-2-qianqian: >-
    My partner introduced me to p5.js, which I learned mainly by watching free
    online video tutorials. My first p5.js project was drawing some shapes with
    different colors.
  project-a-2-1-qianqian: >-
    This project started with an idea of teaching my mom, who lives in China and
    doesn’t speak English, to code with p5.js. This project was difficult on
    multiple levels, and I wanted to start by identifying the main reasons why
    it’s more challenging for someone like my mother to learn to code—primarily
    due to the lack of free creative coding education resources. Most of the
    free resources to learn creative coding are unavailable in China. The p5.js
    tutorials on YouTube as well as the p5.js Twitter and Instagram accounts are
    inaccessible in China because of internet censorship.
  project-a-2-2-qianqian: 'I learned a lot from YouTube videos such as the '
  project-a-2-3-qianqian: >-
    , but the more I watched coding tutorials online, the more I realized how
    difficult it is to find other womxn and people of color teaching coding,
    especially in Mandarin. I wanted to help other Chinese womxn relate to
    creative coding.
  project-a-2-4-qianqian: >-
    I am working on opening up the video channels to other Chinese creatives who
    want to contribute to the educational resource together, like interviews and
    guest tutorials. If you are interested in teaching/talking about creative
    coding in Mandarin, HMU!
  project-a-3-1-qianqian: 'The '
  project-a-3-2-qianqian: ' is my favorite feature. It makes web-based creative coding seamless.'
  project-a-4-1-qianqian: >-
    Learning to code in a second language was difficult and the lack of
    community made this process even harder. I hope to speak from my experience
    as a beginner and someone who once felt like an outsider to the creative
    coding and video tutorial world.
  project-a-4-2-qianqian: >-
    I spend a lot of time researching the latest technology for my videos. In
    the end, I decided on using my phone to record and iMovie to edit. I hope to
    encourage others that it doesn’t take a lot of expensive gears to get
    started making instructional videos.
  project-a-4-3-qianqian: >-
    Another issue I came across was my own fear of putting myself online. I
    first had to get over my anxiety of making mistakes in the videos or
    receiving negative comments online. Often womxn and people of color are
    targets for online harassment. I’m hoping to help set an example for other
    womxn and people of color that it’s ok to put yourselves online and
    strengthen your communities by sharing your knowledge. Eventually, we will
    be able to stop online harassment by creating strong diverse communities.
  project-a-5-1-qianqian: 'I am very excited about '
  project-a-5-2-qianqian: ' in LA.'
  creator-from-phuong: 'From Kyiv, Ukraine'
  project-a-1-1-phuong: 'I''m a creative coder and designer, a '
  link-1-phuong: Play Airi Flies!
  link-2-phuong: Code for AiriFlies on GitHub
  link-3-phuong: More info in Phuong Ngo's portfolio
  project-a-1-2-phuong: ' diversity scholarship recipient, and just a curious creature.'
  project-a-1-3-phuong: >-
    I was taking a course at the School of Machines in Berlin this summer
    called! "
  project-a-1-4-phuong: '," mainly taught by '
  project-a-2-1-phuong: >-
    I used p5.js to work on the visual part of the game. The animation sprites
    for Airi and the ghosts were drawn on an iPad app called 
  project-a-2-2-phuong: ' and then integrated into '
  project-a-2-3-phuong: ' code. I mainly used examples at p5.play as a reference.'
  project-a-2-4-phuong: 'For the endless scrolling background, I found a '
  p5-sketch-by-chjno-phuong: p5 sketch by chjno
  project-a-2-5-phuong: >-
    . I set a condition so whenever the word "pew" or a mouse click was
    detected, the scrolling speed would change to make an illusion of Airi
    flying up. When the user does not do anything, the scrolling speed is
    negative, which makes it look like Airi is falling down.
  project-a-2-6-phuong: 'For sound recognition, I used '
  project-a-2-7-phuong: ' (currently, there is a beta version not available in public yet, but it will be very soon!). I added around 120 samples of my classmates saying the word "pew" with different intonations and 80 samples of background noise to train it. Then I integrated the model into the game with '
  project-a-3-1-phuong: >-
    I really love how easily you can create, manipulate, and delete HTML blocks
    and classes with the 
  project-a-3-2-phuong: ' via '
  project-a-3-3-phuong: ' etc. But my most favorite function is '
  project-a-3-4-phuong: ', since this is where you create magic.'
  project-a-4-1-phuong: >-
    There were a lot of challenges simply because p5.js was something new to me.
    I did not work much with JavaScript in general before. Reading documentation
    and searching for similar examples helped a lot.
  project-a-5-1-phuong: 'Check out '
  school-of-machines-phuong: School of Machines' courses
  project-a-5-2-phuong: >-
    ! They try hard to connect the most creative people in the world and they do
    it well so far. ❤️
  pronouns-male: (he/him)
  creator-from-chung: 'From Baltimore, Maryland'
  link-1-casey-louise: p5.js Shaders guide
  link-2-casey-louise: Glitch collection of p5.js shader examples
  link-1-chung: View Chillin'
  link-2-chung: Code for Chillin' on GitHub
  link-3-chung: More info in Dae In Chung's Portfolio
  project-a-1-1-chung: >-
    I am a graphic designer and a faculty member at Maryland Institute College
    of Art, where I mainly teach coding (with p5.js and Processing, of course)
    and motion graphics.
  project-a-1-2-chung: 'I have been using '
  project-a-1-3-chung: ' for some time, and when p5.js came along, I started using it without a second thought because it was easy to convert existing Processing code and share projects online.'
  project-a-2-1-chung: >-
    This summer, I gave myself a challenge of making typographic posters with
    coding, and this is one of the posters I made. I didn’t know until very
    recently that I could use motion sensor data with p5.js. I was also
    watching 
  dan-shiffman-matterjs-tutorial: Dan Shiffman’s matter.js tutorial videos
  project-a-2-2-chung: ', so I thought why not combine the two and practice what I was learning?'
  project-a-3-1-chung: >-
    There are many things I love about p5.js such as the online community and
    beginner friendliness. What I really like right now is the 
  project-a-3-2-chung: >-
    , with which I can not only work online for myself but also share URLs
    quickly in the present mode. For this project in particular, I had to do a
    lot of testing on my phone, and it was much easier and quicker than
    committing to GitHub.
  project-a-4-1-chung: 'I had some troubles with handling font, alpha channel and z-depth in '
  project-a-4-2-chung: ' mode. I am still not happy with all my decisions. But in general, it was helpful to search the forum and not to forget to break down problems into smaller ones and iterate little by little. Also, I had issues with rendering out video files directly out of p5.js. Screen recording was not an option because of intermittent frame rate drops (my laptop is pretty slow). After doing some research, I decided to learn some basics of '
  project-a-4-3-chung: ' and build a tool for myself.'
  project-a-5-1-chung: >-
    As mentioned above, if you want to render out frames and video files out of
    p5.js sketches, check out my 
  project-a-5-2-chung: ' and let me know what you think.'
  creator-from-casey-louise: 'From New York, New York'
  project-a-1-1-casey-louise: >-
    Casey: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces, physical and digital.
  project-a-1-2-casey-louise: >-
    Louise: I'm a student at NYU ITP who's interested in computer graphics and
    interactive spaces based on sensor technologies.
  project-a-1-3-casey-louise: >-
    Casey: I started learning p5.js in 2018 in my first semester at ITP, though
    I had been dabbling in 
  project-a-1-4-casey-louise: ' since 2012. I was introduced to Processing by my friend Pedro while I was studying graphic design, and it blew my mind. The idea of making my own tools for creating graphics and interactive art piqued my interest, but once I actually tried it, I was hooked. The first project I can remember was an eye that followed you around the screen, and it was sad when you left it alone.'
  project-a-1-5-casey-louise: >-
    Louise: I initially learned p5.js to make a website I was creating more
    playful. I’m a C# programmer, so this was a good segway into JavaScript for
    me.
  project-a-2-1-casey-louise: >-
    Casey: I was putting off learning shaders for a long time, and I was also
    curious if I could use them in p5.js. Then I heard about a grant for open
    source, storytelling, and learning resource projects at ITP called 
  project-a-2-2-casey-louise: >-
    . Since I wasn't finding much in the way of p5.js + shader documentation, I
    decided to figure out how they're implemented in p5.js and create a resource
    for others to learn. When I told Louise about the project, she was
    immediately excited about learning and teaching shaders in p5.js. She's been
    great about making sure the project is a learning resource and not just a
    collection of examples.
  project-a-3-1-casey-louise: 'Casey: Does '
  project-a-3-2-casey-louise: ' count as a feature? I also love having the ability to share my programs on the web so that people don''t have to install special software or come to NYC to see my work.'
  project-a-3-3-casey-louise: 'Louise: My favorite feature is '
  project-a-3-4-casey-louise: ' and '
  project-a-3-5-casey-louise: ' for transformation of the coordinate system to make generative visuals.'
  project-a-4-1-casey-louise: >-
    Casey: The beginning of the project (figuring out how things work) was us
    reaching out to amazing people, asking questions, and asking for permission
    to use their examples in our project. 
  adam-ferris-repo-casey-louise: Adam Ferriss' GitHub repo
  project-a-4-2-casey-louise: ' really laid the groundwork for us in understanding how shaders work in p5.js and provided a framework of approachable examples for us to build on. For some specific p5.js-related issues we were having, we reached out to '
  project-a-4-3-casey-louise: ' and '
  project-a-4-4-casey-louise: ' (who worked on the '
  webgl-casey-louise: WebGL implementation in p5.js
  project-a-4-5-casey-louise: '), and they were super helpful.'
  project-a-4-6-casey-louise: >-
    Louise: The learning curve was pretty steep for getting shaders into p5.
    Luckily, there were some very well-documented examples on GitHub by Adam
    Ferriss. Our aim was to do so in a way that a complete beginner can
    understand how to implement it, so it was as much a technical challenge as
    it was a challenge in teaching code to strangers and beginners. Here we drew
    inspiration from the way the 
  openframeworks-book-casey-louise: openFrameworks book
  project-a-4-7-casey-louise: ' is written. A fun "hey, it’s not hard and you can do it too" approach is what we believe in.'
  project-a-5-1-casey-louise: 'Check out the '
  project-a-5-2-casey-louise: ' to explore our peers'' amazing grant projects!'
  pronouns-nonbinary: (they/them)
  creator-from-moon: 'From Athens, Georgia'
  posters-by: Posters By
  project-a-1-1-moon: >-
    Moon: I'm a graphic designer, visual artist, and design educator. This
    summer, I taught a graphic design course in the University of Georgia
    Cortona program in Italy, introducing some basics of p5.js. This fall, I am
    planning to teach and to study digital platforms at UGA.
  project-a-1-2-moon: 'My former colleague, '
  project-a-1-3-moon: ', invited me to '
  project-a-1-4-moon: ' in '
  pcd-la-moon: LA in January 2019
  project-a-1-5-moon: >-
    . They helped me with the tools and logics of p5.js. It was an excellent
    teaching and learning experience.
  project-a-2-1-moon: 'We followed basic tutorials, '
  codetrain-moon: Daniel's videos on YouTube
  project-a-2-2-moon: ', and '
  p5-reference-moon: Reference on the p5.js website
  project-a-2-3-moon: .
  project-a-3-1-moon: 'My favorite function is related to '
  project-a-3-2-moon: ' and '
  project-a-3-3-moon: ': '
  project-a-3-4-moon: >-
    . I was able to use and to teach this tool to visualize various ideas about
    time in motion.
  project-a-4-1-moon: >-
    It was challenging for me, a beginner, to understand the overall structure
    of p5.js and how code works in general. I had to repeat the p5.js basics a
    couple of times, and then I drew a chart to memorize and to teach the way I
    understood the p5.js structure and code with strong constraints I set up. It
    was an excellent teaching and learning experience.
  project-a-5-1-moon: 'Check out the '
  project-a-5-2-moon: ' in Milan, Italy.'
teach:
  teach-title2: 가르치기
  teach-intro1: '모든 교육은 고유의 목표, 메시지, 조건, 환경을 담습니다. '
  teach-intro2: '이 페이지는 p5.js 워크숍, 강의, 교보재 아카이브를 통해 전세계 p5 교육자 및 학습자들을 연결합니다. 여러분의 p5 교육 경험을 '
  teach-intro3: 이 링크에서 공유 또는 추천
  teach-intro4: 하세요!
  teach-heading: p5 교육 자료
  teach-search-filter: 검색 필터
  teach-filter1: '다양성 & 포용 : '
  teach-filter1-label1: 젠더
  teach-filter1-label2: 인종 & 민족
  teach-filter1-label3: 언어
  teach-filter1-label4: 뉴로타입
  teach-filter1-label5: 장애
  teach-filter1-label6: 계급
  teach-filter1-label7: 종교
  teach-filter1-label8: (하위-)문화
  teach-filter1-label9: 정치적 견해
  teach-filter1-label10: 나이
  teach-filter1-label11: 기술적 숙련도
  teach-filter1-label12: 직업
  teach-filter1-label13: '#noCodeSnobs'
  teach-filter1-label14: '#newKidLove'
  teach-filter1-label15: '#unassumeCore'
  teach-filter1-label16: '#BlackLivesMatter'
  teach-filter2: '장소 : '
  teach-filter2-label1: 아프리카
  teach-filter2-label2: 아시아
  teach-filter2-label3: 유럽
  teach-filter2-label4: 북미
  teach-filter2-label5: 오세아니아
  teach-filter2-label6: 남미
  teach-filter2-label7: '가상-온라인 '
  teach-filter3: '년도 : '
  teach-filter4: '난이도 : '
  teach-filter4-label1: 초급
  teach-filter4-label2: 중급
  teach-filter4-label3: 고급
  teach-case-subtitle1: 장소 & 일시
  teach-case-subtitle2: 참여자
  teach-case-subtitle3: 난이도
  teach-case-subtitle4: 목표
  teach-case-subtitle5: 방법 & 교보재
  teach-case1-title: Introduction to Video Game Programming in High School with p5.js
  teach-case1-lead-name: Emanuele Bolognesi
  teach-case1-image-alt: A group photo of 25 students with their teacher
  teach-case1-content1: "\U0001F4CD High School Russell-Newton, Scandicci (FI), Italy. "
  teach-case1-content1-1: '02/06/2022 ~ 04/10/2022 every Saturday 10:00-11:00'
  teach-case1-content2: >-
    25 students (15-16 years old) of an Italian High School. 11 girls and 14
    boys
  teach-case1-content3: ' Elementary'
  teach-case1-content4: >-
    Introduce 10th grade students to simple video game programming using
    javascript and p5.js
  teach-case1-content5: 'Method: p5.js web editor'
  teach-case1-content5-1: The
  teach-case1-content5-2: works
  teach-case1-content5-3: of the students
  teach-case2-title: Fractal implementations
  teach-case2-lead-name: Mariana
  teach-case2-content1: Mars
  teach-case2-content1-1: '06.02.2022 15:00~15:30'
  teach-case2-content2: 15
  teach-case2-content3: ' Advanced'
  teach-case2-content4: Introduce the theme of fractals and use p5js to implement them
  teach-case2-content5: 'Just '
  teach-case3-title: Introduction to Computational Media with p5.js
  teach-case3-lead-name: Barry Voeten
  teach-case3-content1: school
  teach-case3-content1-1: entire course
  teach-case3-content2: 'Dutch school kids, age 14-15'
  teach-case3-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case3-content4: education
  teach-case3-content5: Syllabus
  teach-case4-title: Calculadora de IMC
  teach-case4-lead-name: Dayana
  teach-case4-content1: Youtube
  teach-case4-content1-1: '00h: 30min'
  teach-case4-content2: 'Inscritos no canal do youtube, houveram 18 vizializações.'
  teach-case4-content3: ' Elementary, Iniciante'
  teach-case4-content4: Auxiliar pessoas que estao iniciando na programação.
  teach-case4-content5: 'Editor Web do p5.js , Tutorial no youtube'
  teach-case5-title: Taller de Creative Coding
  teach-case5-lead-name: Federico Santana
  teach-case5-image-alt: Screen shot of the teacher is teaching on p5.js web editor online
  teach-case5-content1: 'https://www.twitch.tv/snowflakeFede'
  teach-case5-content1-1: 'every saturday 19:00-20:30PM (timezone: GMT-3)'
  teach-case5-content2: >-
    Soy yo nada más, pero me gusta invitar personas para programar en vivo
    cuando puedo.
  teach-case5-content3: ' Elementary'
  teach-case5-content4: >-
    Hacer que más personas aprendan sobre el arte creativo y, a su vez, poder ir
    acercandolas al mundo de la matemática, todo en español. El curso está
    fuertemente inspirado en "The coding train" pero con acercamiento que va a
    la matemática y el arte creativo en su conjunto.
  teach-case5-content5: >-
    Sólo una colección de p5js donde subo los ejemplos que se hacen en vivo,
    acá:
  teach-case6-title: "50+ CODING CLUB: MY VERY FIRST CODE ART WITH HANDY(\U0001F590) AND FAMILY(\U0001F469‍\U0001F467‍\U0001F466)"
  teach-case6-lead-name: Inhwa Yeom
  teach-case6-image-alt: In-class photo
  teach-case6-content1: 'Asia Culture Center, Gwangju, South Korea'
  teach-case6-content1-1: '27/11/2020~ 12/2020 every Friday and Saturday 2:00-4:00'
  teach-case6-content2: >-
    People who identify themselves as older adults (average age = 62.54), and
    their companions of all ages.
  teach-case6-content3: ' Elementary'
  teach-case6-content4: >-
    p5 for 50+ aims to enhance the digital literacy and rights of people going
    on 50+
  teach-case6-content5: 'p5 editor, p5for50+ web app, p5js.org, print out of code results'
  teach-case7-title: Introduction to p5js
  teach-case7-lead-name: Bérenger Recoules a.k.a b2renger
  teach-case7-image-alt: example picture
  teach-case7-content1: L'École de Design Nantes Atlantique - France
  teach-case7-content1-1: from 2018 and ongoing
  teach-case7-content2: Students from l'école de design Nantes Atlantique
  teach-case7-content3: ' Elementary'
  teach-case7-content4: 'get to know p5js and its functionalities (dom, audio, webgl etc.)'
  teach-case7-content5: 'github readme : this a text tutorial to read in French.'
  teach-case8-title: I am starting a new one -
  teach-case8-lead-name: Brinder Soin
  teach-case8-content1: New Jersey
  teach-case8-content1-1: 12/28 - 12/30
  teach-case8-content2: >-
    About 100 students from grades 7, 8 and 9 from various schools and
    locations.
  teach-case8-content3: ' Elementary,  Intermediate,  Advanced'
  teach-case8-content4: >-
    Keeping children safe and learning in the time of covid and promote STEM
    education
  teach-case8-content5: Teacher created notes and worksheets and IDE p5 web editor
  teach-case9-title: Programación Aplicada al Arte Visual e Interactivo
  teach-case9-lead-name: Sebastián Zavatarelli
  teach-case9-image-alt: A zoom class sharing p5.js web editor
  teach-case9-content1: 'Buenos Aires, Argentina. Plataforma ZOOM'
  teach-case9-content1-1: '15/09/2020 ~ 14/10/2020 every Wednesday 6:30-9:00PM)'
  teach-case9-content2: Alrededor de 10 personas. La mayoría mujeres.
  teach-case9-content3: ' Elementary,  Intermediate'
  teach-case9-content4: >-
    El curso está destinado a artistas que quieran comenzar a utilizar las
    herramientas tecnológicas actuales para el desarrollo de sus obras. También
    puede ser aprovechado por aquellxs que quieran iniciarse en la programación
    de computadoras a través de un entorno de programación simple, visual,
    accesible y divertido.
  teach-case9-content5: >-
    p5.js web editor. Online a trvés de plataforma ZOOM y material subido en
    moodle
  teach-case10-title: Painting with Code
  teach-case10-lead-name: Andreas Refsgaard
  teach-case10-content1: 'Copenhagen, Denmark'
  teach-case10-content1-1: 22/02/2020
  teach-case10-content2: Participants were people . A wide range of people from
  teach-case10-content3: ' Intermediate'
  teach-case10-content4: >-
    Get creatives, designers, artists and other people who don't typically use
    code introduced to p5.js
  teach-case10-content5: 'Website, p5.js editor'
  teach-case11-title: Signing Coders
  teach-case11-lead-name: Taeyoon Choi
  teach-case11-content1: 'BRIC, New York City.  USA Seoul Museum of Art, Seoul, South Korea.'
  teach-case11-content1-1: '5 Sessions, each 2~3 hours'
  teach-case11-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case11-content3: ' Elementary'
  teach-case11-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case11-content5: >-
    We used p5.js Web editor and code examples on the website.  We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts. 
  teach-case12-title: Digital Weaving & Physical Computing Workshop Series
  teach-case12-lead-name: Qianqian Ye
  teach-case12-image-alt: In-class photo
  teach-case12-content1: 'Women’s Center for Creative Work, Los Angeles, CA, US'
  teach-case12-content1-1: '19/10/2019 ~ 02/11/2019, every Saturday 3-6pm'
  teach-case12-content2: '15 women and non-binary artists, designer, makers, programers.'
  teach-case12-content3: ' Elementary'
  teach-case12-content4: >-
    Over the course of three workshops, we’ll draw and create patterns using
    p5.js, an open-source graphical library; we’ll learn and apply computational
    concepts to transform patterns and finally, we’ll bring a weaving to life
    with electronic microcontrollers.
  teach-case12-content5: >-
    Materials: Slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool Methods: small team session
  teach-case12-content5-1: 'Slides we used for the workshop:'
  teach-case13-title: p5.js à l'Ubuntu Party!
  teach-case13-lead-name: Basile Pesin
  teach-case13-content1: '2020 우분투 행사(Ubuntu Party),'
  teach-case13-content1-1: 'Cité des Sciences et de l''''Industrie, Paris, France'
  teach-case13-content2: 'Any age, including children and parents, young and older adults.'
  teach-case13-content3: Advanced
  teach-case13-content4: >-
    To introduce a new public to programming through fun and compelling
    examples.
  teach-case13-content5: >-
    Method: in-person workshop, 1 hour per session, with different participant
    each times. The students were using (Ubuntu) machines with the p5.js web
    editor. I was teaching using a video projector as well as a board.
  teach-case13-content5-1: >-
    Materials: The exercises I gave where accessible through p5.js web-editor
    links available in
  teach-case14-title: >-
    Making The Thing that Makes the Thing: Exploring Generative Art & Design
    with p5.js
  teach-case14-lead-name: Priti Pandurangan & Ajith Ranka
  teach-case14-image-alt: >-
    A group of participants collaborating to create some designs using the p5.js
    web editor on their laptops.
  teach-case14-content1: 'National Institute of Design, Bangalore'
  teach-case14-content1-1: '2020 February 8, 2:30-4:00 PM'
  teach-case14-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case14-content3: 'Priti: Intermediate & Ajith: Advanced'
  teach-case14-content4: >-
    To explore generative art &#x0026; design and recreate some classical works
    with p5.js.
  teach-case14-content5: 'Methods: In-person, collaborative, hands-on workshop.'
  teach-case14-content5-1: 'Materials: '
  teach-case14-content5-2: 'course page '
  teach-case14-content5-3: 'linking to sketches on the p5 editor, '
  teach-case14-content5-4: 'interactive reference guide '
  teach-case14-content5-5: to p5 basics
  teach-case15-title: CC Fest (Creative Coding Festival)
  teach-case15-lead-name: Saber
  teach-case15-speech: 'Love p5.js. It has meant so much to me, my students, and this community.'
  teach-case15-content1: ' New York, Los Angeles, San Francisco, Virtual-Online '
  teach-case15-content1-1: ' Twice a year in NYC for four years; once a year in LA for three years; once a year in SF for two years; now virtual'
  teach-case15-content2: >-
    Our participants included art/design students & professionals, creative
    coding enthusiasts. We had close to 50 participants.
  teach-case15-content3: Intermediate
  teach-case15-content4: >-
    To build a teacher and student community around p5 for middle and high
    school.
  teach-case15-content5: >-
    A half-day of workshop led by volunteer teachers. We saw lots of different
    methods and materials. Most used some sort of slides or documentation, some
    live coding using an editor, with work time for participant to remix.
  teach-case15-content5-1: CC Fest Lessons page
  teach-case15-content5-2: ' for teaching materials'
  teach-case15-content5-3: More photos
  teach-case16-title: Taller Introducción a la Programación Creativa con p5.js
  teach-case16-lead-name: Aarón Montoya-Moraga
  teach-case16-image-alt: >-
    A group of 20 people sitting on a large shared table with their laptops
    looking at a projected screen.
  teach-case16-speech: 'p5.js is my happy place '
  teach-case16-content1: ' PlusCode Media Arts Festival, Buenos Aires, Argentina & Virtual-Online '
  teach-case16-content1-1: ' 2018 November 14, 3 hours'
  teach-case16-content2: >-
    I had around 16 students in the workshop, and a team including 3 people from
    the PlusCode festival, and one person at the venue.
  teach-case16-content3: 'Elementary, Intermediate, Advanced'
  teach-case16-content4: >-
    Introduction to beginners and artists of graphic web programming and open
    source, using p5.js, in Spanish :)
  teach-case16-content5: 'I used the material on this '
  teach-case16-content5-1: GitHub repo
  teach-case16-content5-2: ', we used the p5.js web editor, we had a three hour long workshop'
  teach-case16-content5-3: '+CODE electronic art festival 2018, Argentina'
  teach-case16-content5-4: ', Medium'
  teach-case17-title: Introduction to Generative Drawing
  teach-case17-lead-name: Adam Herst
  teach-case17-speech: >-
    My greatest source of uncertainty in developing the workshop was whether it
    was trying to teach art to programmers or to teach programming to artists.
  teach-case17-content1: Inter/Access
  teach-case17-content1-1: ' (artist-run centre), Toronto, Ontario, Canada'
  teach-case17-content1-2: In-person with a self-paced workbook for remote work
  teach-case17-content1-3: ' 2020 February 12, 7PM-9PM'
  teach-case17-content2: 15 artists
  teach-case17-content3: Elementary
  teach-case17-content4: >-
    To introduce p5.js to artists with little or no programming experience and
    to suggest one way an analogue practice can migrate to a digital form.
  teach-case17-content5: >-
    A printed workbook with activities that used the p5.js web editor to show
    how translate an physical drawing into a digital drawing.
  teach-case17-content5-1: 'Processing Community Day 2019: Generative Drawing at Inter/Access'
  teach-case17-content5-2: Introduction to Generative Drawing Letter PDF
  teach-case17-content5-3: Introduction to Generative Drawing Booklet PDF
  teach-case18-title: 'Open Lecture, Creative Coding: 2020'
  teach-case18-lead-name: Shunsuke Takawo
  teach-case18-image-alt: >-
    A table on which there is a laptop, some sheets of papers, colorful pens and
    two automatic machines drawing something with a pen on a sheet.
  teach-case18-speech: >-
    I love p5.js because it's so easy to read and write code in p5.js. Coding in
    your everyday life!
  teach-case18-content1: ' Kyoto University of Art and Design, Kyoto, Japan & Virtual-Online '
  teach-case18-content1-1: ' 2020 March 16-18, 1-7 PM'
  teach-case18-content2: 'Students of Kyoto University of Art and Design, and anyone.'
  teach-case18-content3: Elementary
  teach-case18-content4: Making code as a tool for artistic expression.
  teach-case18-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case18-content5-1: Syllabus
  teach-case18-content5-2: Day 1
  teach-case18-content5-3: Day 2
  teach-case18-content5-4: Day 3
  teach-case18-content5-5: ', YouTube'
  teach-case19-title: Creative Coding for Static Graphics
  teach-case19-lead-name: Shunsuke Takawo
  teach-case19-speech: >-
    Coding in p5.js is a lot of fun. If you haven't started yet, I encourage you
    to give it a try!
  teach-case19-content1: ' FabCafe MTRL, Tokyo, Japan'
  teach-case19-content1-1: ' 2019 September 15, 4-7 PM '
  teach-case19-content2: Anyone who wants to try coding in p5.js.
  teach-case19-content3: Intermediate
  teach-case19-content4: To code from the graphic design's perspective.
  teach-case19-content5: 'Dropbox Paper, p5.js web editor.'
  teach-case19-content5-1: Syllabus & Material
  teach-case20-title: Generative Typography
  teach-case20-lead-name: 정대인
  teach-case20-image-alt: >-
    A image with black background displaying the letter 'b' in 5 different
    styles along with a menu with various styling options to choose.
  teach-case20-content1: ' Baltimore, Maryland, USA & Virtual-Online '
  teach-case20-content1-1: ' 2019 January 21 - May 08, every Wednesday, 4-10 PM'
  teach-case20-content2: 14 undergrads and grad students who had little to no experience in coding.
  teach-case20-content3: Elementary
  teach-case20-content4: Experiment with typographic forms and structures through computation.
  teach-case20-content5: 'Methods: online/offline lectures and critiques.'
  teach-case20-content5-1: 'Materials: p5js online editor, Github, youtube tutorials.'
  teach-case20-content5-2: Works of participants
  teach-case21-title: Machine Learning for the Web
  teach-case21-lead-name: Yining Shi
  teach-case21-image-alt: >-
    A group of 16 people sitting around tables with their laptops, mobile phones
    and some other accessories, facing towards a large television screen.
  teach-case21-content1: ' ITP, NYU, 370 Jay St, Brooklyn, NY 11201, USA'
  teach-case21-content1-1: '2019 March 09 - October 12, every Tuesday, 6:30-9:00 PM'
  teach-case21-content2: >-
    Students at Interactive Telecommunications Program, New York University. 16
    people.
  teach-case21-content3: 'Elementary, Intermediate'
  teach-case21-content4: >-
    The goal of this class is to learn and understand common machine learning
    techniques and apply them to generate creative outputs in the browser using
    ml5.js and p5.js.
  teach-case21-content5: >-
    This class is a mix of lectures, coding sessions, group discussions, and
    presentations. I used
  teach-case21-content5-1: GitHub
  teach-case21-content5-2: ' to host class syllabus and all the coding materials, Google Slides for lectures and p5.js Web Editor for live coding sessions. Every week, there were one-on-one office hours to talk about any difficulties of coming up with an idea for the homework or any coding changes.'
  teach-case21-content5-3: 'Methods: online/offline lectures and critiques.'
  teach-case22-title: Introduction to p5.js and JavaScript
  teach-case22-lead-name: Nico Reski
  teach-case22-content1: ' Currently available as self-study at own pace with accompanying slides, linked below.'
  teach-case22-content3: 'Beginner, Elementary'
  teach-case22-content4: >-
    Introduce learners (potentially with no coding experiences at all) to the
    very basics of p5.js (and JavaScript), in order to encourage creative coding
    and enable them to pursue own projects in a safe environment.
  teach-case22-content5: >-
    p5.js source code (for the introductory project), JavaScript source code
    (illustrating some basic JavaScript functionalities), accompanying slides in
    .pdf format, all hosted publicly on GitHub.
  teach-case22-content5-1: Overview
  teach-case22-content5-2: ' of the workshop and its contents (including all links to the material hosted on GitHub) on my academic webpage.'
  teach-case23-title: Digital Weaving & Physical Computing Workshop Series
  teach-case23-lead-name: Qianqian Ye & Evelyn Masso
  teach-case23-image-alt: >-
    This image is divided in two parts. The left part shows a group of 15 women
    sitting on chairs with their laptops and looking at a presentor who is
    explaining a code on a projected screen. The right part of the image shows a
    person learning weaving using a physical pattern and a weaving tool.
  teach-case23-content1: ' Womens Center for Creative Work (WCCW), Los Angeles, CA, US'
  teach-case23-content1-1: ' 2019 October 19 - November 02, every Saturday 3-6 PM'
  teach-case23-content2: '15 women and non-binary artists, designer, makers, programers. '
  teach-case23-content3: Elementary
  teach-case23-content4: >-
    Over the course of three workshops, we will draw and create patterns using
    p5.js, an open-source graphical library; we will learn and apply
    computational concepts to transform patterns and finally, we will bring a
    weaving to life with electronic microcontrollers.
  teach-case23-content5: 'Methods: small team session'
  teach-case23-content5-1: >-
    Materials: slides, p5.js web editor, pen and paper to draw pattern, physical
    pattern weaving tool.
  teach-case23-content5-2: 'Workshop Slide #1'
  teach-case23-content5-3: 'Workshop Slide #2'
  teach-case23-content5-4: Workshop Information
  teach-case23-content5-5: ' on WCCW website.'
  teach-case24-title: Signing Coders
  teach-case24-lead-name: 최태윤
  teach-case24-image-alt: >-
    Two volunteers explaining concepts using a white board and a screen to a
    bunch of deaf and hard of hearing students, each student facing a computer
    screen.
  teach-case24-speech: >-
    I'm working on a new series of coding class for Disabled students in South
    Korea. I'm researching about the pedagogy and translation. I plan to hold
    workshops in December 2020. The project is supported by the Open Society
    Foundation Human Rights Initiative and Korea Disability Arts & Culture
    Center.
  teach-case24-content1: ' WRIC, New York City, USA & Seoul Museum of Art, Seoul, South Korea.'
  teach-case24-content1-1: '5 Sessions, each 2~3 hours'
  teach-case24-content2: Deaf and Hard of Hearing students age 10~50 who live in NYC.
  teach-case24-content3: Elementary
  teach-case24-content4: >-
    To help Deaf and Hard of Hearing students learn about computer programming
    through playful exercises. To make ASL tutorial of basic coding concepts.
  teach-case24-content5: >-
    We used p5.js Web editor and code examples on the website. We also used
    dice, playing cards and various paper tools to help students learn about
    coding concepts.
  teach-case24-content5-1: Syllabus & Material
  teach-case24-content5-2: More photos
  teach-workshops-heading: Upcoming Workshops
  teach-workshop1-title: CC Fest (Creative Coding Festival)
  teach-workshop1-time: Twice a year in NYC
  teach-workshop2-title: Adorable Cat Festival with happy cats and happy people
  teach-workshop2-time: 'March 2023, every Saturday 2-6pm'
  teach-workshop3-title: Adorable Dog Festival with happy dogs and happy people
  teach-workshop3-time: 'May 2023, every Sunday 5-8pm'
