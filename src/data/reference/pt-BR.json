{
  "h1": "Referência",
  "reference-search": "Buscar referência",
  "reference-description1": "Não encontrou o que você estava buscando? Você pode tentar em",
  "reference-description3": "Você também pode baixar uma versão off-line da Referência.",
  "reference-contribute2": "Por favor nos comunique.",
  "reference-error1": "Encontrou algum erro?",
  "reference-error3": "Por favor fique à vontade para editar ",
  "reference-error5": "e iniciar um pull request!",
  "reference-example": "Exemplo",
  "reference-description": "Descrição",
  "reference-extends": "Extensões",
  "reference-parameters": "Parâmetros",
  "reference-syntax": "Sintaxe",
  "reference-returns": "Returns",
  "Environment": "Ambiente",
  "Color": "Cor",
  "Color Conversion": "Conversão de cor",
  "Creating & Reading": "Criando e lendo",
  "Setting": "Configuração",
  "Shape": "Forma",
  "2D Primitives": "2D Primitivos",
  "Attributes": "Atributos",
  "Curves": "Curvas",
  "Vertex": "Vértices",
  "Constants": "Constantes",
  "Structure": "Estrutura",
  "DOM": "DOM",
  "Rendering": "Renderização",
  "Foundation": "Fundação",
  "Transform": "Transformar",
  "Data": "Dados",
  "LocalStorage": "LocalStorage",
  "Dictionary": "Dicionário",
  "Events": "Eventos",
  "Acceleration": "Aceleração",
  "Keyboard": "Teclado",
  "Mouse": "Mouse",
  "Touch": "Toque",
  "Image": "Imagem",
  "Loading & Displaying": "Loading & Displaying",
  "Pixels": "Pixels",
  "IO": "IO",
  "Input": "Input",
  "Output": "Output",
  "Table": "Table",
  "Math": "Math",
  "Calculation": "Calculation",
  "Vector": "Vetor",
  "Noise": "Noise",
  "Random": "Aleatório",
  "Trigonometry": "Trigonometria",
  "Typography": "Tipografia",
  "Array Functions": "Array Functions",
  "Conversion": "Conversão",
  "String Functions": "String Functions",
  "Time & Date": "Hora e Data",
  "3D Primitives": "3D Primitivos",
  "Lights, Camera": "Luz, Câmera",
  "Interaction": "Interação",
  "Lights": "Luzes",
  "3D Models": "Modelos 3D",
  "Material": "Material",
  "Camera": "Câmera",
  "p5": {
    "description": [
      "Esse é o construtor de p5 instance (instância p5). ",
      "Uma instância p5 contém todas as propriedades e métodos relacionados a um sketch de p5. Ela gerencia os pedidos de um sketch e também pode servir como um parâmetro de node opcional para atrelar um canvas p5 a um node. O sketch gerado usa as novas instances (instâncias) p5 como um novo argumento e pode opcionalmente criar um <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, e/ou <a href=\"#/p5/draw\">draw()</a> as propriedades de um sketch que já está rodando. ",
      "Um sketch p5 pode rodar em \"global\" ou \"instance\" modo: \"global\" - todas as propriedades e métodos estão atrelados à janela \"instance\" - todas as propriedades e métodos estão atrelados ao este objeto p5"
    ],
    "resultado": "P5: uma p5 instance (instância)",
    "params": {
      "sketch": "Função: uma closure (clausura) que pode definir um <a href=\"#/p5/preload\">preload()</a> opcional,  <a href=\"#/p5/setup\">setup()</a>, e/ou <a href=\"#/p5/draw\">draw()</a> as propriedades de uma p5 instance",
      "node": "HTMLElement: (Optional) element to attach canvas to"
    },
    "describe": {
      "description": [
        "Cria uma descrição acessível a leitores de tela para a canvas. O primeiro parâmetro deve ser uma string com a descrição da canvas. O segundo parâmetro é opcional. Se especificado, ele determina como a descrição será mostrada.",
        "<code class=\"language-javascript\">describe(texto, LABEL)</code> apresenta a descrição a todas as pessoas como uma <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">ETIQUETA DE MUSEU *****</a> em uma <code class=\"language-javascript\"><div class=\"p5Label\"></div></code> próxima à canvas. Você pode utilizar CSS para alterar a aparência dessa legenda.",
        "<code class=\"language-javascript\">describe(texto, FALLBACK)</code> torna a descrição acessível somente para pessoas utilizando leitores de tela, em um <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> sub DOM dentro do elemento canvas</a>. Se um segundo parâmetro não for especificado, por padrão, a descrição somente será acessível para pessoas que utilizem leitores de tela."
      ],
      "params": {
        "text": "String: descrição da canvas",
        "display": "Constante (opcional): LABEL ou FALLBACK"
      }
    },
    "describeElement": {
      "description": [
        "Esta função cria uma descrição acessível a leitores de tela para elementos - formas ou grupos de formas que só tem signficado juntas — na canvas. O primeiro parâmetro deve ser o nome do elemento. O segundo parâmetro deve ser uma string com a descrição do elemento. O terceiro parâmetro é opcional. Se especificado, ele determina como a descrição do elemento será mostrada.",
        "<code class=\"language-javascript\">describeElement(nome, texto, LABEL)</code> mostra a descrição do elemento a todas as pessoas como uma <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">ETIQUETA DE MUSEU *****/caption</a> em uma <code class=\"language-javascript\"><div class=\"p5Label\"></div></code> adjacente à canvas. Você pode definir o estilo como quiser no seu CSS.",
        "<code class=\"language-javascript\">describeElement(nome, texto, FALLBACK)</code> torna a descrição do elemento acessível somente a pessoas que estejam utilizando leitores de tela, em <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">um sub DOM dentro do elemento canvas</a>. Se um segundo parâmetro não for definido, por padrão a descrição do elemento estará disponível apenas a pessoas que façam uso de leitores de tela."
      ],
      "params": {
        "name": "String: nome do elemento",
        "text": "String: descrição do elemento",
        "display": "Constante (opcional): LABEL ou FALLBACK "
      }
    },
    "textOutput": {
      "description": [
        "<code class=\"language-javascript\">textOutput()</code> cria uma descrição em inglês das formas presentes na canvas de forma acessível a leitores de tela. A descrição geral da canvas inclui tamanho, cor, e o número de elementos na tela. Exemplo: 'Your output is a, 400 by 400 pixels, lavender blue canvas containing the following 4 shapes:\" (em português: \"Seu resultado é uma canvas lavanda-azulado, de 400 por 400 pixels, contendo as seguintes formas:\"), seguida de uma lista descrevendo a cor, posição e área de cada forma — exemplo: \"orange ellipse at top left covering 1% of the canvas\" (em português: uma elipse alaranjada no canto superior esquerdo cobrindo 1% da canvas). Cada elemento pode ser selecionado para acessar mais detalhes. Uma tabela de elementos também é fornecida. Nesta tabela são descritas a forma, cor, localização, coordenadas e área — exemplo: \"orange ellipse location=top left area=2\" (em português: \"laranja | elipse | localização = superior esquerda | área = 2\").",
        "<code class=\"language-javascript\">textOutput()</code> e <code class=\"language-javascript\">texOutput(FALLBACK)</code> disponibilizam a descrição em <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">um sub DOM dentro do elemento canvas</a>, sendo acessível através do uso de leitores de tela. <code class=\"language-javascript\">textOutput(LABEL)</code> cria um elemento <code class=\"language-javascript\">div</code> ao lado da canvas para conter o texto. Isto pode ser interessante para que pessoas que não utilizam leitores de tela possam visualizar a descrição enquanto programam. Porém, é importante notar que usar o parâmetro LABEL no código final irá criar redundância para leitores de tela. Recomendamos utilizar LABEL somente como parte do desenvolvimento do código, e removê-lo antes de publicar e compartilhar seu código com pessoas que utilizam leitores de tela."
      ],
      "params": {
        "display": "Constante (opcional): FALLBACK ou LABEL "
      }
    },
    "gridOutput": {
      "description": [
        "<code class=\"language-javascript\">gridOutput()</code> mostra o conteúdo da canvas na forma de uma tabela HTML (grade), baseando-se na localização de cada forma. Uma breve descrição da canvas em inglês é disponibilizada antes das informações da tabela. Esta descrição inclui: cor do fundo, tamanho da canvas, número de objetos, e tipos de objetos — exemplo: \"lavender blue canvas is 200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\" (em português: \"canvas lavanda-azulada mede 200 por 200 pixels e contém 4 objetos — 3 elipses 1 retângulo\"). A tabela descreve o conteúdo espacialmente, cada elemento é posicionado em uma célula da tabela a depender de sua posição. Cada célula apresenta a cor e o tipo de forma do elemento correspondente — exemplo: \"orange ellipse\" (em português: \"elipse laranja\"). As descrições podem ser selecionadas individualmente para mais detalhes. Também disponibiliza uma lista descritiva contendo forma, cor, localização e área de cada elemento — examplo: \"orange ellipse location=top left area=1%\" (em português: \"laranja | elipse | localização = topo esquerdo | área = 1%).",
        "<code class=\"language-javascript\">gridOutput()</code> e <code class=\"language-javascript\">gridOutput(FALLBACK)</code> disponibilizam a descrição em <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\">um sub DOM dentro do elemento canvas</a>, sendo acessível através do uso de leitores de tela. <code class=\"language-javascript\">gridOutput(LABEL)</code> cria um elemento <code class=\"language-javascript\">div</code> ao lado da canvas para conter o texto. Isto pode ser interessante para que pessoas que não utilizam leitores de tela possam visualizar a descrição enquanto programam. Porém, é importante notar que usar o parâmetro LABEL no código final irá criar redundância para leitores de tela. Recomendamos utilizar LABEL somente como parte do desenvolvimento do código, e removê-lo antes de publicar e compartilhar seu código com pessoas que utilizam leitores de tela."
      ],
      "params": {
        "display": "Constante (opcional): FALLBACK ou LABEL"
      }
    },
    "alpha": {
      "description": [
        "Extrai o valor de transparência (alpha) de uma cor ou de uma array de pixels."
      ],
      "returns": "Número: o valor de transparência (alpha) presente na cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "blue": {
      "description": [
        "Extrai o valor de azul de uma cor ou de uma array de pixels."
      ],
      "returns": "Número: o valor de azul presente na cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "brightness": {
      "description": [
        "Extrai o valor do brilho de uma cor ou array de pixels seguindo o modo de cor HSB."
      ],
      "returns": "Número: o valor do brilho da cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "color": {
      "description": [
        "Cria um objeto para armazenar variáveis do tipo cor. Os parâmetros são interpretados como valores RGB ou HSB dependendo do modo de cor definido (<a href=\"#/p5/colorMode\">colorMode()</a>). O modo padrão usa valores RGB de 0 a 255 e, logo, a função color(255, 204, 0) retornará um amarelo claro.",
        "Note que se apenas um valor for fornecido ao <a href=\"#/p5/color\">color()</a> ele será interpretado como um valor em escala de cinza. Adicionando um segundo valor ele será interpretado como alpha (transparência). Quando três valores forem fornecidos eles serão interpretados como RGB (vermelho, verde e azul) ou HSB (matiz, saturação e brilho). Adicionando um quarto valor ele será usado como alpha (transparência).",
        "Também é possível passar à função um único argumento do tipo string. Assim, ele será interpretado como qualquer cor web nomeável, cores hex (#), rgb() ou rgba() (ver exemplos). Nesse caso, um valor para alpha não será possível pois a função não suporta um argumento do tipo número após uma string. Para cores com transparência, use o padrão RGBA."
      ],
      "returns": "p5.Color: a cor resultante",
      "params": {
        "gray": "Número: valor único da cor em escala de cinza",
        "alpha": "Número (opcional): alpha (transparência) a ser adicionada à cor especificada (por padrão, são válidos valores entre 0-255)",
        "v1": "Número: valor do vermelho em modo RGB ou da matiz de cor no modo HSB",
        "v2": "Número: valor do verde em modo RGB ou da saturação de cor no modo HSB",
        "v3": "Número: valor do azul em modo RGB ou do brilho de cor no modo HSB",
        "value": "String: string de cor — os formatos possíveis são: rgb() ou rgba() com números inteiros (0-255) ou porcentagens, hex de 3 ou de 6 dígitos, ou nomes de cores",
        "values": "Número[]: uma array contendo os valores de vermelho, verde, azul e alpha (transparência) da cor final",
        "color": "p5.Color"
      }
    },
    "green": {
      "description": [
        "Extrai o valor de verde de uma cor ou de uma array de pixels."
      ],
      "returns": "Número: o valor de verde presente na cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "hue": {
      "description": [
        "Extrai o valor da matiz de uma cor ou de uma arrray de pixels. ",
        "Matiz (hue) está presente nos padrões de cor HSB e HSL. Esta função retornará a matiz normalizada de acordo com o padrão HSB quando um objeto contendo uma cor neste formato for fornecido, ou quando uma array de pixels for fornecida enquanto o sketch estiver utilizando HSB como modo de cor (<a href=\"#/p5/colorMode\">colorMode()</a>). Porém, retornará uma matiz normalizada segundo o padrão HSL em qualquer outro caso. Os valores só serão diferentes se o valor máximo da matiz for diferente para cada sistema."
      ],
      "returns": "Número: a matiz da cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "lerpColor": {
      "description": [
        "Mistura duas cores para encontrar uma terceira entre as duas. O parâmetro amt é a quantidade para interpolar entre dois valores, onde 0 é igual à primeira cor, e 1 é igual à segunda — 0.1 é muito próximo da primeira cor, 0.5 é a média, etc. Um valor menor que 0 será considerado igual a 0. Da mesma maneira, valores acima de 1 serão considerados iguais a 1. Esse comportamento é diferente de <a href=\"#/p5/lerp\">lerp()</a>, mas necessário para evitar números fora do intervalo que podem produzir cores e resultados inesperados.",
        "A maneira que as cores são interpoladas depende do modo de cor em uso (<a href=\"#/p5/colorMode\">colorMode()</a>)."
      ],
      "returns": "p5.Color: a cor resultante da interpolação",
      "params": {
        "c1": "p5.Color: cor a interpolar de (equivalente a 0)",
        "c2": "p5.Color: cor a interpolar para (equivalente a 1)",
        "amt": "Número: número entre 0 e 1"
      }
    },
    "lightness": {
      "description": [
        "Extrai o valor do brilho de uma cor ou array de pixels seguindo o modo de cor HSL."
      ],
      "returns": "Número: o valor do brilho da cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "red": {
      "description": [
        "Extrai o valor de vermelho de uma cor ou de uma array de pixels."
      ],
      "returns": "Número: o valor de vermelho presente na cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "saturation": {
      "description": [
        "Extrai o valor de saturação da cor ou de uma array de pixels",
        "A Saturação funciona de forma diferente em HSB e HSL. Esta função retornará a saturação no modo HSB quando a cor ou array de pixels utilizar este formato, mas usará a saturação em HSL como padrão (caso não seja fornecido outro)."
      ],
      "returns": "Número: o valor de saturação da cor especificada",
      "params": {
        "color": "p5.Color | Número[] | String: objeto <a href=\"#/p5.Color\">p5.Color</a>, valores dos componentes da cor ou cor CSS"
      }
    },
    "background": {
      "description": [
        "A função <a href=\"#/p5/background\">background()</a> configura a cor de fundo da canvas. A cor padrão é transparente. Esta função geralmente é usada dentro de <a href=\"#/p5/draw\">draw()</a> para limpar a tela no início de cada frame, mas pode ser usada dentro de <a href=\"#/p5/setup\">setup()</a> para configurar o fundo no primeiro frame da animação ou se o fundo precisa ser configurado apenas uma vez.",
        "A cor é especificada em RGB, HSB ou HSL, dependendo do <a href=\"#/p5/colorMode\">colorMode()</a> usado. (O modo padrão de cores é RGB, com cada atributo indo de 0 a 255). O alpha (transparência) padrão também vai de 0 a 255.",
        "Também é possível passar à função um único argumento do tipo string. Assim, ele será interpretado como qualquer cor web nomeável, cores hex (#), rgb() ou rgba() (ver exemplos). Nesse caso, um valor para alpha não será possível pois a função não suporta um argumento do tipo número após uma string. Para cores com transparência, use o padrão RGBA.",
        "Um objeto <a href=\"#/p5.Color\">p5.Color</a> também pode ser utilizado para configurar a cor de fundo, ou ainda uma <a href=\"#/p5.Image\">p5.Image</a> pode ser utilizada para configurar uma imagem de fundo."
      ],
      "params": {
        "color": "p5.Color: qualquer valor criado pela função <a href=\"#/p5/color\">color()</a>",
        "colorstring": "String: string de cor — os formatos possíveis são: rgb() ou rgba() com números inteiros (0-255) ou porcentagens, hex de 3 ou de 6 dígitos, ou nomes de cores",
        "a": "Número (opcional): a opacidade (alpha) do fundo em relação ao intervalo de cor que está sendo utilizado (por padrão: 0 a 255)",
        "gray": "Número: específica um valor entre branco e preto (escala de cinza)",
        "v1": "Número: valor do vermelho em modo RGB ou da matiz de cor no modo HSB",
        "v2": "Número: valor do verde em modo RGB ou da saturação de cor no modo HSB",
        "v3": "Número: valor do azul em modo RGB ou do brilho de cor no modo HSB",
        "values": "Número[]: uma array contendo vermelho, verde, azul e o alpha (opacidade) da cor",
        "image": "p5.Image: imagem criada com os métodos <a href=\"#/p5/loadImage\">loadImage()</a> ou <a href=\"#/p5/createImage\">createImage()</a>, para configurar o fundo (deve ser do mesmo tamanho da janela do sketch)"
      }
    },
    "clear": {
      "description": [
        "Limpa os pixels dentro de um buffer (memória temporária), tornando-os transparentes. Esta função limpa apenas a canvas, ela não limpará os objetos criados pelos métodos do tipo createX(), como o <a href=\"#/p5/createVideo\">createVideo()</a> ou o <a href=\"#/p5/createDiv\">createDiv()</a>. Diferentemente do contexto principal dos gráficos, os pixels em gráficos adicionais criados com <a href=\"#/p5/createGraphics\">createGraphics()</a> podem ser inteiramente ou parcialmente transparentes. Esta função torna todos os pixels 100% transparentes."
      ]
    },
    "colorMode": {
      "description": [
        "<a href=\"#/p5/colorMode\">colorMode()</a> muda a forma com que o p5.js interpreta os dados de cor. Por padrão, os parâmetros para <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>, e <a href=\"#/p5/color\">color()</a> são definidos por valores entre 0 e 255 utilizando o formato RGB. Isto é equivalente a configurar como colorMode(RGB, 255). Utilizar colorMode(HSB) permite que você use o sistema HSB. Por padrão, isso é (HSB, 360, 100, 100, 1). Você também pode usar HSL.",
        "Observação: as cores dos objetos já existentes lembram o modo de cor em que foram criados, logo, você pode mudá-lo sem afetar a aparência deles."
      ],
      "params": {
        "mode": "Constante: RGB, HSB ou HSL, correspondendo a Vermelho/Verde/Azul ou Matiz/Saturação/Brilho",
        "max": "Número (opcional): intervalo para todos os valores, isto é, o valor máximo para cada parâmetro",
        "max1": "Número: intervalo de vermelho ou de matiz (dependendo do formato de cor sendo utilizado)",
        "max2": "Número: intervalo de verde ou de saturação (dependendo do formato de cor sendo utilizado)",
        "max3": "Número: intervalo de azul ou de brilho (dependendo do formato de cor sendo utilizado)",
        "maxA": "Número (opcional): intervalo de alpha (transparência)"
      }
    },
    "fill": {
      "description": [
        "Configura a cor usada no preenchimento das formas. Por exemplo, se você configurar fill(204, 102, 0), todas as formas criadas depois desse comando serão preenchidas com a cor laranja. Essa cor é especificada em RGB ou HSB, dependendo do <a href=\"#/p5/colorMode\">colorMode()</a> atual. (O padrão é RGB, onde cada valor vai de 0 a 255). O alpha também vai de 0 a 255.",
        "Também é possível passar à função um único argumento do tipo string. Assim, ele será interpretado como qualquer cor web nomeável, cores hex (#), rgb() ou rgba() (ver exemplos). Nesse caso, um valor para alpha não será possível pois a função não suporta um argumento do tipo número após uma string. Para cores com transparência, use o padrão RGBA.",
        "Um objeto <a href=\"#/p5.Color\">Color</a> também pode ser utilizado para definir a cor do preenchimento."
      ],
      "params": {
        "v1": "Número: o valor de vermelho ou de matiz (dependendo do formato de cor sendo utilizado)",
        "v2": "Número: o valor de verde ou de saturação (dependendo do formato de cor sendo utilizado)",
        "v3": "Número: o valor de azul ou de brilho (dependendo do formato de cor sendo utilizado)",
        "alpha": "Número (opcional): valor de alpha (opacidade) do preenchimento",
        "value": "String: string de cor — os formatos possíveis são: rgb() ou rgba() com números inteiros (0-255) ou porcentagens, hex de 3 ou de 6 dígitos, ou nomes de cores",
        "gray": "Número: um valor de cinza",
        "values": "Número[]: uma array contendo vermelho, verde, azul e alpha",
        "color": "p5.Color: a cor do preenchimento"
      }
    },
    "noFill": {
      "description": [
        "Desabilita o preenchimento das formas que sejam criadas depois deste comando. Se <a href=\"#/p5/noStroke\">noStroke()</a> e <a href=\"#/p5/noFill\">noFill()</a> forem chamados, nada será criado na tela."
      ]
    },
    "noStroke": {
      "description": [
        "Desabilita o contorno das formas que sejam criadas depois deste comando. Se <a href=\"#/p5/noStroke\">noStroke()</a> e <a href=\"#/p5/noFill\">noFill()</a> forem chamados, nada será criado na tela."
      ]
    },
    "stroke": {
      "description": [
        "Define a cor usada para as linhas de contorno e bordas das formas. Essa cor é especificada em RGB ou HSB, dependendo do <a href=\"#/p5/colorMode\">colorMode()</a> atual — o padrão é RGB, onde cada valor vai de 0 a 255. O alpha também vai de 0 a 255.",
        "Também é possível passar à função um único argumento do tipo string. Assim, ele será interpretado como qualquer cor web nomeável, cores hex (#), rgb() ou rgba() (ver exemplos). Nesse caso, um valor para alpha não será possível pois a função não suporta um argumento do tipo número após uma string. Para cores com transparência, use o padrão RGBA.",
        "Um objeto <a href=\"#/p5.Color\">Color</a> também pode ser utilizado para definir a cor do contorno."
      ],
      "params": {
        "v1": "Número: o valor de vermelho ou de matiz (dependendo do formato de cor sendo utilizado)",
        "v2": "Número: o valor de verde ou de saturação (dependendo do formato de cor sendo utilizado)",
        "v3": "Número: o valor de azul ou de brilho (dependendo do formato de cor sendo utilizado)",
        "alpha": "Número (opcional): valor de alpha (opacidade) do contorno",
        "value": "String: string de cor — os formatos possíveis são: rgb() ou rgba() com números inteiros (0-255) ou porcentagens, hex de 3 ou de 6 dígitos, ou nomes de cores",
        "gray": "Número: um valor de cinza",
        "values": "Número[]: uma array contendo vermelho, verde, azul e alpha",
        "color": "p5.Color: a cor do contorno"
      }
    },
    "erase": {
      "description": [
        "Qualquer desenho criado depois do <a href=\"#/p5/erase\">erase()</a> será subtraído (apagado) da canvas. Áreas apagadas mostrarão a página web abaixo da canvas. Essa subtração pode ser cancelada com <a href=\"#/p5/noErase\">noErase()</a>. ",
        "Desenhos feitos com <a href=\"#/p5/image\">image()</a> e <a href=\"#/p5/background\"> background()</a> entre <a href=\"#/p5/erase\">erase()</a> e <a href=\"#/p5/noErase\">noErase()</a> não apagará a canvas, e funcionará normalmente."
      ],
      "params": {
        "strengthFill": "Número (opcional): Um número (0-255) que define a opacidade do apagamento do preenchimento da forma. O valor padrão quando nenhum outro valor for fornecido é de 255, resultando em transparência total.",
        "strengthStroke": "Número (opcional): Um número (0-255) que define a opacidade do apagamento do contorno da forma. O valor padrão quando nenhum outro valor for fornecido é de 255, resultando em transparência total."
      }
    },
    "noErase": {
      "description": [
        "Determina o fim do apagamento iniciado com <a href=\"#/p5/erase\">erase()</a>. O <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, e <a href=\"#/p5/blendMode\">blendMode()</a> retornarão ao que eram antes de chamar o <a href=\"#/p5/erase\">erase()</a>."
      ]
    },
    "arc": {
      "description": [
        "Desenha um arco na tela. Se for chamado apenas com x, y, w, h, start e stop, o arco será desenhado e preenchido como um segmento aberto. Se um parâmetro de modo for fornecido, o arco será preenchido como um semi-círculo aberto (OPEN),um semi-círculo fechado (CHORD), ou como uma geometria fechada (PIE). A origem pode ser definida com a função <a href=\"#/p5/ellipseMode\">ellipseMode()</a>. ",
        "O arco é desenhado sempre em sentido horário do ponto inicial ao final na elipse. Adicionar ou subtrair TWO_PI para qualquer um dos ângulos não muda onde eles caem. Se o início e o final caem no mesmo ponto uma elipse completa será desenhada. Leve em consideração que o eixo y aumenta indo para baixo, logo, os ângulos são medidos em sentido horário da direção x positiva (\"3 horas\")."
      ],
      "params": {
        "x": "Number: coordenada x da elipse do arco",
        "y": "Number: coordenada y da elipse do arco",
        "w": "Number: largura da elipse do arco por padrão",
        "h": "Number: altura da elipse do arco por padrão",
        "start": "Number: ângulo para iniciar o arco, especificado em radianos",
        "stop": "Number: ângulo para terminar o arco, especificado em radianos",
        "mode": "Constant: (Optional) parâmetro opcional para determinar como desenhar o arco, CHORD, PIE ou OPEN",
        "detail": "Integer: (Optional) parâmetro opcional apenas para WebGL. Serve para especificar o número de vertices que compõem o perímetro do arco. O valor padrão é 25. O detalhe máximo é de 50."
      }
    },
    "ellipse": {
      "description": [
        "Desenha uma elipse na tela. Por padrão, os primeiros dois parâmetros configuram a localização do centro da elipse, o terceiro e o quarto parâmetros definem a altura e a largura da geometria. Se nenhuma altura for definida, o padrão é utilizar o mesmo valor da largura. Se o valor for negativo, o valor absoluto será utilizado. ",
        "Uma elipse que possui a altura igual à largura é um círculo. A origem pode ser definida pela função <a href=\"#/p5/ellipseMode\">ellipseMode()</a>."
      ],
      "params": {
        "x": "Number: coordenada x do centro da elipse.",
        "y": "Number: coordenada y do centro da elipse.",
        "w": "Number: largura da elipse.",
        "h": "Number: (Optional) altura da elipse.",
        "detail": "Integer: (Optional) parâmetro opcional apenas para WebGL. Serve para especificar o número de vertices que compõem o perímetro da elipse. O valor padrão é 25. O detalhe máximo é de 50."
      }
    },
    "circle": {
      "description": [
        "Desenha um círculo na tela. O círculo é uma geometria simples e fechada. Seu ponto de referência é o centro. Essa função é um caso especial da ellipse(), onde a largura e a altura da elipse são iguais. A altura e a largura da elipse correspondem ao diâmetro do círculo. Por padrão, os 2 primeiros parâmetros configuram a localização do centro do círculo, o terceiro define o diâmetro."
      ],
      "params": {
        "x": "Number: coordenada x do centro do círculo.",
        "y": "Number: coordenada y do centro do círculo.",
        "d": "Number: diameter of the circle."
      }
    },
    "line": {
      "description": [
        "Desenha uma linha (um caminho direto entre dois pontos) na tela. Se criada com apenas 4 parâmetros, desenhará uma linha em 2D com a largura padrão de 1 pixel. Essa largura pode ser modificada usando a função <a href=\"#/p5/strokeWeight\"> strokeWeight()</a>. Uma linha não pode ser preenchida, logo a função <a href=\"#/p5/fill\">fill()</a> não afetará a cor da linha. Para definir a cor de uma linha use a função <a href=\"#/p5/stroke\">stroke()</a>."
      ],
      "params": {
        "x1": "Number: a coordenada x do primeiro ponto",
        "y1": "Number: a coordenada y do primeiro ponto",
        "x2": "Number: a coordenada x do segundo ponto",
        "y2": "Number: a coordenada y do segundo ponto",
        "z1": "Number: a coordenada z do primeiro ponto",
        "z2": "Number: a coordenada z do segundo ponto"
      }
    },
    "point": {
      "description": [
        "Desenha um ponto, uma coordenada no espaço com a dimensão de um pixel. O primeiro parâmetro é o valor da horizontal, o segundo é da vertical. A cor do ponto é definida pela função <a href=\"#/p5/stroke\">stroke()</a>. O tamanho do ponto pode ser definido pela função <a href=\"#/p5/strokeWeight\">strokeWeight()</a>."
      ],
      "params": {
        "x": "Number: a coordenada x",
        "y": "Number: a coordenada y",
        "z": "Number: (Optional) a coordenada z (para WebGL )",
        "coordinate_vector": "p5.Vector: o vetor da coordenada"
      }
    },
    "quad": {
      "description": [
        "Desenha um quadrilátero na canvas. Similar ao retângulo mas os ângulos não são necessariamente 90 graus. O primeiro par de parâmetros (x1,y1) define o primeiro vértice, os pares subsequentes vão em sentido horário ou anti-horário. Argumentos no eixo z funcionam apenas quando o quad() está em WEBGL."
      ],
      "params": {
        "x1": "Number: a coordenada x do primeiro ponto",
        "y1": "Number: a coordenada y do primeiro ponto",
        "x2": "Number: a coordenada x do segundo ponto",
        "y2": "Number: a coordenada y do segundo ponto",
        "x3": "Number: a coordenada x do terceiro ponto",
        "y3": "Number: a coordenada y do terceiro ponto",
        "x4": "Number: a coordenada x do quarto ponto",
        "y4": "Number: a coordenada y do quarto ponto",
        "detailX": "Integer: (Optional) número de segmentos na direção x",
        "detailY": "Integer: (Optional) número de segmentos na direção y",
        "z1": "Number: a coordenada z do primeiro ponto",
        "z2": "Number: a coordenada z do segundo ponto",
        "z3": "Number: a coordenada z do terceiro ponto",
        "z4": "Number: a coordenada z do quarto ponto"
      }
    },
    "rect": {
      "description": [
        "Desenha um retângulo na canvas. O retângulo é uma geometria de quatro lados com todos os ângulos iguais a 90 graus. Por padrão, os dois primeiros parâmetros configuram a localização do canto superior esquerdo, o terceiro define a largura e o quarto define a altura. A maneira em que esses parâmetros são interpretados pode ser modificada pela função <a href=\"#/p5/rectMode\">rectMode()</a>. ",
        "O quinto, sexto, sétimo e oitavo parâmetros, se especificados, determinam o raio dos cantos superiores esquerdo e direito e dos inferiores esquerdo e direito, respectivamente. Um raio de canto omitido utilizará o valor anteriormente especificado na lista de parâmetros."
      ],
      "params": {
        "x": "Number: coordenada x do retângulo.",
        "y": "Number: coordenada y do retângulo.",
        "w": "Number: largura do retângulo.",
        "h": "Number: (Optional) altura do retângulo.",
        "tl": "Number: (Optional) raio do canto superior esquerdo.",
        "tr": "Number: (Optional) raio do canto superior direito.",
        "br": "Number: (Optional) raio do canto inferior direito.",
        "bl": "Number: (Optional) raio do canto inferior esquerdo.",
        "detailX": "Integer: (Optional) número de segmentos na direção x (para WebGL)",
        "detailY": "Integer: (Optional) número de segmentos na direção y (para WebGL)"
      }
    },
    "square": {
      "description": [
        "Desenha um quadrado na tela. Um quadrado é uma geometria de quatro lados com todos os ângulos iguais a 90 graus e todos os lados do mesmo tamanho. Essa função é um caso especial da função rect(), onde a largura e a altura são iguais e o parâmetro \"s\" define o tamamho do lado. Por padrão, os primeiros dois parâmetros definem a localização do canto superior esquerdo, o terceiro define o tamanho do lado do quadrado. A maneira em que esses parâmetros são interpretados podem ser modificados pela função <a href=\"#/p5/rectMode\">rectMode()</a> . ",
        "O quarto, quinto, sexto e sétimo parâmetros, se especificados, determinam o raio dos cantos superiores esquerdo e direito e dos inferiores esquerdo e direito, respectivamente. Um raio de canto omitido utilizará o valor anteriormente especificado na lista de parâmetros."
      ],
      "params": {
        "x": "Number: coordenada x do quadrado.",
        "y": "Number: coordenada y do quadrado.",
        "s": "Number: tamanho do lado do quadrado.",
        "tl": "Number: (Optional) raio do canto superior esquerdo.",
        "tr": "Number: (Optional) raio do canto superior direito.",
        "br": "Number: (Optional) raio do canto inferior direito.",
        "bl": "Number: (Optional) raio do canto inferior esquerdo."
      }
    },
    "triangle": {
      "description": [
        "Desenha um triângulo na canvas. Um triângulo é um plano criado pela ligação de três pontos. Os primeiros dois argumentos especificam o primeiro ponto, os dois argumentos do meio especificam o segundo ponto e os dois últimos argumentos especificam o terceiro ponto."
      ],
      "params": {
        "x1": "Number: coordenada x do primeiro ponto",
        "y1": "Number: coordenada y do primeiro ponto",
        "x2": "Number: coordenada x do segundo ponto",
        "y2": "Number: coordenada y do segundo ponto",
        "x3": "Number: coordenada x do terceiro ponto",
        "y3": "Number: coordenada y do terceiro ponto"
      }
    },
    "ellipseMode": {
      "description": [
        "Modifica a localização de onde as elipses são desenhadas através da mudança da forma em que <a href=\"#/p5/ellipse\">ellipse()</a>, <a href=\"#/p5/circle\">circle()</a> e <a href=\"#/p5/arc\">arc()</a> são interpretadas. ",
        "O modo padrão é CENTER, em que os dois primeiros parâmetros são interpretados como x e y do centro da geometria, enquanto o terceiro e quarto parâmetros são sua largura e altura. ",
        "ellipseMode(RADIUS) também usa os dois primeiros parâmetros para definir o x e o y do centro da geometria, mas usa o terceiro e o quarto parâmetros para especificar a metade da largura e da altura da geometria. ",
        "ellipseMode(CORNER) interpreta os dois primeiros parâmetros como o canto superior esquerdo da geometria, enquanto o terceiro e o quarto parâmetros são sua largura e altura. ",
        "ellipseMode(CORNERS) interpreta os dois primeiros parâmetros como a localização de um canto da elipse que é utilizada como bounding box, o terceiro e o quarto parâmetros são a localização do canto oposto. ",
        "O parâmetro para este método deve ser escrito em CAPS porque eles são predefinidos como constantes e Javascript é uma linguagem que diferencia maiúsculas de minúsculas (case-sensitive)."
      ],
      "params": {
        "mode": "Constant: ou CENTER, RADIUS, CORNER, ou CORNERS"
      }
    },
    "noSmooth": {
      "description": [
        "Mostra toda a geometria com os contornos serrilhados. Note que <a href=\"#/p5/smooth\">smooth()</a> é ativado por padrão no modo 2D, logo, é necessário chamar <a href=\"#/p5/noSmooth\">noSmooth()</a> para desabilitar a suavização da geometria, imagens e fontes. No modo 3D, <a href=\"#/p5/noSmooth\">noSmooth()</a> está ativado por padrão, logo, é necessário chamar <a href=\"#/p5/smooth\">smooth()</a> se você quiser uma geometria suavizada (antialiased) no seu contorno."
      ]
    },
    "rectMode": {
      "description": [
        "Modifica a localização de onde os retângulos são criados através da mudança da maneira em que os parâmetros <a href=\"#/p5/rect\">rect()</a> são interpretados. ",
        "O modo padrão é CORNER, que interpretada os primeiros dois parâmetros como o canto superior esquerdo da shape, enquanto o terceiro e o quarto parâmetros são sua largura e altura. ",
        "rectMode(CORNERS) interpreta os dois primeiros parâmetros como a localização de um dos cantos e o segundo e terceiro parâmetros como a localização do canto diagonalmente oposto. Note que o retângulo é criado entre as coordenadas, não sendo necessário que o primeiro canto seja o superior esquerdo. ",
        "rectMode(CENTER) interpreta os dois primeiros parâmetros como o ponto central da shape, enquanto o terceiro e o quarto parâmetros são sua largura e altura. ",
        "rectMode(RADIUS) também usa os dois primeiros parâmetros como o ponto central da shape, mas usa o terceiro e quarto parâmetros para especificar metade da largura e da altura. ",
        "O parâmetro para este método deve ser escrito em CAPS porque eles são predefinidos como constantes e Javascript é uma linguagem que diferencia maiúsculas de minúsculas (case-sensitive)."
      ],
      "params": {
        "mode": "Constant: ou CORNER, CORNERS, CENTER, ou RADIUS"
      }
    },
    "smooth": {
      "description": [
        "Desenha todas as geometrias com as boardas suavizadas (antialiased). <a href=\"#/p5/smooth\">smooth()</a> também melhorará a qualidade de uma imagem redimensionada. Leve em consideração que <a href=\"#/p5/smooth\">smooth()</a> está ativado por padrão no modo 2D; <a href=\"#/p5/noSmooth\">noSmooth()</a> também pode ser utilizado para desabilitar a suavização de uma geometria, imagem ou fonte. No modo 3D <a href=\"#/p5/noSmooth\">noSmooth()</a> está ligado por padrão, logo, é necessário usar <a href=\"#/p5/smooth\">smooth()</a> se você quiser suavizar (antialiased) as bordas da geometria."
      ]
    },
    "strokeCap": {
      "description": [
        "Define o estilo de renderização das pontas das linhas. Essas pontas são ou arredondadas, quadradas ou extendidas, e são especificadas com estes parâmetros: ROUND, SQUARE e PROJECT. O padrão é ROUND. ",
        "O parâmetro para este método deve ser escrito em CAPS porque eles são predefinidos como constantes e Javascript é uma linguagem que diferencia maiúsculas de minúsculas (case-sensitive)."
      ],
      "params": {
        "cap": "Constant: ou ROUND, SQUARE ou PROJECT"
      }
    },
    "strokeJoin": {
      "description": [
        "Define o estilo das conexões entre os segmentos de linha. Estas conexões são retas, chanfradas ou arredondadas, e são especificadas com estes parâmetros: MITER, BEVEL and ROUND. The default joint is MITER. ",
        "O parâmetro para este método deve ser escrito em CAPS porque eles são predefinidos como constantes e Javascript é uma linguagem que diferencia maiúsculas de minúsculas (case-sensitive)."
      ],
      "params": {
        "join": "Constant: ou MITER, BEVEL ou ROUND"
      }
    },
    "strokeWeight": {
      "description": [
        "Define a largura do contorno utilizado para as linhas, pontos e bordas de geometrias. Todas as larguras são definidas em pixels."
      ],
      "params": {
        "weight": "Number: a largura do contorno (em pixels)"
      }
    },
    "bezier": {
      "description": [
        "Cria uma curva de Bezier cúbico. Estas curvas são definidas por uma série de pontos âncora e de controle. Os dois primeiros parâmetros especificam o primeiro ponto âncora e os dois últimos parâmetros definem o outro ponto âncora, que se tornam o primeiro e último pontos da cuva. Os parâmetros do meio especificam dois pontos de controle que definem a forma da curva. Os pontos de controle \"puxam\" a curva em direção a eles. ",
        "As curvas Bezier foram desenvolvidas pelo engenheiro automotivo francês Pierre Bezier e são utilizadas geralmente em gráficos de computador para definir curvas suaves. Veja também <a href=\"#/p5/curve\">curve()</a>."
      ],
      "params": {
        "x1": "Number: coordenada x para o primeiro ponto âncora",
        "y1": "Number: coordenada y para o primeiro ponto âncora",
        "x2": "Number: coordenada x para o primeiro ponto de controle",
        "y2": "Number: coordenada y para o primeiro ponto de controle",
        "x3": "Number: coordenada x para o segundo ponto de controle",
        "y3": "Number: coordenada y para o segundo ponto de controle",
        "x4": "Number: coordenada x para o segundo ponto âncora",
        "y4": "Number: coordenada y para o segundo ponto âncora",
        "z1": "Number: coordenada z para o primeiro ponto âncora",
        "z2": "Number: coordenada z para o primeiro ponto de controle",
        "z3": "Number: coordenada z para o segundo ponto de controle",
        "z4": "Number: coordenada z para o segundo ponto âncora"
      }
    },
    "bezierDetail": {
      "description": [
        "Define a resolução em que a curva Bezier é mostrada. O valor padrão é 20. ",
        "Leve em consideração que essa função só é útil quando estiver renderizando em WEBGL, a canvas padrão não usa essa informação."
      ],
      "params": {
        "detail": "Number: resolução das curvas"
      }
    },
    "bezierPoint": {
      "description": [
        "Dadas as coordenadas x ou y dos pontos de controle e dos pontos âncora de uma curva bezier, esse parâmetro avalia as coordenadas bezier na posição t. Os parâmetros a e d são as coordenadas x ou y do primeiro e do último pontos na curva, enquanto b e c são os pontos de controle. O último parâmetro é a posição do ponto resultante, representado por um valor entre 0 e 1. Isso pode ser feito primeiramente com as coordenadas x e em uma segunda vez com as coordenadas y para identificar a posição de uma curva bezier em t."
      ],
      "returns": "Number: o valor de Bezier na posição t",
      "params": {
        "a": "Number: coordenada do primeiro ponto da curva",
        "b": "Number: coordenada do primeiro ponto de controle",
        "c": "Number: coordenada do segundo ponto de controle",
        "d": "Number: coordenada do segundo ponto da curva",
        "t": "Number: valor entre 0 e 1"
      }
    },
    "bezierTangent": {
      "description": [
        "Avalia a tangente ao Bezier na posição t para os pontos a, b, c, d. Os parâmetros a e d são o primeiro e último pontos na curva, b e c são os pontos de controle. O último parâmetro t varia entre 0 e 1."
      ],
      "returns": "Number: a tangente na posição t",
      "params": {
        "a": "Number: coordenada do primeiro ponto da curva",
        "b": "Number: coordenada do primeiro ponto de controle",
        "c": "Number: coordenada do segundo ponto de controle",
        "d": "Number: coordenada do segundo ponto da curva",
        "t": "Number: valor entre 0 e 1"
      }
    },
    "curve": {
      "description": [
        "Cria uma linha curva entre dois pontos, dada pelos quatro parâmetros do meio. Os dois primeiros parâmetros são um ponto de controle, como se a curva viesse desse ponto mesmo ele não aparecendo na tela. Os dois últimos parâmetros similarmente descrevem o outro ponto de controle.",
        "Curvas mais longas podem ser criadas usando uma série de funções <a href=\"#/p5/curve\">curve()</a> em conjunto ou usando <a href=\"#/p5/curveVertex\">curveVertex()</a>. Uma função adicionada chamada <a href=\"#/p5/curveTightness\">curveTightness()</a> faz o controle da qualidade visual da curva. A função <a href=\"#/p5/curve\">curve()</a> é uma implementação de splines Catmull-Rom."
      ],
      "params": {
        "x1": "Number: coordenada x do ponto de controle inicial",
        "y1": "Number: coordenada y do ponto de controle inicial",
        "x2": "Number: coordenada x do primeiro ponto",
        "y2": "Number: coordenada y do primeiro ponto",
        "x3": "Number: coordenada x do segundo ponto",
        "y3": "Number: coordenada y do segundo ponto",
        "x4": "Number: coordenada x do ponto de controle final",
        "y4": "Number: coordenada y do ponto de controle final",
        "z1": "Number: coordenada z do ponto de controle inicial",
        "z2": "Number: coordenada z do primeiro ponto",
        "z3": "Number: coordenada z do segundo ponto",
        "z4": "Number: coordenada z do ponto de controle final"
      }
    },
    "curveDetail": {
      "description": [
        "Define a resolução em que a curva será mostrada. O valor padrão é 20, enquanto o valor mínimo é 3. ",
        "Esta função só é útil quando estiver usando o WEBGL renderer, já que o renderer padrão não usa essa informação."
      ],
      "params": {
        "resolution": "Number: resolução das curvas"
      }
    },
    "curveTightness": {
      "description": [
        "Modifica a qualidade das formas criadas com <a href=\"#/p5/curve\">curve()</a> e <a href=\"#/p5/curveVertex\">curveVertex()</a>. O parâmetro tightness determina como a curva se encaixa nos pontos de vértice. O valor padrão é 0.0 (esse valor define as curvas como splines Catmull-Rom) e o valor 1.0 conecta todos os pontos com linhas retas. Valores no intervalo entre -5.0 e 5.0 vão deformar as curvas mas ainda deixaram elas reconhecíveis, ao aumentar a magnitude dos valores eles continuarão a deformar."
      ],
      "params": {
        "amount": "Number: quantidade de deformação dos vértices originais"
      }
    },
    "curvePoint": {
      "description": [
        "Avalia a curva na posição t para os pontos a, b, c, d. O parâmetro t varia entre 0 e 1, a e d são os pontos de controle da curva, b e c são os pontos de início e de final da curva. Isso pode ser feito primeiramente com as coordenadas x e em uma segunda vez com as coordenadas y para identificar a posição de uma curva bezier em t."
      ],
      "returns": "Number: valor bezier na posição t",
      "params": {
        "a": "Number: coordenada do primeiro ponto de controle da curva",
        "b": "Number: coordenada do primeiro ponto",
        "c": "Number: coordenada do segundo ponto",
        "d": "Number: coordenada do segundo ponto de controle da curva",
        "t": "Number: valor entre 0 e 1"
      }
    },
    "curveTangent": {
      "description": [
        "Avalia a curva na posição t para os pontos a, b, c, d. O parâmetro t varia entre 0 e 1, a e d são os pontos da curva, b e c são os pontos de controle."
      ],
      "returns": "Number: a tangente na posição t",
      "params": {
        "a": "Number: coordenada do primeiro ponto de controle",
        "b": "Number: coordenada do primeiro ponto na curva",
        "c": "Number: coordenada do segundo ponto na curva",
        "d": "Number: coordenada do segundo ponto de controle",
        "t": "Number: valor entre 0 e 1"
      }
    },
    "beginContour": {
      "description": [
        "Use as funções <a href=\"#/p5/beginContour\">beginContour()</a> e <a href=\"#/p5/endContour\">endContour()</a> para criar formas negativas dentro de outras formas, como o a do centro da letra 'O'. <a href=\"#/p5/beginContour\">beginContour()</a> inicia a gravação de vértices para a forma e <a href=\"#/p5/endContour\">endContour()</a> termina a gravação. O vértice que define a forma negativa deve \"girar\" na direção oposta da forma exterior. Primeiro desenhar os vértices para o exterior no sentido horário, e então, para as formas internas, desenhar os vértices no sentido anti-horário. ",
        "Estas funções só podem ser utilizadas com o par <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> e transformações como <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, e <a href=\"#/p5/scale\">scale()</a> não funciona com o par <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a>. Também não é possível usar outras formas, como a <a href=\"#/p5/ellipse\">ellipse()</a> ou <a href=\"#/p5/rect\">rect()</a>."
      ]
    },
    "beginShape": {
      "description": [
        "Usando as funções <a href=\"#/p5/beginShape\">beginShape()</a> e <a href=\"#/p5/endShape\">endShape()</a> permitem criar formas mais complexas. <a href=\"#/p5/beginShape\">beginShape()</a> inicia a gravação de vértices para a forma e <a href=\"#/p5/endShape\">endShape()</a> termina a gravação. O valor do tipo de parâmetro define que tipos de formas criar dos vértices providenciados. Se o modo não for especificado, a forma pode ser qualquer polígono irregular. ",
        "Os parâmetros disponíveis para <a href=\"#/p5/beginShape\">beginShape()</a> são POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, and TESS (apenas em WebGL). Após chamar a função <a href=\"#/p5/beginShape\">beginShape()</a>, uma série de comandos <a href=\"#/p5/vertex\">vertex()</a> devem ser providenciados. Para parar o desenho da forma, chame <a href=\"#/p5/endShape\">endShape()</a>. Cada forma será delineada com a cor de contorno vigente e preenchida com a cor de preenchimento vigente. ",
        "Transformações como <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, e <a href=\"#/p5/scale\">scale()</a> não funcionam com <a href=\"#/p5/beginShape\">beginShape()</a>. Também não é possível usar outras formas, como <a href=\"#/p5/ellipse\">ellipse()</a> ou <a href=\"#/p5/rect\">rect()</a> dentro de <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "kind": "Constante: (Opcional) either POINTS, LINES, TRIANGLES, TRIANGLE_FAN  TRIANGLE_STRIP, QUADS, QUAD_STRIP ou TESS"
      }
    },
    "bezierVertex": {
      "description": [
        "Especifica as coordenadas dos vértices para as curvas Bezier. Cada chamada do bezierVertex() define a posição de dois pontos de controle e um ponto âncora de uma curva Bezier, adicionando um novo segmento a uma linha ou forma. Para o modo WebGL, bezierVertex() pode ser usado tanto em 2D quando em 3D. O modo 2D espera 6 parâmetros, , enquanto o modo 3D espera 9 parâmetros (incluindo as coordenadas do eixo z). ",
        "Na primeira vez que bezierVertex() for usada com <a href=\"#/p5/beginShape\">beginShape()</a>, ela deve ser precedida com um <a href=\"#/p5/vertex\">vertex()</a> para definir o primeiro ponto âncora. Essa função pode ser usada entre <a href=\"#/p5/beginShape\">beginShape()</a> e <a href=\"#/p5/endShape\">endShape()</a> mas só quando não houver os parâmetros MODE ou POINTS especificados para <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "x2": "Number: coordenada x para o primeiro ponto de controle",
        "y2": "Number: coordenada y para o primeiro ponto de controle",
        "x3": "Number: coordenada x para o segundo ponto de controle",
        "y3": "Number: coordenada y para o segundo ponto de controle",
        "x4": "Number: coordenada x para o ponto âncora",
        "y4": "Number: coordenada y para o ponto âncora",
        "z2": "Number: coordenada z para o primeiro ponto de controle (para WebGL)",
        "z3": "Number: coordenada z para o segundo ponto de controle (para WebGL)",
        "z4": "Number: coordenada z para o ponto âncora (para WebGL)"
      }
    },
    "curveVertex": {
      "description": [
        "Especifica as coordenadas do vértices para as curvas. This function may only be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there is no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>. For WebGL mode curveVertex() can be used in 2D as well as 3D mode. 2D mode expects 2 parameters, while 3D mode expects 3 parameters. ",
        "The first and last points in a series of curveVertex() lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with curveVertex() will draw the curve between the second, third, and fourth points. The curveVertex() function is an implementation of Catmull-Rom splines."
      ],
      "params": {
        "x": "Number: coordenada x do vértice",
        "y": "Number: coordenada y do vértice",
        "z": "Number: (Optional) coordenada z do vértice (for WebGL mode)"
      }
    },
    "endContour": {
      "description": [
        "Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative shapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a> begins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording. The vertices that define a negative shape must \"wind\" in the opposite direction from the exterior shape. First draw vertices for the exterior clockwise order, then for internal shapes, draw vertices shape in counter-clockwise. ",
        "These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within."
      ]
    },
    "endShape": {
      "description": [
        "The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be called after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endShape()</a> is called, all of image data defined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end)."
      ],
      "params": {
        "mode": "Constant: (Optional) use CLOSE to close the shape"
      }
    },
    "quadraticVertex": {
      "description": [
        "Specifies vertex coordinates for quadratic Bezier curves. Each call to quadraticVertex() defines the position of one control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point. For WebGL mode quadraticVertex() can be used in 2D as well as 3D mode. 2D mode expects 4 parameters, while 3D mode expects 6 parameters (including z coordinates). ",
        "This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there is no MODE or POINTS parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "cx": "Number: x-coordinate for the control point",
        "cy": "Number: y-coordinate for the control point",
        "x3": "Number: x-coordinate para o ponto âncora",
        "y3": "Number: y-coordinate para o ponto âncora",
        "cz": "Number: z-coordinate for the control point (for WebGL mode)",
        "z3": "Number: z-coordinate para o ponto âncora (for WebGL mode)"
      }
    },
    "vertex": {
      "description": [
        "All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a> is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions."
      ],
      "params": {
        "x": "Number: x-coordinate do vértice",
        "y": "Number: y-coordinate do vértice",
        "z": "Number: z-coordinate do vértice",
        "u": "Number: (Optional) the vertex's texture u-coordinate",
        "v": "Number: (Optional) the vertex's texture v-coordinate"
      }
    },
    "VERSION": {
      "description": [
        "Version of this p5.js."
      ]
    },
    "P2D": {
      "description": [
        "The default, two-dimensional renderer."
      ]
    },
    "WEBGL": {
      "description": [
        "One of the two render modes in p5.js: P2D (default renderer) and WEBGL Enables 3D render by introducing the third dimension: Z"
      ]
    },
    "ARROW": {},
    "CROSS": {},
    "HAND": {},
    "MOVE": {},
    "TEXT": {},
    "WAIT": {},
    "HALF_PI": {
      "description": [
        "HALF_PI é uma constante matemática com o valor 1.57079632679489661923. É a metade da razão entre a circunferência de um círculo e seu diâmetro. É útil em combinação com as funções trigonométricas <a href=\"#/p5/sin\">sin()</a> e <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "PI": {
      "description": [
        "PI é uma constante matemática com o valor 3.14159265358979323846. É a razão entre a circunferência de um círculo e seu diâmetro. É útil em combinação com as funções trigonométricas <a href=\"#/p5/sin\">sin()</a> e <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "QUARTER_PI": {
      "description": [
        "QUARTER_PI é uma constante matemática com o valor 0.7853982. É um quarto da razão entre a circunferência de um círculo e seu diâmetro. É útil em combinação com as funções trigonométricas <a href=\"#/p5/sin\">sin()</a> e <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "TAU": {
      "description": [
        "TAU é uma abreviatura para TWO_PI, que é uma constante matemática com o valor 6.28318530717958647693. Equivale duas vezes a razão entre a circunferência de um círculo e seu diâmetro. É útil em combinação com as funções trigonométricas <a href=\"#/p5/sin\">sin()</a> e <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "TWO_PI": {
      "description": [
        "TWO_PI é uma constante matemática com o valor 6.28318530717958647693. Equivale duas vezes a razão entre a circunferência de um círculo e seu diâmetro. É útil em combinação com as funções trigonométricas <a href=\"#/p5/sin\">sin()</a> e <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "DEGREES": {
      "description": [
        "Constante a ser usada com a função <a href=\"#/p5/angleMode\">angleMode()</a> , para definir o modo em que p5.js interpreta e calcula ângulos (GRAUS ou RADIANOS)."
      ]
    },
    "RADIANS": {
      "description": [
        "Constante a ser usada com a função <a href=\"#/p5/angleMode\">angleMode()</a> , para definir o modo em que p5.js interpreta e calcula ângulos (GRAUS ou RADIANOS)."
      ]
    },
    "CORNER": {},
    "CORNERS": {},
    "RADIUS": {},
    "RIGHT": {},
    "LEFT": {},
    "CENTER": {},
    "TOP": {},
    "BOTTOM": {},
    "BASELINE": {},
    "POINTS": {},
    "LINES": {},
    "LINE_STRIP": {},
    "LINE_LOOP": {},
    "TRIANGLES": {},
    "TRIANGLE_FAN": {},
    "TRIANGLE_STRIP": {},
    "QUADS": {},
    "QUAD_STRIP": {},
    "TESS": {},
    "CLOSE": {},
    "OPEN": {},
    "CHORD": {},
    "PIE": {},
    "PROJECT": {},
    "SQUARE": {},
    "ROUND": {},
    "BEVEL": {},
    "MITER": {},
    "RGB": {},
    "HSB": {
      "description": [
        "HSB (hue, saturation, brightness) is a type of color model. You can learn more about it at <a href=\"https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html\">HSB</a>."
      ]
    },
    "HSL": {},
    "AUTO": {
      "description": [
        "AUTO allows us to automatically set the width or height of an element (but not both), based on the current height and width of the element. Only one parameter can be passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time."
      ]
    },
    "ALT": {},
    "BACKSPACE": {},
    "CONTROL": {},
    "DELETE": {},
    "DOWN_ARROW": {},
    "ENTER": {},
    "ESCAPE": {},
    "LEFT_ARROW": {},
    "OPTION": {},
    "RETURN": {},
    "RIGHT_ARROW": {},
    "SHIFT": {},
    "TAB": {},
    "UP_ARROW": {},
    "BLEND": {},
    "REMOVE": {},
    "ADD": {},
    "DARKEST": {},
    "LIGHTEST": {},
    "DIFFERENCE": {},
    "SUBTRACT": {},
    "EXCLUSION": {},
    "MULTIPLY": {},
    "SCREEN": {},
    "REPLACE": {},
    "OVERLAY": {},
    "HARD_LIGHT": {},
    "SOFT_LIGHT": {},
    "DODGE": {},
    "BURN": {},
    "THRESHOLD": {},
    "GRAY": {},
    "OPAQUE": {},
    "INVERT": {},
    "POSTERIZE": {},
    "DILATE": {},
    "ERODE": {},
    "BLUR": {},
    "NORMAL": {},
    "ITALIC": {},
    "BOLD": {},
    "BOLDITALIC": {},
    "LINEAR": {},
    "QUADRATIC": {},
    "BEZIER": {},
    "CURVE": {},
    "STROKE": {},
    "FILL": {},
    "TEXTURE": {},
    "IMMEDIATE": {},
    "IMAGE": {},
    "NEAREST": {},
    "REPEAT": {},
    "CLAMP": {},
    "MIRROR": {},
    "LANDSCAPE": {},
    "PORTRAIT": {},
    "GRID": {},
    "AXES": {},
    "LABEL": {},
    "FALLBACK": {},
    "print": {
      "description": [
        "A função <a href=\"#/p5/print\">print()</a> escreve uma mensagem no console do browser. Essa função é útil para que possamos observar os dados produzidos enquanto o programa está em execução — por exemplo, para verificar o valor de uma variável em um ponto específico do código. A função cria uma nova linha de texto a cada vez que é chamada. O argumento da função podem ser quaisquer valores válidos da linguagem, como cadeias de caracteres (strings / texto), números, variáveis, booleanos, objetos, arrays, expressões, etc.",
        "Para imprimir valores de tipos diferentes, podemos separá-los por vírgulas (,). Para juntar uma ou mais strings à variável que queremos verificar, como no exemplo acima, é possível utilizar o operador de adição (+) — que neste caso transforma o número em String. Por exemplo, podemos escrever <code>print(\"O valor de x é \" + x + \", e de y é \" + y)</code>.",
        "Também é possível utilizar <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\">template strings</a>, que é uma forma de escrever strings que permite embutir outros valores. Para tal, utilizamos acentos graves (``). Os caracteres são colocados entre os acentos, e quaisquer variáveis, expressões, ou outros valores que não strings são colocados após um cifrão, entre chaves (${}). O exemplo anterior fica: <code>print(`O valor de x é ${x}, e de y é ${y}`)</code>",
        "Note que chamar a função print() sem nenhum argumento invoca a função window.print(), que abre a janela de impressão do browser. Para escrever uma linha em branco no console, você pode escrever print(\"\\n\")."
      ],
      "params": {
        "contents": "Qualquer: qualquer sequência de números, Strings, objetos, booleanos ou array para escrever no console"
      }
    },
    "frameCount": {
      "description": [
        "A variável global <a href=\"#/p5/frameCount\">frameCount</a>, embutida na biblioteca p5.js, contém o número de quadros (frames) que foram mostrados desde que o programa iniciou. Dentro de <a href=\"#/p5/setup\">setup()</a> o valor é 0, depois da primeira iteração de <a href=\"#/p5/draw\">draw()</a> é 1, etc."
      ]
    },
    "deltaTime": {
      "description": [
        "A variável global <a href=\"#/p5/deltaTime\">deltaTime</a>, embutida na biblioteca p5.js, contém a diferença de tempo entre o início do quadro (frame) anterior e o início do quadro atual em milissegundos.",
        "Essa variável é útil para criar animações que dependem do tempo, ou cálculos de física que devam permanecem constantes mesmo que haja variação na taxa de quadros."
      ]
    },
    "focused": {
      "description": [
        "Confirma que a janela do sketch está em foco, ou seja, que ela irá aceitar interação de mouse ou teclado. Essa variável retorna <code>true</code> (verdadeiro) caso a janela esteja em foco, e <code>false</code> (falso) caso não esteja."
      ]
    },
    "cursor": {
      "description": [
        "Configura o cursor como uma imagem ou símbolo específico, ou o torna visível caso não esteja. Se você estiver buscando utilizar uma imagem como cursor, o tamanho recomendado é 16x16 ou 32x32 pixels. Os valores para os parâmetros x e y devem ser menores do que o tamanho da imagem."
      ],
      "params": {
        "type": "String|Constante: embutidas: ARROW, CROSS, HAND, MOVE, TEXT ou WAIT; propriedades nativas do CSS: 'grab', 'progress', 'cell', etc.; externas: endereço da imagem do cursor (extensões permitidas: .cur, .gif, .jpg, .jpeg, .png). Para mais informações em cursores nativos do CSS e URLs visite <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a>.",
        "x": "Número (opcional): o ponto ativo do cursor — o ponto em que ele clica — em relação ao eixo horizontal (precisa ser menor do que 32, e menor do que a imagem)",
        "y": "Número (opcional): o ponto ativo do cursor — o ponto em que ele clica — em relação ao eixo vertical (precisa ser menor do que 32, e menor do que a imagem)"
      }
    },
    "frameRate": {
      "description": [
        "Especifica a taxa de quadros, ou seja, o número de quadros (frames) a serem mostrados a cada segundo. Por exemplo, chamar a função <code>frameRate(30)</code> fará com que a canvas tente atualizar-se 30 vezes por segundo. Caso o processador não seja rápido o suficiente para manter a frequência especificada, a taxa de quadros não será atingida. É recomendado configurar a taxa de quadro dentro de <a href=\"#/p5/setup\">setup()</a>. A taxa de quadro padrão é baseada na taxa da tela (também conhecida como taxa de atualização), que na maioria dos computadores corresponde a 60 quadros por segundo (fps). Uma taxa de quadros igual ou superior a 24 quadros por segundo (valor típico de filmes) é suficiente para animações fluidas. Isto é o mesmo que <code>setFrameRate(valor)</code>",
        "Chamar <a href=\"#/p5/frameRate\">frameRate()</a> sem nenhum argumento, ou com argumentos que não sejam números positivos, retorna a taxa de quadros atual. A função draw() precisa rodar ao menos uma vez antes de retornar um valor. Isto é o mesmo que <a href=\"#/p5/getFrameRate\">getFrameRate()</a>."
      ],
      "params": {
        "fps": "Número: número de quadros a serem mostrados em um segundo"
      }
    },
    "noCursor": {
      "description": [
        "Esconde o cursor."
      ]
    },
    "displayWidth": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a largura da tela de acordo com a densidade de pixels (<a href=\"#/p5/pixelDensity\">pixelDensity</a>) padrão. Isto é utilizado para executar o programa em tela cheia independente do tamanho da tela. Para obter a largura real da tela, multiplique este número pela <a href=\"#/p5/pixelDensity\">pixelDensity</a>."
      ]
    },
    "displayHeight": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a altura da tela de acordo com a densidade de pixels (<a href=\"#/p5/pixelDensity\">pixelDensity</a>) padrão. Isto é utilizado para executar o programa em tela cheia independente do tamanho da tela. Para obter a altura real da tela, multiplique este número pela <a href=\"#/p5/pixelDensity\">pixelDensity</a>."
      ]
    },
    "windowWidth": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a largura interna da janela. É o mesmo que a propriedade window.innerWidth."
      ]
    },
    "windowHeight": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a altura interna da janela. É o mesmo que a propriedade window.innerHeight."
      ]
    },
    "windowResized": {
      "description": [
        "A função <a href=\"#/p5/windowResized\">windowResized()</a> é chamada a cada vez que a janela do browser muda de tamanho. É um bom lugar para redimensionar a canvas ou fazer quaisquer outros ajustes para acomodar o novo tamanho da janela."
      ],
      "params": {
        "event": "Objeto (opcional): argumentos do evento de callback."
      }
    },
    "width": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a largura da canvas. Este valor é definido pelo primeiro parâmetro da função <a href=\"#/p5/createCanvas\">createCanvas()</a>. Por exemplo, a chamada de função <code>createCanvas(320, 240)</code> atribui à variável <code>width</code> o valor 320. Se a função <a href=\"#/p5/createCanvas\">createCanvas()</a> não for chamada no programa, o valor padrão para a largura é 100."
      ]
    },
    "height": {
      "description": [
        "Variável global embutida na biblioteca p5.js que armazena a altura da canvas. Este valor é definido pelo segundo parâmetro da função <a href=\"#/p5/createCanvas\">createCanvas()</a>. Por exemplo, a chamada de função <code>createCanvas(320, 240)</code> atribui à variável <code>height</code> o valor 240. Se a função <a href=\"#/p5/createCanvas\">createCanvas()</a> não for chamada no programa, o valor padrão para a altura é 100."
      ]
    },
    "fullscreen": {
      "description": [
        "Se um argumento for passado, configura o sketch para telaa cheia baseado no valor deste argument. Caso contrário, retorna se o sketch está em tela cheia ou não. Note que, dado as restrições dos browsers, só é possível chamar essa função a partir de interação direta como, por exemplo, o clique do mouse."
      ],
      "returns": "Booleano: se o sketch está em tela cheia (true) ou não (false)",
      "params": {
        "val": "Boolean (opcional): se o sketch deve rodar em tela cheia (true) ou não (false)"
      }
    },
    "pixelDensity": {
      "description": [
        "Define a escala dos pixels para telas de alta densidade. Por padrão, a densidade de pixels é igual a densidade da tela — chame <code>pixelDensity(1)</code> para que isso não aconteça. Chamar <a href=\"#/p5/pixelDensity\">pixelDensity()</a> sem argumentos retorna a densidade de pixels atual do sketch."
      ],
      "params": {
        "val": "Número: se ou quanto o sketch deve ser redimensionado"
      }
    },
    "displayDensity": {
      "description": [
        "Retorna a densidade de pixels da tela em que o sketch está sendo executado."
      ],
      "returns": "Número: densidade de pixels da tela"
    },
    "getURL": {
      "description": [
        "Retorna a URL atual.",
        "Nota: ao utilizar o editor da p5, essa função retornará um objeto vazio, pois o objeto está embutido em uma iFrame. Ela funcionará corretamente se você visualizar o sketch utilizando o modo de apresentação, ou URLs compartilháveis."
      ],
      "returns": "String: URL"
    },
    "getURLPath": {
      "description": [
        "Retorna o caminho da URL atual como uma array.",
        "Nota: ao utilizar o editor da p5, essa função retornará um objeto vazio, pois o objeto está embutido em uma iFrame. Ela funcionará corretamente se você visualizar o sketch utilizando o modo de apresentação, ou URLs compartilháveis."
      ],
      "returns": "String[]: os componentes do caminho da URL"
    },
    "getURLParams": {
      "description": [
        "Retorna os parâmetros da URL atual como um objeto.",
        "Nota: ao utilizar o editor da p5, essa função retornará um objeto vazio, pois o objeto está embutido em uma iFrame. Ela funcionará corretamente se você visualizar o sketch utilizando o modo de apresentação, ou URLs compartilháveis."
      ],
      "returns": "Objeto: parâmetros da URL"
    },
    "preload": {
      "description": [
        "A função <a href=\"#/p5/preload\">preload()</a> é usada para lidar com o carregamento síncrono de arquivos externos de forma bloqueadora (blocking) e deve ser chamada diretamente antes de <a href=\"#/p5/setup\">setup()</a>. Quando há um bloco de <a href=\"#/p5/preload\">preload()</a> o restante do código esperará até que tudo nele seja concluído antes de ser executado. Observe que apenas chamadas de carregamento (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>, <a href=\"#/p5/loadStrings\">loadStrings</a> , etc.) devem estar dentro deste bloco, todas as outras inicializações devem acontecer no <a href=\"#/p5/setup\">setup()</a>. Os métodos de carregamento quando chamados fora de <a href=\"#/p5/preload\">preload()</a> ocorrem de forma assíncrona não bloqueadora (non-blocking), podendo haver nesse caso um parâmetro de <a href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#callbacks\">callback</a>. Mais informações sobre chamadas assíncronas e carregamento de arquivos <a href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#asynchronous-calls-and-file-loading\">aqui</a>.",
        "Por definição o texto \"loading...\" será exibido durante o carregamento dos arquivos. Para fazer sua própria página de carregamento, inclua um elemento HTML com <code>id=\"p5_loading\"</code> em sua página. Veja mais informações sobre como configurar sua tela de carregamento <a href=\"<a href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#loading-screen\">aqui</a>. "
      ]
    },
    "setup": {
      "description": [
        "A função <a href=\"#/p5/setup\">setup()</a> é chaada quando o programa começa. É utilizada para definir propriedades do ambiente como o tamanho da canvas e cor do a cor de fundo da canvas. Também pode conter chamadas de carregamento de mídias (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>, <a href=\"#/p5/loadStrings\">loadStrings</a>, etc.). Só pode haver um bloco de <a href=\"#/p5/setup\">setup()</a> por programa, não podendo ser chamado novamente após a execução inicial.",
        "Nota: váriaveis declaradas dentro de <a href=\"#/p5/setup\">setup()</a> não são acessíveis em outras funções, incluindo <a href=\"#/p5/draw\">draw()</a>."
      ]
    },
    "draw": {
      "description": [
        "A função <a href=\"#/p5/draw\">draw()</a>, geralmente chamada logo após o <a href=\"#/p5/setup\">setup()</a>, executa continuamente as linhas de código contidas dentro do bloco até que o programa seja interrompido. Atenção, <a href=\"#/p5/draw\">draw()</a> é chamada automaticamente e não deve ser chamada explicitamente. ",
        "Esta função pode ser controlada por <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. Para interromper a execução do código dentro de <a href=\"#/p5/draw\">draw()</a> deve ser utilizada a função <a href=\"#/p5/noLoop\">noLoop()</a>. Importante observar que se a função <a href=\"#/p5/noLoop\">noLoop()</a> for chamada dentro do bloco <a href=\"#/p5/setup\">setup()</a>, a função <a href=\"#/p5/draw\">draw()</a> será executada uma vez antes de ser interrompida. Com a execução de parada <a href=\"#/p5/draw\">draw()</a>, a função <a href=\"#/p5/redraw\">redraw()</a> faz com que o código dentro de <a href=\"#/p5/draw\">draw()</a> seja executado uma única vez. Já a função <a href=\"#/p5/loop\">loop()</a> fará com que o código volte a ser executado continuamente.",
        "A função <a href=\"#/p5/frameRate\">frameRate()</a> especifica a taxa de quadros por segundo, alterando o numero de vezes que a função <a href=\"#/p5/draw\">draw()</a> será executada por segundo. Por definição o valor do <a href=\"#/p5/frameRate\">frameRate()</a> é baseada na taxa da tela (também conhecida como taxa de atualização), que na maioria dos computadores corresponde a 60 quadros por segundo (fps).",
        "Atenção, só pode haver um bloco de <a href=\"#/p5/draw\">draw()</a> por sketch. Nâo é obrigatório que exista o bloco <a href=\"#/p5/draw\">draw()</a> no sketch, no entando, se você deseja que seu código seja executado continuamente ou se você deseja acionar eventos como <a href=\"#/p5/mousePressed\">mousePressed()</a>, é recomendado usar a função <a href=\"#/p5/draw\">draw()</a>. Por vezes poderá haver um chamada vazia de <a href=\"#/p5/draw\">draw()</a> em seu sketch, como mostrado no exemplo acima. ",
        "É importante lembrar que o sistema de coordenadas é resetado no início de cada chamada de <a href=\"#/p5/draw\">draw()</a>. Por isso, se alguma transformação for realizada dentro de <a href=\"#/p5/draw\">draw()</a> (ex: <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/translate\">translate()</a>), seus efeitos serão desfeitos na nova chamada e as transformações não serão acumuladas ao longo da execução do programa. Já os estilos aplicados (ex: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, etc) permanecem na nova chamada."
      ]
    },
    "remove": {
      "description": [
        "Remove o sketch feito com P5.js completamente. Esta função remove todos os elementos criados com P5.js, inclusive a Canvas. Também para a execução de <a href=\"#/p5/draw\">draw()</a> e desvincula todas as propriedades e métodos vinculados ao objeto window no escopo global. A função deixa uma nova variável <code>p5</code> caso você queira criar um novo sketch com p5.js, caso contrário você pode configurar <code> p5 = null </code> para apagar a variável. Embora todas as funções, variáveis ​​e objetos criados pela biblioteca p5 sejam removidos, quaisquer outras variáveis ​​globais criadas por seu código permanecerão."
      ]
    },
    "disableFriendlyErrors": {
      "description": [
        "Desativa o Sistema de Erro Amigável (em inglês Friendly Errors Sistem ou FES) durante a criação do sketch. Quando você usa o arquivo p5.js não minimizado (no lugar de p5.min.js), há um sistema de erro amigável (FES) que irá avisá-lo, por exemplo, se você inserir argumentos inesperados em uma função. Este sistema de verificação de erros pode reduzir significativamente a velocidade do seu código (até ~ 10x em alguns casos), por isso desativar o FES pode melhorar o desempenho quando for preciso. Veja mais informaçãos sobre a desabilitação do FES <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'> aqui</a>."
      ]
    },
    "let": {
      "description": [
        "Cria e nomeia uma nova variável. Uma variável é um contêiner para um valor.",
        "Variáveis que são declaradas com <a href=\"#/p5/let\">let</a> terão escopo de bloco. Isso significa que a variável só existe dentro do <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> bloco</a> em que foi criada.",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"> entrada MDN</a>: Declara uma variável local de escopo de bloco, opcionalmente inicializando-a com um valor."
      ]
    },
    "const": {
      "description": [
        "Cria e nomeia uma nova constante. Como uma variável criada com <a href=\"#/p5/let\">let</a>, uma constante que é criada com <a href=\"#/p5/const\">const</a> é um contêiner para um valor, no entanto, as constantes não podem ser reatribuídas depois de declaradas. Embora seja digno de nota que, para tipos de dados não primitivos, como objetos e arrays, seus elementos ainda podem ser mutáveis. Portanto, se uma variável é atribuída a um array, você ainda pode adicionar ou remover elementos do array, mas não pode reatribuir outro array a ele. Ainda, ao contrário de <code>let</code>, você não pode declarar variáveis sem valor usando const. ",
        "Constantes têm escopo de bloco. Isso significa que a constante só existe dentro do <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> bloco</a> em que é criada. Uma constante não pode ser declarada novamente dentro de um escopo no qual já existe. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">entrada MDN</a>: Declara uma constante nomeada somente para leitura. As constantes têm escopo de bloco, muito parecido com as variáveis definidas usando a instrução 'let'. O valor de uma constante não pode ser alterado por meio de reatribuição e não pode ser declarado novamente."
      ]
    },
    "===": {
      "description": [
        "O operador de igualdade estrita <a href=\"#/p5/===\">===</a> verifica se dois valores são iguais e do mesmo tipo. ",
        "Uma expressão de comparação sempre avalia como um <a href=\"#/p5/boolean\">booleano</a>. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">entrada MDN</a>: O operador de não identidade retorna true (verdadeiro) se os operandos não são iguais e / ou não são do mesmo tipo. ",
        "Observação: em alguns exemplos na web, você pode ver um sinal de igual duplo <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\">==</a>, usado para comparação. Este é o operador de igualdade não estrita em Javascript. Ele converterá os dois valores que estão sendo comparados ao mesmo tipo antes de compará-los."
      ]
    },
    ">": {
      "description": [
        "O operador maior que <a href=\"#/p5/>\">></a> é avaliado como true (verdadeiro) se o valor à esquerda for maior que o valor à direita. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Mais informações sobre operadores de comparação no MDN.</a>"
      ]
    },
    ">=": {
      "description": [
        "O operador maior que ou igual a <a href=\"#/p5/>=\">>=</a> avalia como true (verdadeiro) se o valor da esquerda for maior ou igual ao valor da direita. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Mais informações sobre operadores de comparação no MDN.</a>"
      ]
    },
    "<": {
      "description": [
        "O operador menor que <a href=\"#/p5/<\"><</a> avalia como true (verdadeiro) se o valor à esquerda for menor que o valor à direita. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Mais informações sobre operadores de comparação no MDN.</a>"
      ]
    },
    "<=": {
      "description": [
        "O operador menor que ou igual a <a href=\"#/p5/<=\"><=</a> avalia como true  (verdadeiro) se o valor esquerdo for menor ou igual ao valor direito. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">Mais informações sobre operadores de comparação no MDN.</a>"
      ]
    },
    "if-else": {
      "description": [
        "A declaração <a href=\"#/p5/if-else\">if-else</a> (se/senão) ajuda a controlar o fluxo do seu código. ",
        "Uma condição é colocada entre parênteses após 'if' (se), quando essa condição é avaliada como <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">verdade</a>, o código entre as chaves seguintes é executado. Alternativamente, quando a condição é avalia como <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsa</a>, o código entre as chaves do bloco 'else' é executado em seu lugar. Escrever um bloco else é opcional. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">entrada MDN</a>: A declaração 'if' executa uma instrução se uma condição especificada for verdadeira. Se a condição for falsa, outra instrução pode ser executada."
      ]
    },
    "function": {
      "description": [
        "Cria e nomeia uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">função</a>. Uma <a href=\"#/p5/function\">função</a> é um conjunto de instruções que executam uma tarefa. ",
        "Opcionalmente, as funções podem ter parâmetros. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parameter\">Parâmetros</a> são variáveis que têm como escopo a função, que podem receber um valor ao chamar a função. Vários parâmetros podem ser dados separados por vírgulas. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">entrada MDN</a>: Declara uma função com os parâmetros especificados."
      ]
    },
    "return": {
      "description": [
        "Especifica o valor a ser retornado por uma função. Para obter mais informações, verifique <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\">a entrada MDN para return</a>."
      ]
    },
    "boolean": {
      "description": [
        "Converte um número ou string em sua representação booleana. Para um número, qualquer valor diferente de zero (positivo ou negativo) é avaliado como true (verdadeiro), enquanto zero é avaliado como false (falso). Para uma string, o valor \"true \" é avaliado como verdadeiro, enquanto qualquer outro valor é avaliado como falso. Quando uma array de números ou valores de string é passada, então uma array de booleanos do mesmo comprimento é retornada."
      ],
      "returns": "Booleano: representação booleana de valor",
      "params": {
        "n": "String|Booleano|Número|Array: valor para analisar"
      }
    },
    "string": {
      "description": [
        "Uma <a href=\"#/p5/string\">string</a> é um dos 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">tipos de dados primitivos</a> em Javascript. Uma string é uma série de caracteres de texto. Em Javascript, um valor de string deve estar entre aspas simples (') ou aspas duplas (\"). ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/string\">entrada MDN</a>: Uma string é uma sequência de caracteres usada para representar texto."
      ]
    },
    "number": {
      "description": [
        "Um <a href=\"#/p5/number\">número</a> é um dos 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">tipos de dados primitivos</a> em Javascript. Um number pode ser um número inteiro ou decimal. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/number\">A entrada MDN para um número</a>"
      ]
    },
    "object": {
      "description": [
        "A partir de um <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">objeto básico de MDN</a>:  Um <a href=\"#/p5/object\">objeto</a> é uma coleção de dados relacionados e/ou funcionalidades (que geralmente consistem em várias variáveis e funções - que são chamadas de propriedades e métodos quando estão dentro de objetos.)"
      ]
    },
    "class": {
      "description": [
        "Cria e nomeia uma <a href=\"#/p5/class\">classe</a> que é um modelo para a criação de <a href=\"#/p5/objects\">objetos</a>. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">entrada MDN</a>: A declaração de classe cria uma nova classe com um determinado nome usando herança baseada em protótipo."
      ]
    },
    "for": {
      "description": [
        "<a href=\"#/p5/for\">for</a> cria um loop que é útil para executar uma seção de código várias vezes. ",
        "Um 'loop for' consiste em três expressões diferentes entre parênteses, todas opcionais. Essas expressões são usadas para controlar o número de vezes que o loop é executado. A primeira expressão é uma instrução usada para definir o estado inicial para o loop. A segunda expressão é uma condição que você gostaria de verificar antes de cada loop. Se esta expressão retornar false (falso), então sairá do loop. A terceira expressão é executada no final de cada loop. Essas expressões são separadas por ; (ponto e vírgula). No caso de uma expressão vazia, apenas um ponto e vírgula é escrito. ",
        "O código dentro do corpo do loop (entre as chaves) é executado entre a avaliação da segunda e da terceira expressão.",
        "Como acontece com qualquer loop, é importante garantir que o loop possa 'sair' ou que a condição de teste acabe sendo avaliada como false (falsa). A condição de teste com um loop <a href=\"#/p5/for\">for</a> é a segunda expressão detalhada acima. Garantir que essa expressão possa eventualmente se tornar falsa garante que seu loop não tente ser executado uma quantidade infinita de vezes, o que pode travar seu navegador. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">entrada MDN</a>: Cria um loop que executa uma instrução especificada até que a condição de teste seja avaliada como falsa. A condição é avaliada após a execução da instrução, resultando na execução da instrução especificada pelo menos uma vez."
      ]
    },
    "while": {
      "description": [
        "<a href=\"#/p5/while\">while</a> (enquanto) cria um loop que é útil para executar uma seção de código várias vezes. ",
        "Com um 'loop while', o código dentro do corpo do loop (entre as chaves) é executado repetidamente até que a condição de teste (dentro dos parênteses) seja avaliada como false (falsa). A condição é testada antes de executar o corpo do código com <a href=\"#/p5/while\">while</a>, então, se a condição for inicialmente falsa, o corpo do loop, ou instrução, nunca serão executados. ",
        "Como acontece com qualquer loop, é importante garantir que o loop possa 'sair' ou que a condição de teste acabe sendo avaliada como falsa. Isso evita que seu loop tente ser executado uma quantidade infinita de vezes, o que pode travar seu navegador. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">entrada MDN</a>: A instrução while cria um loop que executa uma instrução especificada, desde que a condição de teste seja avaliada como true (verdadeira). A condição é avaliada antes de executar a instrução."
      ]
    },
    "createCanvas": {
      "description": [
        "Cria um elemento canvas no documento e define suas dimensões em pixels. Este método deve ser chamado apenas uma vez no início da configuração. Chamar <a href=\"#/p5/createCanvas\">createCanvas</a> mais de uma vez em um sketch resultará em um comportamento muito imprevisível. Se você quiser mais de um canvas de desenho, pode usar o <a href=\"#/p5/createGraphics\">createGraphics</a> (oculto por padrão, mas pode ser mostrado). ",
        "Nota importante: no modo 2D (ou seja, quando <code>p5.Renderer</code> não está definido) a origem (0,0) é posicionada na parte superior esquerda da tela. No modo 3D (ou seja, quando <code>p5.Renderer</code> está definido <code>WEBGL</code>), a origem é posicionada no centro do canvas. Veja <a href=\"https://github.com/processing/p5.js/issues/1545\">esse assunto</a> para mais informações.",
        "As variáveis de sistema largura e altura são definidas pelos parâmetros passados para esta função. Se <a href=\"#/p5/createCanvas\">createCanvas()</a> não for usado, a janela terá um tamanho padrão de 100x100 pixels. ",
        "Para obter mais maneiras de posicionar o canvas, consulte a página wiki <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'> posicionando o canvas</a> ."
      ],
      "returns": "p5.Renderer: ",
      "params": {
        "w": "Número: largura do canvas",
        "h": "Número: altura do canvas",
        "renderer": "Constante (opcional): tanto P2D ou WEBGL"
      }
    },
    "resizeCanvas": {
      "description": [
        "Redimensiona o canvas de acordo com a largura e a altura fornecidas. O canvas será limpo e draw será chamada imediatamente, permitindo que o sketch seja renderizado novamente na tela redimensionada."
      ],
      "params": {
        "w": "Número: largura do canvas",
        "h": "Número: altura do canvas",
        "noRedraw": "Booleano (opcional): não redesenha o canvas imediatamente"
      }
    },
    "noCanvas": {
      "description": [
        "Remove o canvas padrão para um sketch p5 que não requer um canvas"
      ]
    },
    "createGraphics": {
      "description": [
        "Cria e retorna um novo objeto p5.Renderer. Use esta classe se precisar desenhar em um buffer gráfico nos bastidores da tela (off-screen). Os dois parâmetros definem a largura e altura em pixels."
      ],
      "returns": "p5.Graphics: buffer gráfico nos bastidores da tela",
      "params": {
        "w": "Número: largura do buffer gráfico nos bastidores da tela",
        "h": "Número: altura do buffer gráfico nos bastidores da tela",
        "renderer": "Constante (opcional): tanto P2D ou WEBGL padrão indefinido para p2d"
      }
    },
    "blendMode": {
      "description": [
        "Combina os pixels na janela de exibição de acordo com o modo definido. Existe uma escolha dos seguintes modos para misturar os pixels de origem (A) com os pixels que já estão na janela de exibição (B): <ul> <li><code>BLEND</code> - interpolação linear de cores: C = A*fator + B. <b>Este é o modo de mistura padrão. </b></li> <li><code>ADD</code> - soma de A e B</li> <li><code>DARKEST</code> - apenas a cor mais escura aparece: C = min(A*fator, B).</li> <li><code>LIGHTEST</code> - apenas a cor mais clara aparece: C = max(A*fator, B).</li> <li><code>DIFFERENCE</code> - subtrai as cores da imagem subjacente.</li> <li><code>EXCLUSION</code> - similar a <code>DIFFERENCE</code>, porém, menos extremo.</li> <li><code>MULTIPLY</code> - multiplique as cores, o resultado sempre será mais escuro.</li> <li><code>SCREEN</code> - oposto a multiply, usa valores inversos das cores.</li> <li><code>REPLACE</code> - os pixels são inteiramente substituídos pelos outros e não utilizam valores alfa (transparência).</li> <li><code>REMOVE</code> - remove os pixels de B com a força alfa de A.</li> <li><code>OVERLAY</code> - mistura de <code>MULTIPLY</code> e <code>SCREEN </code>. Multiplica valores de escuridão e valores de luz. <em>(2D)</em></li> <li><code>HARD_LIGHT</code> - <code>SCREEN</code> quando maior que 50% cinza, <code>MULTIPLY</code> quando mais baixo. <em>(2D)</em></li> <li><code>SOFT_LIGHT</code> - mistura de <code>DARKEST</code> e <code>LIGHTEST</code>. Funciona como <code>OVERLAY</code>, mas não tão severo. <em>(2D)</em> </li> <li><code>DODGE</code> - clareia os tons claros e aumenta o contraste, ignora os escuros. <em>(2D)</em></li> <li><code>BURN</code> - áreas mais escuras são aplicadas, aumentando o contraste, ignora as luzes. <em>(2D)</em></li> <li><code>SUBTRACT</code> - restante de A e B <em>(3D)</em></li> </ul>  ",
        "<em>(2D)</em> indica que este modo de mistura <b>apenas</b> funciona no renderizador 2D. <em>(3D)</em> indica que este modo de mistura <b>apenas</b> funciona no renderizador WEBGL."
      ],
      "params": {
        "mode": "Constante: modo de mistura para definir o canvas. tanto BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,  EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD, REMOVE ou SUBTRACT"
      }
    },
    "drawingContext": {
      "description": [
        "A API do p5.js fornece muitas funcionalidades para a criação de gráficos, mas há algumas funcionalidades nativas do HTML5 Canvas que não são expostas pelo p5. Você ainda pode chamá-lo diretamente usando a variável  <code>drawingContext</code>, como no exemplo mostrado. Isso é o equivalente a chamar <code>canvas.getContext('2d');</code> ou <code>canvas.getContext('webgl');</code>. Veja isto <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\"> referência para a API nativa do canvas</a> para possíveis funções de desenho que você pode chamar."
      ]
    },
    "noLoop": {
      "description": [
        "Interrompe a execução contínua do código dentro do bloco <a href=\"#/p5/draw\">draw()</a>.",
        "Por padrão, o p5.js executa continuamente as linhas de código contidas dentro do bloco <a href=\"#/p5/draw\">draw()</a>. Para interromper a execução contínua utiliza-se a função <a href=\"#/p5/noLoop\">noLoop()</a>. Neste caso, a execução de <a href=\"#/p5/draw\">draw()</a> pode ser recomeçada com a função <a href=\"#/p5/loop\">loop()</a>.",
        "Caso a função <a href=\"#/p5/noLoop\">noLoop()</a> seja utilizada dentro de <a href=\"#/p5/setup\">setup()</a>, ela deverá estar na última linha de código dentro do bloco.",
        "Quando <a href=\"#/p5/noLoop\">noLoop()</a> é usado, não é possível manipular ou acessar a tela pelas funções de manipulação de eventos (event handlers), como <a href=\"#/p5/mousePressed\">mousePressed()</a> ou <a href=\"#/p5/keyPressed\">keyPressed()</a>. Isso significa que quando <a href=\"#/p5/noLoop\">noLoop()</a> é executado, nada mais pode ser desenhado e funções como <a href=\"#/p5/saveFrames\">saveFrames()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> não podem ser usadas. Nestes casos, as funções de manipulação de eventos (event handlers) podem ser utilizadas para chamar <a href=\"#/p5/redraw\">redraw()</a> ou <a href=\"#/p5/loop\">loop()</a>, que ao executar <a href=\"#/p5/draw\">draw()</a> poderam atualizar a tela corretamente.",
        "Observe que se a Canvas for redimensionada, <a href=\"#/p5/redraw\"> redraw() </a> será chamado para atualizar o desenho, mesmo se <a href = \"#/p5/noLoop\">noLoop()</a> tiver sido chamado. Caso contrário, o desenho poderia ficar desconfigurado em relação ao tamanho da canvas até que <a href=\"#/p5/loop\">loop()</a> fosse chamado. ",
        "Utilize <a href=\"#/p5/isLooping\">isLooping()</a> para verificar o atual estado de <code>loop()</code>."
      ]
    },
    "loop": {
      "description": [
        "Retoma a execução contínua do código dentro do bloco <a href=\"#/p5/draw\">draw()</a>",
        "Por padrão, o p5.js executa continuamente as linhas de código contidas dentro do bloco <a href=\"#/p5/draw\">draw()</a>. Para interromper a execução contínua utiliza-se a função <a href=\"#/p5/noLoop\">noLoop()</a>. Neste caso, a execução de <a href=\"#/p5/draw\">draw()</a> pode ser recomeçada com a função <a href=\"#/p5/loop\">loop()</a>. ",
        "Nâo é recomendado chamar <code>loop</code> dentro de <a href=\"#/p5/setup\">setup()</a> ",
        "Utilize <a href=\"#/p5/isLooping\">isLooping()</a> para verificar o atual estado de <code>loop()</code>."
      ]
    },
    "isLooping": {
      "description": [
        "Retorna o estado atual de <a href=\"#/p5/loop\">loop()</a>.",
        "Por padrão, o p5.js executa continuamente as linhas de código contidas dentro do bloco <a href=\"#/p5/draw\">draw()</a>, a execução pode ser controlada pelas funções <a href=\"#/p5/noLoop\">noLoop()</a> e <a href=\"#/p5/loop\">loop()</a>. O valor que <code>isLooping()</code> retorna pode ser utilizado com manipuladores de eventos personalizados (custom event handlers). "
      ]
    },
    "push": {
      "description": [
        "A função <a href=\"#/p5/push\">push()</a> salva as configurações e transformações do estilo de desenho atual, enquanto <a href=\"#/p5/pop\">pop()</a> restaura essas configurações.",
        " As funções <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a> sempre são utilizadas juntas. Elas permitem que as configurações de estilo e transformação sejam alteradas e, posteriormente, permite que elas sejam restauradas. Quando um novo estado é iniciado com push (), ele se baseia no estilo atual e nas informações de transformação. As funções push () e pop () podem ser incorporadas para fornecer mais controle. (Veja o segundo exemplo.) ",
        "<a href=\"#/p5/push\">push()</a> armazena informações relacionadas ao estado de transformação atual e configurações de estilo controladas pelas seguintes funções: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a> e <a href=\"#/p5/noiseSeed\">noiseSeed()</a>. ",
        "No modo WEBGL, configurações de estilo adicionais são armazenadas. Elas são controlados pelas seguintes funções: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> e <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "pop": {
      "description": [
        "A função <a href=\"#/p5/push\">push()</a> salva as configurações e transformações do estilo de desenho atual, enquanto <a href=\"#/p5/pop\">pop()</a> restaura essas configurações.",
        " As funções <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a> sempre são utilizadas juntas. Elas permitem que as configurações de estilo e transformação sejam alteradas e, posteriormente, permite que elas sejam restauradas. Quando um novo estado é iniciado com push (), ele se baseia no estilo atual e nas informações de transformação. As funções push () e pop () podem ser incorporadas para fornecer mais controle. (Veja o segundo exemplo.) ",
        "<a href=\"#/p5/push\">push()</a> armazena informações relacionadas ao estado de transformação atual e configurações de estilo controladas pelas seguintes funções: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a> e <a href=\"#/p5/noiseSeed\">noiseSeed()</a>. ",
        "No modo WEBGL, configurações de estilo adicionais são armazenadas. Elas são controlados pelas seguintes funções: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> e <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "redraw": {
      "description": [
        "A função <a href=\"#/p5/redraw\">redraw()</a> faz com que o código dentro de <a href=\"#/p5/draw\">draw()</a> seja executado uma única vez.",
        "Esta função permite que o programa atualize a janela de exibição apenas quando necessário, por exemplo, quando ocorre um evento registrado por <a href=\"#/p5/mousePressed\">mousePressed()</a> ou <a href=\"#/p5/keyPressed\">keyPressed()</a>.",
        "Na estruturação de um programa, só faz sentido chamar <a href=\"#/p5/redraw\">redraw()</a> em eventos como <a href=\"#/p5/mousePressed\">mousePressed()</a>. Isso ocorre porque <a href=\"#/p5/redraw\">redraw()</a> não executa <a href=\"#/p5/draw\">draw()</a> imediatamente (apenas define um sinalizador que indica que uma atualização é necessária).",
        "A função <a href=\"#/p5/redraw\">redraw()</a> não funciona corretamente quando é chamada dentro de <a href=\"#/p5/draw\">draw()</a>.Para ativar/desatiar animações utilize <a href=\"#/p5/loop\">loop()</a> e <a href=\"#/p5/noLoop\">noLoop()</a>. ",
        "Além disso, você pode definir o número de redraws (o número de vezes que o código dentro de <a href=\"#/p5/draw\">draw()</a> será executado) por chamada de método. Basta adicionar um inteiro como parâmetro único para o número de redraws."
      ],
      "params": {
        "n": "Número inteiro (optional): Redraw n-vezes. O valor padrão é 1."
      }
    },
    "p5": {
      "description": [
        "O construtor <code>p5()</code> permite que você ative o \"instance mode\" em vez do \"global mode\". ",
        "Este é um tópico avançado, uma breve descrição e um exemplo estão incluídos abaixo. Por favor, assista <a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\"> o tutorial em vídeo do Coding Train de Dan Shiffman</a> eu acesse este <a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial</a> para mais informações. ",
        "Por padrão, todas as funções p5.js estão no global namespace (ou seja, vinculadas ao objeto window), o que significa que você pode chamá-las simplesmente de elipse (), preenchimento (), etc. No entanto, isso pode ser inconveniente se você estiver utilizando junto outras Bibliotecas JS (de forma síncrona ou assíncrona) ou escrevendo seus próprios programas longos. O p5.js atualmente suporta uma maneira de contornar este problema chamado \"instance mode\". No modo de instância, todas as funções do p5 são agrupadas em uma única variável, em vez de poluir seu global namespace. ",
        "Opcionalmente, você pode especificar um elemento HTML do tipo container (ex. <code>&lt;div&gt;</code>) padrão para a canvas e quaisquer outros elementos para anexar com um segundo argumento. Você pode fornecer o ID de um elemento em seu html, ou o próprio node (nó) html.",
        "Observe que a criação de instâncias como essa também permite que você tenha mais de um sketch do p5 em uma única página da web, pois cada um deles será empacotado (wrapped) com suas próprias variáveis de configuração. Você também pode usar <code>&lt;iframe&gt;</code> para ter vários sketches no modo global."
      ],
      "params": {
        "sketch": "Objeto: uma função contendo o sketch do p5.js",
        "node": "String|Objeto: ID ou ponteiro para o node (nó) HTML no DOM contendo o sketch do p5.js"
      }
    },
    "applyMatrix": {
      "description": [
        "Multiplica a matriz atual por aquela especificada nos parâmetros. Esta é uma operação poderosa que pode realizar o equivalente a translação, escala, distorção e rotação, tudo de uma vez. Você pode aprender mais sobre matrizes de transformação em <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\"> Wikipedia</a>. ",
        "A nomenclatura dos argumentos aqui segue a nomenclatura da <a href= \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\"> especificação WHATWG</a> and corresponds to a transformation matrix of the form: <blockquote> ",
        "<img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\" alt=\"a matriz de transformação usada quando applyMatrix é chamado\"/> </blockquote>"
      ],
      "params": {
        "a": "Número|Array: números que definem a matriz 2x3 a ser multiplicada, ou uma matriz de números",
        "b": "Número: números que definem a matriz 2x3 a ser multiplicada",
        "c": "Número: números que definem a matriz 2x3 a ser multiplicada",
        "d": "Número: números que definem a matriz 2x3 a ser multiplicada",
        "e": "Número: números que definem a matriz 2x3 a ser multiplicada",
        "f": "Número: números que definem a matriz 2x3 a ser multiplicada"
      }
    },
    "resetMatrix": {
      "description": [
        "Substitui a matriz atual pela matriz de identidade."
      ]
    },
    "rotate": {
      "description": [
        "Gira uma forma pela quantidade especificada pelo parâmetro de ângulo. Esta função é responsável por <a href=\"#/p5/angleMode\">angleMode</a>, então os ângulos podem ser inseridos em RADIANOS ou GRAUS. ",
        "Os objetos são sempre girados em torno de sua posição relativa à origem e os números positivos giram os objetos no sentido horário. As transformações se aplicam a tudo o que acontece depois e as chamadas subsequentes para a função acumulam o efeito. Por exemplo, chamar rotate(HALF_PI) e então rotate(HALF_PI) é o mesmo que rotate(PI). Todas as transformações são redefinidas quando <a href=\"#/p5/draw\">draw()</a> iniciar novamente. ",
        "Tecnicamente, <a href=\"#/p5/rotate\">rotate()</a> multiplica a matriz de transformação atual por uma matriz de rotação. Esta função pode ser controlada posteriormente pelo <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação, especificado em radianos ou graus, dependendo do atual angleMode",
        "axis": "p5.Vector|Número[] (opcional): (em 3d) eixos de rotação"
      }
    },
    "rotateX": {
      "description": [
        "Gira uma forma em torno do eixo X pela quantidade especificada no parâmetro de ângulo. Os ângulos podem ser inseridos em RADIANOS ou GRAUS.",
        "Os objetos são sempre girados em torno de sua posição relativa à origem e os números positivos giram os objetos no sentido horário. Todas as transformações são reiniciadas quando <a href=\"#/p5/draw\">draw()</a> for iterado novamente."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação, especificado em radianos ou graus, dependendo do atual angleMode"
      }
    },
    "rotateY": {
      "description": [
        "Gira uma forma em torno do eixo Y pelo valor especificado no parâmetro de ângulo. Os ângulos podem ser inseridos em RADIANOS ou GRAUS. ",
        "Os objetos são sempre girados em torno de sua posição relativa à origem e os números positivos giram os objetos no sentido horário. Todas as transformações são reiniciadas quando <a href=\"#/p5/draw\">draw()</a>  for iterado novamente."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação, especificado em radianos ou graus, dependendo do atual angleMode"
      }
    },
    "rotateZ": {
      "description": [
        "Gira uma forma em torno do eixo Z pelo valor especificado no parâmetro de ângulo. Os ângulos podem ser inseridos em RADIANOS ou GRAUS. ",
        "Este método apenas funciona em modo WEBGL. ",
        "Os objetos são sempre girados em torno de sua posição relativa à origem e os números positivos giram os objetos no sentido horário. Todas as transformações são reiniciadas quando <a href=\"#/p5/draw\">draw()</a> for iterado novamente."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação, especificado em radianos ou graus, dependendo do atual angleMode"
      }
    },
    "scale": {
      "description": [
        "Aumenta ou diminui o tamanho de uma forma expandindo ou contraindo vértices. Os objetos sempre são escalonados de sua origem relativa ao sistema de coordenadas. Os valores da escala são especificados como porcentagens decimais. Por exemplo, a chamada de função scale (2.0) aumenta a dimensão de uma forma em 200%. ",
        "As transformações se aplicam a tudo o que acontece depois e as chamadas subsequentes à função multiplicam o efeito. Por exemplo, chamar escala (2,0) e depois escala (1,5) é o mesmo que escala (3,0). Se <a href=\"#/p5/scale\">scale()</a> é chamado dentro de <a href=\"#/p5/draw\">draw()</a>, a transformação é reiniciada quando o loop for iterado novamente. ",
        "O uso desta função com o parâmetro z está disponível apenas no modo WEBGL. Esta função pode ser controlada posteriormente com <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "s": "Número|p5.Vector|Número[] (opcional): porcentagem para dimensionar o objeto no eixo x se vários argumentos forem fornecidos",
        "y": "Número (optional): percentual para dimensionar o objeto no eixo y ",
        "z": "Número (optional): percentual para dimensionar o objeto no eixo z (apenas em webgl)",
        "scales": "p5.Vector|Número[]: percentagens por eixo para dimensionar o objeto"
      }
    },
    "shearX": {
      "description": [
        "Corta uma forma em torno do eixo x pelo valor especificado pelo parâmetro de ângulo. Os ângulos devem ser especificados no angleMode atual. Os objetos são sempre cortados em torno de sua posição relativa à origem e os números positivos cortam os objetos no sentido horário. ",
        "As transformações se aplicam a tudo o que acontece depois e as chamadas subsequentes para a função acumulam o efeito. Por exemplo, chamar shearX(PI/2) e então shearX(PI/2) é o mesmo que shearX(PI). Se <a href=\"#/p5/shearX\">shearX()</a> é chamado dentro de <a href=\"#/p5/draw\">draw()</a>, a transformação é reiniciada quando o loop  for iterado novamente. ",
        "Tecnicamente, <a href=\"#/p5/shearX\">shearX()</a> multiplica a matriz de transformação atual por uma matriz de rotação. Esta função pode ser controlada posteriormente pelas funções <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a> ."
      ],
      "params": {
        "angle": "Número: ângulo de corte especificado em radianos ou graus, dependendo do angleMode atual"
      }
    },
    "shearY": {
      "description": [
        "Corta uma forma em torno do eixo y de acordo com o valor especificado pelo parâmetro de ângulo. Os ângulos devem ser especificados no angleMode atual. Os objetos são sempre cortados em torno de sua posição relativa à origem e os números positivos cortam os objetos no sentido horário. ",
        "As transformações se aplicam a tudo o que acontece depois e as chamadas subsequentes para a função acumulam o efeito. Por exemplo, chamar shearY (PI/2) e depois shearY(PI/2) é o mesmo que shearY(PI). Se  <a href=\"#/p5/shearY\">shearY()</a> é chamado dentro de <a href=\"#/p5/draw\">draw()</a>, a transformação é reiniciada quando o loop rodar novamente. ",
        "Tecnicamente, <a href=\"#/p5/shearY\">shearY()</a> multiplica a matriz de transformação atual por uma matriz de rotação. Esta função pode ser controlada posteriormente pelas funções <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a> ."
      ],
      "params": {
        "angle": "Número: ângulo de corte especificado em radianos ou graus, dependendo do atual angleMode"
      }
    },
    "translate": {
      "description": [
        "Especifica uma quantidade para deslocar objetos na janela de exibição. O parâmetro x especifica a translação esquerda / direita, o parâmetro y especifica a translação para cima / para baixo. ",
        "As transformações são cumulativas e se aplicam a tudo o que acontece depois e as chamadas subsequentes para a função acumulam o efeito. Por exemplo, chamar a translação (50, 0) e então a translação (20, 0) é o mesmo que a translação de (70, 0). Se <a href=\"#/p5/translate\">translate()</a> for chamado dentro de <a href=\"#/p5/draw\">draw()</a>, a transformação é reiniciada quando o loop for iterado novamente. Esta função pode ser posteriormente controlada usando <a href=\"#/p5/push\">push()</a> e <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "x": "Número: translação esquerda/direita",
        "y": "Número: translação para cima/ para baixo",
        "z": "Número (opcional): translação para frente/ para trás (apenas em webgl)",
        "vector": "p5.Vector: o vetor para translação"
      }
    },
    "storeItem": {
      "description": [
        "Armazena um valor(value) no local storage sob o nome da chave (key). O armazenamento local é salvo no navegador e permanece salvo entre as sessões de navegação e recarregamentos de página. A chave (key) pode ser o nome da variável, mas não obrigatoriamente. Para recuperar os itens armazenados, consulte <a href=\"#/p5/getItem\">getItem</a>. Dados sensíveis como senhas ou infromações pessoais não devem ser armazenados no armazenamento local."
      ],
      "params": {
        "key": "String",
        "value": "String|Number|Object|Boolean|p5.Color|p5.Vector"
      }
    },
    "getItem": {
      "description": [
        "Retorna o valor de um item que foi armazenado do armazenamento local usando storeItem()"
      ],
      "returns": "Number|Object|String|Boolean|p5.Color|p5.Vector: valor do item armazenado",
      "params": {
        "key": "String: nome que você deseja utilizar para armazenar no armazenar no armazenamento local"
      }
    },
    "clearStorage": {
      "description": [
        "Esvazia todos os itens armazenados localmente configurados com storeItem() para o domínio atual."
      ]
    },
    "removeItem": {
      "description": [
        "Remove um item que foi armazenado com storeItem()"
      ],
      "params": {
        "key": "String"
      }
    },
    "createStringDict": {
      "description": [
        "Cria uma nova instancia de p5.StringDict utilizando o par chave-valor (key-value) ou o objeto que você fornecer."
      ],
      "returns": "p5.StringDict: ",
      "params": {
        "key": "String",
        "value": "String",
        "object": "Object: object"
      }
    },
    "createNumberDict": {
      "description": [
        "Cria uma nova instancia de <a href=\"#/p5.NumberDict\">p5.NumberDict</a> utilizando o par chave-valor (key-value) ou o objeto que você fornecer"
      ],
      "returns": "p5.NumberDict: ",
      "params": {
        "key": "Number",
        "value": "Number",
        "object": "Object: object"
      }
    },
    "select": {
      "description": [
        "Busca a pagina o primeiro elemento que corresponde a string do seletor CSS determinada (pode ser uma ID, classe, tag ou uma combinação) e o retorna como um <a href=\"#/p5.Element\">p5.Element</a>. O node do DOM pode ser acessado com .elt. Retorna nulo se nenhum for encontrado. Você também pode especificar um container dentro do qual a pesquisa será feita."
      ],
      "returns": "p5.Element|null: <a href=\"#/p5.Element\">p5.Element</a> contendo o node encontrado",
      "params": {
        "selectors": "String: string do seletor CSS do elemento a ser buscado",
        "container": "String|p5.Element|HTMLElement (Opcional): string do seletor CSS, <a href=\"#/p5.Element\">p5.Element</a>  , ou elemento HTML dentro do qual deve ser buscado "
      }
    },
    "selectAll": {
      "description": [
        "Busca na pagina todos os elementos que correspondem a string do seletor CSS determinada (pode ser uma ID, classe, tag ou uma combinação) e os retornam como <a href=\"#/p5.Element\">p5.Element</a>s em um array(array?). O node do DOM pode ser acessado com .elt. Retorna um array vazio se nada for encondrado. Você também pode especificar um container dentro do qual a pesquisa será feita."
      ],
      "returns": "p5.Element[]: Uma array de <a href=\"#/p5.Element\">p5.Element</a>s contendo os nodes encontrados",
      "params": {
        "selectors": "String: string do seletor CSS do elemento a ser buscado",
        "container": "String|p5.Element|HTMLElement (Opcional): string do seletor CSS, <a href=\"#/p5.Element\">p5.Element</a>, ou elemento HTML dentro do qual deve ser buscado "
      }
    },
    "removeElements": {
      "description": [
        "Remove todos os elementos criados pelo p5, exceto a canvas ou elementos gráficos criados por <a href=\"#/p5/createCanvas\">createCanvas</a> ou <a href=\"#/p5/createGraphics\">createGraphics</a>. !! Event handlers e o elemento são removidos do DOM."
      ]
    },
    "changed": {
      "description": [
        "A função <a href=\"#/p5.Element/changed\">changed()</a> é chamada quando o valor de um elemento é alterado. Pode ser utilizada !! para anexar um !!event listener específico de um elemeto. "
      ],
      "params": {
        "fxn": "Função | Booleano: função a ser disparada quando o valor de um elemento é alterado. Se  <code>false</code> (falso) for passado como parâmetro, a função disparadora anterior não será mais disparada."
      }
    },
    "input": {
      "description": [
        "A função <a href=\"#/p5.Element/input\">input()</a> é chamada quando é detectado aulgum input do usuário dentro de um elemento. O evento de input normalmente é usado para detectar pressionamentos de teclas em um elemento de input ou  alterações em um elemento slider (controle deslizante). Pode ser utilizada !! para anexar um !!event listener específico de um elemeto."
      ],
      "params": {
        "fxn": "Função | Booleano: função a ser disparada quando algum input do usuário é detectado dentro do elemento. Se  <code>false</code> for passado como parâmetro, a função disparadora anterior não será mais disparada."
      }
    },
    "createDiv": {
      "description": [
        "Cria um elemento <code>&lt;div&gt;</code> no DOM com o HTML interno fornecido."
      ],
      "returns": "p5.Element: ponteiro para <a href=\"#/p5.Element\">p5.Element</a> que contém o node criado.",
      "params": {
        "html": "String (Opcional):  HTML interno para o elemento criado."
      }
    },
    "createP": {
      "description": [
        "Cria um elemento <code>&lt;p&gt;&lt;/p&gt;</code> (parágrafo) no DOM com o HTML interno fornecido."
      ],
      "returns": "p5.Element: ponteiro para <a href=\"#/p5.Element\">p5.Element</a> que contém o node criado.",
      "params": {
        "html": "String(Opcional):  HTML interno para o elemento criado."
      }
    },
    "createSpan": {
      "description": [
        "Cria um elemento <code>&lt;span&gt;&lt;/span&gt;</code> no DOM com o HTML interno fornecido."
      ],
      "returns": "p5.Element: ponteiro para <a href=\"#/p5.Element\">p5.Element</a> que contém o node criado.",
      "params": {
        "html": "String(Opcional):  HTML interno para o elemento criado."
      }
    },
    "createImg": {
      "description": [
        "Cria um elemento <code>&lt;img&gt;</code> no DOM com a fonte (src) e o texto altenativo (alt) fornecidos."
      ],
      "returns": "p5.Element: ponteiro para <a href=\"#/p5.Element\">p5.Element</a> que contém o node criado.",
      "params": {
        "src": "String: fonte (src) da Imagem, pode ser o endereço do arquivo ou uma url.",
        "alt": "String: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/HTML/Element/Img#attr-alt\">texto alternativo</a> (alt) atributo da imagem usado caso o arquivo não possa ser carregado. Você também pode usar uma string vazia (<code>\"\"</code>) caso a intençao seja que a imagem não seja vista.",
        "crossOrigin": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">atributo crossorigin</a> do elemento <code>&lt;img&gt;</code>; ",
        "successCallback": "Função  callback a ser chamada quando os dados da image são carregados com o <a href=\"#/p5.Element\">p5.Element</a> como argumento"
      }
    },
    "createA": {
      "description": [
        "Cia um elemento <code>&lt;a&gt;&lt;/a&gt;</code> no DOM com um hyperlink (hiperligação)."
      ],
      "returns": "p5.Element: ponteiro para o <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado ",
      "params": {
        "href": "String: url da página a ser vinculada",
        "html": "String: HTML interno do elemento.",
        "target": "String (Opcional): atributo target, este atributo define a forma como o hyperlink (hiperligação) será aberta. Podem ser definidos os valores: _blank, _self, _parent, _top."
      }
    },
    "createSlider": {
      "description": [
        "Cria um elemento de <code>&lt;input&gt;&lt;/input&gt;</code> em forma de slider (controle deslizante) no DOM. Use .size() para configurar o comprimento do slider (controle deslizante)."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado ",
      "params": {
        "min": "Número: valor mínimo do slider",
        "max": "Número: valor máximo do slider",
        "value": "Número (opcional): valor padrão do slider",
        "step": "Número (opcional); valor do incremento para cada marcação do slider (se o valor do incremento for 0, o slider vai se movimentar continuamente entre o valor mínimo e o máximo)"
      }
    },
    "createButton": {
      "description": [
        "Cia um elemento <code>&lt;button&gt;&lt;/button&gt;</code> no DOM. Use .size() para configurara o tamanho do botão. Use .mousePressed() para especificar o comportamento ao pressionar."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado",
      "params": {
        "label": "String: label (etiqueta) exibida no botão",
        "value": "String (Opcional): valor do botão"
      }
    },
    "createCheckbox": {
      "description": [
        "Cria um elemento de <code>&lt;input&gt;&lt;/input&gt;</code> em forma de checkbox (caixas de seleção) no DOM. Chamando .checked() on a checkbox retorna true (verdadeiro) se ela estiver marcada ou false (falso) caso não esteja."
      ],
      "returns": "p5.Element: pontero para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado",
      "params": {
        "label": "String (Opcional): label (etiqueta) exibida após a checkbox",
        "value": "Booleano (Ocional): valor da checkbox; se a caixa estiver marcada o valor será true (verdadeiro), se a caixa estiver desmarcada será false (falso)"
      }
    },
    "createSelect": {
      "description": [
        "Cria um elemento de seleção <code>&lt;select&gt;&lt;/select&gt;</code> em forma de lista suspensa no DOM. Também ajuda a atribuir métodos de caixa de seleção a <a href=\"#/p5.Element\"> p5.Element </a> ao selecionar a caixa de seleção existente. <li><code>.option(name, [value])</code> pode ser utilizado para configurar opções para a selecão depois de criada.</li><li><code>.value()</code> retornará a opção selecionada no momento.</li><li><code>.selected()</code> retornará o elemento da lista suspensa atual que é uma instância do <a href=\"#/p5.Element\">p5.Element</a>.</li><li><code>.selected(value)</code> pode ser usado para tornar determinado item selecionado por padrão quando a página é carregada pela primeira vez.</li><li><code>.disable()</code> marca toda lista suspensa como desativada.</li><li><code>.disable(value)</code> marca o item determinado como desativado.</li> </ul>"
      ],
      "returns": "p5.Element: ",
      "params": {
        "multiple": "Booleano (Opcional): true (verdadeiro) se o elemento suportar várias seleções",
        "existing": "Objeto: elemento de seleção do DOM"
      }
    },
    "createRadio": {
      "description": [
        "Cria um elemento HTML de <code>&lt;input&gt;&lt;/input&gt;</code> do tipo botão de escolha <a href= \"https:\/\/developer.mozilla.org\/pt-BR\/docs\/Web\/HTML\/Element\/input#:~:text=radio%3A%20Um%20bot%C3%A3o,de%20cada%20vez..\">(tipe = \"radio\")</a> no DOM. Também auxilia a atribuir métodos de <a href=\"#/p5.Element/\">p5.Element</a> a botões de escolha (radio) existentes.<ul> <li>O método <code>.option(value, [label])</code> pode ser utilizado para criar um novo item para o elemento. Se já existir um item com o valor indicado, o método retornará este item. Opcionalmente, um label (etiqueta) pode ser fornecido como segundo argumento para o item.</li><li>O método <code>.remove(value)</code> pode ser utilizado para remover um item do elemento.</li><li>O método <code>.value()</code> retorna o valor do item selecionado no momento.</li><li>O método <code>.selected()</code> retorna o elemento de input selecionado no momento.</li><li>O método <code>.selected(value)</code> marca um item como selecionado, retorna ele mesmo.</li><li>O método <code>.disable(Boolean)</code> desativa/ativa o elemento todo.</li> </ul>"
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado.",
      "params": {
        "containerElement": "Objeto: Um elemento container de HTML, pode ser um <code>&lt;div&gt;&lt;/div&gt;</code> ou <code>&lt;span&gt;&lt;/span&gt;</code>, dentro do qual todas os inputs existentes serão considerados como itens do botão de escolha.",
        "name": "String (Opcional): parâmetro nome para cada elemnto de input."
      }
    },
    "createColorPicker": {
      "description": [
        "Cria um elemento no DOM para input de cor. O método <code>.value()<code> retorna uma string HEX (#rrggbb) da cor. O método <code>.color()<code> retorna um objeto p5.Color com a selecão de cor atual."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado.",
      "params": {
        "value": "String|p5.Color (Opcional): cor padrão do elemento."
      }
    },
    "createInput": {
      "description": [
        "Cria um elemento de <code>&lt;input&gt;&lt;/input&gt;</code> de texto no DOM. Use .<a href=\"#/p5.Element/size\">size()</a> para configurar o tamanho da caixa de texto."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) do DOM criado.",
      "params": {
        "value": "String: default valor padrão da caixa de texto do input",
        "type": "String (Opcional): tipo do texto, por ex.: \"text\", \"password\" etc. Por padrão o tipo definido é \"text\"."
      }
    },
    "createFileInput": {
      "description": [
        "Cria um elemento de <code>&lt;input&gt;&lt;/input&gt;</code> de arquivo no DOM. Permite que usuários carreguem arquivos locais para utilizar em um sketch."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) do DOM criado.",
      "params": {
        "callback": "Função: Funcão callback para quando o arquivo é carregado.",
        "multiple": "Booleano (Opcional): permite que múltiplos arquivos sejam selecionados."
      }
    },
    "createVideo": {
      "description": [
        "Cria um elemento de <code>&lt;video&gt;</code> HTML5 no DOM para a reprodução simples de áudio/video. O elemento de vídeo é definido como visível por padrão, pode ser ocultado com o método .<a href=\"#/p5.Element/hide\">hide()</a>  e desenhado na canvas utilizando <a href=\"#/p5/image\">image()</a>. O primeiro parâmetro pode ser uma única string com o caminho para um arquivo de vídeo ou uma array de strings com endereços de arquivos de videos em diferentes formatos de arquivo. Isso é útil para garantir que seu vídeo possa ser reproduzido em diferentes navegadores, já que cada um suporta formatos diferentes. Você pode encontrar mais informações sobre os formatos de mídias suportados <a href = \"https:\/\/developer.mozilla.org\/pt-BR/docs/Web/Media/Formats\"> aqui </a>."
      ],
      "returns": "p5.MediaElement: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> de vídeo.",
      "params": {
        "src": "String | String[]: endereço do arquivo de video ou uma array de endereços de arquivos de video em formatos diferentes.",
        "callback": "Função (Optional): função callback chamada no disparo do evento 'canplaythrough', ou seja, quando a mídia está pronta para ser reproduzida, e estima que já foram carregados dados suficientes para reproduzir a mídia sem interrupcões para mais buffering."
      }
    },
    "createAudio": {
      "description": [
        "Cria um elemento de <code>&lt;audio&gt;</code> HTML5 no DOM element in the DOM para a reprodução simples de áudio. Por definição, o elemento de áudio é criado como um elemento oculto (hidden). O primeiro parâmetro pode ser uma única string com o caminho para um arquivo de áudio ou uma array de strings com endereços de arquivos de áudio em diferentes formatos de arquivo. Isso é útil para garantir que seu vídeo possa ser reproduzido em diferentes navegadores, já que cada um suporta formatos diferentes. Você pode encontrar mais informações sobre os formatos de mídias suportados <a href = \"https:\/\/developer.mozilla.org\/pt-BR/docs/Web/Media/Formats\">aqui</a>."
      ],
      "returns": "p5.MediaElement: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> de áudio.",
      "params": {
        "src": "String | String[] (Opcional): endereço do arquivo ou uma array de endereços de arquivos em formatos diferentes.",
        "callback": "Função (Opcional): função chamada no disparo do evento 'canplaythrough', ou seja, quando a mídia está pronta para ser reproduzida, e estima que já foram carregados dados suficientes para reproduzir a mídia sem interrupcões para mais buffering."
      }
    },
    "VIDEO": {},
    "AUDIO": {},
    "createCapture": {
      "description": [
        "Cria um novo elemento <code>&lt;video&gt;</code> HTML5 que contém o fluxo de áudio e vídeo de uma webcam. O elemento de vídeo é definido como visível por padrão, pode ser ocultado com o método .<a href=\"#/p5.Element/hide\">hide()</a>  e desenhado na canvas utilizando <a href=\"#/p5/image\">image()</a>. A propriedade loadedmetadata pode ser utilizada para detectar quando o elemento for totalmente carregado (ver o segundo exemplo). ",
        " !! More specific properties of the feed can be passing in a Constraints object. See the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'> W3C spec</a> for possible properties. Note that not all of these are supported by all browsers. ",
        "<em>Nota de segurança</em>: Devido a especificações de segurança dos navegadores é preciso solicitar ao usuário permissão para utilizar entradas de mídia como a webcam, para isso o método <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/MediaDevices\/getUserMedia\"> .getUserMedia() </a> é utilizado dentro da função <a href=\"#/p5/createCapture\">createCapture()</a>, também por razões de segurança este método só pode ser executado quando o código está rodando localmente ou sob o protocolo HTTPS."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> com fluxo de video da webcam",
      "params": {
        "type": "String | Constante | Objeto: tipo da captura. AUDIO e VIDEO são as definições padrão caso nenhuma especificação seja passada. !! Também pode ser definido por !! Constraints object",
        "callback": "Função (Opcional): função chamada quando o fluxo de mídia é carregado."
      }
    },
    "createElement": {
      "description": [
        "Cria um elemento HTML no DOM com segundo a tag definida."
      ],
      "returns": "p5.Element: ponteiro para um <a href=\"#/p5.Element\">p5.Element</a> contendo o node (nó) criado.",
      "params": {
        "tag": "String: tag HTML do novo elemento",
        "content": "String (Opcional): conteúdo HTML do elemento."
      }
    },
    "deviceOrientation": {
      "description": [
        "A variável global <code>deviceOrientation</code>, embutida na biblioteca p5.js, armazena a orientação do dispositivo em que o sketch está sendo executado. O valor da variável será LANDSCAPE (horizontal) ou PORTRAIT (vertical). Se nenhuma informação estiver disponível, o valor será <i>undefined</i> (indefinido)."
      ]
    },
    "accelerationX": {
      "description": [
        "A variável global <code>accelerationX</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo X. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "accelerationY": {
      "description": [
        "A variável global <code>accelerationY</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo Y. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "accelerationZ": {
      "description": [
        "A variável global <code>accelerationZ</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo Z. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "pAccelerationX": {
      "description": [
        "A variável global <code>pAccelerationX</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo X no frame anterior ao atual. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "pAccelerationY": {
      "description": [
        "A variável global <code>pAccelerationY</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo Y no frame anterior ao atual. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "pAccelerationZ": {
      "description": [
        "A variável global <code>pAccelerationZ</code>, embutida na biblioteca p5.js, armazena a aceleração do dispositivo no eixo Z no frame anterior ao atual. O valor é representado como metros por segundo ao quadrado."
      ]
    },
    "rotationX": {
      "description": [
        "A variável global <code>rotationX</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo X. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre -180 e 180. Caso esteja definido como radianos (RADIANS), o valor será entre -PI e PI.",
        "Nota: A ordem em que as rotações são chamas é importate. Se usadas em conjunto, é preciso chamá-las na ordem Z-X-Y, ou é possível que aconteçam comportamentos inesperados."
      ]
    },
    "rotationY": {
      "description": [
        "A variável global <code>rotationY</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo Y. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre -90 e 90. Caso esteja definido como radianos (RADIANS), o valor será entre -PI/2 e PI/2.",
        "Nota: A ordem em que as rotações são chamas é importate. Se usadas em conjunto, é preciso chamá-las na ordem Z-X-Y, ou é possível que aconteçam comportamentos inesperados."
      ]
    },
    "rotationZ": {
      "description": [
        "A variável global <code>rotationZ</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo Z. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre 0 e 360. Caso esteja definido como radianos (RADIANS), o valor será entre 0 e 2*PI.",
        "Nota: A ordem em que as rotações são chamas é importate. Se usadas em conjunto, é preciso chamá-las na ordem Z-X-Y, ou é possível que aconteçam comportamentos inesperados."
      ]
    },
    "pRotationX": {
      "description": [
        "A variável global <code>pRotationX</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo X no frame anterior ao atual. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre -180 e 180. Caso esteja definido como radianos (RADIANS), o valor será entre -PI e PI.",
        "<code>pRotationX</code> pode ser utilizada em conjunto com <a href=\"#/p5/rotationX\"><code>rotationX</code></a> para determinar a direção de rotação do dispositivo no eixo X."
      ]
    },
    "pRotationY": {
      "description": [
        "A variável global <code>pRotationY</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo Y no frame anterior ao atual. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre -90 e 90. Caso esteja definido como radianos (RADIANS), o valor será entre -PI/2 e PI/2.",
        "<code>pRotationY</code> pode ser utilizada em conjunto com <code><a href=\"#/p5/rotationY\">rotationY</a></code> para determinar a direção de rotação do dispositivo no eixo Y."
      ]
    },
    "pRotationZ": {
      "description": [
        "A variável global <code>pRotationZ</code>, embutida na biblioteca p5.js, armazena a rotação do dispositivo em relação ao eixo Z no frame anterior ao atual. Se o modo de ângulo do sketch (<a href=\"#/p5/angleMode\">angleMode()</a>) estiver definido como graus (DEGREES), o valor será entre 0 e 360. Caso esteja definido como radianos (RADIANS), o valor será entre 0 e 2*PI.",
        "<code>pRotationZ</code> pode ser utilizada em conjunto com <code><a href=\"#/p5/rotationZ\">rotationZ</a></code> para determinar a direção de rotação do dispositivo no eixo Z."
      ]
    },
    "turnAxis": {
      "description": [
        "Quanto o dispositivo é rotacionado, o método <a href=\"#/p5/deviceTurned\"><code>deviceTurned()</code></a> é acionado, e o eixo de rotação é armazenado na variável <code>turnAxis</code>. Essa variável só é definida dentro do escopo de <code>deviceTurned()</code>."
      ]
    },
    "setMoveThreshold": {
      "description": [
        "A função <a href=\"#/p5/setMoveThreshold\"><code>setMoveThreshold()</code></a> é utilizada para definir o limiar de movimento da função <a href=\"#/p5/deviceMoved\"><code>deviceMoved()</code></a>. O valor limiar padrão é 0.5."
      ],
      "params": {
        "value": "Número: o valor do limiar"
      }
    },
    "setShakeThreshold": {
      "description": [
        "A função <a href=\"#/p5/setShakeThreshold\"><code>setShakeThreshold()</code></a> é utilizada para definir o limiar de movimento da função <a href=\"#/p5/deviceShaken\"><code>deviceShaken()</code></a>. O valor limiar padrão é 30."
      ],
      "params": {
        "value": "Número: o valor do limiar"
      }
    },
    "deviceMoved": {
      "description": [
        "A função <a href=\"#/p5/deviceMoved\"><code>deviceMoved()</code></a> é chamada quando o dispositivo for movido para além do limiar em qualquer um dos eixos (X, Y ou Z). O valor limiar padrão é 0.5, e pode ser alterado através da função <a href=\"#/p5/setMoveThreshold\"><code>setMoveThreshold()</code></a>."
      ]
    },
    "deviceTurned": {
      "description": [
        "A função <a href=\"#/p5/deviceTurned\"><code>deviceTurned()</code></a> é chamada quando o dispositivo for rotacionado mais de 90 graus contínuos em qualquer eixo (X, Y ou Z).",
        "O eixo que dispara este método é armazenado na variável <a href=\"#/p5/turnAxis\"><code>turnAxis</code></a>. Assim, é possível direcionar sua execução para eixos específicos ao comparar a variável <a href=\"#/p5/turnAxis\"><code>turnAxis</code></a> com 'X', 'Y' ou 'Z'"
      ]
    },
    "deviceShaken": {
      "description": [
        "A função <a href=\"#/p5/deviceShaken\"><code>deviceShaken()</code></a> é chamada quando a aceleração total do dispositivo nos eixos X (<a href=\"#/p5/accelerationX\"><code>accelerationX</code></a>) e Y (<a href=\"#/p5/accelerationY\"><code>accelerationY</code></a>) for superior ao valor limiar.",
        "Por padrão, este valor é 30, mas pode ser alterado através da função <a href=\"#/p5/setShakeThreshold\"><code>setShakeThreshold()</code></a>."
      ]
    },
    "keyIsPressed": {
      "description": [
        "A variável booleana global <a href=\"#/p5/keyIsPressed\"><code>keyIsPressed</code></a> é <code>true</code> (verdadeira) quando uma tecla está pressionada, e <code>false</code> (falsa) quando não."
      ]
    },
    "key": {
      "description": [
        "A variável global <code>key</code> armazena o valor da última tecla que foi pressionada no teclado. Para garantir que o resultado transmita a informação correta em relação a minúsculas ou maiúsculas, é melhor utilizá-la dentro da função <a href=\"#/p5/keyTyped\"><code>keyTyped()</code></a>. Para teclas especiais ou caracteres fora do padrão <a href=\"https://pt.wikipedia.org/wiki/ASCII\" target=\"_blank\">ASCII</a>, utilize a variável <a href=\"#/p5/keyCode\"><code>keyCode</code></a>."
      ]
    },
    "keyCode": {
      "description": [
        "A variável global <code>keyCode</code> armazena o código correspondente à última tecla que foi pressionada no teclado. Diferente da variável <a href=\"#/p5/key\"><code>key</code></a>, <code>keyCode</code> permite detectar teclas especiais. Para tal, é preciso comparar a variável com o código correspondente à tecla especial desejada, ou com as constantes correspondentes como <code>BACKSPACE</code>, <code>DELETE</code>, <code>ENTER</code>, <code>RETURN</code>, <code>TAB</code>, <code>ESCAPE</code>, <code>SHIFT</code>, <code>CONTROL</code>, <code>OPTION</code>, <code>ALT</code>, <code>UP_ARROW</code> (seta superior), <code>DOWN_ARROW</code> (seta inferior), <code>LEFT_ARROW</code> (seta esquerda), <code>RIGHT_ARROW</code> (seta direita). Você também pode utilizar um site como <a href=\"http://keycode.info/\">keycode.info</a> para encontrar o código da tecla (key code) de qualquer tecla em seu teclado."
      ]
    },
    "keyPressed": {
      "description": [
        "A função <code>keyPressed()</code> é chamada a cada vez que uma tecla é pressionada. O código da tecla e seu valor são então armazenados nas variáveis <a href=\"#/p5/keyCode\"><code>keyCode</code></a> e <a href=\"#/p5/key\"><code>key</code></a>.",
        "Para caracteres dentro do padrão <a href=\"https://pt.wikipedia.org/wiki/ASCII\" target=\"_blank\">ASCII</a>, o valor da tecla é armazenado na variável <a href=\"#/p5/key\"><code>key</code></a>. No entanto, a distinção entre maiúsculas e minúsculas não é garantida. Caso essa distinção seja necessária, é recomendado ler a variável dentro da função <a href=\"#/p5/keyTyped\"><code>keyTyped()</code></a>.",
        "Para caracteres fora do padrão <a href=\"https://pt.wikipedia.org/wiki/ASCII\" target=\"_blank\">ASCII</a>, o código da tecla é armazenado na variável <a href=\"#/p5/keyCode\"><code>keyCode</code></a>. Ela permite detectar teclas especiais ao ser comparada com o código correspondente à tecla especial desejada, ou com as constantes correspondentes como <code>BACKSPACE</code>, <code>DELETE</code>, <code>ENTER</code>, <code>RETURN</code>, <code>TAB</code>, <code>ESCAPE</code>, <code>SHIFT</code>, <code>CONTROL</code>, <code>OPTION</code>, <code>ALT</code>, <code>UP_ARROW</code> (seta superior), <code>DOWN_ARROW</code> (seta inferior), <code>LEFT_ARROW</code> (seta esquerda), <code>RIGHT_ARROW</code> (seta direita).",
        "Por causa da forma com que os sistemas operacionais tratam repetições nas teclas, pressionar continuamente uma tecla pode causar chamadas múltiplas aos métodos <code>keyPressed()</code>, <a href=\"#/p5/keyTyped\">keyTyped()</a> e <a href=\"#/p5/keyReleased\">keyReleased()</a>. A frequência de repetição é definida pelo sistema operacional, e pela configuração de cada dispositivo. Navegadores podem ter comportamentos diferentes relacionados a cada evento de tecla. Para previnir qualquer comportamento padrão, adicione <code>return false</code> ao fim do método."
      ],
      "params": {
        "event": "Objeto (opcional): argumento de callback do tipo <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/KeyboardEvent\">KeyboardEvent</a> (evento de teclado)"
      }
    },
    "keyReleased": {
      "description": [
        "A função <code>keyReleased()</code> é chamada a cada vez que uma tecla é liberada após ser pressionada. Veja <a href=\"#/p5/key\"><code>key</code></a> e <a href=\"#/p5/keyCode\"><code>keyCode</code></a> para mais detalhes.",
        "Navegadores podem ter comportamentos diferentes relacionados a cada evento de tecla. Para previnir qualquer comportamento padrão, adicione <code>return false</code> ao fim do método."
      ],
      "params": {
        "event": "Objeto (opcional): argumento de callback do tipo <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/KeyboardEvent\">KeyboardEvent</a> (evento de teclado)"
      }
    },
    "keyTyped": {
      "description": [
        "A função <code>keyTyped()</code> é chamada a cada vez que uma tecla é pressionada, mas teclas de ação como Backspace, Delete, Ctrl, Shift, e Alt são ignoradas. A última tecla pressionada é armazenada na variável <a href=\"#/p5/key\"><code>key</code></a>. Caso esteja buscando o código da tecla, utilize a função <a href=\"#/p5/keyPressed\"><code>keyPressed()</code></a>.",
        "Por causa da forma com que os sistemas operacionais tratam repetições nas teclas, pressionar continuamente uma tecla pode causar chamadas múltiplas aos métodos <code>keyTyped()</code>, <a href=\"#/p5/keyPressed\"><code>keyPressed()</code></a> e <a href=\"#/p5/keyReleased\"><code>keyReleased()</code></a>. A frequência de repetição é definida pelo sistema operacional, e pela configuração de cada dispositivo. Navegadores podem ter comportamentos diferentes relacionados a cada evento de tecla. Para previnir qualquer comportamento padrão, adicione <code>return false</code> ao fim do método."
      ],
      "params": {
        "event": "Objeto (opcional): argumento de callback do tipo <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/KeyboardEvent\">KeyboardEvent</a> (evento de teclado)"
      }
    },
    "keyIsDown": {
      "description": [
        "A função <code>keyIsDown()</code> verifica se alguma tecla está sendo pressionada. Ela pode ser utilizada caso você queira que diversas teclas afetem o comportamento de um objeto simultaneamente. Por exemplo, você pode querer que um objeto mova diagonalmente somente se as setas esquerda e superior estejam pressionadas ao mesmo tempo.",
        "Você pode verificar qualquer tecla através do seu código de tecla (key code), ou utilizar uma das contantes: <code>BACKSPACE</code>, <code>DELETE</code>, <code>ENTER</code>, <code>RETURN</code>, <code>TAB</code>, <code>ESCAPE</code>, <code>SHIFT</code>, <code>CONTROL</code>, <code>OPTION</code>, <code>ALT</code>, <code>UP_ARROW</code> (seta superior), <code>DOWN_ARROW</code> (seta inferior), <code>LEFT_ARROW</code> (seta esquerda), <code>RIGHT_ARROW</code> (seta direita)."
      ],
      "returns": "Booleano: se a tecla está pressionada ou não",
      "params": {
        "code": "Número: A tecla a ser verificada"
      }
    },
    "movedX": {
      "description": [
        "The variable movedX contains the horizontal movement of the mouse since the last frame"
      ]
    },
    "movedY": {
      "description": [
        "The variable movedY contains the vertical movement of the mouse since the last frame"
      ]
    },
    "mouseX": {
      "description": [
        "The system variable mouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseX will hold the x value of the most recent touch point."
      ]
    },
    "mouseY": {
      "description": [
        "The system variable mouseY always contains the current vertical position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseY will hold the y value of the most recent touch point."
      ]
    },
    "pmouseX": {
      "description": [
        "The system variable pmouseX always contains the horizontal position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX value at the start of each touch event."
      ]
    },
    "pmouseY": {
      "description": [
        "The system variable pmouseY always contains the vertical position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY value at the start of each touch event."
      ]
    },
    "winMouseX": {
      "description": [
        "The system variable winMouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "winMouseY": {
      "description": [
        "The system variable winMouseY always contains the current vertical position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "pwinMouseX": {
      "description": [
        "The system variable pwinMouseX always contains the horizontal position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX value at the start of each touch event."
      ]
    },
    "pwinMouseY": {
      "description": [
        "The system variable pwinMouseY always contains the vertical position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseY will be reset to the current winMouseY value at the start of each touch event."
      ]
    },
    "mouseButton": {
      "description": [
        "Processing automatically tracks if the mouse button is pressed and which button is pressed. The value of the system variable mouseButton is either LEFT, RIGHT, or CENTER depending on which button was pressed last. Warning: different browsers may track mouseButton differently."
      ]
    },
    "mouseIsPressed": {
      "description": [
        "The boolean system variable mouseIsPressed is true if the mouse is pressed and false if not."
      ]
    },
    "mouseMoved": {
      "description": [
        "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse button is not pressed. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseDragged": {
      "description": [
        "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and a mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the <a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mousePressed": {
      "description": [
        "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button is pressed. The mouseButton variable (see the related reference entry) can be used to determine which button has been pressed. If no <a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is released. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseClicked": {
      "description": [
        "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been pressed and then released. Browsers handle clicks differently, so this function is only guaranteed to be run when the left mouse button is clicked. To handle other mouse buttons being pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "doubleClicked": {
      "description": [
        "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event listener has detected a dblclick event which is a part of the DOM L3 specification. The doubleClicked event is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element. For more info on the dblclick event refer to mozilla's documentation here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>"
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseWheel": {
      "description": [
        "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel event is detected either triggered by an actual mouse wheel or by a touchpad. The event.delta property returns the amount the mouse wheel have scrolled. The values can be positive or negative depending on the scroll direction (on OS X with \"natural\" scrolling enabled, the signs are inverted). Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method. Due to the current support of the \"wheel\" event on Safari, the function may only work as expected if \"return false\" is included while using Safari."
      ],
      "params": {
        "event": "Object: (Optional) optional WheelEvent callback argument."
      }
    },
    "requestPointerLock": {
      "description": [
        "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a> locks the pointer to its current position and makes it invisible. Use <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since the last call of draw. Note that not all browsers support this feature. This enables you to create experiences that aren't limited by the mouse moving out of the screen even if it is repeatedly moved into one direction. For example, a first person perspective experience."
      ]
    },
    "exitPointerLock": {
      "description": [
        "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a> exits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a> for example to make ui elements usable etc"
      ]
    },
    "touches": {
      "description": [
        "The system variable touches[] contains an array of the positions of all current touch points, relative to (0, 0) of the canvas, and IDs identifying a unique touch as it moves. Each element in the array is an object with x, y, and id properties. ",
        "The touches[] array is not supported on Safari and IE on touch-based desktops (laptops)."
      ]
    },
    "touchStarted": {
      "description": [
        "The touchStarted() function is called once after every time a touch is registered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchMoved": {
      "description": [
        "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered. If no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchEnded": {
      "description": [
        "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no <a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "createImage": {
      "description": [
        "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a fresh buffer of pixels to play with. Set the size of the buffer with the width and height parameters. ",
        ".<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels in the display window. These values are numbers. This array is the size (including an appropriate factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>. ",
        "Before accessing the pixels of an image, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "width": "Integer: width in pixels",
        "height": "Integer: height in pixels"
      }
    },
    "saveCanvas": {
      "description": [
        "Save the current canvas as an image. The browser will either save the file immediately, or prompt the user with a dialogue window."
      ],
      "params": {
        "selectedCanvas": "p5.Element|HTMLCanvasElement: a variable  representing a specific html5 canvas (optional)",
        "filename": "String (Optional)",
        "extension": "String: (Optional) 'jpg' or 'png'"
      }
    },
    "saveFrames": {
      "description": [
        "Capture a sequence of frames that can be used to create a movie. Accepts a callback. For example, you may wish to send the frames to a server where they can be stored or converted into a movie. If no callback is provided, the browser will pop up save dialogues in an attempt to download all of the images that have just been created. With the callback provided the image data isn't saved by default but instead passed as an argument to the callback function as an array of objects, with the size of array equal to the total number of frames. ",
        "Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation. To export longer animations, you might look into a library like <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>."
      ],
      "params": {
        "filename": "String",
        "extension": "String: 'jpg' or 'png'",
        "duration": "Number: Duration in seconds to save the frames for.",
        "framerate": "Number: Framerate to save the frames in.",
        "callback": "Function(Array): (Optional) A callback function that will be executed  to handle the image data. This function  should accept an array as argument. The  array will contain the specified number of  frames of objects. Each object has three  properties: imageData - an  image/octet-stream, filename and extension."
      }
    },
    "loadImage": {
      "description": [
        "Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it. ",
        "The image may not be immediately available for rendering. If you want to ensure that the image is ready before doing anything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>. You may also supply a callback function to handle the image when it's ready. ",
        "The path to the image should be relative to the HTML file that links in your sketch. Loading an image from a URL or other remote location may be blocked due to your browser's built-in security. ",
        "You can also pass in a string of a base64 encoded image as an alternative to the file path. Remember to add \"data:image/png;base64,\" in front of the string."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "path": "String: Path of the image to be loaded",
        "successCallback": "function(p5.Image): (Optional) Function to be called once  the image is loaded. Will be passed the  <a href=\"#/p5.Image\">p5.Image</a>.",
        "failureCallback": "Function(Event): (Optional) called with event error if  the image fails to load."
      }
    },
    "image": {
      "description": [
        "Draw an image to the p5.js canvas. ",
        "This function can be used with different numbers of parameters. The simplest use requires only three parameters: img, x, and y—where (x, y) is the position of the image. Two more parameters can optionally be added to specify the width and height of the image. ",
        "This function can also be used with all eight Number parameters. To differentiate between all these parameters, p5.js uses the language of \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the \"source image\" dimensions can be useful when you want to display a subsection of the source image instead of the whole thing. Here's a diagram to explain further: <img src=\"assets/drawImage.png\"></img>"
      ],
      "params": {
        "img": "p5.Image|p5.Element: the image to display",
        "x": "Number: the x-coordinate of the top-left corner of the image",
        "y": "Number: the y-coordinate of the top-left corner of the image",
        "width": "Number: (Optional) the width to draw the image",
        "height": "Number: (Optional) the height to draw the image",
        "dx": "Number: the x-coordinate of the destination  rectangle in which to draw the source image",
        "dy": "Number: the y-coordinate of the destination  rectangle in which to draw the source image",
        "dWidth": "Number: the width of the destination rectangle",
        "dHeight": "Number: the height of the destination rectangle",
        "sx": "Number: the x-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sy": "Number: the y-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sWidth": "Number: (Optional) the width of the subsection of the  source image to draw into the destination  rectangle",
        "sHeight": "Number: (Optional) the height of the subsection of the  source image to draw into the destination rectangle"
      }
    },
    "tint": {
      "description": [
        "Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value. ",
        "To apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, tint(255, 128) will make an image 50% transparent (assuming the default alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>). ",
        "The value for the gray parameter must be less than or equal to the current maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is 255."
      ],
      "params": {
        "v1": "Number: o valor de vermelho ou de matiz (dependendo do formato de cor sendo utilizado)",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number (Optional)",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the tint color"
      }
    },
    "noTint": {
      "description": [
        "Removes the current fill value for displaying images and reverts to displaying images with their original hues."
      ]
    },
    "imageMode": {
      "description": [
        "Set image mode. Modifies the location from which images are drawn by changing the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted. The default mode is imageMode(CORNER), which interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height. ",
        "imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the location of one corner, and the fourth and fifth parameters as the opposite corner. ",
        "imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the image's center point. If two additional parameters are specified, they are used to set the image's width and height."
      ],
      "params": {
        "mode": "Constant: either CORNER, CORNERS, or CENTER"
      }
    },
    "pixels": {
      "description": [
        "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a> containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays will have more pixels[] (by a factor of pixelDensity^2). For example, if the image is 100x100 pixels, there will be 40,000. On a retina display, there will be 160,000. ",
        "The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre> ",
        "While the above method is complex, it is flexible enough to work with any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at any pixelDensity, but the performance may not be as fast when lots of modifications are made to the pixel array. ",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a> function must be run to update the changes. ",
        "Note that this is not a standard javascript array. This means that standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not work."
      ]
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL."
      }
    },
    "copy": {
      "description": [
        "Copies a region of the canvas to another region of the canvas and copies a region of pixels from an image used as the srcImg parameter into the canvas srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "filter": {
      "description": [
        "Applies a filter to the canvas. The presets options are: ",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used. ",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used. ",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used. ",
        "INVERT Sets each pixel to its inverse value. No parameter is used. ",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges. ",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur. ",
        "ERODE Reduces the light areas. No parameter is used. ",
        "DILATE Increases the light areas. No parameter is used. ",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, BLUR, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels, or a single pixel, from the canvas. ",
        "Returns an array of [R,G,B,A] values for any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Use the x and y parameters to get the value of one pixel. Get a section of the display window by specifying additional w and h parameters. When getting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>. ",
        "Getting the color of a single pixel with get(x, y) is easy, but not as fast as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is <pre><code class=\"language-javascript\">let x, y, d; // set these to the coordinates let off = (y * width + x) * d * 4; let components = [  pixels[off],  pixels[off + 1],  pixels[off + 2],  pixels[off + 3] ]; print(components);</code></pre> ",
        "See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information. ",
        "If you want to extract an array of colors or a subimage from an p5.Image object, take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>"
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "loadPixels": {
      "description": [
        "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This function must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>. Note that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ]
    },
    "set": {
      "description": [
        "Changes the color of any pixel, or writes an image directly to the display window. The x and y parameters specify the pixel to change and the c parameter specifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A] pixel array. It can also be a single grayscale value. When setting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>. ",
        "After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear. This should be called once all pixels have been set, and must be called before calling .<a href=\"#/p5/get\">get()</a> or drawing the image. ",
        "Setting the color of a single pixel with set(x, y) is easy, but not as fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a> values directly may be complicated when working with a retina display, but will perform better when lots of pixels need to be set directly on every loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "c": "Number|Number[]|Object: insert a grayscale value | a pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy"
      }
    },
    "updatePixels": {
      "description": [
        "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array. Use in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from the array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only necessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the pixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with <a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ],
      "params": {
        "x": "Number: (Optional) x-coordinate of the upper-left corner of region  to update",
        "y": "Number: (Optional) y-coordinate of the upper-left corner of region  to update",
        "w": "Number: (Optional) width of region to update",
        "h": "Number: (Optional) height of region to update"
      }
    },
    "loadJSON": {
      "description": [
        "Loads a JSON file from a file or a URL, and returns an Object. Note that even if the JSON file contains an Array, an Object will be returned with index numbers as keys. ",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. JSONP is supported via a polyfill and you can pass in as the second argument an object with definitions of the json callback following the syntax specified <a href=\"https://github.com/camsong/ fetch-jsonp\">here</a>. ",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object|Array: JSON data",
      "params": {
        "path": "String: name of the file or url to load",
        "jsonpOptions": "Object: (Optional) options object for jsonp related settings",
        "datatype": "String: (Optional) \"json\" or \"jsonp\"",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed  in as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadStrings": {
      "description": [
        "Reads the contents of a file and creates a String array of its individual lines. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder. ",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network. ",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. ",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "filename": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>  completes, Array is passed in as first  argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadTable": {
      "description": [
        "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with its values. If a file is specified, it must be located in the sketch's \"data\" folder. The filename parameter can also be a URL to a file found online. By default, the file is assumed to be comma-separated (in CSV format). Table only looks for a header row if the 'header' option is included. ",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called. Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object: ",
        "All files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: <a href=\"#/p5.Table\">Table</a> object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "extension": "String: (Optional) parse the table by comma-separated values \"csv\", semicolon-separated  values \"ssv\", or tab-separated values \"tsv\"",
        "header": "String: (Optional) \"header\" to indicate table has header row",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the  <a href=\"#/p5.Table\">Table</a> object is passed in as the  first argument.",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadXML": {
      "description": [
        "Reads the contents of a file and creates an XML object with its values. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder. ",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network. ",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called. ",
        "Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object. ",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: XML object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>  completes, XML object is passed in as  first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadBytes": {
      "description": [
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: an object whose 'bytes' property will be the loaded buffer",
      "params": {
        "file": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>  completes",
        "errorCallback": "Function: (Optional) function to be executed if there  is an error"
      }
    },
    "httpGet": {
      "description": [
        "Method for executing an HTTP GET request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return a Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer which can be used to initialize typed arrays (such as Uint8Array)."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"binary\", \"arrayBuffer\",  \"xml\", or \"text\"",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpPost": {
      "description": [
        "Method for executing an HTTP POST request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'POST')</code>."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\".  If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpDo": {
      "description": [
        "Method for executing an HTTP request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. For more advanced use, you may also pass in the path as the first argument and a object as the second argument, the signature follows the one specified in the Fetch API specification. This method is suitable for fetching files up to size of 64MB when \"GET\" is used."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "method": "String: (Optional) either \"GET\", \"POST\", or \"PUT\",  defaults to \"GET\"",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\"",
        "data": "Object: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument",
        "options": "Object: Request object options as documented in the  \"fetch\" API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>"
      }
    },
    "createWriter": {
      "returns": "p5.PrintWriter: ",
      "params": {
        "name": "String: name of the file to be created",
        "extension": "String (Optional)"
      }
    },
    "save": {
      "description": [
        "Saves a given element(image, text, json, csv, wav, or html) to the client's computer. The first parameter can be a pointer to element we want to save. The element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of Strings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table </a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires p5.sound). The second parameter is a filename (including extension).The third parameter is for options specific to this type of object. This method will save a file that fits the given parameters. If it is called without specifying an element, by default it will save the whole canvas as an image file. You can optionally specify a filename as the first parameter in such a case. <strong>Note that it is not recommended to call this method within draw, as it will open a new save dialog on every render.</strong>"
      ],
      "params": {
        "objectOrFilename": "Object|String: (Optional) If filename is provided, will  save canvas as an image with  either png or jpg extension  depending on the filename.  If object is provided, will  save depending on the object  and filename (see examples  above).",
        "filename": "String: (Optional) If an object is provided as the first  parameter, then the second parameter  indicates the filename,  and should include an appropriate  file extension (see examples above).",
        "options": "Boolean|String: (Optional) Additional options depend on  filetype. For example, when saving JSON,  <code>true</code> indicates that the  output will be optimized for filesize,  rather than readability."
      }
    },
    "saveJSON": {
      "description": [
        "Writes the contents of an Array or a JSON object to a .json file. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "json": "Array|Object",
        "filename": "String",
        "optimize": "Boolean: (Optional) If true, removes line breaks  and spaces from the output  file to optimize filesize  (but not readability)."
      }
    },
    "saveStrings": {
      "description": [
        "Writes an array of Strings to a text file, one line per String. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "list": "String[]: string array to be written",
        "filename": "String: filename for output",
        "extension": "String: (Optional) the filename's extension",
        "isCRLF": "Boolean: (Optional) if true, change line-break to CRLF"
      }
    },
    "saveTable": {
      "description": [
        "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a text file with comma-separated-values ('csv') but can also use tab separation ('tsv'), or generate an HTML table ('html'). The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "Table": "p5.Table: the <a href=\"#/p5.Table\">Table</a> object to save to a file",
        "filename": "String: the filename to which the Table should be saved",
        "options": "String: (Optional) can be one of \"tsv\", \"csv\", or \"html\""
      }
    },
    "abs": {
      "description": [
        "Calculates the absolute value (magnitude) of a number. Maps to Math.abs(). The absolute value of a number is always positive."
      ],
      "returns": "Number: absolute value of given number",
      "params": {
        "n": "Number: number to compute"
      }
    },
    "ceil": {
      "description": [
        "Calculates the closest int value that is greater than or equal to the value of the parameter. Maps to Math.ceil(). For example, ceil(9.03) returns the value 10."
      ],
      "returns": "Integer: rounded up number",
      "params": {
        "n": "Number: number to round up"
      }
    },
    "constrain": {
      "description": [
        "Constrains a value between a minimum and maximum value."
      ],
      "returns": "Number: constrained number",
      "params": {
        "n": "Number: number to constrain",
        "low": "Number: minimum limit",
        "high": "Number: maximum limit"
      }
    },
    "dist": {
      "description": [
        "Calculates the distance between two points, in either two or three dimensions."
      ],
      "returns": "Number: distance between the two points",
      "params": {
        "x1": "Number: x-coordinate do primeiro ponto",
        "y1": "Number: y-coordinate do primeiro ponto",
        "x2": "Number: x-coordinate do segundo ponto",
        "y2": "Number: y-coordinate do segundo ponto",
        "z1": "Number: z-coordinate do primeiro ponto",
        "z2": "Number: z-coordinate do segundo ponto"
      }
    },
    "exp": {
      "description": [
        "Returns Euler's number e (2.71828...) raised to the power of the n parameter. Maps to Math.exp()."
      ],
      "returns": "Number: e^n",
      "params": {
        "n": "Number: exponent to raise"
      }
    },
    "floor": {
      "description": [
        "Calculates the closest int value that is less than or equal to the value of the parameter. Maps to Math.floor()."
      ],
      "returns": "Integer: rounded down number",
      "params": {
        "n": "Number: number to round down"
      }
    },
    "lerp": {
      "description": [
        "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, and 1.0 is equal to the second point. If the value of amt is more than 1.0 or less than 0.0, the number will be calculated accordingly in the ratio of the two given numbers. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines."
      ],
      "returns": "Number: lerped value",
      "params": {
        "start": "Number: first value",
        "stop": "Number: second value",
        "amt": "Number: number"
      }
    },
    "log": {
      "description": [
        "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the n parameter to be a value greater than 0.0. Maps to Math.log()."
      ],
      "returns": "Number: natural logarithm of n",
      "params": {
        "n": "Number: number greater than 0"
      }
    },
    "mag": {
      "description": [
        "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is a shortcut for writing dist(0, 0, x, y)."
      ],
      "returns": "Number: magnitude of vector from (0,0) to (a,b)",
      "params": {
        "a": "Number: first value",
        "b": "Number: second value"
      }
    },
    "map": {
      "description": [
        "Re-maps a number from one range to another. ",
        "In the first example above, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width)."
      ],
      "returns": "Number: remapped number",
      "params": {
        "value": "Number: the incoming value to be converted",
        "start1": "Number: lower bound of the value's current range",
        "stop1": "Number: upper bound of the value's current range",
        "start2": "Number: lower bound of the value's target range",
        "stop2": "Number: upper bound of the value's target range",
        "withinBounds": "Boolean: (Optional) constrain the value to the newly mapped range"
      }
    },
    "max": {
      "description": [
        "Determines the largest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: maximum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "min": {
      "description": [
        "Determines the smallest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: minimum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "norm": {
      "description": [
        "Normalizes a number from another range into a value between 0 and 1. Identical to map(value, low, high, 0, 1). Numbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. (See the example above.)"
      ],
      "returns": "Number: normalized number",
      "params": {
        "value": "Number: incoming value to be normalized",
        "start": "Number: lower bound of the value's current range",
        "stop": "Number: upper bound of the value's current range"
      }
    },
    "pow": {
      "description": [
        "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient way of multiplying numbers by themselves (or their reciprocals) in large quantities. For example, pow(3, 5) is equivalent to the expression 3 × 3 × 3 × 3 × 3 and pow(3, -5) is equivalent to 1 / 3 × 3 × 3 × 3 × 3. Maps to Math.pow()."
      ],
      "returns": "Number: n^e",
      "params": {
        "n": "Number: base of the exponential expression",
        "e": "Number: power by which to raise the base"
      }
    },
    "round": {
      "description": [
        "Calculates the integer closest to the n parameter. For example, round(133.8) returns the value 134. Maps to Math.round()."
      ],
      "returns": "Integer: rounded number",
      "params": {
        "n": "Number: number to round",
        "decimals": "Number: (Optional) number of decimal places to round to, default is 0"
      }
    },
    "sq": {
      "description": [
        "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1."
      ],
      "returns": "Number: squared number",
      "params": {
        "n": "Number: number to square"
      }
    },
    "sqrt": {
      "description": [
        "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring. Maps to Math.sqrt()."
      ],
      "returns": "Number: square root of number",
      "params": {
        "n": "Number: non-negative number to square root"
      }
    },
    "fract": {
      "description": [
        "Calculates the fractional part of a number."
      ],
      "returns": "Number: fractional part of x, i.e, {x}",
      "params": {
        "num": "Number: Number whose fractional part needs to be found out"
      }
    },
    "createVector": {
      "description": [
        "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction."
      ],
      "returns": "p5.Vector: ",
      "params": {
        "x": "Number: (Optional) x component of the vector",
        "y": "Number: (Optional) y component of the vector",
        "z": "Number: (Optional) z component of the vector"
      }
    },
    "noise": {
      "description": [
        "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more naturally ordered, harmonic succession of numbers compared to the standard <b>random()</b> function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.",
        "The main difference to the <b>random()</b> function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program; see the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The resulting value will always be between 0.0 and 1.0. The noise value can be animated by moving through the noise space as demonstrated in the example above. The 2nd and 3rd dimension can also be interpreted as time.",
        "The actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result. ",
        "Another way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using <b>noise()</b> within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use."
      ],
      "returns": "Number: Perlin noise value (between 0 and 1) at specified  coordinates",
      "params": {
        "x": "Number: x-coordinate in noise space",
        "y": "Number: (Optional) y-coordinate in noise space",
        "z": "Number: (Optional) z-coordinate in noise space"
      }
    },
    "noiseDetail": {
      "description": [
        "Adjusts the character and level of detail produced by the Perlin noise  function. Similar to harmonics in physics, noise is computed over  several octaves. Lower octaves contribute more to the output signal and  as such define the overall intensity of the noise, whereas higher octaves  create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing  exactly half than its predecessor, starting at 50% strength for the 1st  octave. This falloff amount can be changed by adding an additional function  parameter. Eg. a falloff factor of 0.75 means each octave will now have  75% impact (25% less) of the previous lower octave. Any value between  0.0 and 1.0 is valid, however note that values greater than 0.5 might  result in greater than 1.0 values returned by <b>noise()</b>. By changing these parameters, the signal created by the <b>noise()</b>  function can be adapted to fit very specific needs and characteristics."
      ],
      "params": {
        "lod": "Number: number of octaves to be used by the noise",
        "falloff": "Number: falloff factor for each octave"
      }
    },
    "noiseSeed": {
      "description": [
        "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b> produces different results each time the program is run. Set the <b>value</b> parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "randomSeed": {
      "description": [
        "Sets the seed value for <a href=\"#/p5/random\">random()</a>. ",
        "By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "random": {
      "description": [
        "Return a random floating-point number. ",
        "Takes either 0, 1 or 2 arguments. ",
        "If no argument is given, returns a random number from 0 up to (but not including) 1. ",
        "If one argument is given and it is a number, returns a random number from 0 up to (but not including) the number. ",
        "If one argument is given and it is an array, returns a random element from that array. ",
        "If two arguments are given, returns a random number from the first argument up to (but not including) the second argument."
      ],
      "returns": "Number: the random number",
      "params": {
        "min": "Number: (Optional) the lower bound (inclusive)",
        "max": "Number: (Optional) the upper bound (exclusive)",
        "choices": "Array: the array to choose from"
      }
    },
    "randomGaussian": {
      "description": [
        "Returns a random number fitting a Gaussian, or  normal, distribution. There is theoretically no minimum or maximum  value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is  just a very low probability that values far from the mean will be  returned; and a higher probability that numbers near the mean will  be returned. Takes either 0, 1 or 2 arguments.  If no args, returns a mean of 0 and standard deviation of 1.  If one arg, that arg is the mean (standard deviation is 1).  If two args, first is mean, second is standard deviation."
      ],
      "returns": "Number: the random number",
      "params": {
        "mean": "Number: (Optional) the mean",
        "sd": "Number: (Optional) the standard deviation"
      }
    },
    "acos": {
      "description": [
        "The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927) if the angleMode is RADIANS or 0 to 180 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc cosine of the given value",
      "params": {
        "value": "Number: the value whose arc cosine is to be returned"
      }
    },
    "asin": {
      "description": [
        "The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc sine of the given value",
      "params": {
        "value": "Number: the value whose arc sine is to be returned"
      }
    },
    "atan": {
      "description": [
        "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function expects the values in the range of -Infinity to Infinity (exclusive) and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc tangent of the given value",
      "params": {
        "value": "Number: the value whose arc tangent is to be returned"
      }
    },
    "atan2": {
      "description": [
        "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI if the angleMode is RADIANS or 180 to -180 if the angleMode is DEGREES. The atan2<a href=\"#/p5/\">()</a> function is most often used for orienting geometry to the position of the cursor. ",
        "Note: The y-coordinate of the point is the first parameter, and the x-coordinate is the second parameter, due the the structure of calculating the tangent."
      ],
      "returns": "Number: the arc tangent of the given point",
      "params": {
        "y": "Number: y-coordinate of the point",
        "x": "Number: x-coordinate of the point"
      }
    },
    "cos": {
      "description": [
        "Calculates the cosine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the cosine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "sin": {
      "description": [
        "Calculates the sine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the sine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "tan": {
      "description": [
        "Calculates the tangent of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers."
      ],
      "returns": "Number: the tangent of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "degrees": {
      "description": [
        "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "radians": "Number: the radians value to convert to degrees"
      }
    },
    "radians": {
      "description": [
        "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "degrees": "Number: the degree value to convert to radians"
      }
    },
    "angleMode": {
      "description": [
        "Sets the current mode of p5 to given mode. Default mode is RADIANS."
      ],
      "params": {
        "mode": "Constant: either RADIANS or DEGREES"
      }
    },
    "textAlign": {
      "description": [
        "Sets the current alignment for drawing text. Accepts two arguments: horizAlign (LEFT, CENTER, or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or BASELINE). ",
        "The horizAlign parameter is in reference to the x value of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is in reference to the y value. ",
        "So if you write textAlign(LEFT), you are aligning the left edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you write textAlign(RIGHT, TOP), you are aligning the right edge of your text to the x value and the top of edge of the text to the y value."
      ],
      "params": {
        "horizAlign": "Constant: horizontal alignment, either LEFT,  CENTER, or RIGHT",
        "vertAlign": "Constant: (Optional) vertical alignment, either TOP,  BOTTOM, CENTER, or BASELINE"
      }
    },
    "textLeading": {
      "description": [
        "Sets/gets the spacing, in pixels, between lines of text. This setting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function."
      ],
      "params": {
        "leading": "Number: the size in pixels for spacing between lines"
      }
    },
    "textSize": {
      "description": [
        "Sets/gets the current font size. This size will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels."
      ],
      "params": {
        "theSize": "Number: the size of the letters in units of pixels"
      }
    },
    "textStyle": {
      "description": [
        "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC. Note: this may be is overridden by CSS styling. For non-system fonts (opentype, truetype, etc.) please load styled fonts instead."
      ],
      "params": {
        "theStyle": "Constant: styling for text, either NORMAL,  ITALIC, BOLD or BOLDITALIC"
      }
    },
    "textWidth": {
      "description": [
        "Calculates and returns the width of any character or text string."
      ],
      "returns": "Number: the calculated width",
      "params": {
        "theText": "String: the String of characters to measure"
      }
    },
    "textAscent": {
      "description": [
        "Returns the ascent of the current font at its current size. The ascent represents the distance, in pixels, of the tallest character above the baseline."
      ],
      "returns": "Number: "
    },
    "textDescent": {
      "description": [
        "Returns the descent of the current font at its current size. The descent represents the distance, in pixels, of the character with the longest descender below the baseline."
      ],
      "returns": "Number: "
    },
    "loadFont": {
      "description": [
        "Loads an opentype font file (.otf, .ttf) from a file or a URL, and returns a PFont Object. This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. ",
        "The path to the font should be relative to the HTML file that links in your sketch. Loading fonts from a URL or other remote location may be blocked due to your browser's built-in security."
      ],
      "returns": "p5.Font: <a href=\"#/p5.Font\">p5.Font</a> object",
      "params": {
        "path": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadFont\">loadFont()</a> completes",
        "onError": "Function: (Optional) function to be executed if  an error occurs"
      }
    },
    "text": {
      "description": [
        "Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the <a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set with <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function. Change the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a> functions. ",
        "The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the option to draw to the left, right, and center of the coordinates. ",
        "The x2 and y2 parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen. If x2 and y2 are not specified, the baseline alignment is the default, which means that the text will be drawn upwards from x and y. ",
        "<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above). <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode."
      ],
      "params": {
        "str": "String|Object|Array|Number|Boolean: the alphanumeric  symbols to be displayed",
        "x": "Number: x-coordinate of text",
        "y": "Number: y-coordinate of text",
        "x2": "Number: (Optional) by default, the width of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info",
        "y2": "Number: (Optional) by default, the height of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info"
      }
    },
    "textFont": {
      "description": [
        "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function. If textFont() is called without any argument, it will return the current font if one has been set already. If not, it will return the name of the default font as a string. If textFont() is called with a font to use, it will return the p5 object. ",
        "<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported."
      ],
      "returns": "Object: the current font / p5 Object",
      "params": {
        "font": "Object|String: a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font that is generally available across all systems)",
        "size": "Number: (Optional) the font size to use"
      }
    },
    "append": {
      "description": [
        "Adds a value to the end of an array. Extends the length of the array by one. Maps to Array.push()."
      ],
      "returns": "Array: the array that was appended to",
      "params": {
        "array": "Array: Array to append",
        "value": "Any: to be added to the Array"
      }
    },
    "arrayCopy": {
      "description": [
        "Copies an array (or part of an array) to another array. The src array is copied to the dst array, beginning at the position specified by srcPosition and into the position specified by dstPosition. The number of elements to copy is determined by length. Note that copying values overwrites existing values in the destination array. To append values instead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>. ",
        "The simplified version with only two arguments, arrayCopy(src, dst), copies an entire array to another of the same size. It is equivalent to arrayCopy(src, 0, dst, 0, src.length). ",
        "Using this function is far more efficient for copying array data than iterating through a for() loop and copying each element individually."
      ],
      "params": {
        "src": "Array: the source Array",
        "srcPosition": "Integer: starting position in the source Array",
        "dst": "Array: the destination Array",
        "dstPosition": "Integer: starting position in the destination Array",
        "length": "Integer: number of Array elements to be copied"
      }
    },
    "concat": {
      "description": [
        "Concatenates two arrays, maps to Array.concat(). Does not modify the input arrays."
      ],
      "returns": "Array: concatenated array",
      "params": {
        "a": "Array: first Array to concatenate",
        "b": "Array: second Array to concatenate"
      }
    },
    "reverse": {
      "description": [
        "Reverses the order of an array, maps to Array.reverse()"
      ],
      "returns": "Array: the reversed list",
      "params": {
        "list": "Array: Array to reverse"
      }
    },
    "shorten": {
      "description": [
        "Decreases an array by one element and returns the shortened array, maps to Array.pop()."
      ],
      "returns": "Array: shortened Array",
      "params": {
        "list": "Array: Array to shorten"
      }
    },
    "shuffle": {
      "description": [
        "Randomizes the order of the elements of an array. Implements <a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank> Fisher-Yates Shuffle Algorithm</a>."
      ],
      "returns": "Array: shuffled Array",
      "params": {
        "array": "Array: Array to shuffle",
        "bool": "Boolean: (Optional) modify passed array"
      }
    },
    "sort": {
      "description": [
        "Sorts an array of numbers from smallest to largest, or puts an array of words in alphabetical order. The original array is not modified; a re-ordered array is returned. The count parameter states the number of elements to sort. For example, if there are 12 elements in an array and count is set to 5, only the first 5 elements in the array will be sorted."
      ],
      "returns": "Array: the sorted list",
      "params": {
        "list": "Array: Array to sort",
        "count": "Integer: (Optional) number of elements to sort, starting from 0"
      }
    },
    "splice": {
      "description": [
        "Inserts a value or an array of values into an existing array. The first parameter specifies the initial array to be modified, and the second parameter defines the data to be inserted. The third parameter is an index value which specifies the array position from which to insert data. (Remember that array index numbering starts at zero, so the first position is 0, the second position is 1, and so on.)"
      ],
      "returns": "Array: the list",
      "params": {
        "list": "Array: Array to splice into",
        "value": "Any: value to be spliced in",
        "position": "Integer: in the array from which to insert data"
      }
    },
    "subset": {
      "description": [
        "Extracts an array of elements from an existing array. The list parameter defines the array from which the elements will be copied, and the start and count parameters specify which elements to extract. If no count is given, elements will be extracted from the start to the end of the array. When specifying the start, remember that the first array element is 0. This function does not change the source array."
      ],
      "returns": "Array: Array of extracted elements",
      "params": {
        "list": "Array: Array to extract from",
        "start": "Integer: position to begin",
        "count": "Integer: (Optional) number of values to extract"
      }
    },
    "float": {
      "description": [
        "Converts a string to its floating point representation. The contents of a string must resemble a number, or NaN (not a number) will be returned. For example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\") will return NaN. ",
        "When an array of values is passed in, then an array of floats of the same length is returned."
      ],
      "returns": "Number: floating point representation of string",
      "params": {
        "str": "String: float string to parse"
      }
    },
    "int": {
      "description": [
        "Converts a boolean, string, or float to its integer representation. When an array of values is passed in, then an int array of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "radix": "Integer: (Optional) the radix to convert to (default: 10)",
        "ns": "Array: values to parse"
      }
    },
    "str": {
      "description": [
        "Converts a boolean, string or number to its string representation. When an array of values is passed in, then an array of strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Boolean|Number|Array: value to parse"
      }
    },
    "byte": {
      "description": [
        "Converts a number, string representation of a number, or boolean to its byte representation. A byte can be only a whole number between -128 and 127, so when a value outside of this range is converted, it wraps around to the corresponding byte representation. When an array of number, string or boolean values is passed in, then an array of bytes the same length is returned."
      ],
      "returns": "Number: byte representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "char": {
      "description": [
        "Converts a number or string to its corresponding single-character string representation. If a string parameter is provided, it is first parsed as an integer and then translated into a single-character string. When an array of number or string values is passed in, then an array of single-character strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "unchar": {
      "description": [
        "Converts a single-character string to its corresponding integer representation. When an array of single-character string values is passed in, then an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "hex": {
      "description": [
        "Converts a number to a string in its equivalent hexadecimal notation. If a second parameter is passed, it is used to set the number of characters to generate in the hexadecimal notation. When an array is passed in, an array of strings in hexadecimal notation of the same length is returned."
      ],
      "returns": "String: hexadecimal string representation of value",
      "params": {
        "n": "Number: value to parse",
        "digits": "Number (Optional)",
        "ns": "Number[]: array of values to parse"
      }
    },
    "unhex": {
      "description": [
        "Converts a string representation of a hexadecimal number to its equivalent integer value. When an array of strings in hexadecimal notation is passed in, an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of hexadecimal value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "join": {
      "description": [
        "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or nfs()."
      ],
      "returns": "String: joined String",
      "params": {
        "list": "Array: array of Strings to be joined",
        "separator": "String: String to be placed between each item"
      }
    },
    "match": {
      "description": [
        "Esta função é usada para aplicar uma expressão regular a um trecho de texto e retornar grupos correspondentes (elementos encontrados entre parênteses) como um vetor de Strings. Se não houver correspondências, um valor nulo será retornado. Se nenhum grupo for especificado na expressão regular, mas a sequência corresponder, um vetor de comprimento 1 (com o texto correspondente como o primeiro elemento do vetor) será retornado.",
        "Para usar a função, primeiro verifique se o resultado é nulo. Se o resultado for nulo, então a sequência não coincidiu. Se a sequência coincidiu, um vetor é retornada.",
        "Se houver grupos (especificados por conjuntos de parênteses) na expressão regular, os conteúdos de cada um serão retornados no vetor. O elemento [0] de uma correspondência de uma expressão regular retorna toda a string correspondente e os grupos de correspondência começam no elemento [1] (o primeiro grupo é [1], o segundo [2] e assim por diante)."
      ],
      "returns": "String[]: Vetor de Strings encontrado",
      "params": {
        "str": "String: a String a ser procurada",
        "regexp": "String: a expressão regular a ser usada para procurar correspondências"
      }
    },
    "matchAll": {
      "description": [
        "Esta função é usada para aplicar uma expressão regular a um trecho de texto e retornar uma lista de grupos correspondentes (elementos encontrados entre parênteses) como uma matriz de strings bidimensional. Se não houver correspondências, um valor nulo será retornado. Se nenhum grupo for especificado na expressão regular, mas a sequência corresponder, uma matriz bidimensional ainda será retornada, mas a segunda dimensão terá apenas o comprimento um.",
        "Para usar a função, primeiro verifique se o resultado é nulo. Se o resultado for nulo, então a sequência não coincidiu. Se a sequência coincidiu, uma matriz 2D é retornada.",
        "Se houver grupos (especificados por conjuntos de parênteses) na expressão regular, os conteúdos de cada um serão retornados na matriz. Assumindo um loop com variável de contador i, o elemento [i][0] de uma correspondência de expressão regular retorna toda a string correspondente e os grupos de correspondência começam no elemento [i][1] (o primeiro grupo é [i][1] , o segundo [i][2] e assim por diante)."
      ],
      "returns": "String[]: Array 2D de strings encontradas",
      "params": {
        "str": "String: a String a ser procurada",
        "regexp": "String: a expressão regular a ser usada para procurar correspondências"
      }
    },
    "nf": {
      "description": [
        "Função utilitária para formatar números em strings. Existem duas versões: uma para formatar floats e outra para formatar ints. Os valores dos dígitos, parâmetros esquerdo e direito devem ser sempre inteiros positivos. (NOTA): Tenha cautela ao usar os parâmetros esquerdo e direito, uma vez que eles adicionam números de 0s se o parâmetro for maior que o comprimento atual do número. Por exemplo, se o número for 123,2 e o parâmetro esquerdo passado for de 4, que é maior que o comprimento de 123 (parte inteira), ou seja, 3, o resultado será 0123,2. Mesmo caso para o parâmetro direito, ou seja, se o direito for 3, o resultado será 123,200."
      ],
      "returns": "String: String formatada",
      "params": {
        "num": "Número|String: o número a ser formatado",
        "left": "Inteiro|String (opcional): número de dígitos à esquerda da vírgula decimal",
        "right": "Inteiro|String (opcional):número de dígitos à direita da vírgula decimal ",
        "nums": "Array: os números a se formatar"
      }
    },
    "nfc": {
      "description": [
        "Função utilitária para formatar números em strings e colocar vírgulas apropriadas para marcar unidades de 1000. Existem duas versões: uma para formatar ints e outra para formatar uma array de ints. O valor do parâmetro correto deve ser sempre um número inteiro positivo."
      ],
      "returns": "String: String formatada",
      "params": {
        "num": "Numero|String: o número a ser formatado",
        "right": "Inteiro|String (opcional): número de dígitos à direita da vírgula decimal",
        "nums": "Array: os números a se formatar"
      }
    },
    "nfp": {
      "description": [
        "Função utilitária para formatar números em strings. Similar a <a href=\"#/p5/nf\">nf()</a> mas coloca um \"+\" na frente de números positivos e um \"-\" na frente de números negativos. Existem duas versões: uma para formatar floats e outra para formatar ints. Os valores dos parâmetros esquerdo e direito devem ser sempre inteiros positivos. "
      ],
   "returns": "String: String formatada",
      "params": {
        "num": "Número: o número a ser formatado",
        "left": "Número (opcional): número de dígitos à esquerda da vírgula decimal",
        "right": "Número (opcional): número de dígitos à direita da vírgula decimal ",
        "nums": "Número[]: os números a se formatar"
      }
    },
    "nfs": {
      "description": [
        "Função utilitária para formatar números em strings. Similar a <a href=\"#/p5/nf\">nf()</a> mas coloca um \"_\" (espaço) adicional na frente de números positivos a fim de alinhá-los com números negativos que incluem o sinal \"-\" (menos). O principal tipo de uso de nfs() pode ser visto quando se deseja alinhar os dígitos (valores de posição) de um número não negativo com algum número negativo (veja o exemplo para obter uma imagem clara). Existem duas versões: uma para formatar floats e outra para formatar ints. Os valores dos dígitos, parâmetros esquerdo e direito, devem ser sempre inteiros positivos. <br/> Importante: o resultado mostrado no Canvas do alinhamento esperado pode variar com base no tipo de fonte tipográfica que você está usando. <br/> (NOTA): Tenha cautela ao usar os parâmetros esquerdo e direito, uma vez que eles adicionam números de 0s se o parâmetro for maior que o comprimento atual do número. Por exemplo, se o número for 123,2 e o parâmetro esquerdo passado for de 4, que é maior que o comprimento de 123 (parte inteira), ou seja, 3, o resultado será 0123,2. Mesmo caso para o parâmetro direito, ou seja, se o direito for 3, o resultado será 123,200."
      ],
      "returns": "String: String formatada",
      "params": {
        "num": "Número: o número a ser formatado",
        "left": "Número (opcional): número de dígitos à esquerda da vírgula decimal",
        "right": "Número (opcional): número de dígitos à direita da vírgula decimal ",
        "nums": "Array: os números a se formatar"
      }
    },
    "split": {
      "description": [
        "A função <a href=\"#/p5/split\">split()</a> mapeia para String.split(), ela divide uma String em pedaços usando um caractere ou string como delimitador. O parâmetro delim especifica o caractere ou caracteres que marcam os limites entre cada pedaço. Uma array de String[] é retornado contendo cada uma das peças. ",
        "A função <a href=\"#/p5/splitTokens\">splitTokens()</a> funciona de maneira semelhante, exceto por se dividir usando um intervalo de caracteres em vez de um caractere ou sequência específica. "
      ],
      "returns": "String[]: Array de Strings",
      "params": {
        "value": "String: a String a ser dividida",
        "delim": "String: a String usada para separar os dados"
      }
    },
    "splitTokens": {
      "description": [
        "A função <a href=\"#/p5/splitTokens\">splitTokens()</a> divide uma String em um ou mais delimitadores de caracteres ou \"tokens.\" O parâmetro delim especifica o caractere ou caracteres a serem usados como limite. ",
        "Se nenhum caractere delim for especificado, qualquer caractere de espaço em branco será usado para dividir. Os caracteres de espaço em branco incluem tab (\\t), nova linha (\\n), retorno de carro (\\r), alimentação de formulário (\\f), e espaço. "
      ],
      "returns": "String[]: Array de Strings",
      "params": {
        "value": "String: a String a ser dividida",
        "delim": "String (opcional): lista de Strings individuais que serão usadas como separadores"
      }
    },
    "trim": {
      "description": [
        "Remove os caracteres de espaço em branco do início e do final de uma String. Além dos caracteres de espaço em branco padrão, como espaço, retorno de carro e tab, esta função também remove o caractere Unicode \"nbsp\"."
      ],
      "returns": "String: uma String aparada",
      "params": {
        "str": "String: uma String a ser aparada",
        "strs": "Array: uma Array de Strings a ser aparado"
      }
    },
    "day": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/day\">day()</a> retorna o dia atual como um valor de 1 - 31."
      ],
      "returns": "Inteiro: o dia atual"
    },
    "hour": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/hour\">hour()</a> retorna a hora atual como um valor de 0 - 23."
      ],
      "returns": "Inteiro: a hora atual"
    },
    "minute": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/minute\">minute()</a> retorna o minuto atual como um valor de 0 - 59."
      ],
      "returns": "Inteiro: o minuto atual"
    },
    "millis": {
      "description": [
        "retorna o número de milissegundos (milésimos de segundo) desde que o programa começou a ser executado (quando <code>setup()</code> é chamado). Esta informação é frequentemente usada para eventos de temporização e sequências de animação."
      ],
      "returns": "Número: o número de milissegundos desde que o programa começou a ser executado "
    },
    "month": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/month\">month()</a> retorna o mês atual como um valor de 1 - 12."
      ],
      "returns": "Inteiro: o mês atual"
    },
    "second": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/second\">second()</a> retorna o segundo atual como um valor de 0 - 59."
      ],
      "returns": "Inteiro: o segundo atual"
    },
    "year": {
      "description": [
        "p5.js se comunica com o relógio do seu computador. A função <a href=\"#/p5/year\">year()</a> retorna o ano atual como um inteiro (2014, 2015, 2016, etc)."
      ],
      "returns": "Inteiro: o ano atual"
    },
    "plane": {
      "description": [
        "Desenha um plano com largura e altura fornecidas"
      ],
      "params": {
        "width": "Número (opcional): largura do plano",
        "height": "Número (opcional): altura do plano",
        "detailX": "Número (opcional): Número opcional de subdivisões de triângulo na dimensão x",
        "detailY": "Número (opcional): Número opcional de subdivisões de triângulo na dimensão y"
      }
    },
    "box": {
      "description": [
        "Desenha uma caixa com largura, altura e profundidade fornecidas"
      ],
      "params": {
        "width": "Número (opcional): largura da caixa",
        "Height": "Número (opcional): altura da caixa",
        "depth": "Número (opcional): profundidade da caixa",
        "detailX": "Número (opcional): Número opcional de subdivisões de triângulo na dimensão x",
        "detailY": "Número (opcional): Número opcional de subdivisões de triângulo na dimensão y"
      }
    },
    "sphere": {
      "description": [
        "Desenha uma esfera com determinado raio.",
        "DetailX e detailY determinam o número de subdivisões na dimensão x e na dimensão y de uma esfera. Mais subdivisões fazem a esfera parecer mais regular. Os valores máximos recomendados são ambos 24. Usar um valor maior que 24 pode causar um alerta ou tornar o navegador mais lento."
      ],
      "params": {
        "radius": "Número (opcional): raio do círculo",
        "detailX": "Número (opcional): Número opcional de subdivisões na dimensão x",
        "detailY": "Número (opcional): Número opcional de subdivisões na dimensão y"
      }
    },
    "cylinder": {
      "description": [
        "Desenha um cilindro com determinado raio e altura ",
        "DetailX e detailY determinam o número de subdivisões na dimensão x e na dimensão y de um cilindro. Mais subdivisões fazem o cilindro parecer mais regular. O valor máximo recomendado para detailX é 24. Usar um valor maior que 24 pode causar um alerta ou tornar o navegador mais lento."
      ],
      "params": {
        "radius": "Número (opcional): raio da superfície",
        "height": "Número (opcional): altura do cilindro",
        "detailX": "Número (opcional): Número de subdivisões na dimensão x;  o padrão é 24",
        "detailY": "Número (opcional): Número de subdivisões na dimensão y; o padrão é 1",
        "bottomCap": "Booleano (opcional): se deve desenhar a base do cilindro",
        "topCap": "Booleano (opcional): se deve desenhar o topo do cilindro"
      }
    },
    "cone": {
      "description": [
        "Desenha um cone com determinado raio e altura ",
        "DetailX e detailY determinam o número de subdivisões na dimensão x e na dimensão y de um cone. Mais subdivisões fazem o cone parecer mais regular. O valor máximo recomendado para detailX é 24. Usar um valor maior que 24 pode causar um alerta ou tornar o navegador mais lento."
      ],
      "params": {
        "radius": "Número (opcional): raio da base",
        "height": "Número (opcional): altura do cone",
        "detailX": "Número (opcional): Número de segmentos, por padrão é 24, quanto mais segmentos, mais regular sua geometria.",
        "detailY": "Número (opcional): Número de segmentos, por padrão é 1, quanto mais segmentos, mais regular sua geometria",
        "cap": "Booleano (opcional): se deve desenhar a base do cone"
      }
    },
    "ellipsoid": {
      "description": [
        "Desenha um elipsóide com determinado raio",
        "DetailX e detailY determinam o número de subdivisões na dimensão x e na dimensão y de um cone. Mais subdivisões fazem o elipsóide parecer mais regular. Evite o número do parâmetro acima de 150, pois pode travar o navegador."
      ],
      "params": {
        "radiusx": "Número (opcional): raio x do elipsóide",
        "radiusy": "Número (opcional): raio y do elipsóide",
        "radiusz": "Número (opcional): raio z do elipsóide",
        "detailX": "Número (opcional): Número de segmentos, por padrão é 24, quanto mais segmentos, mais regular sua geometria. Evite o número do parâmetro acima de 150, pois pode travar o navegador.",
        "detailY": "Número (opcional): Número de segmentos, por padrão é 16, quanto mais segmentos, mais regular sua geometria. Evite o número do parâmetro acima de 150, pois pode travar o navegador."
      }
    },
    "torus": {
      "description": [
        "Desenha um toro com determinado raio e raio do tubo ",
        "DetailX e detailY determinam o número de subdivisões na dimensão x e na dimensão y de um toro. Mais subdivisões fazem o toro parecer mais regular. Os valores padrão e máximos para detailX e detailY são 24 e 16, respectivamente. Configurá-los com valores relativamente pequenos, como 4 e 6, permite criar novas formas além de um toro."
      ],
      "params": {
        "radius": "Número (opcional): raio do anel todo",
        "tubeRadius": "Número (opcional): raio do tubo",
        "detailX": "Número (opcional): Número de segmentos na dimensão x, por padrão é 24, quanto mais segmentos, mais regular sua geometria.",
        "detailY": "Número (opcional): Número de segmentos na dimensão y, por padrão é 16, quanto mais segmentos, mais regular sua geometria."
      }
    },
    "orbitControl": {
      "description": [
        "Permite o movimento em torno de um sketch 3D usando um mouse ou trackpad. Clicar e arrastar com o botão esquerdo girará a posição da câmera sobre o centro do sketch, ao clicar e arrastar com o botão direito, irá mover a câmera horizontalmente sem rotação, e usando a roda do mouse (rolagem), irá mover a câmera para mais perto ou mais longe do centro do sketch. Esta função pode ser chamada com parâmetros que ditam a sensibilidade ao movimento do mouse ao longo dos eixos X e Y. Chamar esta função sem parâmetros é equivalente a chamar orbitControl(1,1). Para inverter a direção do movimento em qualquer um dos eixos, insira um número negativo para sensibilidade. "
      ],
      "params": {
        "sensitivityX": "Número (opcional): sensibilidade ao movimento do mouse ao longo do eixo X",
        "sensitivityY": "Número (opcional): sensibilidade ao movimento do mouse ao longo do eixo Y",
        "sensitivityZ": "Número (opcional): sensibilidade para rolar o movimento ao longo do eixo Z"
      }
    },
    "debugMode": {
      "description": [
        "debugMode() ajuda a visualizar o espaço 3D adicionando uma grade para indicar onde o \"solo\" está em um sketch e um ícone de eixo que indica as direções + X, + Y e + Z. Esta função pode ser chamada sem parâmetros para criar um padrão de grade e ícone de eixos, ou pode ser chamada de acordo com os exemplos acima para personalizar o tamanho e a posição da grade e/ou ícone de eixos. A grade é desenhada usando a cor e a espessura do traço definidas por último. Para especificar esses parâmetros, adicione uma chamada para stroke() e strokeWeight() antes do final do loop draw().",
        "Por padrão, a grade percorrerá a origem (0,0,0) do sketch ao longo do plano XZ e o ícone dos eixos será deslocado da origem. Ambos, a grade e ícone de eixos serão dimensionados de acordo com o tamanho do Canvas atual. Observe que, como a grade é executada paralelamente à visualização padrão da câmera, muitas vezes é útil usar o debugMode junto com orbitControl para permitir a visualização completa da grade."
      ],
      "params": {
        "mode": "Constante: tanto GRADE quanto EIXOS",
        "gridSize": "Número (opcional): tamanho de um lado da grade",
        "gridDivisions": "Número (opcional): Número de divisões na grade",
        "xOff": "Número (opcional): deslocamento do eixo X da origem (0,0,0)",
        "yOff": "Número (opcional): deslocamento do eixo Y da origem (0,0,0)",
        "zOff": "Número (opcional): deslocamento do eixo Z da origem (0,0,0)",
        "axesSize": "Número (opcional): tamanho do ícone de eixos",
        "gridXOff": "Número (opcional)",
        "gridYOff": "Número (opcional)",
        "gridZOff": "Número (opcional)",
        "axesXOff": "Número (opcional)",
        "axesYOff": "Número (opcional)",
        "axesZOff": "Número (opcional)"
      }
    },
    "noDebugMode": {
      "description": [
        "Desativa o debugMode() em um sketch 3D."
      ]
    },
    "ambientLight": {
      "description": [
        "Cria uma luz ambiente com uma cor. A luz ambiente é a luz que vem de todos os lugares do canvas. Não tem uma fonte particular."
      ],
      "params": {
        "v1": "Número: vermelho ou valor de matiz relativo ao intervalo de cores atual",
        "v2": "Número: verde ou valor de saturação relativo ao intervalo de cores atual",
        "v3": "Número: azul ou valor de brilho relativo ao intervalo de cores atual",
        "alpha": "Número (opcional): valor de alpha",
        "value": "String: uma string de cor",
        "gray": "Número: um valor de cinza",
        "values": "Número[]: uma array contendo os componentes vermelho, verde, azul e alfa da cor",
        "color": "p5.Color: a cor da luz ambiente"
      }
    },
    "specularColor": {
      "description": [
        "Define a cor do realce especular ao usar um material especular e luz especular.",
        "Este método pode ser combinado com as funções specularMaterial() e shininess() para definir realces especulares. A cor padrão é o branco, isto é (255, 255, 255), que é usado se este método não for chamado antes de specularMaterial(). Se este método é chamado sem specularMaterial(), não haverá efeito. ",
        "Nota: specularColor é equivalente à função do processing <a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>."
      ],
      "params": {
        "v1": "Número: vermelho ou valor de matiz relativo ao intervalo de cores atual",
        "v2": "Número: verde ou valor de saturação relativo ao intervalo de cores atual",
        "v3": "Número: azul ou valor de brilho relativo ao intervalo de cores atual",
        "alpha": "Número (opcional): valor de alpha",
        "value": "String: uma string de cor",
        "gray": "Número: um valor de cinza",
        "values": "Número[]: uma array contendo os componentes vermelho, verde, azul e alfa da cor",
        "color": "p5.Color: a cor da luz ambiente"
      }
    },
    "directionalLight": {
      "description": [
        "Cria uma luz direcional com uma cor e uma direção",
        "Um máximo de 5 luzes direcionais podem estar ativas ao mesmo tempo"
      ],
      "params": {
        "v1": "Número: vermelho ou valor de matiz (dependendo do modelo de cores atual)",
        "v2": "Número: verde ou valor de saturação",
        "v3": "Número: azul ou valor de brilho",
        "position": "p5.Vector: a direção da luz",
        "color": "Número[]|String|p5.Color: Array de cor, string CSS de cor,  ou valor de <a href=\"#/p5.Color\">p5.Color</a>",
        "x": "Número: direção do eixo x",
        "y": "Número: direção do eixo y",
        "z": "Número: direção do eixo z"
      }
    },
    "pointLight": {
      "description": [
        "Cria um ponto de luz com uma cor e uma posição de luz ",
         "Um máximo de 5 pontos de luz podem estar ativos ao mesmo tempo"
      ],
      "params": {
        "v1": "Número: vermelho ou valor de matiz (dependendo do modelo de cores atual)",
        "v2": "Número: verde ou valor de saturação",
        "v3": "Número: azul ou valor de brilho",
        "x": "Número: posição do eixo x",
        "y": "Número: posição do eixo y",
        "z": "Número: posição do eixo z",
        "position": "p5.Vector: a posição da luz",
        "color": "Número[]|String|p5.Color: Array de cor, string CSS de cor,  ou valor de <a href=\"#/p5.Color\">p5.Color</a>"
      }
    },
    "lights": {
      "description": [
        "Define a luz ambiente e direcional padrão. Os padrões são <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> e <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. As luzes precisam ser incluídas no <a href=\"#/p5/draw\">draw()</a> para permanecerem persistentes em um programa de loop. Colocando-as no <a href=\"#/p5/setup\">setup()</a> de um programa de loop, fará com que tenham efeito apenas na primeira vez que o loop rodar.."
      ]
    },
    "lightFalloff": {
      "description": [
        "Define as taxas de queda (falloff) para luzes pontuais. Afeta apenas os elementos que são criados depois dele no código. Por padrão o valor é lightFalloff(1.0, 0.0, 0.0), e os parâmetros são usados para calcular a queda (falloff) com a seguinte equação:",
        "d = distância da posição da luz à posição do vértice ",
        "falloff = 1 / (Constante + d * LINEAR + ( d * d ) * QUADRATIC)"
      ],
      "params": {
        "Constante": "Número: valor constante para determinar a queda (falloff)",
        "linear": "Número: valor linear para determinar a queda (falloff)",
        "quadratic": "Número: valor quadrático para determinar a queda (falloff)"
      }
    },
    "spotLight": {
      "description": [
        "Cria um holofote com uma determinada cor, posição, direção de luz, ângulo e concentração. Aqui, ângulo se refere à abertura do cone do holofote, e a concentração é usada para focar a luz em direção ao centro. Ambos o ângulo e a concentração são opcionais, mas se você quiser fornecer a concentração, também terá que especificar o ângulo. ",
        "Um máximo de 5 holofotes podem estar ativos ao mesmo tempo"
      ],
      "params": {
        "v1": "Número: vermelho ou valor de matiz (dependendo do modelo de cores atual)",
        "v2": "Número: verde ou valor de saturação",
        "v3": "Número: azul ou valor de brilho",
        "x": "Número: posição do eixo x",
        "y": "Número: posição do eixo y",
        "z": "Número: posição do eixo z",
        "rx": "Número: direção do eixo x da luz",
        "ry": "Número: direção do eixo y da luz",
        "rz": "Número: direção do eixo z da luz",
        "angle": "Número (opcional): parâmetro opcional para ângulo. Por padrão até PI/3",
        "conc": "Número (opcional): parâmetro opcional para concentração. Por padrão até 100",
        "color": "Número[]|String|p5.Color: Array de cor, string CSS de cor,  ou valor de <a href=\"#/p5.Color\">p5.Color</a>",
        "position": "p5.Vector: a posição da luz",
        "direction": "p5.Vector: a direção da luz"
      }
    },
    "noLights": {
      "description": [
        "Esta função irá remover todas as luzes do sketch para os materiais renderizados subsequentes. Ela afeta todos os métodos subsequentes. Chamadas para métodos de iluminação feitas após o noLights() irão reativar as luzes no sketch."
      ]
    },
    "loadModel": {
      "description": [
        "Carregar um modelo 3D de um arquivo OBJ ou STL. ",
        "<a href=\"#/p5/loadModel\">loadModel()</a> deve ser colocado dentro de <a href=\"#/p5/preload\">preload()</a>. Isso permite que o modelo carregue totalmente antes que o resto do seu código seja executado. ",
        "Uma das limitações dos formatos OBJ e STL é que eles não têm um senso de escala embutido. Isso significa que os modelos exportados de programas diferentes podem ter tamanhos muito diferentes. Se o seu modelo não estiver sendo exibido, tente chamar <a href=\"#/p5/loadModel\">loadModel()</a> com o parâmetro normalize definido como true (verdadeiro).Isso redimensionará o modelo para uma escala apropriada para p5. Você também pode fazer alterações adicionais no tamanho final do seu modelo com a função <a href=\"#/p5/scale\">scale()</a> . ",
        "Além disso, o suporte para arquivos STL coloridos não está presente. Arquivos STL com cor serão renderizados sem propriedades de cor."
      ],
      "returns": "o objeto p5.Geometry: <a href=\"#/p5.Geometry\">p5.Geometry</a>",
      "params": {
        "path": "String: endereço do modelo a ser carregado",
        "normalize": "Booleano: Se true (verdadeiro), dimensiona o modelo para um tamanho padronizado ao carregar",
        "successCallback": "função(p5.Geometry) (opcional): Função a ser chamada assim que o modelo for carregado. Será passado o objeto do modelo 3D.",
        "failureCallback": "Função(evento) (opcional): chamado com erro de evento se o modelo não carregar.",
        "fileType": "String (opcional): A extensão de arquivo do modelo (<code>.stl</code>, <code>.obj</code>)."
      }
    },
    "model": {
      "description": [
        "Renderizar um modelo 3D para a tela."
      ],
      "params": {
        "model": "p5.Geometry: Modelo 3D carregado para ser renderizado"
      }
    },
    "loadShader": {
      "description": [
        "Carrega uma shader personalizado dos caminhos de vértice e fragmento de shader  fornecidos. Os arquivos de shader são carregados de forma assíncrona em segundo plano, portanto, este método deve ser usado em <a href=\"#/p5/preload\">preload()</a>. ",
        "Por enquanto, existem três tipos principais de shaders. O p5 fornecerá automaticamente vértices, normais, cores e atributos de iluminação apropriados se os parâmetros definidos na shader corresponderem aos nomes."
      ],
      "returns": "p5.Shader: um objeto de shader criado a partir dos arquivos de shaders de vértice e fragmento fornecidos.",
      "params": {
        "vertFilename": "String: endereço para o arquivo que contém o código fonte do vértice da shader",
        "fragFilename": "String: endereço para o arquivo que contém o código fonte do fragmento da shader",
        "callback": "Função (opcional): callback a ser executado após a conclusão de loadShader. Em caso de sucesso, o objeto Shader é passado como o primeiro argumento.",
        "errorCallback": "Função (opcional): callback a ser executado quando ocorrer um erro dentro do loadShader. Em caso de erro, o erro é passado como o primeiro argumento."
      }
    },
    "createShader": {
      "returns": "p5.Shader: um objeto de shader criado a partir dos vértices e fragmentos de shader fornecidos.",
      "params": {
        "vertSrc": "String: código fonte para o vértice da shader",
        "fragSrc": "String: código fonte para o fragmento da shader"
      }
    },
    "shader": {
      "description": [
        "A função <a href=\"#/p5/shader\">shader()</a> permite que o usuário forneça uma shader personalizada para preencher as formas no modo WEBGL. Os usuários podem criar suas próprias shaders carregando seus vértices e fragmentos com <a href=\"#/p5/loadShader\">loadShader()</a>."
      ],
      "params": {
        "s": "p5.Shader (opcional): a desejada <a href=\"#/p5.Shader\">p5.Shader</a> para usar para renderizar formas."
      }
    },
    "resetShader": {
      "description": [
        "Esta função restaura os padrões de shaders no modo WEBGL. O código que for executado após o resetShader() não será afetado pelas definições de shaders anteriores. Deve ser executado depois de <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "normalMaterial": {
      "description": [
        "O material normal para geometria é um material que não é afetado pela luz. Não é reflexivo e é um material de placeholder (espaço reservado) frequentemente usado para depurar (debug). As superfícies voltadas para o eixo X tornam-se vermelhas, as voltadas para o eixo Y tornam-se verdes e as voltadas para o eixo Z tornam-se azuis. Você pode ver todos os materiais possíveis neste <a href=\"https://p5js.org/examples/3d-materials.html\">exemplo</a>."
      ]
    },
    "texture": {
      "description": [
        "Textura para geometria. Você pode ver outros materiais possíveis neste <a href=\"https://p5js.org/examples/3d-materials.html\">exemplo</a>."
      ],
      "params": {
        "tex": "p5.Image|p5.MediaElement|p5.Graphics: Gráficos bidimensionais para renderizar como textura"
      }
    },
    "textureMode": {
      "description": [
        "Define o espaço de coordenadas para mapeamento de textura. O modo padrão é IMAGE, que se refere às coordenadas reais da imagem. NORMAL refere-se a um espaço normalizado de valores que variam de 0 a 1. Esta função só funciona no modo WEBGL. ",
        "Em modo IMAGE, se uma imagem é de 100 x 200 pixels, mapear a imagem por todo o tamanho de um quadrante exigiria os pontos (0,0) (100, 0) (100,200) (0,200). O mesmo mapeamento em NORMAL é (0,0) (1,0) (1,1) (0,1)."
      ],
      "params": {
        "mode": "Constante: tanto IMAGE ou NORMAL"
      }
    },
    "textureWrap": {
      "description": [
        "Define o wrapping mode (modo de embrulhamento) de textura global. Isso controla como as texturas se comportam quando seu mapeamento uv sai do intervalo 0 - 1. Existem três opções: CLAMP, REPEAT e MIRROR. ",
        "faz com que os pixels na extremidade da textura se estendam para os limites. REPEAT faz com que a textura se espalhe repetidamente até atingir os limites. MIRROR funciona de forma semelhante a REPEAT, mas inverte a textura a cada novo tile (ladrilho).",

        "REPEAT & MIRROR só estão disponíveis se a textura for uma for uma multiplicação de dois (128, 256, 512, 1024, etc.).",

        "Este método afetará todas as texturas em seu sketch até que uma chamada de textureWrap subsequente seja feita.",
         "Se apenas um argumento for fornecido, ele será aplicado aos eixos horizontal e vertical."
      ],
      "params": {
        "wrapX": "Constante: tanto CLAMP, REPEAT ou MIRROR",
        "wrapY": "Constante (opcional): tanto CLAMP, REPEAT ou MIRROR"
      }
    },
    "ambientMaterial": {
      "description": [
        "Material ambiente para geometria com uma determinada cor. O material ambiente define a cor que o objeto reflete sob qualquer iluminação. Por exemplo, se o material ambiente de um objeto for vermelho puro, mas a iluminação ambiente contiver apenas verde, o objeto não refletirá nenhuma luz. Aqui está um <a href=\"https://p5js.org/examples/3d-materials.html\">exemplo contendo todos os materiais possíveis</a>."
      ],
      "params": {
        "v1": "Número: valor de cinza, de vermelho ou valor de matiz (dependendo do modo de cor atual),",
        "v2": "Número (opcional): verde ou valor de saturação",
        "v3": "Número (opcional): azul ou valor de brilho",
        "color": "Número[]|String|p5.Color: cor, array de cor ou string de cor CSS"
      }
    },
    "emissiveMaterial": {
      "description": [
        "Define a cor emissiva do material usado para a geometria desenhada na tela. Este é um nome incorreto no sentido de que o material não emite luz que afeta os polígonos circundantes. Em vez disso, dá a aparência de que o objeto está brilhando. Um material emissivo será exibido com força total, mesmo se não houver luz para ele refletir."
      ],
      "params": {
        "v1": "Número: valor de cinza, de vermelho ou valor de matiz (dependendo do modo de cor atual),",
        "v2": "Número (opcional): valor de verde ou de saturação",
        "v3": "Número (opcional): valor de azul ou de brilho",
        "a": "Número (opcional): opacidade",
        "color": "Número[]|String|p5.Color: cor, array de cor ou string de cor CSS"
      }
    },
    "specularMaterial": {
      "description": [
        "Material especular para geometria com uma determinada cor. O material especular é um material reflexivo brilhante. Como o material ambiente, também define a cor que o objeto reflete sob a iluminação ambiente. Por exemplo, se o material especular de um objeto for vermelho puro, mas a iluminação ambiente contiver apenas verde, o objeto não refletirá nenhuma luz. Para todos os outros tipos de luz como ponto de luz e luz direcional, um material especular refletirá a cor da fonte de luz para o observador. Aqui está um <a href=\"https://p5js.org/examples/3d-materials.html\">exemplo contendo todos os materiais possíveis</a>."
      ],
      "params": {
        "gray": "Número: Número especificando o valor entre branco e preto.",
        "alpha": "Número (opcional): valor alfa relativo ao intervalo de cores atual (por padrão é 0 - 255)",
        "v1": "Número: valor de cinza, de vermelho ou valor de matiz relativo ao intervalo de cores atual ,",
        "v2": "Número (opcional): valor de verde ou de saturação relativo ao intervalo de cores atual ",
        "v3": "Número (opcional): valor de azul ou de brilho relativo ao intervalo de cores atual ",
        "color": "Número[]|String|p5.Color: cor, array de cor ou string de cor CSS"
      }
    },
    "shininess": {
      "description": [
        "Define a quantidade de brilho na superfície de formas. Usado em combinação com specularMaterial() para definir as propriedades do material das formas. O valor padrão e mínimo é 1."
      ],
      "params": {
        "shine": "Número: grau de brilho. Por padrão 1."
      }
    },
    "camera": {
      "description": [
        "Define a posição da câmera para um sketch 3D. Os parâmetros para esta função definem a posição da câmera, o centro do sketch (para onde a câmera está apontando) e uma direção para cima (a orientação da câmera). ",
        "Esta função simula os movimentos da câmera, permitindo que os objetos sejam visualizados de vários ângulos. Lembre-se de que ele não move os próprios objetos, mas sim a câmera. Por exemplo, quando o valor centerX é positivo, a câmera está girando para o lado direito do sketch, então o objeto parece estar se movendo para a esquerda. ",
        "Veja este  <a href = \"https://www.openprocessing.org/sketch/740258\">exemplo</a> para ver a posição de sua câmera. ",
        "Quando chamada sem argumentos, esta função cria uma câmera padrão equivalente à camera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);"
      ],
      "params": {
        "x": "Número (opcional): valor da posição da câmera no eixo x",
        "y": "Número (opcional): valor da posição da câmera no eixo y",
        "z": "Número (opcional): valor da posição da câmera no eixo z",
        "centerX": "Número (opcional): coordenada x representando o centro do sketch",
        "centerY": "Número (opcional): coordenada y representando o centro do sketch",
        "centerZ": "Número (opcional): coordenada z representando o centro do sketch",
        "upX": "Número (opcional): componente x da direção 'para cima' da câmera",
        "upY": "Número (opcional): componente y da direção 'para cima' da câmera",
        "upZ": "Número (opcional): componente z da direção 'para cima' da câmera"
      }
    },
    "perspective": {
      "description": [
        "Define uma projeção em perspectiva para a câmera em um sketch 3D. Esta projeção representa a profundidade através da técnica de Escorço (encurtamento): os objetos que estão perto da câmera aparecem em seu tamanho real, enquanto os que estão mais distantes da câmera parecem menores. Os parâmetros para esta função definem o frustum (tronco) de visualização (a pirâmide frustum dentro da qual os objetos são vistos pela câmera) por meio do campo de visão vertical, relação de aspecto (geralmente largura / altura) e planos de recorte próximos e distantes. ",
        "Quando chamada sem argumentos, os padrões fornecidos são equivalentes a perspective(PI/3.0, width/height, eyeZ/10.0, eyeZ<em>10.0), where eyeZ is equal to ((height/2.0) / tan(PI</em>60.0/360.0));"
      ],
      "params": {
        "fovy": "Número (opcional): tronco do campo de visão vertical da câmera, de baixo para cima, em <a href=\"#/p5/angleMode\">angleMode</a> graus",
        "aspect": "Número (opcional): relação de aspecto da câmara de frustum (tronco)",
        "near": "Número (opcional): frustum (tronco) perto do plano de comprimento",
        "far": "Número (opcional): frustum (tronco) distante do plano de comprimento"
      }
    },
    "ortho": {
      "description": [
        "Define uma projeção ortográfica para a câmera em um sketch 3D e define um frustum de visualização em forma de caixa dentro do qual os objetos são vistos. Nesta projeção, todos os objetos com a mesma dimensão aparecem do mesmo tamanho, independentemente de estarem próximos ou distantes da câmera. Os parâmetros para esta função especificam o frustum (tronco) de visualização onde esquerda e direita são os valores x mínimo e máximo, topo e fundo são os valores y mínimo e máximo e próximo e longe são os valores z mínimo e máximo. Se nenhum parâmetro for fornecido, por padrão será usado: ortho(-width/2, width/2, -height/2, height/2)."
      ],
      "params": {
        "left": "Número (opcional): câmera frustum (tronco) do plano esquerdo",
        "right": "Número (opcional): câmera frustum (tronco) do plano direito",
        "bottom": "Número (opcional): câmera frustum (tronco) do plano inferior",
        "top": "Número (opcional): câmera frustum (tronco) do plano superior",
        "near": "Número (opcional): câmera frustum (tronco) próxima ao plano",
        "far": "Número (opcional): câmera frustum (tronco) longe do plano"
      }
    },
    "frustum": {
      "description": [
        "Define uma matriz de perspectiva conforme definida pelos parâmetros. ",
        "Um frustum (tronco) é uma forma geométrica: uma pirâmide com o topo cortado. Com o olho do observador no topo imaginário da pirâmide, os seis planos do frustum atuam como planos de recorte ao renderizar uma vista 3D. Assim, qualquer forma dentro dos planos de recorte é visível; qualquer coisa fora desses planos não é visível. ",
        "Definir o frustum muda a perspectiva da cena sendo renderizada. Isso pode ser alcançado de forma mais simples em muitos casos, usando <a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>."
      ],
      "params": {
        "left": "Número (opcional): câmera frustum (tronco) do plano esquerdo",
        "right": "Número (opcional): câmera frustum (tronco) do plano direito",
        "bottom": "Número (opcional): câmera frustum (tronco) do plano inferior",
        "top": "Número (opcional): câmera frustum (tronco)  do plano superior",
        "near": "Número (opcional): câmera frustum (tronco) próxima ao plano",
        "far": "Número (opcional): câmera frustum (tronco) longe do plano"
      }
    },
    "createCamera": {
      "description": [
        "Cria um novo objeto <a href=\"#/p5.Camera\">p5.Camera</a> e diz ao renderizador para usar aquela câmera. Retorna o objeto p5.Camera."
      ],
      "returns": "p5.Camera: O objeto de câmera recém-criado."
    },
    "setCamera": {
      "description": [
        "Define a câmera atual do rendererGL para um objeto p5.Camera. Permite alternar entre várias câmeras."
      ],
      "params": {
        "cam": "p5.Camera: objeto p5.Camera"
      }
    },
    "setAttributes": {
      "description": [
        "Define atributos para o contexto de desenho WebGL. Esta é uma maneira de ajustar a forma como o renderizador WebGL funciona para afinar a exibição e o desempenho. ",
        "Observe que isso reinicializará o contexto de desenho se for chamado depois que o canvas WebGL for feito.",
        "Se um objeto for passado como parâmetro, todos os atributos não declarados no objeto serão configurados como padrão.",
        "Os atributos disponíveis são: alfa - indica se a tela contém um buffer alfa. Por padrão é true (verdadeiro).",
        "depth - indica se o buffer do desenho tem um buffer de profundidade de pelo menos 16 bits. Por padrão é true (verdadeiro).",
        "stencil - indica se o buffer do desenho tem um buffer de estêncil de pelo menos 8 bits.",
        "antialias - indica se deve ou não executar anti-aliasing. Por padrão é false (true no Safari).",
        "premultipliedAlpha - indica que o compositor da página irá assumir que o buffer do desenho contém cores com alfa pré-multiplicado. Por padrão é false (falso).",
        "preserveDrawingBuffer - se true (verdadeiro) os buffers não serão apagados e preservarão seus valores até que sejam apagados ou sobrescritos pelo autor (observe que o p5 apaga automaticamente no loop de desenho - draw). Por padrão é true (verdadeiro).",
        "perPixelLighting - se true (verdadeiro), a iluminação por pixel será usada na shader de iluminação, caso contrário, a iluminação por vértice será usada. Por padrão é true (verdadeiro)."
      ],
      "params": {
        "key": "String: Nome do atributo",
        "value": "Booleano: Novo valor do atributo nomeado",
        "obj": "Objeto: objeto com pares de chave-valor"
      }
    },
    "sampleRate": {
      "description": [
        "retorna um número que representa a taxa de amostragem, em amostras por segundo, de todos os objetos de som neste contexto de áudio. É determinado pela taxa de amostragem da placa de som do seu sistema operacional e atualmente não é possível mudar. Freqüentemente, é 44100, ou duas vezes o alcance da audição humana. "
      ],
      "returns": "Número: taxa de amostragem de amostras por segundo"
    },
    "freqToMidi": {
      "description": [
        "retorna o valor de nota MIDI mais próximo para uma determinada frequência."
      ],
      "returns": "Número: valor da nota MIDI",
      "params": {
        "frequency": "Número: uma frequência, por exemplo, o \"A\" acima do C médio é 440Hz."
      }
    },
    "midiToFreq": {
      "description": [
        "retorna o valor da frequência de um valor de nota MIDI. O MIDI geral trata as notas como inteiros onde o C médio é 60, o C# é 61, D é 62 etc. Útil para gerar frequências musicais com osciladores."
      ],
      "returns": "Número: valor de frequência da nota MIDI fornecida",
      "params": {
        "midiNote": "Número: o número de uma nota MIDI"
      }
    },
    "soundFormats": {
      "description": [
        "Lista os formatos de SoundFile que você incluirá. O LoadSound pesquisará essas extensões em seu diretório e escolherá um formato compatível com o navegador da Web do cliente. <a href=\"http://media.io/\">Aqui</a> há um conversor de arquivos online grátis."
      ],
      "params": {
        "formats": "String (opcional): i.e. 'mp3', 'wav', 'ogg'"
      }
    },
    "getAudioContext": {
      "description": [
        "retorna o contexto de áudio para este sketch. Útil para usuários que desejam se aprofundar no <a target='_blank' href= 'http://webaudio.github.io/web-audio-api/'>Web Audio API </a>.  ",
        "Alguns navegadores exigem que os usuários iniciem o AudioContext com um gesto do usuário, como o touchStarted no exemplo abaixo."
      ],
      "returns": "Objeto: AudioContext para este sketch."
    },
    "userStartAudio": {
      "description": [
        "Não é apenas uma boa prática dar aos usuários controle sobre como iniciar o áudio. Esta política é aplicada por muitos navegadores da web, incluindo iOS e <a href=\"https://goo.gl/7K7WLu\" title=\"Google Chrome's autoplay policy\">Google Chrome</a>, que criou a Web Audio API <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" title=\"Audio Context @ MDN\">Audio Context</a> em um estado suspenso.  ",
        "Nessas políticas específicas do navegador, o som não será reproduzido até um evento de interação do usuário (i.e. <code>mousePressed()</code>) retoma explicitamente o AudioContext, ou inicia um audio node (nó). Isso pode ser feito chamando <code>start()</code> em um <code>p5.Oscillator</code>, <code> play()</code> em um <code>p5.SoundFile</code>, ou simplesmente <code>userStartAudio()</code>.  ",
        "<code>userStartAudio()</code> inicia o AudioContext em um gesto do usuário. O comportamento padrão habilitará o áudio em qualquer evento mouseUp ou touchEnd. Ele também pode ser colocado em uma função de interação específica, como o <code>mousePressed()</code> como no exemplo abaixo. Este método utiliza <a href=\"https://github.com/tambien/StartAudioContext\">StartAudioContext </a>, uma biblioteca por Yotam Mann (MIT Licence, 2016)."
      ],
      "returns": "Promise: retorna uma Promise que é resolvida quando o estado AudioContext está 'em execução'",
      "params": {
        "element(s)": "Elemento|Array (opcional): Este argumento pode ser um Element,  Selector String, NodeList, p5.Element,  jQuery Element, ou um Array de qualquer um desses.",
        "callback": "Função (opcional): Callback para invocar quando o AudioContext for iniciado"
      }
    },
    "loadSound": {
      "description": [
        "loadSound() retorna um novo p5.SoundFile de um endereço de arquivo especificado. Se chamado durante o preload(), o p5.SoundFile estará pronto para tocar a tempo para o setup() e draw(). Se chamado fora do preload, o p5.SoundFile não estará pronto imediatamente, então o loadSound aceita um callback como segundo parâmetro. Usar um <a href=\"https://github.com/processing/p5.js/wiki/Local-server\"> servidor local</a> é recomendado ao carregar arquivos externos."
      ],
      "returns": "SoundFile: retorna um p5.SoundFile",
      "params": {
        "path": "String|Array: endereço para o arquivo de som, ou um array com os endereços dos arquivos para os soundfiles em vários formatos   i.e. ['sound.ogg', 'sound.mp3'].  Alternativamente, aceita um objeto: tanto do arquivo de API HTML5, ou um p5.File.",
        "successCallback": "Função (opcional): nome de uma função a ser chamada assim que o arquivo carregar",
        "errorCallback": "Função (opcional): nome de uma função a ser chamada se houver um erro ao carregar o arquivo.",
        "whileLoading": "Função (opcional): Nome de uma função a ser chamada durante o carregamento do arquivo. Esta função receberá a porcentagem carregada até o momento, de 0.0 a 1.0."
      }
    },
    "createConvolver": {
      "description": [
        "Cria um p5.Convolver. Aceita um caminho para um arquivo de som que será usado para gerar uma resposta de impulso."
      ],
      "returns": "p5.Convolver: ",
      "params": {
        "path": "String: endereço para o arquivo de som.",
        "callback": "Função (opcional): função a ser chamada se o carregamento for bem-sucedido. O objeto será passado como argumento para a função de callback.",
        "errorCallback": "Função (opcional): função a ser chamada se o carregamento não for bem-sucedido. Um erro personalizado será passado como argumento para a função de callback."
      }
    },
    "setBPM": {
      "description": [
        "Define o tempo global, em batidas por minuto, para todas as p5.Parts. Este método afetará todas as p5.Parts ativas."
      ],
      "params": {
        "BPM": "Número: Beats Por Minuto",
        "rampTime": "Número: Daqui a segundos"
      }
    },
    "saveSound": {
      "description": [
        "Salva um p5.SoundFile como um arquivo .wav. O navegador solicitará que o usuário baixe o arquivo em seu dispositivo. Para fazer upload de áudio para um servidor, use <a href=\"/docs/reference/#/p5.SoundFile/saveBlob\"><code>p5.SoundFile.saveBlob</code></a>."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile que você deseja salvar",
        "fileName": "String: nome do arquivo .wav resultante."
      }
    }
  },
  "p5.Color": {
    "description": [
      "Cada cor armazena o modo de cor e os máximos de nível que foram aplicados no momento de sua construção. Eles são usados para interpretar os argumentos de entrada (na construção e posteriormente para essa instância de cor) e para formatar a saída, por exemplo, quando <a href=\"#/p5/saturation\">saturação()</a> é requerida. ",
      "Internamente, armazenamos um array representando os valores RGBA ideais na forma de ponto flutuante, normalizado de 0 a 1. A partir disso, calculamos a cor de tela mais próxima (níveis RGBA de 0 a 255) e a expomos ao renderizador. ",
      "Também colocamos em cache normalizado, os componentes de ponto flutuante da cor em várias representações como eles são calculados. Isso é feito para evitar a repetição de uma conversão que já foi realizada."
    ],
    "toString": {
      "description": [
        "Esta função retorna a cor formatada como string. Isso pode ser útil para depurar (debug) ou para usar p5.js com outras bibliotecas. "
      ],
      "returns": "String: a cor formatada como string",
      "params": {
        "format": "String (opcional): Como a sequência de cores será formatada. Deixar este parâmetro vazio formata a string como rgba (r, g, b, a). '#rgb' '#rgba' '#rrggbb' e '#rrggbbaa' formata como códigos de cores hexadecimais. 'rgb' 'hsb' e 'hsl' retornam a cor formatada no modo de cor especificado. 'rgba' 'hsba' e 'hsla' são iguais aos anteriores, mas com canais alfa. 'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' e 'hsla%' formata como porcentagens. "
      }
    },
    "setRed": {
      "description": [
        "A função setRed define o componente vermelho de uma cor. O intervalo depende do seu modo de cor, no modo RGB padrão é entre 0 e 255."
      ],
      "params": {
        "red": "Número: o novo valor de vermelho"
      }
    },
    "setGreen": {
      "description": [
        "A função setGreen define o componente verde de uma cor. O intervalo depende do seu modo de cor, no modo RGB padrão é entre 0 e 255. "
      ],
      "params": {
        "green": "Número: o novo valor de verde"
      }
    },
    "setBlue": {
      "description": [
        "A função setBlue define o componente azul de uma cor. O intervalo depende do seu modo de cor, no modo RGB padrão é entre 0 e 255."
      ],
      "params": {
        "blue": "Número: o novo valor de azul"
      }
    },
    "setAlpha": {
      "description": [
        "A função setAlpha define o valor de transparência (alfa) de uma cor. O intervalo depende do seu modo de cor, no modo RGB padrão é entre 0 e 255. "
      ],
      "params": {
        "alpha": "Número: o novo valor de alpha"
      }
    }
  },
  "p5.Element": {
    "description": [
      "Classe base para todos os elementos adicionados a um sketch, incluindo o canvas, buffers gráficos e outros elementos HTML. Não é chamado diretamente, mas os objetos <a href=\"#/p5.Element\">p5.Element</a> são criados ao chamar <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc."
    ],
    "params": {
      "elt": "String: nó DOM que está embrulhado",
      "pInst": "P5 (opcional): ponteiro para instância p5"
    },
    "elt": {
      "description": [
        "Elemento HTML subjacente. Todos os métodos HTML normais podem ser chamados para isso."
      ]
    },
    "parent": {
      "description": [
        "Anexa o elemento ao pai especificado. Uma maneira de definir o contêiner para o elemento. Aceita tanto uma ID de string, nó DOM ou <a href=\"#/p5.Element\"> p5.Element </a>. Se nenhum argumento for fornecido, o nó pai será retornado. Para obter mais maneiras de posicionar o canvas, consulte o <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>  posicionando o canvas</a> wiki page."
      ],
      "params": {
        "parent": "String|p5.Element|Objeto: a ID, nó DOM, ou <a href=\"#/p5.Element\">p5.Element</a> do elemento pai desejado"
      }
    },
    "id": {
      "description": [
        "Define o ID do elemento. Se nenhum argumento de ID for passado, ele retorna o ID atual do elemento. Observe que apenas um elemento pode ter um id particular em uma página. A função <a href=\"#/p5.Element/class\"> .class () </a> pode ser usada para identificar vários elementos com o mesmo nome de classe."
      ],
      "params": {
        "id": "String: ID do elemento"
      }
    },
    "class": {
      "description": [
        "Adiciona determinada classe ao elemento. Se nenhum argumento de classe for passado, ele retorna uma string contendo a(s) classe(s) atual(is) do elemento."
      ],
      "params": {
        "class": "String: classe para adicionar"
      }
    },
    "mousePressed": {
      "description": [
        "A função <a href=\"#/p5.Element/mousePressed\">mousePressed()</a> é chamada toda vez que um botão do mouse é pressionado sobre o elemento. Alguns navegadores em dispositivos móveis também podem acionar este evento em uma tela sensível ao toque, se o usuário executar um toque rápido. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento e ação."       ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse é pressionado sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais acionada."
      }
    },
    "doubleClicked": {
      "description": [
        "A função <a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> é chamada uma vez que um botão do mouse é pressionado duas vezes sobre o elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento e ação."
      ],
      "returns": "p5.Element: ",
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse é clicado duas vezes sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada."
      }
    },
    "mouseWheel": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> é chamada uma vez que a roda do mouse é rolada sobre o elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento.",
        " A função aceita uma função de callback como argumento que será executada quando o evento <code>wheel</code> for acionado no elemento, a função de callback receberá um argumento <code>event</code>. A propriedade <code>event.deltaY</code> retorna valores negativos se a roda do mouse for girada para cima ou para longe do usuário e positiva na outra direção. A <code>event.deltaX</code> faz o mesmo que a <code>event.deltaY</code> exceto que lê a roda horizontal da roda do mouse. ",
        "No OS X com rolagem \"natural\" habilitada, na <code>event.deltaY</code> os valores são invertidos."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse é rolado sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada."
      }
    },
    "mouseReleased": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> é chamada uma vez que um botão do mouse é liberado sobre o elemento. Alguns navegadores em dispositivos móveis também podem acionar este evento em uma tela sensível ao toque, se o usuário executar um toque rápido. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse é liberado sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais acionada."
      }
    },
    "mouseClicked": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> é chamada uma vez que um botão do mouse é pressionado e liberado sobre o elemento. Alguns navegadores em dispositivos móveis também podem acionar este evento em uma tela sensível ao toque, se o usuário executar um toque rápido. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento"
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse é clicado sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "mouseMoved": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> é chamada uma vez que o mouse se move sobre o elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse mouse se move sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "mouseOver": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseOver\">mouseOver()</a> é chamada uma vez que o mouse se move para o elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse se move para o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "mouseOut": {
      "description": [
        "A função <a href=\"#/p5.Element/mouseOut\">mouseOut()</a> é chamada uma vez que o mouse se move para fora do elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando o mouse se move para fora do elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "touchStarted": {
      "description": [
        "A função <a href=\"#/p5.Element/touchStarted\">touchStarted()</a> é chamada uma vez que um toque é registrado. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando um toque é registrado. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "touchMoved": {
      "description": [
        "A função <a href=\"#/p5.Element/touchMoved\">touchMoved()</a> é chamada uma vez que um movimento de toque é registrado. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando um toque se move sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "touchEnded": {
      "description": [
        "A função <a href=\"#/p5.Element/touchEnded\">touchEnded()</a> é chamada uma vez que um toque é registrado. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando um toque termina sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "dragOver": {
      "description": [
        "A função <a href=\"#/p5.Element/dragOver\">dragOver()</a> é chamada uma vez que um arquivo é arrastado sobre o elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando um arquivo é arrastado sobre o elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "dragLeave": {
      "description": [
        "A função dragLeave() é chamada uma vez que um arquivo arrastado sai da área do elemento. Isso pode ser usado para anexar funções de escuta de eventos específicos de elemento."
      ],
      "params": {
        "fxn": "Função|Booleano: função a ser disparada quando um arquivo é arrastado para fora do elemento. Se <code>false</code> for passado, a função de disparo anterior não será mais disparada. "
      }
    },
    "addClass": {
      "description": [
        "Adiciona uma classe especificada ao elemento."
      ],
      "params": {
        "class": "String: nome da classe a ser adicionada"
      }
    },
    "removeClass": {
      "description": [
        "Remove uma classe especificada do elemento."
      ],
      "params": {
        "class": "String: nome da classe a ser removida."
      }
    },
    "hasClass": {
      "description": [
        "Verifica se a classe especificada já está definida para o elemento."
      ],
      "returns": "Booleano: um valor Booleano se o elemento possui a classe especificada.",
      "params": {
        "c": "String: nome da classe para verificação"
      }
    },
    "toggleClass": {
      "description": [
        "Alterna classe de elemento."
      ],
      "params": {
        "c": "String: nome da classe a ser alternada"
      }
    },
    "child": {
      "description": [
        "Anexa o elemento como filho do pai especificado. Aceita tanto um ID de string, um nó DOM, ou um <a href=\"#/p5.Element\">p5.Element</a>. Se nenhum argumento for especificado, uma matriz de nós DOM filhos será retornada. "
      ],
      "returns": "Node[]: um array de nós filhos",
      "params": {
        "child": "String|p5.Element (opcional): a ID, nó DOM, ou <a href=\"#/p5.Element\">p5.Element</a>  para adicionar ao elemento atual."
      }
    },
    "center": {
      "description": [
        "Centraliza um elemento p5 verticalmente, horizontalmente ou ambos, em relação ao seu pai ou de acordo com o body (corpo) se o elemento não tiver pai. Se nenhum argumento for passado, o elemento é alinhado tanto vertical quanto horizontalmente."
      ],
      "params": {
        "align": "String (opcional): passar 'vertical', 'horizontal' alinha o elemento de acordo"
      }
    },
    "html": {
      "description": [
        "Se um argumento for fornecido, define o HTML interno do elemento, substituindo qualquer HTML existente. Se true (verdadeiro) for incluído como um segundo argumento, o HTML é anexado em vez de substituir o HTML existente. Se nenhum argumento for fornecido, retorna o HTML interno do elemento."
      ],
      "returns": "String: o HTML interno do elemento",
      "params": {
        "html": "String (opcional): o HTML a ser colocado dentro do elemento",
        "append": "Booleano (opcional): se deve anexar o novo HTML ao existente"
      }
    },
    "position": {
      "description": [
        "Sets the position of the element. If no position type argument is given, the  position will be relative to (0, 0) of the window.  Essentially, this sets position:absolute and left and top  properties of style. If an optional third argument specifying position type is given,  the x and y coordinates will be interpreted based on the <a target=\"_blank\"  href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.  If no arguments given, the function returns the x and y position of the element. found documentation on how to be more specific with object type  <a href=\"https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc\">https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc</a>"
      ],
      "returns": "Object: object of form { x: 0, y: 0 } containing the position of the element in an object",
      "params": {
        "x": "Number: (Optional) x-position relative to upper left of window (optional)",
        "y": "Number: (Optional) y-position relative to upper left of window (optional)",
        "positionType": "String: it can be static, fixed, relative, sticky, initial or inherit (optional)"
      }
    },
    "style": {
      "description": [
        "Sets the given style (css) property (1st arg) of the element with the given value (2nd arg). If a single argument is given, .style() returns the value of the given property; however, if the single argument is given in css syntax ('text-align:center'), .style() sets the css appropriately."
      ],
      "returns": "String: value of property",
      "params": {
        "property": "String: property to be set",
        "value": "String|p5.Color: value to assign to property"
      }
    },
    "attribute": {
      "description": [
        "Adds a new attribute or changes the value of an existing attribute  on the specified element. If no value is specified, returns the  value of the given attribute, or null if attribute is not set."
      ],
      "returns": "String: value of attribute",
      "params": {
        "attr": "String: attribute to set",
        "value": "String: value to assign to attribute"
      }
    },
    "removeAttribute": {
      "description": [
        "Removes an attribute on the specified element."
      ],
      "params": {
        "attr": "String: attribute to remove"
      }
    },
    "value": {
      "description": [
        "Either returns the value of the element if no arguments given, or sets the value of the element."
      ],
      "returns": "String|Number: value of the element",
      "params": {
        "value": "String|Number"
      }
    },
    "show": {
      "description": [
        "Shows the current element. Essentially, setting display:block for the style."
      ]
    },
    "hide": {
      "description": [
        "Hides the current element. Essentially, setting display:none for the style."
      ]
    },
    "size": {
      "description": [
        "Sets the width and height of the element. AUTO can be used to  only adjust one dimension at a time. If no arguments are given, it  returns the width and height of the element in an object. In case of  elements which need to be loaded, such as images, it is recommended  to call the function after the element has finished loading."
      ],
      "returns": "Object: the width and height of the element in an object",
      "params": {
        "w": "Number|Constant: width of the element, either AUTO, or a number",
        "h": "Number|Constant: (Optional) height of the element, either AUTO, or a number"
      }
    },
    "remove": {
      "description": [
        "Removes the element, stops all media streams, and deregisters all listeners."
      ]
    },
    "drop": {
      "description": [
        "Registers a callback that gets called every time a file that is dropped on the element has been loaded. p5 will load every dropped file into memory and pass it as a p5.File object to the callback. Multiple files dropped at the same time will result in multiple calls to the callback. ",
        "You can optionally pass a second callback which will be registered to the raw <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event. The callback will thus be provided the original <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>. Dropping multiple files at the same time will trigger the second callback once per drop, whereas the first callback will trigger for each loaded file."
      ],
      "params": {
        "callback": "Function: callback to receive loaded file, called for each file dropped.",
        "fxn": "Function: (Optional) callback triggered once when files are dropped with the drop event."
      }
    }
  },
  "p5.Graphics": {
    "description": [
      "Thin wrapper around a renderer, to be used for creating a graphics buffer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels. The fields and methods for this class are extensive, but mirror the normal drawing API for p5."
    ],
    "params": {
      "w": "Number: width",
      "h": "Number: height",
      "renderer": "Constant: the renderer to use, either P2D or WEBGL",
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "reset": {
      "description": [
        "Resets certain values such as those modified by functions in the Transform category and in the Lights category that are not automatically reset with graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior of the standard canvas."
      ]
    },
    "remove": {
      "description": [
        "Removes a Graphics object from the page and frees any resources associated with it."
      ]
    }
  },
  "p5.Renderer": {
    "description": [
      "Main graphics and rendering context, as well as the base API implementation for p5.js \"core\". To be used as the superclass for Renderer2D and Renderer3D classes, respectively."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance",
      "isMainCanvas": "Boolean: (Optional) whether we're using it as main canvas"
    }
  },
  "JSON": {
    "stringify": {
      "description": [
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">entrada MDN</a>: O método JSON.stringify() converte um objeto ou valor JavaScript em uma <a href=\"#/p5/string\">string</a> JSON."
      ],
      "params": {
        "object": "Objeto: Objeto Javascript que você gostaria de converter para JSON"
      }
    }
  },
  "console": {
    "log": {
      "description": [
        "Imprime uma mensagem no console da web do seu navegador. Ao usar o p5, você pode usar <a href=\"#/p5/print\">print</a> (imprimir) e <a href=\"#/p5/console/log\">console.log</a> indistintamente. ",
        "O console é aberto de forma diferente dependendo de qual navegador você está usando. Aqui estão os links sobre como abrir o console no <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console\">Firefox</a> , <a href=\"https://developers.google.com/web/tools/chrome-devtools/open\">Chrome</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console\">Edge</a>, e <a href=\"https://support.apple.com/en-ca/guide/safari/sfri20948/mac\">Safari</a>. Com o  <a href=\"https://editor.p5js.org/\">editor online do p5 </a> o console é incorporado diretamente na página abaixo do editor de código. ",
        "A partir de uma <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\">entrada MDN</a>: O método do console log() tem como saída uma mensagem para o console da web. A mensagem pode ser uma única <a href=\"#/p5/string\">string</a> (com valores de substituição opcionais), ou pode ser qualquer um ou mais <a href=\"#/p5/object\">objetos</a> JavaScript."
      ],
      "params": {
        "message": "String|Expressão|Objeto: Mensagem que você gostaria de imprimir no console."
      }
    }
  },
  "p5.TypedDict": {
    "description": [
      "Base class for all p5.Dictionary types. Specifically  typed Dictionary classes inherit from this class."
    ],
    "size": {
      "description": [
        "Returns the number of key-value pairs currently stored in the Dictionary."
      ],
      "returns": "Integer: the number of key-value pairs in the Dictionary"
    },
    "hasKey": {
      "description": [
        "Returns true if the given key exists in the Dictionary, otherwise returns false."
      ],
      "returns": "Boolean: whether that key exists in Dictionary",
      "params": {
        "key": "Number|String: that you want to look up"
      }
    },
    "get": {
      "description": [
        "Returns the value stored at the given key."
      ],
      "returns": "Number|String: the value stored at that key",
      "params": {
        "the": "Number|String: key you want to access"
      }
    },
    "set": {
      "description": [
        "Updates the value associated with the given key in case it already exists in the Dictionary. Otherwise a new key-value pair is added."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String"
      }
    },
    "create": {
      "description": [
        "Creates a new key-value pair in the Dictionary."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String",
        "obj": "Object: key/value pair"
      }
    },
    "clear": {
      "description": [
        "Removes all previously stored key-value pairs from the Dictionary."
      ]
    },
    "remove": {
      "description": [
        "Removes the key-value pair stored at the given key from the Dictionary."
      ],
      "params": {
        "key": "Number|String: for the pair to remove"
      }
    },
    "print": {
      "description": [
        "Logs the set of items currently stored in the Dictionary to the console."
      ]
    },
    "saveTable": {
      "description": [
        "Converts the Dictionary into a CSV file for local download."
      ]
    },
    "saveJSON": {
      "description": [
        "Converts the Dictionary into a JSON file for local download."
      ]
    }
  },
  "p5.StringDict": {
    "description": [
      "A simple Dictionary class for Strings."
    ]
  },
  "p5.NumberDict": {
    "description": [
      "A simple Dictionary class for Numbers."
    ],
    "add": {
      "description": [
        "Add the given number to the value currently stored at the given key. The sum then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to add to",
        "Number": "Number: to add to the value"
      }
    },
    "sub": {
      "description": [
        "Subtract the given number from the value currently stored at the given key. The difference then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to subtract from",
        "Number": "Number: to subtract from the value"
      }
    },
    "mult": {
      "description": [
        "Multiply the given number with the value currently stored at the given key. The product then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to multiply",
        "Amount": "Number: to multiply the value by"
      }
    },
    "div": {
      "description": [
        "Divide the given number with the value currently stored at the given key. The quotient then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to divide",
        "Amount": "Number: to divide the value by"
      }
    },
    "minValue": {
      "description": [
        "Return the lowest number currently stored in the Dictionary."
      ],
      "returns": "Number: "
    },
    "maxValue": {
      "description": [
        "Return the highest number currently stored in the Dictionary."
      ],
      "returns": "Number: "
    },
    "minKey": {
      "description": [
        "Return the lowest key currently used in the Dictionary."
      ],
      "returns": "Number: "
    },
    "maxKey": {
      "description": [
        "Return the highest key currently used in the Dictionary."
      ],
      "returns": "Number: "
    }
  },
  "p5.MediaElement": {
    "description": [
      "Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods of <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not called directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>, <a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped"
    },
    "src": {
      "description": [
        "Path to the media element source."
      ],
      "returns": "String: src"
    },
    "play": {
      "description": [
        "Play an HTML5 media element."
      ]
    },
    "stop": {
      "description": [
        "Stops an HTML5 media element (sets current time to zero)."
      ]
    },
    "pause": {
      "description": [
        "Pauses an HTML5 media element."
      ]
    },
    "loop": {
      "description": [
        "Set 'loop' to true for an HTML5 media element, and starts playing."
      ]
    },
    "noLoop": {
      "description": [
        "Set 'loop' to false for an HTML5 media element. Element will stop when it reaches the end."
      ]
    },
    "autoplay": {
      "description": [
        "Set HTML5 media element to autoplay or not. If no argument is specified, by default it will autoplay."
      ],
      "params": {
        "shouldAutoplay": "Boolean: whether the element should autoplay"
      }
    },
    "volume": {
      "description": [
        "Sets volume for this HTML5 media element. If no argument is given, returns the current volume."
      ],
      "returns": "Number: current volume",
      "params": {
        "val": "Number: volume between 0.0 and 1.0"
      }
    },
    "speed": {
      "description": [
        "If no arguments are given, returns the current playback speed of the element. The speed parameter sets the speed where 2.0 will play the element twice as fast, 0.5 will play at half the speed, and -1 will play the element in normal speed in reverse.(Note that not all browsers support backward playback and even if they do, playback might not be smooth.)"
      ],
      "returns": "Number: current playback speed of the element",
      "params": {
        "speed": "Number: speed multiplier for element playback"
      }
    },
    "time": {
      "description": [
        "If no arguments are given, returns the current time of the element. If an argument is given the current time of the element is set to it."
      ],
      "returns": "Number: current time (in seconds)",
      "params": {
        "time": "Number: time to jump to (in seconds)"
      }
    },
    "duration": {
      "description": [
        "Returns the duration of the HTML5 media element."
      ],
      "returns": "Number: duration"
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the audio or video element reaches the end. If the element is looping, this will not be called. The element is passed in as the argument to the onended callback."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended. The  media element will be passed  in as the argument to the  callback."
      }
    },
    "connect": {
      "description": [
        "Send the audio output of this element to a specified audioNode or p5.sound object. If no element is provided, connects to p5's main output. That connection is established when this method is first called. All connections are removed by the .disconnect() method. ",
        "This method is meant to be used with the p5.sound.js addon library."
      ],
      "params": {
        "audioNode": "AudioNode|Object: AudioNode from the Web Audio API, or an object from the p5.sound library"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all Web Audio routing, including to main output. This is useful if you want to re-route the output through audio effects, for example."
      ]
    },
    "showControls": {
      "description": [
        "Show the default MediaElement controls, as determined by the web browser."
      ]
    },
    "hideControls": {
      "description": [
        "Hide the default mediaElement controls."
      ]
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point. ",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback. ",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    }
  },
  "p5.File": {
    "description": [
      "Base class for a file. Used for Element.drop and createFileInput."
    ],
    "params": {
      "file": "File: File that is wrapped"
    },
    "file": {
      "description": [
        "Underlying File object. All normal File methods can be called on this."
      ]
    },
    "type": {
      "description": [
        "File type (image, text, etc.)"
      ]
    },
    "subtype": {
      "description": [
        "File subtype (usually the file extension jpg, png, xml, etc.)"
      ]
    },
    "name": {
      "description": [
        "File name"
      ]
    },
    "size": {
      "description": [
        "File size"
      ]
    },
    "data": {
      "description": [
        "URL string containing either image data, the text contents of the file or a parsed object if file is JSON and p5.XML if XML"
      ]
    }
  },
  "p5.Image": {
    "description": [
      "Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an image. ",
      "p5 can display .gif, .jpg and .png images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the <a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and height of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the values for every pixel in the image. ",
      "The methods described below allow easy access to the image's pixels and alpha channel and simplify the process of compositing. ",
      "Before using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on the image to make sure that the pixel data is properly loaded."
    ],
    "params": {
      "width": "Number",
      "height": "Number"
    },
    "width": {
      "description": [
        "Image width."
      ]
    },
    "height": {
      "description": [
        "Image height."
      ]
    },
    "pixels": {
      "description": [
        "Array containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for pixelDensity) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays may have more pixels (by a factor of pixelDensity^2). For example, if the image is 100x100 pixels, there will be 40,000. With pixelDensity = 2, there will be 160,000. The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre> ",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ]
    },
    "loadPixels": {
      "description": [
        "Loads the pixels data for this image into the [pixels] attribute."
      ]
    },
    "updatePixels": {
      "description": [
        "Updates the backing canvas for this image with the contents of the [pixels] array. ",
        "If this image is an animated GIF then the pixels will be updated in the frame that is currently displayed."
      ],
      "params": {
        "x": "Integer: x-offset of the target update area for the  underlying canvas",
        "y": "Integer: y-offset of the target update area for the  underlying canvas",
        "w": "Integer: height of the target update area for the  underlying canvas",
        "h": "Integer: height of the target update area for the  underlying canvas"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels from an image. ",
        "If no params are passed, the whole image is returned. If x and y are the only params passed a single pixel is extracted. If all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a> is returned."
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "set": {
      "description": [
        "Set the color of a single pixel or write an image into this <a href=\"#/p5.Image\">p5.Image</a>. ",
        "Note that for a large number of pixels this will be slower than directly manipulating the pixels array and then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "a": "Number|Number[]|Object: grayscale value | pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> | image to copy"
      }
    },
    "resize": {
      "description": [
        "Resize the image to a new width and height. To make the image scale proportionally, use 0 as the value for the wide or high parameter. For instance, to make the width of an image 150 pixels, and change the height using the same proportion, use resize(150, 0)."
      ],
      "params": {
        "width": "Number: the resized image width",
        "height": "Number: the resized image height"
      }
    },
    "copy": {
      "description": [
        "Copies a region of pixels from one image to another. If no srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "mask": {
      "description": [
        "Masks part of an image from displaying by loading another image and using its alpha channel as an alpha channel for this image. Masks are cumulative, one applied to an image object, they cannot be removed."
      ],
      "params": {
        "srcImage": "p5.Image: source image"
      }
    },
    "filter": {
      "description": [
        "Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a> ",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used. ",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used. ",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used. ",
        "INVERT Sets each pixel to its inverse value. No parameter is used. ",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges. ",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur. ",
        "ERODE Reduces the light areas. No parameter is used. ",
        "DILATE Increases the light areas. No parameter is used. ",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. Available blend modes are: normal | multiply | screen | overlay |  darken | lighten | color-dodge | color-burn | hard-light |  soft-light | difference | exclusion | hue | saturation |  color | luminosity <a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a>"
      }
    },
    "save": {
      "description": [
        "Saves the image to a file and force the browser to download it. Accepts two strings for filename and file extension Supports png (default), jpg, and gif  Note that the file will only be downloaded as an animated GIF if the p5.Image was loaded from a GIF file."
      ],
      "params": {
        "filename": "String: give your file a name",
        "extension": "String: 'png' or 'jpg'"
      }
    },
    "reset": {
      "description": [
        "Starts an animated GIF over at the beginning state."
      ]
    },
    "getCurrentFrame": {
      "description": [
        "Gets the index for the frame that is currently visible in an animated GIF."
      ],
      "returns": "Number: The index for the currently displaying frame in animated GIF"
    },
    "setFrame": {
      "description": [
        "Sets the index of the frame that is currently visible in an animated GIF"
      ],
      "params": {
        "index": "Number: the index for the frame that should be displayed"
      }
    },
    "numFrames": {
      "description": [
        "Returns the number of frames in an animated GIF"
      ],
      "returns": "Number: "
    },
    "play": {
      "description": [
        "Plays an animated GIF that was paused with <a href=\"#/p5.Image/pause\">pause()</a>"
      ]
    },
    "pause": {
      "description": [
        "Pauses an animated GIF."
      ]
    },
    "delay": {
      "description": [
        "Changes the delay between frames in an animated GIF. There is an optional second parameter that indicates an index for a specific frame that should have its delay modified. If no index is given, all frames will have the new delay."
      ],
      "params": {
        "d": "Number: the amount in milliseconds to delay between switching frames",
        "index": "Number: (Optional) the index of the frame that should have the new delay value {optional}"
      }
    }
  },
  "p5.PrintWriter": {
    "params": {
      "filename": "String",
      "extension": "String (Optional)"
    },
    "write": {
      "description": [
        "Writes data to the PrintWriter stream"
      ],
      "params": {
        "data": "Array: all data to be written by the PrintWriter"
      }
    },
    "print": {
      "description": [
        "Writes data to the PrintWriter stream, and adds a new line at the end"
      ],
      "params": {
        "data": "Array: all data to be printed by the PrintWriter"
      }
    },
    "clear": {
      "description": [
        "Clears the data already written to the PrintWriter object"
      ]
    },
    "close": {
      "description": [
        "Closes the PrintWriter"
      ]
    }
  },
  "p5.Table": {
    "description": [
      "<a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much like in a traditional spreadsheet. Tables can be generated from scratch, dynamically, or using data from an existing file."
    ],
    "params": {
      "rows": "p5.TableRow[]: (Optional) An array of p5.TableRow objects"
    },
    "columns": {
      "description": [
        "An array containing the names of the columns in the table, if the \"header\" the table is loaded with the \"header\" parameter."
      ]
    },
    "rows": {
      "description": [
        "An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the rows of the table. The same result as calling <a href=\"#/p5/getRows\">getRows()</a>"
      ]
    },
    "addRow": {
      "description": [
        "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default, an empty row is created. Typically, you would store a reference to the new row in a TableRow object (see newRow in the example above), and then set individual values using <a href=\"#/p5/set\">set()</a>. ",
        "If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is duplicated and added to the table."
      ],
      "returns": "p5.TableRow: the row that was added",
      "params": {
        "row": "p5.TableRow: (Optional) row to be added to the table"
      }
    },
    "removeRow": {
      "description": [
        "Removes a row from the table object."
      ],
      "params": {
        "id": "Integer: ID number of the row to remove"
      }
    },
    "getRow": {
      "description": [
        "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference can then be used to get and set values of the selected row."
      ],
      "returns": "p5.TableRow: <a href=\"#/p5.TableRow\">p5.TableRow</a> object",
      "params": {
        "rowID": "Integer: ID number of the row to get"
      }
    },
    "getRows": {
      "description": [
        "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s."
      ],
      "returns": "p5.TableRow[]: Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s"
    },
    "findRow": {
      "description": [
        "Finds the first row in the Table that contains the value provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow: ",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "findRows": {
      "description": [
        "Finds the rows in the Table that contain the value provided, and returns references to those rows. Returns an Array, so for must be used to iterate through all the rows, as shown in the example above. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "matchRow": {
      "description": [
        "Finds the first row in the Table that matches the regular expression provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow: TableRow object",
      "params": {
        "regexp": "String|RegExp: The regular expression to match",
        "column": "String|Integer: The column ID (number) or  title (string)"
      }
    },
    "matchRows": {
      "description": [
        "Finds the rows in the Table that match the regular expression provided, and returns references to those rows. Returns an array, so for must be used to iterate through all the rows, as shown in the example. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "regexp": "String: The regular expression to match",
        "column": "String|Integer: (Optional) The column ID (number) or  title (string)"
      }
    },
    "getColumn": {
      "description": [
        "Retrieves all values in the specified column, and returns them as an array. The column may be specified by either its ID or title."
      ],
      "returns": "Array: Array of column values",
      "params": {
        "column": "String|Number: String or Number of the column to return"
      }
    },
    "clearRows": {
      "description": [
        "Removes all rows from a Table. While all rows are removed, columns and column titles are maintained."
      ]
    },
    "addColumn": {
      "description": [
        "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object. Typically, you will want to specify a title, so the column may be easily referenced later by name. (If no title is specified, the new column's title will be null.)"
      ],
      "params": {
        "title": "String: (Optional) title of the given column"
      }
    },
    "getColumnCount": {
      "description": [
        "Returns the total number of columns in a Table."
      ],
      "returns": "Integer: Number of columns in this table"
    },
    "getRowCount": {
      "description": [
        "Returns the total number of rows in a Table."
      ],
      "returns": "Integer: Number of rows in this table"
    },
    "removeTokens": {
      "description": [
        "Removes any of the specified characters (or \"tokens\"). ",
        "If no column is specified, then the values in all columns and rows are processed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "chars": "String: String listing characters to be removed",
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "trim": {
      "description": [
        "Trims leading and trailing whitespace, such as spaces and tabs, from String table values. If no column is specified, then the values in all columns and rows are trimmed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "removeColumn": {
      "description": [
        "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table object. The column to be removed may be identified by either its title (a String) or its index value (an int). removeColumn(0) would remove the first column, removeColumn(1) would remove the second column, and so on."
      ],
      "params": {
        "column": "String|Integer: columnName (string) or ID (number)"
      }
    },
    "set": {
      "description": [
        "Stores a value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String|Number: value to assign"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "Number: value to assign"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String: value to assign"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String|Number: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "Number: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves a String value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getObject": {
      "description": [
        "Retrieves all table data and returns as an object. If a column name is passed in, each row object will be stored with that attribute as its title."
      ],
      "returns": "Object: ",
      "params": {
        "headerColumn": "String: (Optional) Name of the column which should be used to  title each row object (optional)"
      }
    },
    "getArray": {
      "description": [
        "Retrieves all table data and returns it as a multidimensional array."
      ],
      "returns": "Array: "
    }
  },
  "p5.TableRow": {
    "description": [
      "A TableRow object represents a single row of data values, stored in columns, from a table. ",
      "A Table Row contains both an ordered array, and an unordered JSON object."
    ],
    "params": {
      "str": "String: (Optional) optional: populate the row with a  string of values, separated by the  separator",
      "separator": "String: (Optional) comma separated values (csv) by default"
    },
    "set": {
      "description": [
        "Stores a value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number: The value to be stored"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "Number|String: The value to be stored  as a Float"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number|Boolean|Object: The value to be stored  as a String"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String|Number: ",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "Number: Float Floating point number",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves an String value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String: String",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    }
  },
  "p5.XML": {
    "description": [
      "XML is a representation of an XML object, able to parse XML code. Use <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
    ],
    "getParent": {
      "description": [
        "Gets a copy of the element's parent. Returns the parent as another <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "returns": "p5.XML: element parent"
    },
    "getName": {
      "description": [
        "Gets the element's full name, which is returned as a String."
      ],
      "returns": "String: the name of the node"
    },
    "setName": {
      "description": [
        "Sets the element's name, which is specified as a String."
      ],
      "params": {
        "the": "String: new name of the node"
      }
    },
    "hasChildren": {
      "description": [
        "Checks whether or not the element has any children, and returns the result as a boolean."
      ],
      "returns": "Boolean: "
    },
    "listChildren": {
      "description": [
        "Get the names of all of the element's children, and returns the names as an array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a> on each child element individually."
      ],
      "returns": "String[]: names of the children of the element"
    },
    "getChildren": {
      "description": [
        "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When the name parameter is specified, then it will return all children that match that name."
      ],
      "returns": "p5.XML[]: children of the element",
      "params": {
        "name": "String: (Optional) element name"
      }
    },
    "getChild": {
      "description": [
        "Returns the first of the element's children that matches the name parameter or the child of the given index.It returns undefined if no matching child is found."
      ],
      "returns": "p5.XML: ",
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "addChild": {
      "description": [
        "Appends a new child to the element. The child can be specified with either a String, which will be used as the new tag's name, or as a reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object. A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "params": {
        "node": "p5.XML: a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added"
      }
    },
    "removeChild": {
      "description": [
        "Removes the element specified by name or index."
      ],
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "getAttributeCount": {
      "description": [
        "Counts the specified element's number of attributes, returned as an Number."
      ],
      "returns": "Integer: "
    },
    "listAttributes": {
      "description": [
        "Gets all of the specified element's attributes, and returns them as an array of Strings."
      ],
      "returns": "String[]: an array of strings containing the names of attributes"
    },
    "hasAttribute": {
      "description": [
        "Checks whether or not an element has the specified attribute."
      ],
      "returns": "Boolean: true if attribute found else false",
      "params": {
        "the": "String: attribute to be checked"
      }
    },
    "getNum": {
      "description": [
        "Returns an attribute value of the element as an Number. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, the value 0 is returned."
      ],
      "returns": "Number: ",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "getString": {
      "description": [
        "Returns an attribute value of the element as an String. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, null is returned."
      ],
      "returns": "String: ",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "setAttribute": {
      "description": [
        "Sets the content of an element's attribute. The first parameter specifies the attribute name, while the second specifies the new content."
      ],
      "params": {
        "name": "String: the full name of the attribute",
        "value": "Number|String|Boolean: the value of the attribute"
      }
    },
    "getContent": {
      "description": [
        "Returns the content of an element. If there is no such content, defaultValue is returned if specified, otherwise null is returned."
      ],
      "returns": "String: ",
      "params": {
        "defaultValue": "String: (Optional) value returned if no content is found"
      }
    },
    "setContent": {
      "description": [
        "Sets the element's content."
      ],
      "params": {
        "text": "String: the new content"
      }
    },
    "serialize": {
      "description": [
        "Serializes the element into a string. This function is useful for preparing the content to be sent over a http request or saved to file."
      ],
      "returns": "String: Serialized string of the element"
    }
  },
  "p5.Vector": {
    "description": [
      "A class to describe a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction. The datatype, however, stores the components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude and direction can be accessed via the methods <a href=\"#/p5.Vector/mag\">mag()</a> and <a href=\"#/p5.Vector/heading\">heading()</a>. ",
      "In many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a position, velocity, or acceleration. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (a vector that points from the origin to its location), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). ",
      "Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class."
    ],
    "params": {
      "x": "Number: (Optional) x component of the vector",
      "y": "Number: (Optional) y component of the vector",
      "z": "Number: (Optional) z component of the vector"
    },
    "x": {
      "description": [
        "The x component of the vector"
      ]
    },
    "y": {
      "description": [
        "The y component of the vector"
      ]
    },
    "z": {
      "description": [
        "The z component of the vector"
      ]
    },
    "toString": {
      "description": [
        "Returns a string representation of a vector v by calling String(v) or v.toString(). This method is useful for logging vectors in the console."
      ],
      "returns": "String: "
    },
    "set": {
      "description": [
        "Sets the x, y, and z component of the vector using two or three separate variables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array."
      ],
      "params": {
        "x": "Number: (Optional) the x component of the vector",
        "y": "Number: (Optional) the y component of the vector",
        "z": "Number: (Optional) the z component of the vector",
        "value": "p5.Vector|Number[]: the vector to set"
      }
    },
    "copy": {
      "description": [
        "Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object."
      ],
      "returns": "p5.Vector: the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "add": {
      "description": [
        "Adds x, y, and z components to a vector, adds one vector to another, or adds two independent vectors together. The version of the method that adds two vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others acts directly on the vector. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: the x component of the vector to be added",
        "y": "Number: (Optional) the y component of the vector to be added",
        "z": "Number: (Optional) the z component of the vector to be added",
        "value": "p5.Vector|Number[]: the vector to add",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "rem": {
      "description": [
        "Gives remainder of a vector when it is divided by another vector. See examples for more context."
      ],
      "params": {
        "x": "Number: the x component of divisor vector",
        "y": "Number: the y component of divisor vector",
        "z": "Number: the z component of divisor vector",
        "value": "p5.Vector | Number[]: divisor vector",
        "v1": "p5.Vector: dividend <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: divisor <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "sub": {
      "description": [
        "Subtracts x, y, and z components from a vector, subtracts one vector from another, or subtracts two independent vectors. The version of the method that subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the other acts directly on the vector. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: the x component of the vector to subtract",
        "y": "Number: (optional) the y component of the vector to subtract",
        "z": "Number: (optional) the z component of the vector to subtract",
        "value": "p5.Vector|Number[]: the vector to subtract",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
        "target": "p5.Vector: (optional) the vector to receive the result (Optional)"
      }
    },
    "mult": {
      "description": [
        "Este método pode multiplicar o vetor por um valor escalar, multiplicar os valores x, y e z de um vetor, ou multiplicar os componentes x, y e z de dois vetores independentes. Ao multiplicar um vetor por um valor escalar, cada variável que o compõe será multiplicada pelo valor. Ao multiplicar dois vetores, os valores dos vetores serão multiplicados individualmente um pelo outro -- por exemplo, com dois vetores A e B, teremos como resultado: [A.x * B.x, A.y * B.y, A.z * B.z].",
        "A versão estática do método retorna um novo <a href=\"#/p5.Vector\">p5.Vector</a>, enquanto a versão não-estática modifica o vetor diretamente.",
        "Além disso, você pode utilizar uma array como argumento. Veja os exemplos para compreender o método em seu contexto."
      ],
      "params": {
        "n": "Número: o número a ser multiplicado pelo vetor.",
        "x": "Número: o número a ser multiplicado pelo valor x do vetor",
        "y": "Número: o número a ser multiplicado pelo valor y do vetor",
        "z": "Número (opcional): o número a ser multiplicado pelo valor z do vetor",
        "arr": "Número[]: a array a ser multiplicada pelos valores do vetor",
        "v": "p5.Vector: o vetor a ser multiplicado pelos valores do vetor original",
        "target": "p5.Vector (opcional): o vetor que receberá o resultado",
        "v0": "p5.Vector: um vetor a ser multiplicado",
        "v1": "p5.Vector: um vetor a ser multiplicado"
      }
    },
    "div": {
      "description": [
        "Este método pode dividir o vetor por um valor escalar, dividir os valores x, y e z de um vetor, ou dividir os componentes x, y e z de dois vetores independentes. Ao dividir um vetor por um valor escalar, cada variável que o compõe será dividida pelo valor. Ao dividir um vetor por outro, cada valor do vetor original será dividido pelo valor correspondente do outro -- por exemplo, com dois vetores A e B, teremos como resultado: [A.x / B.x, A.y / B.y, A.z / B.z].",
        "A versão estática do método retorna um novo <a href=\"#/p5.Vector\">p5.Vector</a>, enquanto a versão não-estática modifica o vetor diretamente.",
        "Além disso, você pode utilizar uma array como argumento. Veja os exemplos para compreender o método em seu contexto."
      ],
      "params": {
        "n": "Número: o número pelo qual o vetor será dividido",
        "x": "Número: o número pelo qual o valor x do vetor será dividido",
        "y": "Número: o número pelo qual o valor y do vetor será dividido",
        "z": "Número (opcional): o número pelo qual o valor z do vetor será dividido",
        "arr": "Número[]: a array pelo qual os valores do vetor serão divididos",
        "v": "p5.Vector: o vetor cujos valores irão dividir o vetor original",
        "target": "p5.Vector (opcional): o vetor que receberá o resultado",
        "v0": "p5.Vector: um vetor a ser dividido",
        "v1": "p5.Vector: um vetor cujos valores irão dividir o vetor original"
      }
    },
    "mag": {
      "description": [
        "Calcula a magnitude (comprimento) de um vetor, e retorna um número. Corresponde à equação <code>sqrt(x*x + y*y + z*z)</code>."
      ],
      "returns": "Número: magnitude do vetor",
      "params": {
        "vecT": "p5.Vector: o vetor que se quer saber a magnitude"
      }
    },
    "magSq": {
      "description": [
        "Calcula a magnitude (comprimento) quadrada do vetor, e retorna um número. Corresponde à equação <em>(x*x + y*y + z*z)</em>. É mais veloz caso o comprimento real não seja necessário ao comparar vetores."
      ],
      "returns": "Número: magnitude quadrada do vetor"
    },
    "dot": {
      "description": [
        "Calcula o produto escalar de dois vetores. A versão deste método que computa o produto escalar de dois vetores independentes é o método estático. Veja os exemplos para compreender o método em seu contexto."
      ],
      "returns": "Número: o produto escalar",
      "params": {
        "x": "Número: componente x do vetor",
        "y": "Número (opcional): componente y do vetor",
        "z": "Número (opcional): componente z do vetor",
        "value": "p5.Vector: os valores de um vetor, ou um <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "<a href=\"#/p5.Vector\">p5.Vector</a>: o primeiro vetor",
        "v2": "<a href=\"#/p5.Vector\">p5.Vector</a>: o segundo vetor"
      }
    },
    "cross": {
      "description": [
        "Calcula e retorna o produto vetorial entre dois vetores. Tanto o modo estático quando o modo não-estático retornam um novo <a href=\"#/p5.Vector\">p5.Vector</a>. Veja os exemplos para compreender o método em seu contexto."
      ],
      "returns": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> resultante do produto escalar",
      "params": {
        "v": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> a ser comparado",
        "v1": "p5.Vector: o primeiro <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: o segundo <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "dist": {
      "description": [
        "Calcula a distância euclidiana entre dois pontos, considerando um ponto como um vetor."
      ],
      "returns": "Número: a distância",
      "params": {
        "v": "p5.Vector: o <a href=\"#/p5.Vector\">p5.Vector</a> para calcular a distância",
        "v1": "p5.Vector: o primeiro <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: o segundo <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "normalize": {
      "description": [
        "Normalizar o vetor para comprimento 1 — transformá-lo em um vetor unitário."
      ],
      "returns": "p5.Vector: o <a href=\"#/p5.Vector\">p5.Vector</a> normalizado",
      "params": {
        "v": "p5.Vector: o vetor a ser normalizado",
        "target": "p5.Vector (opcional): o vetor para receber o resultado"
      }
    },
    "limit": {
      "description": [
        "Limita a magnitude (comprimento) do vetor ao valor dado como parâmetro."
      ],
      "params": {
        "max": "Número: valor máximo para a magnitude do vetor"
      }
    },
    "setMag": {
      "description": [
        "Transforma a magnitude (comprimento) do vetor no valor dado como parâmetro."
      ],
      "params": {
        "len": "Número: o novo comprimento do vetor"
      }
    },
    "heading": {
      "description": [
        "Calcula o ângulo de rotação de um vetor 2D. <a href=\"#/p5.Vector\">p5.Vectors</a> criados utilizando a função <a src=\"#/p5/createVector\">createVector()</a> utilizarão graus ou radianos, de acordo com o modo de ângulo (<a = src=\"#/p5/angleMode\">angleMode</a>) definido no código."
      ],
      "returns": "Número: o ângulo de rotação"
    },
    "setHeading": {
      "description": [
        "Rotaciona um vetor 2D até um ângulo específico. A magnitude (comprimento) permanece a mesma."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação"
      }
    },
    "rotate": {
      "description": [
        "Rotaciona um vetor em 2D pelo ângulo dado como parâmetro. A magnitude (comprimento) permanece a mesma."
      ],
      "params": {
        "angle": "Número: o ângulo de rotação",
        "v": "vetor a ser rotacionado",
        "target": "p5.Vector (opcional): um vetor para receber o resultado"
      }
    },
    "angleBetween": {
      "description": [
        "Calcula e retorna o ângulo entre dois vetores em radianos."
      ],
      "returns": "Número: o ângulo entre os vetores (em radianos)",
      "params": {
        "value": "p5.Vector: os componentes x, y e z de um <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "lerp": {
      "description": [
        "Interpolação linear entre dois vetores."
      ],
      "params": {
        "x": "Número: o componente x do vetor",
        "y": "Número: o componente y do vetor",
        "z": "Número: o componente z do vetor",
        "amt": "Número: a quatia de interpolação — um valor entre 0.0 (primeiro vetor) e 1.0 (segundo vetor). 0.9 é bem próximo do segundo vetor, 0.5 é entre os dois.",
        "v": "p5.Vector: o vetor para interpolar",
        "v1": "p5.Vector: o primeiro vetor",
        "v2": "p5.Vector: o segundo vetor",
        "target": "p5.Vector (opcional): o vetor para receber o resultado"
      }
    },
    "reflect": {
      "description": [
        "Reflete o vetor incidente, resultando em sua normal como uma linha em 2D, ou um plano em 3D. Este método age diretamente no vetor."
      ],
      "params": {
        "surfaceNormal": "p5.Vector: o <a href=\"#/p5.Vector\">p5.Vector</a> a ser refletido, que será normalizado pelo método."
      }
    },
    "array": {
      "description": [
        "Retorna uma representação do vetor como uma array de números. Isto é somente para uso temporário. Se utilizado de outra maneira, o conteúdo deve ser copiado usando o método <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> para criar uma nova array."
      ],
      "returns": "Número[]: uma Array com três valores"
    },
    "equals": {
      "description": [
        "Checa se o vetor é igual a outro."
      ],
      "returns": "Booleano: retorna true (verdadeiro) caso os vetores sejam iguais, ou false (falso) caso não sejam",
      "params": {
        "x": "Número (opcional): o componente x do vetor",
        "y": "Número (opcional): o componente y do vetor",
        "z": "Número (opcional): o componente z do vetor",
        "value": "p5.Vector|Array: o vetor a ser comparado"
      }
    },
    "fromAngle": {
      "description": [
        "Faz um novo vetor 2D a partir de um ângulo."
      ],
      "returns": "p5.Vector: um novo <a href=\"#/p5.Vector\">p5.Vector</a>",
      "params": {
        "angle": "Número: o ângulo desejado em radianos (não é afetado pelo modo de ângulo — <a href=\"#/p5/angleMode\">angleMode</a>)",
        "length": "Número (opcional): o comprimento do novo vetor — caso não seja declarado, utiliza o valor 1 por padrão"
      }
    },
    "fromAngles": {
      "description": [
        "Cria um novo vetor 3D a partir de um par de ângulos em coordenadas esféricas. Utiliza o padrão norte-americano (<a href=\"https://www.iso.org/standard/64973.html\" target=\"_blank\">ISO</a>)."
      ],
      "returns": "p5.Vector: o novo <a href=\"#/p5.Vector\">p5.Vector</a>",
      "params": {
        "theta": "Número: ângulo polar (também conhecido como colatidude ou ângulo zenital) — ângulo que o vetor faz com o eixo Z positivo, em radianos; 0 significa para cima",
        "phi": "Número: azimute (ou longitude) — ângulo que a projeção do vetor sobre o eixo XY faz com o eixo X positivo, em radianos",
        "length": "Número (opcional): o comprimento do novo vetor — caso não seja especificado, é utilizado como padrão o valor 1"
      }
    },
    "random2D": {
      "description": [
        "Cria um novo vetor unitário 2D a partir de um ângulo aleatório."
      ],
      "returns": "p5.Vector: um novo <a href=\"#/p5.Vector\">p5.Vector</a>"
    },
    "random3D": {
      "description": [
        "Cria um novo vetor unitário 3D aleatório."
      ],
      "returns": "p5.Vector: um novo <a href=\"#/p5.Vector\">p5.Vector</a>"
    }
  },
  "p5.Font": {
    "description": [
      "Classe base para o uso de fontes."
    ],
    "params": {
      "pInst": "P5 (opcional): ponteiro para a instância do p5"
    },
    "font": {
      "description": [
        "Implementação subjacente de fontes opentype."
      ]
    },
    "textBounds": {
      "description": [
        "Retorna um retângulo contornando o texto dado, usando a fonte escolhida."
      ],
      "returns": "Objeto: um retângulo com as propriedades x, y, largura, e altura",
      "params": {
        "line": "String: um texto",
        "x": "Número: coordenada x",
        "y": "Número: coordenada y",
        "fontSize": "Número (opcional): o tamanho da fonte a ser utilizada — o padrão é 12",
        "options": "Objeto (opcional): opções opentype — fontes opentype possuem opções de alinhamento e linha de base, sendo o padrão 'LEFT' e 'alphabetic'"
      }
    },
    "textToPoints": {
      "description": [
        "Calcula uma array de pontos que segue o contorno do texto especificado."
      ],
      "returns": "Array: uma array de pontos, cada um consistindo em x, y, e alpha (o ângulo do contorno)",
      "params": {
        "txt": "String: o texto a ser convertido em pontos",
        "x": "Número: coordenada x",
        "y": "Número: coordenada y",
        "fontSize": "Número (opcional): tamanho da fonte a ser utilizada",
        "options": "Objeto (opcional): um objeto que pode conter: sampleFactor - a proporção de pontos por segmento de traço, sendo que quanto maior o valor, mais pontos, e portanto mais precisão (o padrão é 1). simplifyThreshold - se este valor não for 0, pontos colineares serão removidos do polígono. O valor representa o ângulo limite para determinar se dois pontos são colineares ou não."
      }
    }
  },
  "p5.Camera": {
    "description": [
      "Esta classe descreve a câmera a ser utilizada no <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\"> modo WebGL</a> do p5. Ela contém a posição da câmera, orientação, e informação de projeção necessária para renderizar uma cena 3D. ",
      "Novos objetos p5.Camera podem ser criados através da função <a href=\"#/p5/createCamera\">createCamera()</a>, e controlados a partir dos métodos descritos abaixo. A câmera criada dessa forma utilizará a posição e projeção de perspectiva padrão até que estas propriedades sejam modificadas através dos métodos disponíveis. É possível criar múltiplas câmeras, e então alternar entre elas utilizando o método <a href=\"#/p5/setCamera\">setCamera()</a> ",
      "Nota: Os métodos abaixo operam em dois sistemas de coordenadas — o sistema do 'mundo' se refere às posições em relação à origem ao longo dos eixos X, Y e Z. O sistema 'local' da câmera se refere a posições a partir do ponto de vista da própria câmera: esquerda-direita, cima-baixo, frente-trás. O método <a href=\"#/p5.Camera/move\">move()</a>, por exemplo, move a câmera em seus próprios eixos, enquanto <a href=\"#/p5.Camera/setPosition\">setPosition()</a> define a posição da câmera em relação ao espaço-mundo. ",
      "As propriedades <code>eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</code> que descrevem a posição, orientação e projeção da câmera, também são acessíveis a partir do objeto criado utilizando <a href=\"#/p5/createCamera\">createCamera()</a>"
    ],
    "params": {
      "rendererGL": "RendererGL: instance of WebGL renderer"
    },
    "eyeX": {
      "description": [
        "camera position value on x axis"
      ]
    },
    "eyeY": {
      "description": [
        "camera position value on y axis"
      ]
    },
    "eyeZ": {
      "description": [
        "camera position value on z axis"
      ]
    },
    "centerX": {
      "description": [
        "x coordinate representing center of the sketch"
      ]
    },
    "centerY": {
      "description": [
        "y coordinate representing center of the sketch"
      ]
    },
    "centerZ": {
      "description": [
        "z coordinate representing center of the sketch"
      ]
    },
    "upX": {
      "description": [
        "x component of direction 'up' from camera"
      ]
    },
    "upY": {
      "description": [
        "y component of direction 'up' from camera"
      ]
    },
    "upZ": {
      "description": [
        "z component of direction 'up' from camera"
      ]
    },
    "perspective": {
      "description": [
        "Sets a perspective projection for a p5.Camera object and sets parameters for that projection according to <a href=\"#/p5/perspective\">perspective()</a> syntax."
      ]
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection for a p5.Camera object and sets parameters for that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax."
      ]
    },
    "frustum": {},
    "pan": {
      "description": [
        "Panning rotates the camera view to the left and right."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "tilt": {
      "description": [
        "Tilting rotates the camera view up and down."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "lookAt": {
      "description": [
        "Reorients the camera to look at a position in world space."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    },
    "camera": {
      "description": [
        "Sets a camera's position and orientation. This is equivalent to calling <a href=\"#/p5/camera\">camera()</a> on a p5.Camera object."
      ]
    },
    "move": {
      "description": [
        "Move camera along its local axes while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: amount to move along camera's left-right axis",
        "y": "Number: amount to move along camera's up-down axis",
        "z": "Number: amount to move along camera's forward-backward axis"
      }
    },
    "setPosition": {
      "description": [
        "Set camera position in world-space while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    }
  },
  "p5.Geometry": {
    "description": [
      "p5 Geometry class"
    ],
    "params": {
      "detailX": "Integer: (Optional) number of vertices on horizontal surface",
      "detailY": "Integer: (Optional) number of vertices on horizontal surface",
      "callback": "Function: (Optional) function to call upon object instantiation."
    },
    "computeFaces": {
      "description": [
        "computes faces for geometry objects based on the vertices."
      ]
    },
    "computeNormals": {
      "description": [
        "computes smooth normals per vertex as an average of each face."
      ]
    },
    "averageNormals": {
      "description": [
        "Averages the vertex normals. Used in curved surfaces"
      ]
    },
    "averagePoleNormals": {
      "description": [
        "Averages pole normals. Used in spherical primitives"
      ]
    },
    "normalize": {
      "description": [
        "Modifies all vertices to be centered within the range -100 to 100."
      ]
    }
  },
  "p5.Shader": {
    "description": [
      "Shader class for WEBGL Mode"
    ],
    "params": {
      "renderer": "p5.RendererGL: an instance of p5.RendererGL that will provide the GL context for this new p5.Shader",
      "vertSrc": "String: source code for the vertex shader (as a string)",
      "fragSrc": "String: source code for the fragment shader (as a string)"
    },
    "setUniform": {
      "description": [
        "Wrapper around gl.uniform functions. As we store uniform info in the shader we can use that to do type checking on the supplied data and call the appropriate function."
      ],
      "params": {
        "uniformName": "String: the name of the uniform in the shader program",
        "data": "Object|Number|Boolean|Number[]: the data to be associated with that uniform; type varies (could be a single numerical value, array, matrix, or texture / sampler reference)"
      }
    }
  },
  "p5.sound": {
    "getMasterVolume": {
      "description": [
        "Returns a number representing the master amplitude (volume) for sound in this sketch."
      ],
      "returns": "Number: Master amplitude (volume) for sound in this sketch.  Should be between 0.0 (silence) and 1.0."
    },
    "masterVolume": {
      "description": [
        "Scale the output of all sound in this sketch Scaled between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.  ",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal. ",
        "<b>How This Works</b>: When you load the p5.sound module, it creates a single instance of p5sound. All sound objects in this module output to p5sound before reaching your computer's output. So if you change the amplitude of p5sound, it impacts all of the sound in this module.  ",
        "If no value is provided, returns a Web Audio API Gain Node"
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "soundOut": {
      "description": [
        "<code>p5.soundOut</code> is the p5.sound master output. It sends output to the destination of this window's web audio context. It contains Web Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>), and Gain Nodes for <code>.input</code> and <code>.output</code>."
      ]
    }
  },
  "p5.Effect": {
    "description": [
      "Effect is a base class for audio effects in p5. This module handles the nodes and methods that are common and useful for current and future effects. ",
      "This class is extended by <a href=\"/reference/#/p5.Distortion\">p5.Distortion</a>, <a href=\"/reference/#/p5.Compressor\">p5.Compressor</a>, <a href=\"/reference/#/p5.Delay\">p5.Delay</a>, <a href=\"/reference/#/p5.Filter\">p5.Filter</a>, <a href=\"/reference/#/p5.Reverb\">p5.Reverb</a>."
    ],
    "params": {
      "ac": "Object: (Optional) Reference to the audio context of the p5 object",
      "input": "AudioNode: (Optional) Gain Node effect wrapper",
      "output": "AudioNode: (Optional) Gain Node effect wrapper",
      "_drywet": "Object: (Optional) Tone.JS CrossFade node (defaults to value: 1)",
      "wet": "AudioNode: (Optional) Effects that extend this class should connect  to the wet signal to this gain node, so that dry and wet  signals are mixed properly."
    },
    "amp": {
      "description": [
        "Set the output volume of the filter."
      ],
      "params": {
        "vol": "Number: (Optional) amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts until rampTime",
        "tFromNow": "Number: (Optional) schedule this event to happen in tFromNow seconds"
      }
    },
    "chain": {
      "description": [
        "Link effects together in a chain Example usage: filter.chain(reverb, delay, panner); May be used with an open-ended number of arguments"
      ],
      "params": {
        "arguments": "Object: (Optional) Chain together multiple sound objects"
      }
    },
    "drywet": {
      "description": [
        "Adjust the dry/wet value."
      ],
      "params": {
        "fade": "Number: (Optional) The desired drywet value (0 - 1.0)"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.js-sound, Web Audio Node, or use signal to control an AudioParam"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Filter": {
    "description": [
      "A p5.Filter uses a Web Audio Biquad Filter to filter the frequency response of an input source. Subclasses include: <a href=\"/reference/#/p5.LowPass\"><code>p5.LowPass</code></a>: Allows frequencies below the cutoff frequency to pass through, and attenuates frequencies above the cutoff.",
      "<a href=\"/reference/#/p5.HighPass\"><code>p5.HighPass</code></a>: The opposite of a lowpass filter.",
      "<a href=\"/reference/#/p5.BandPass\"><code>p5.BandPass</code></a>: Allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range.",
      "The <code>.res()</code> method controls either width of the bandpass, or resonance of the low/highpass cutoff frequency. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "type": "String: (Optional) 'lowpass' (default), 'highpass', 'bandpass'"
    },
    "biquadFilter": {
      "description": [
        "The p5.Filter is built with a <a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\"> Web Audio BiquadFilter Node</a>."
      ]
    },
    "process": {
      "description": [
        "Filter an audio signal according to a set of filter parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance/Width of the filter frequency  from 0.001 to 1000"
      }
    },
    "set": {
      "description": [
        "Set the frequency and the resonance of the filter."
      ],
      "params": {
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance (Q) from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "freq": {
      "description": [
        "Set the filter frequency, in Hz, from 10 to 22050 (the range of human hearing, although in reality most people hear in a narrower range)."
      ],
      "returns": "Number: value Returns the current frequency value",
      "params": {
        "freq": "Number: Filter Frequency",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "res": {
      "description": [
        "Controls either width of a bandpass frequency, or the resonance of a low/highpass cutoff frequency."
      ],
      "returns": "Number: value Returns the current res value",
      "params": {
        "res": "Number: Resonance/Width of filter freq  from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "gain": {
      "description": [
        "Controls the gain attribute of a Biquad Filter. This is distinctly different from .amp() which is inherited from p5.Effect .amp() controls the volume via the output gain node p5.Filter.gain() controls the gain parameter of a Biquad Filter node."
      ],
      "returns": "Number: Returns the current or updated gain value",
      "params": {
        "gain": "Number"
      }
    },
    "toggle": {
      "description": [
        "Toggle function. Switches between the specified type and allpass"
      ],
      "returns": "Boolean: [Toggle value]"
    },
    "setType": {
      "description": [
        "Set the type of a p5.Filter. Possible types include: \"lowpass\" (default), \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"."
      ],
      "params": {
        "t": "String"
      }
    }
  },
  "p5.LowPass": {
    "description": [
      "Constructor: <code>new p5.LowPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('lowpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.HighPass": {
    "description": [
      "Constructor: <code>new p5.HighPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('highpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.BandPass": {
    "description": [
      "Constructor: <code>new p5.BandPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('bandpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.Oscillator": {
    "description": [
      "Creates a signal that oscillates between -1.0 and 1.0. By default, the oscillation takes the form of a sinusoidal shape ('sine'). Additional types include 'triangle', 'sawtooth' and 'square'. The frequency defaults to 440 oscillations per second (440Hz, equal to the pitch of an 'A' note).  ",
      "Set the type of oscillation with setType(), or by instantiating a specific oscillator: <a href=\"/reference/#/p5.SinOsc\">p5.SinOsc</a>, <a href=\"/reference/#/p5.TriOsc\">p5.TriOsc</a>, <a href=\"/reference/#/p5.SqrOsc\">p5.SqrOsc</a>, or <a href=\"/reference/#/p5.SawOsc\">p5.SawOsc</a>. "
    ],
    "params": {
      "freq": "Number: (Optional) frequency defaults to 440Hz",
      "type": "String: (Optional) type of oscillator. Options:  'sine' (default), 'triangle',  'sawtooth', 'square'"
    },
    "start": {
      "description": [
        "Start an oscillator. ",
        "Starting an oscillator on a user gesture will enable audio in browsers that have a strict autoplay policy, including Chrome and most mobile devices. See also: <code>userStartAudio()</code>."
      ],
      "params": {
        "time": "Number: (Optional) startTime in seconds from now.",
        "frequency": "Number: (Optional) frequency in Hz."
      }
    },
    "stop": {
      "description": [
        "Stop an oscillator. Accepts an optional parameter to determine how long (in seconds from now) until the oscillator stops."
      ],
      "params": {
        "secondsFromNow": "Number: Time, in seconds from now."
      }
    },
    "amp": {
      "description": [
        "Set the amplitude between 0 and 1.0. Or, pass in an object such as an oscillator to modulate amplitude with an audio signal."
      ],
      "returns": "AudioParam: gain If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's  gain/amplitude/volume)",
      "params": {
        "vol": "Number|Object: between 0 and 1.0  or a modulating signal/oscillator",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "freq": {
      "description": [
        "Set frequency of an oscillator to a value. Or, pass in an object such as an oscillator to modulate the frequency with an audio signal."
      ],
      "returns": "AudioParam: Frequency If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's frequency",
      "params": {
        "Frequency": "Number|Object: Frequency in Hz  or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Ramp time (in seconds)",
        "timeFromNow": "Number: (Optional) Schedule this event to happen  at x seconds from now"
      }
    },
    "setType": {
      "description": [
        "Set type to 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "params": {
        "type": "String: 'sine', 'triangle', 'sawtooth' or 'square'."
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "pan": {
      "description": [
        "Pan between Left (-1) and Right (1)"
      ],
      "params": {
        "panning": "Number: Number between -1 and 1",
        "timeFromNow": "Number: schedule this event to happen  seconds from now"
      }
    },
    "phase": {
      "description": [
        "Set the phase of an oscillator between 0.0 and 1.0. In this implementation, phase is a delay time based on the oscillator's current frequency."
      ],
      "params": {
        "phase": "Number: float between 0.0 and 1.0"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Oscillator's output amplitude by a fixed value (i.e. turn it up!). Calling this method again will override the initial mult() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with multiplied output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this oscillator's amplitude values to a given range, and return the oscillator. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.SinOsc": {
    "description": [
      "Constructor: <code>new p5.SinOsc()</code>. This creates a Sine Wave Oscillator and is equivalent to <code> new p5.Oscillator('sine') </code> or creating a p5.Oscillator and then calling its method <code>setType('sine')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.TriOsc": {
    "description": [
      "Constructor: <code>new p5.TriOsc()</code>. This creates a Triangle Wave Oscillator and is equivalent to <code>new p5.Oscillator('triangle') </code> or creating a p5.Oscillator and then calling its method <code>setType('triangle')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SawOsc": {
    "description": [
      "Constructor: <code>new p5.SawOsc()</code>. This creates a SawTooth Wave Oscillator and is equivalent to <code> new p5.Oscillator('sawtooth') </code> or creating a p5.Oscillator and then calling its method <code>setType('sawtooth')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SqrOsc": {
    "description": [
      "Constructor: <code>new p5.SqrOsc()</code>. This creates a Square Wave Oscillator and is equivalent to <code> new p5.Oscillator('square') </code> or creating a p5.Oscillator and then calling its method <code>setType('square')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.MonoSynth": {
    "description": [
      "A MonoSynth is used as a single voice for sound synthesis. This is a class to be used in conjunction with the PolySynth class. Custom synthetisers should be built inheriting from this class."
    ],
    "play": {
      "description": [
        "Play tells the MonoSynth to start playing a note. This method schedules the calling of .triggerAttack and .triggerRelease."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope. Defaults to 0.15 seconds."
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "attack": {
      "description": [
        "Getters and Setters"
      ]
    },
    "decay": {},
    "sustain": {},
    "release": {},
    "amp": {
      "description": [
        "MonoSynth amp"
      ],
      "returns": "Number: new volume value",
      "params": {
        "vol": "Number: desired volume",
        "rampTime": "Number: (Optional) Time to reach new volume"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  },
  "p5.AudioVoice": {
    "description": [
      "Base class for monophonic synthesizers. Any extensions of this class should follow the API and implement the methods below in order to remain compatible with p5.PolySynth();"
    ],
    "connect": {
      "description": [
        "Connect to p5 objects or Web Audio Nodes"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect from soundOut"
      ]
    }
  },
  "p5.PolySynth": {
    "description": [
      "An AudioVoice is used as a single voice for sound synthesis. The PolySynth class holds an array of AudioVoice, and deals with voices allocations, with setting notes to be played, and parameters to be set."
    ],
    "params": {
      "synthVoice": "Number: (Optional) A monophonic synth voice inheriting  the AudioVoice class. Defaults to p5.MonoSynth",
      "maxVoices": "Number: (Optional) Number of voices, defaults to 8;"
    },
    "notes": {
      "description": [
        "An object that holds information about which notes have been played and which notes are currently being played. New notes are added as keys on the fly. While a note has been attacked, but not released, the value of the key is the audiovoice which is generating that note. When notes are released, the value of the key becomes undefined."
      ]
    },
    "polyvalue": {
      "description": [
        "A PolySynth must have at least 1 voice, defaults to 8"
      ]
    },
    "AudioVoice": {
      "description": [
        "Monosynth that generates the sound for each note that is triggered. The p5.PolySynth defaults to using the p5.MonoSynth as its voice."
      ]
    },
    "play": {
      "description": [
        "Play a note by triggering noteAttack and noteRelease with sustain time"
      ],
      "params": {
        "note": "Number: (Optional) midi note to play (ranging from 0 to 127 - 60 being a middle C)",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "noteADSR": {
      "description": [
        "noteADSR sets the envelope for a specific note that has just been triggered. Using this method modifies the envelope of whichever audiovoice is being used to play the desired note. The envelope should be reset before noteRelease is called in order to prevent the modified envelope from being used on other notes."
      ],
      "params": {
        "note": "Number: (Optional) Midi note on which ADSR should be set.",
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setADSR": {
      "description": [
        "Set the PolySynths global envelope. This method modifies the envelopes of each monosynth so that all notes are played with this envelope."
      ],
      "params": {
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "noteAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of a MonoSynth. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)/",
        "secondsFromNow": "Number: (Optional) time from now (in seconds)"
      }
    },
    "noteRelease": {
      "description": [
        "Trigger the Release of an AudioVoice note. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.  If no value is provided, all notes will be released.",
        "secondsFromNow": "Number: (Optional) time to trigger the release"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  },
  "p5.SoundFile": {
    "description": [
      "SoundFile object with a path to a file.  ",
      "The p5.SoundFile may not be available immediately because it loads the file information asynchronously.  ",
      "To do something with the sound as soon as it loads pass the name of a function as the second parameter.  ",
      "Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatability, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works."
    ],
    "params": {
      "path": "String|Array: path to a sound file (String). Optionally,  you may include multiple file formats in  an array. Alternately, accepts an object  from the HTML5 File API, or a p5.File.",
      "successCallback": "Function: (Optional) Name of a function to call once file loads",
      "errorCallback": "Function: (Optional) Name of a function to call if file fails to  load. This function will receive an error or  XMLHttpRequest object with information  about what went wrong.",
      "whileLoadingCallback": "Function: (Optional) Name of a function to call while file  is loading. That function will  receive progress of the request to  load the sound file  (between 0 and 1) as its first  parameter. This progress  does not account for the additional  time needed to decode the audio data."
    },
    "isLoaded": {
      "description": [
        "Returns true if the sound file finished loading successfully."
      ],
      "returns": "Boolean: "
    },
    "play": {
      "description": [
        "Play the p5.SoundFile"
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule playback to start (in seconds from now).",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) amplitude (volume)  of playback",
        "cueStart": "Number: (Optional) (optional) cue start time in seconds",
        "duration": "Number: (Optional) (optional) duration of playback in seconds"
      }
    },
    "playMode": {
      "description": [
        "p5.SoundFile has two play modes: <code>restart</code> and <code>sustain</code>. Play Mode determines what happens to a p5.SoundFile if it is triggered while in the middle of playback. In sustain mode, playback will continue simultaneous to the new playback. In restart mode, play() will stop playback and start over. With untilDone, a sound will play only if it's not already playing. Sustain is the default mode."
      ],
      "params": {
        "str": "String: 'restart' or 'sustain' or 'untilDone'"
      }
    },
    "pause": {
      "description": [
        "Pauses a file that is currently playing. If the file is not playing, then nothing will happen. ",
        "After pausing, .play() will resume from the paused position. If p5.SoundFile had been set to loop before it was paused, it will continue to loop after it is unpaused with .play()."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop the p5.SoundFile. Accepts optional parameters to set the playback rate, playback volume, loopStart, loopEnd."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) playback volume",
        "cueLoopStart": "Number: (Optional) (optional) startTime in seconds",
        "duration": "Number: (Optional) (optional) loop duration in seconds"
      }
    },
    "setLoop": {
      "description": [
        "Set a p5.SoundFile's looping flag to true or false. If the sound is currently playing, this change will take effect when it reaches the end of the current playback."
      ],
      "params": {
        "Boolean": "Boolean: set looping to true or false"
      }
    },
    "isLooping": {
      "description": [
        "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not."
      ],
      "returns": "Boolean: "
    },
    "isPlaying": {
      "description": [
        "Returns true if a p5.SoundFile is playing, false if not (i.e. paused or stopped)."
      ],
      "returns": "Boolean: "
    },
    "isPaused": {
      "description": [
        "Returns true if a p5.SoundFile is paused, false if not (i.e. playing or stopped)."
      ],
      "returns": "Boolean: "
    },
    "stop": {
      "description": [
        "Stop soundfile playback."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  in seconds from now"
      }
    },
    "setVolume": {
      "description": [
        "Multiply the output volume (amplitude) of a sound file between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class. ",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal."
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "pan": {
      "description": [
        "Set the stereo panning of a p5.sound object to a floating point number between -1.0 (left) and 1.0 (right). Default is 0.0 (center)."
      ],
      "params": {
        "panValue": "Number: (Optional) Set the stereo panner",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current stereo pan position (-1.0 to 1.0)"
      ],
      "returns": "Number: Returns the stereo pan setting of the Oscillator  as a number between -1.0 (left) and 1.0 (right).  0.0 is center and default."
    },
    "rate": {
      "description": [
        "Set the playback rate of a sound file. Will change the speed and the pitch. Values less than zero will reverse the audio buffer."
      ],
      "params": {
        "playbackRate": "Number: (Optional) Set the playback rate. 1.0 is normal,  .5 is half-speed, 2.0 is twice as fast.  Values less than zero play backwards."
      }
    },
    "duration": {
      "description": [
        "Returns the duration of a sound file in seconds."
      ],
      "returns": "Number: The duration of the soundFile in seconds."
    },
    "currentTime": {
      "description": [
        "Return the current position of the p5.SoundFile playhead, in seconds. Time is relative to the normal buffer direction, so if <code>reverseBuffer</code> has been called, currentTime will count backwards."
      ],
      "returns": "Number: currentTime of the soundFile in seconds."
    },
    "jump": {
      "description": [
        "Move the playhead of a soundfile that is currently playing to a new position and a new duration, in seconds. If none are given, will reset the file to play entire duration from start to finish. To set the position of a soundfile that is not currently playing, use the <code>play</code> or <code>loop</code> methods."
      ],
      "params": {
        "cueTime": "Number: cueTime of the soundFile in seconds.",
        "duration": "Number: duration in seconds."
      }
    },
    "channels": {
      "description": [
        "Return the number of channels in a sound file. For example, Mono = 1, Stereo = 2."
      ],
      "returns": "Number: [channels]"
    },
    "sampleRate": {
      "description": [
        "Return the sample rate of the sound file."
      ],
      "returns": "Number: [sampleRate]"
    },
    "frames": {
      "description": [
        "Return the number of samples in a sound file. Equal to sampleRate * duration."
      ],
      "returns": "Number: [sampleCount]"
    },
    "getPeaks": {
      "description": [
        "Returns an array of amplitude peaks in a p5.SoundFile that can be used to draw a static waveform. Scans through the p5.SoundFile's audio buffer to find the greatest amplitudes. Accepts one parameter, 'length', which determines size of the array. Larger arrays result in more precise waveform visualizations. ",
        "Inspired by Wavesurfer.js."
      ],
      "returns": "Float32Array: Array of peaks.",
      "params": {
        "length": "Number: (Optional) length is the size of the returned array.  Larger length results in more precision.  Defaults to 5*width of the browser window."
      }
    },
    "reverseBuffer": {
      "description": [
        "Reverses the p5.SoundFile's buffer source. Playback must be handled separately (see example)."
      ]
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the soundfile reaches the end of a buffer. If the soundfile is playing through once, this will be called when it ends. If it is looping, it will be called when stop is called."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended."
      }
    },
    "connect": {
      "description": [
        "Connects the output of a p5sound object to input of another p5.sound object. For example, you may connect a p5.SoundFile to an FFT or an Effect. If no parameter is given, it will connect to the master output. Most p5sound objects connect to the master output when they are created."
      ],
      "params": {
        "object": "Object: (Optional) Audio object that accepts an input"
      }
    },
    "disconnect": {
      "description": [
        "Disconnects the output of this p5sound object."
      ]
    },
    "setPath": {
      "description": [
        "Reset the source for this SoundFile to a new path (URL)."
      ],
      "params": {
        "path": "String: path to audio file",
        "callback": "Function: Callback"
      }
    },
    "setBuffer": {
      "description": [
        "Replace the current Audio Buffer with a new Buffer."
      ],
      "params": {
        "buf": "Array: Array of Float32 Array(s). 2 Float32 Arrays  will create a stereo source. 1 will create  a mono source."
      }
    },
    "processPeaks": {
      "description": [
        "processPeaks returns an array of timestamps where it thinks there is a beat. ",
        "This is an asynchronous function that processes the soundfile in an offline audio context, and sends the results to your callback function. ",
        "The process involves running the soundfile through a lowpass filter, and finding all of the peaks above the initial threshold. If the total number of peaks are below the minimum number of peaks, it decreases the threshold and re-runs the analysis until either minPeaks or minThreshold are reached."
      ],
      "returns": "Array: Array of timestamped peaks",
      "params": {
        "callback": "Function: a function to call once this data is returned",
        "initThreshold": "Number: (Optional) initial threshold defaults to 0.9",
        "minThreshold": "Number: (Optional) minimum threshold defaults to 0.22",
        "minPeaks": "Number: (Optional) minimum number of peaks defaults to 200"
      }
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point. ",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback. ",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ]
    },
    "save": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. To upload a file to a server, see <a href=\"/docs/reference/#/p5.SoundFile/getBlob\">getBlob</a>"
      ],
      "params": {
        "fileName": "String: (Optional) name of the resulting .wav file."
      }
    },
    "getBlob": {
      "description": [
        "This method is useful for sending a SoundFile to a server. It returns the .wav-encoded audio data as a \"<a target=\"_blank\" title=\"Blob reference at MDN\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a>\". A Blob is a file-like data object that can be uploaded to a server with an <a href=\"/docs/reference/#/p5/httpDo\">http</a> request. We'll use the <code>httpDo</code> options object to send a POST request with some specific options: we encode the request as <code>multipart/form-data</code>, and attach the blob as one of the form values using <code>FormData</code>."
      ],
      "returns": "Blob: A file-like data object"
    }
  },
  "p5.Amplitude": {
    "description": [
      "Amplitude measures volume between 0.0 and 1.0. Listens to all p5sound by default, or use setInput() to listen to a specific sound source. Accepts an optional smoothing value, which defaults to 0."
    ],
    "params": {
      "smoothing": "Number: (Optional) between 0.0 and .999 to smooth  amplitude readings (defaults to 0)"
    },
    "setInput": {
      "description": [
        "Connects to the p5sound instance (master output) by default. Optionally, you can pass in a specific source (i.e. a soundfile)."
      ],
      "params": {
        "snd": "SoundObject|undefined: (Optional) set the sound source  (optional, defaults to  master output)",
        "smoothing": "Number|undefined: (Optional) a range between 0.0 and 1.0  to smooth amplitude readings"
      }
    },
    "getLevel": {
      "description": [
        "Returns a single Amplitude reading at the moment it is called. For continuous readings, run in the draw loop."
      ],
      "returns": "Number: Amplitude as a number between 0.0 and 1.0",
      "params": {
        "channel": "Number: (Optional) Optionally return only channel 0 (left) or 1 (right)"
      }
    },
    "toggleNormalize": {
      "description": [
        "Determines whether the results of Amplitude.process() will be Normalized. To normalize, Amplitude finds the difference the loudest reading it has processed and the maximum amplitude of 1.0. Amplitude adds this difference to all values to produce results that will reliably map between 0.0 and 1.0. However, if a louder moment occurs, the amount that Normalize adds to all the values will change. Accepts an optional boolean parameter (true or false). Normalizing is off by default."
      ],
      "params": {
        "boolean": "Boolean: (Optional) set normalize to true (1) or false (0)"
      }
    },
    "smooth": {
      "description": [
        "Smooth Amplitude analysis by averaging with the last analysis frame. Off by default."
      ],
      "params": {
        "set": "Number: smoothing from 0.0 <= 1"
      }
    }
  },
  "p5.FFT": {
    "description": [
      "FFT (Fast Fourier Transform) is an analysis algorithm that isolates individual <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\"> audio frequencies</a> within a waveform.  ",
      "Once instantiated, a p5.FFT object can return an array based on two types of analyses: • <code>FFT.waveform()</code> computes amplitude values along the time domain. The array indices correspond to samples across a brief moment in time. Each value represents amplitude of the waveform at that sample of time. • <code>FFT.analyze() </code> computes amplitude values along the frequency domain. The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Use with <code>getEnergy()</code> to measure amplitude at specific frequencies, or within a range of frequencies. ",
      "FFT analyzes a very short snapshot of sound called a sample buffer. It returns an array of amplitude measurements, referred to as <code>bins</code>. The array is 1024 bins long by default. You can change the bin array length, but it must be a power of 2 between 16 and 1024 in order for the FFT algorithm to function correctly. The actual size of the FFT buffer is twice the number of bins, so given a standard sample rate, the buffer is 2048/44100 seconds long."
    ],
    "params": {
      "smoothing": "Number: (Optional) Smooth results of Freq Spectrum.  0.0 < smoothing < 1.0.  Defaults to 0.8.",
      "bins": "Number: (Optional) Length of resulting array.  Must be a power of two between  16 and 1024. Defaults to 1024."
    },
    "setInput": {
      "description": [
        "Set the input source for the FFT analysis. If no source is provided, FFT will analyze all sound in the sketch."
      ],
      "params": {
        "source": "Object: (Optional) p5.sound object (or web audio API source node)"
      }
    },
    "waveform": {
      "description": [
        "Returns an array of amplitude values (between -1.0 and +1.0) that represent a snapshot of amplitude readings in a single buffer. Length will be equal to bins (defaults to 1024). Can be used to draw the waveform of a sound."
      ],
      "returns": "Array: Array Array of amplitude values (-1 to 1)  over time. Array length = bins.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "precision": "String: (Optional) If any value is provided, will return results  in a Float32 Array which is more precise  than a regular array."
      }
    },
    "analyze": {
      "description": [
        "Returns an array of amplitude values (between 0 and 255) across the frequency spectrum. Length is equal to FFT bins (1024 by default). The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Must be called prior to using <code>getEnergy()</code>."
      ],
      "returns": "Array: spectrum Array of energy (amplitude/volume)  values across the frequency spectrum.  Lowest energy (silence) = 0, highest  possible is 255.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "scale": "Number: (Optional) If \"dB,\" returns decibel  float measurements between  -140 and 0 (max).  Otherwise returns integers from 0-255."
      }
    },
    "getEnergy": {
      "description": [
        "Returns the amount of energy (volume) at a specific <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\"> frequency</a>, or the average amount of energy between two frequencies. Accepts Number(s) corresponding to frequency (in Hz), or a String corresponding to predefined frequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). Returns a range between 0 (no energy/volume at that frequency) and 255 (maximum energy). <em>NOTE: analyze() must be called prior to getEnergy(). Analyze() tells the FFT to analyze frequency data, and getEnergy() uses the results determine the value at a specific frequency or range of frequencies.</em>"
      ],
      "returns": "Number: Energy Energy (volume/amplitude) from  0 and 255.",
      "params": {
        "frequency1": "Number|String: Will return a value representing  energy at this frequency. Alternately,  the strings \"bass\", \"lowMid\" \"mid\",  \"highMid\", and \"treble\" will return  predefined frequency ranges.",
        "frequency2": "Number: (Optional) If a second frequency is given,  will return average amount of  energy that exists between the  two frequencies."
      }
    },
    "getCentroid": {
      "description": [
        "Returns the <a href=\"http://en.wikipedia.org/wiki/Spectral_centroid\" target=\"_blank\"> spectral centroid</a> of the input signal. <em>NOTE: analyze() must be called prior to getCentroid(). Analyze() tells the FFT to analyze frequency data, and getCentroid() uses the results determine the spectral centroid.</em>"
      ],
      "returns": "Number: Spectral Centroid Frequency Frequency of the spectral centroid in Hz."
    },
    "smooth": {
      "description": [
        "Smooth FFT analysis by averaging with the last analysis frame."
      ],
      "params": {
        "smoothing": "Number: 0.0 < smoothing < 1.0.  Defaults to 0.8."
      }
    },
    "linAverages": {
      "description": [
        "Returns an array of average amplitude values for a given number of frequency bands split equally. N defaults to 16. <em>NOTE: analyze() must be called prior to linAverages(). Analyze() tells the FFT to analyze frequency data, and linAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: linearAverages Array of average amplitude values for each group",
      "params": {
        "N": "Number: Number of returned frequency groups"
      }
    },
    "logAverages": {
      "description": [
        "Returns an array of average amplitude values of the spectrum, for a given set of <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\"> Octave Bands</a> <em>NOTE: analyze() must be called prior to logAverages(). Analyze() tells the FFT to analyze frequency data, and logAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: logAverages Array of average amplitude values for each group",
      "params": {
        "octaveBands": "Array: Array of Octave Bands objects for grouping"
      }
    },
    "getOctaveBands": {
      "description": [
        "Calculates and Returns the 1/N <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">Octave Bands</a> N defaults to 3 and minimum central frequency to 15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) Setting fCtr0 to a central value of a higher octave will ignore the lower bands and produce less frequency groups."
      ],
      "returns": "Array: octaveBands Array of octave band objects with their bounds",
      "params": {
        "N": "Number: Specifies the 1/N type of generated octave bands",
        "fCtr0": "Number: Minimum central frequency for the lowest band"
      }
    }
  },
  "p5.Signal": {
    "description": [
      "p5.Signal is a constant audio-rate signal used by p5.Oscillator and p5.Envelope for modulation math.  ",
      "This is necessary because Web Audio is processed on a seprate clock. For example, the p5 draw loop runs about 60 times per second. But the audio clock must process samples 44100 times per second. If we want to add a value to each of those samples, we can't do it in the draw loop, but we can do it by adding a constant-rate audio signal.</p.  ",
      "This class mostly functions behind the scenes in p5.sound, and returns a Tone.Signal from the Tone.js library by Yotam Mann. If you want to work directly with audio signals for modular synthesis, check out <a href='http://bit.ly/1oIoEng' target=_'blank'>tone.js.</a>"
    ],
    "returns": "Tone.Signal: A Signal object from the Tone.js library",
    "fade": {
      "description": [
        "Fade to value, for smooth transitions"
      ],
      "params": {
        "value": "Number: Value to set this signal",
        "secondsFromNow": "Number: (Optional) Length of fade, in seconds from now"
      }
    },
    "setInput": {
      "description": [
        "Connect a p5.sound object or Web Audio node to this p5.Signal so that its amplitude values can be scaled."
      ],
      "params": {
        "input": "Object"
      }
    },
    "add": {
      "description": [
        "Add a constant value to this audio signal, and return the resulting audio signal. Does not change the value of the original signal, instead it returns a new p5.SignalAdd."
      ],
      "returns": "p5.Signal: object",
      "params": {
        "number": "Number"
      }
    },
    "mult": {
      "description": [
        "Multiply this signal by a constant value, and return the resulting audio signal. Does not change the value of the original signal, instead it returns a new p5.SignalMult."
      ],
      "returns": "p5.Signal: object",
      "params": {
        "number": "Number: to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this signal value to a given range, and return the result as an audio signal. Does not change the value of the original signal, instead it returns a new p5.SignalScale."
      ],
      "returns": "p5.Signal: object",
      "params": {
        "number": "Number: to multiply",
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.Envelope": {
    "description": [
      "Envelopes are pre-defined amplitude distribution over time. Typically, envelopes are used to control the output volume of an object, a series of fades referred to as Attack, Decay, Sustain and Release ( <a href=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">ADSR</a> ). Envelopes can also control other Web Audio Parameters—for example, a p5.Envelope can control an Oscillator's frequency like this: <code>osc.freq(env)</code>. ",
      "Use <code><a href=\"#/p5.Envelope/setRange\">setRange</a></code> to change the attack/release level. Use <code><a href=\"#/p5.Envelope/setADSR\">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime. ",
      "Use the <code><a href=\"#/p5.Envelope/play\">play</a></code> method to play the entire envelope, the <code><a href=\"#/p5.Envelope/ramp\">ramp</a></code> method for a pingable trigger, or <code><a href=\"#/p5.Envelope/triggerAttack\">triggerAttack</a></code>/ <code><a href=\"#/p5.Envelope/triggerRelease\">triggerRelease</a></code> to trigger noteOn/noteOff."
    ],
    "attackTime": {
      "description": [
        "Time until envelope reaches attackLevel"
      ]
    },
    "attackLevel": {
      "description": [
        "Level once attack is complete."
      ]
    },
    "decayTime": {
      "description": [
        "Time until envelope reaches decayLevel."
      ]
    },
    "decayLevel": {
      "description": [
        "Level after decay. The envelope will sustain here until it is released."
      ]
    },
    "releaseTime": {
      "description": [
        "Duration of the release portion of the envelope."
      ]
    },
    "releaseLevel": {
      "description": [
        "Level at the end of the release."
      ]
    },
    "set": {
      "description": [
        "Reset the envelope with a series of time/value pairs."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds) before level  reaches attackLevel",
        "attackLevel": "Number: Typically an amplitude between  0.0 and 1.0",
        "decayTime": "Number: Time",
        "decayLevel": "Number: Amplitude (In a standard ADSR envelope,  decayLevel = sustainLevel)",
        "releaseTime": "Number: Release Time (in seconds)",
        "releaseLevel": "Number: Amplitude"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setRange": {
      "description": [
        "Set max (attackLevel) and min (releaseLevel) of envelope."
      ],
      "params": {
        "aLevel": "Number: attack level (defaults to 1)",
        "rLevel": "Number: release level (defaults to 0)"
      }
    },
    "setInput": {
      "description": [
        "Assign a parameter to be controlled by this envelope. If a p5.Sound object is given, then the p5.Envelope will control its output gain. If multiple inputs are provided, the env will control all of them."
      ],
      "params": {
        "inputs": "Object: (Optional) A p5.sound object or  Web Audio Param."
      }
    },
    "setExp": {
      "description": [
        "Set whether the envelope ramp is linear (default) or exponential. Exponential ramps can be useful because we perceive amplitude and frequency logarithmically."
      ],
      "params": {
        "isExp": "Boolean: true is exponential, false is linear"
      }
    },
    "play": {
      "description": [
        "Play tells the envelope to start acting on a given input. If the input is a p5.sound object (i.e. AudioIn, Oscillator, SoundFile), then Envelope will control its output volume. Envelopes can also be used to control any <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Audio Param.</a>"
      ],
      "params": {
        "unit": "Object: A p5.sound object or  Web Audio Param.",
        "startTime": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go. Input can be any p5.sound object, or a <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Param</a>."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time from now (in seconds)"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the Release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "ramp": {
      "description": [
        "Exponentially ramp to a value using the first two values from <code><a href=\"#/p5.Envelope/setADSR\">setADSR(attackTime, decayTime)</a></code> as <a href=\"https://en.wikipedia.org/wiki/RC_time_constant\"> time constants</a> for simple exponential ramps. If the value is higher than current value, it uses attackTime, while a decrease uses decayTime."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: When to trigger the ramp",
        "v": "Number: Target value",
        "v2": "Number: (Optional) Second target value (optional)"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Envelope's output amplitude by a fixed value. Calling this method again will override the initial mult() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this envelope's amplitude values to a given range, and return the envelope. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.Pulse": {
    "description": [
      "Creates a Pulse object, an oscillator that implements Pulse Width Modulation. The pulse is created with two oscillators. Accepts a parameter for frequency, and to set the width between the pulses. See <a href=\" http://p5js.org/pt-BR/reference/#/p5.Oscillator\"> <code>p5.Oscillator</code> for a full list of methods."
    ],
    "params": {
      "freq": "Number: (Optional) Frequency in oscillations per second (Hz)",
      "w": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
    },
    "width": {
      "description": [
        "Set the width of a Pulse object (an oscillator that implements Pulse Width Modulation)."
      ],
      "params": {
        "width": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
      }
    }
  },
  "p5.Noise": {
    "description": [
      "Noise is a type of oscillator that generates a buffer with random values."
    ],
    "params": {
      "type": "String: Type of noise can be 'white' (default),  'brown' or 'pink'."
    },
    "setType": {
      "description": [
        "Set type of noise to 'white', 'pink' or 'brown'. White is the default."
      ],
      "params": {
        "type": "String: (Optional) 'white', 'pink' or 'brown'"
      }
    }
  },
  "p5.AudioIn": {
    "description": [
      "Get audio from an input, i.e. your computer's microphone.  ",
      "Turn the mic on/off with the start() and stop() methods. When the mic is on, its volume can be measured with getLevel or by connecting an FFT object.  ",
      "If you want to hear the AudioIn, use the .connect() method. AudioIn does not connect to p5.sound output by default to prevent feedback.  ",
      "<em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/ Stream</a> API, which is not supported by certain browsers. Access in Chrome browser is limited to localhost and https, but access over http may be limited.</em>"
    ],
    "params": {
      "errorCallback": "Function: (Optional) A function to call if there is an error  accessing the AudioIn. For example,  Safari and iOS devices do not  currently allow microphone access."
    },
    "input": {},
    "output": {},
    "stream": {},
    "mediaStream": {},
    "currentSource": {},
    "enabled": {
      "description": [
        "Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access."
      ]
    },
    "amplitude": {
      "description": [
        "Input amplitude, connect to it by default but not to master out"
      ]
    },
    "start": {
      "description": [
        "Start processing audio input. This enables the use of other AudioIn methods like getLevel(). Note that by default, AudioIn is not connected to p5.sound's output. So you won't hear anything unless you use the connect() method.",
        "Certain browsers limit access to the user's microphone. For example, Chrome only allows access from localhost and over https. For this reason, you may want to include an errorCallback—a function that is called in case the browser won't provide mic access."
      ],
      "params": {
        "successCallback": "Function: (Optional) Name of a function to call on  success.",
        "errorCallback": "Function: (Optional) Name of a function to call if  there was an error. For example,  some browsers do not support  getUserMedia."
      }
    },
    "stop": {
      "description": [
        "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel(). If re-starting, the user may be prompted for permission access."
      ]
    },
    "connect": {
      "description": [
        "Connect to an audio unit. If no parameter is provided, will connect to the master output (i.e. your speakers)."
      ],
      "params": {
        "unit": "Object: (Optional) An object that accepts audio input,  such as an FFT"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers."
      ]
    },
    "getLevel": {
      "description": [
        "Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must .start() before using .getLevel().</em>"
      ],
      "returns": "Number: Volume level (between 0.0 and 1.0)",
      "params": {
        "smoothing": "Number: (Optional) Smoothing is 0.0 by default.  Smooths values based on previous values."
      }
    },
    "amp": {
      "description": [
        "Set amplitude (volume) of a mic input between 0 and 1.0. "
      ],
      "params": {
        "vol": "Number: between 0 and 1.0",
        "time": "Number: (Optional) ramp time (optional)"
      }
    },
    "getSources": {
      "description": [
        "Returns a list of available input sources. This is a wrapper for <a title=\"MediaDevices.enumerateDevices() - Web APIs | MDN\" target=\"_blank\" href=  \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"</a> <blockquote> ",
        "and it returns a Promise. </blockquote>"
      ],
      "returns": "Promise: Returns a Promise that can be used in place of the callbacks, similar  to the enumerateDevices() method",
      "params": {
        "successCallback": "Function: (Optional) This callback function handles the sources when they  have been enumerated. The callback function  receives the deviceList array as its only argument",
        "errorCallback": "Function: (Optional) This optional callback receives the error  message as its argument."
      }
    },
    "setSource": {
      "description": [
        "Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support <a title=\"MediaDevices.enumerateDevices() - Web APIs | MDN\" target=\"_blank\" href= \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"</a> <blockquote> ",
        "navigator.mediaDevices.enumerateDevices()</a>.</blockquote>"
      ],
      "params": {
        "num": "Number: position of input source in the array"
      }
    }
  },
  "p5.EQ": {
    "description": [
      "p5.EQ is an audio effect that performs the function of a multiband audio equalizer. Equalization is used to adjust the balance of frequency compoenents of an audio signal. This process is commonly used in sound production and recording to change the waveform before it reaches a sound output device. EQ can also be used as an audio effect to create interesting distortions by filtering out parts of the spectrum. p5.EQ is built using a chain of Web Audio Biquad Filter Nodes and can be instantiated with 3 or 8 bands. Bands can be added or removed from the EQ by directly modifying p5.EQ.bands (the array that stores filters). ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "returns": "Object: p5.EQ object",
    "params": {
      "_eqsize": "Number: (Optional) Constructor will accept 3 or 8, defaults to 3"
    },
    "bands": {
      "description": [
        "The p5.EQ is built with abstracted p5.Filter objects. To modify any bands, use methods of the <a href=\"/reference/#/p5.Filter\" title=\"p5.Filter reference\"> p5.Filter</a> API, especially <code>gain</code> and <code>freq</code>. Bands are stored in an array, with indices 0 - 3, or 0 - 7"
      ]
    },
    "process": {
      "description": [
        "Process an input by connecting it to the EQ"
      ],
      "params": {
        "src": "Object: Audio source"
      }
    }
  },
  "p5.Panner3D": {
    "description": [
      "Panner3D is based on the <a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>. This panner is a spatial processing node that allows audio to be positioned and oriented in 3D space. ",
      "The position is relative to an <a title=\"Web Audio Listener docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/AudioListener\"> Audio Context Listener</a>, which can be accessed by <code>p5.soundOut.audiocontext.listener</code>"
    ],
    "panner": {
      "description": [
        "<a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a> ",
        "Properties include <ul> <li><a title=\"w3 spec for Panning Model\" href=\"<a href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\"\">https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\"</a><blockquote> ",
        "panningModel</a>: \"equal power\" or \"HRTF\" </blockquote> </li> <li><a title=\"w3 spec for Distance Model\" href=\"<a href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\"\">https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\"</a><blockquote> ",
        "distanceModel</a>: \"linear\", \"inverse\", or \"exponential\" </blockquote> </li> </ul>"
      ]
    },
    "process": {
      "description": [
        "Connect an audio sorce"
      ],
      "params": {
        "src": "Object: Input source"
      }
    },
    "set": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "positionX": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionY": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionZ": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orient": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "orientX": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientY": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientZ": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "setFalloff": {
      "description": [
        "Set the rolloff factor and max distance"
      ],
      "params": {
        "maxDistance": "Number (Optional)",
        "rolloffFactor": "Number (Optional)"
      }
    },
    "maxDist": {
      "description": [
        "Maxium distance between the source and the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "maxDistance": "Number"
      }
    },
    "rollof": {
      "description": [
        "How quickly the volume is reduced as the source moves away from the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "rolloffFactor": "Number"
      }
    }
  },
  "p5.Delay": {
    "description": [
      "Delay is an echo effect. It processes an existing sound source, and outputs a delayed version of that sound. The p5.Delay can produce different effects depending on the delayTime, feedback, filter, and type. In the example below, a feedback of 0.5 (the default value) will produce a looping delay that decreases in volume by 50% each repeat. A filter will cut out the high frequencies so that the delay does not sound as piercing as the original source. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "leftDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "rightDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "process": {
      "description": [
        "Add delay to an audio signal according to a set of delay parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "delayTime": "Number: (Optional) Time (in seconds) of the delay/echo.  Some browsers limit delayTime to  1 second.",
        "feedback": "Number: (Optional) sends the delay back through itself  in a loop that decreases in volume  each time.",
        "lowPass": "Number: (Optional) Cutoff frequency. Only frequencies  below the lowPass will be part of the  delay."
      }
    },
    "delayTime": {
      "description": [
        "Set the delay (echo) time, in seconds. Usually this value will be a floating point number between 0.0 and 1.0."
      ],
      "params": {
        "delayTime": "Number: Time (in seconds) of the delay"
      }
    },
    "feedback": {
      "description": [
        "Feedback occurs when Delay sends its signal back through its input in a loop. The feedback amount determines how much signal to send each time through the loop. A feedback greater than 1.0 is not desirable because it will increase the overall output each time through the loop, creating an infinite feedback loop. The default value is 0.5"
      ],
      "returns": "Number: Feedback value",
      "params": {
        "feedback": "Number|Object: 0.0 to 1.0, or an object such as an  Oscillator that can be used to  modulate this param"
      }
    },
    "filter": {
      "description": [
        "Set a lowpass filter frequency for the delay. A lowpass filter will cut off any frequencies higher than the filter frequency."
      ],
      "params": {
        "cutoffFreq": "Number|Object: A lowpass filter will cut off any  frequencies higher than the filter frequency.",
        "res": "Number|Object: Resonance of the filter frequency  cutoff, or an object (i.e. a p5.Oscillator)  that can be used to modulate this parameter.  High numbers (i.e. 15) will produce a resonance,  low numbers (i.e. .2) will produce a slope."
      }
    },
    "setType": {
      "description": [
        "Choose a preset type of delay. 'pingPong' bounces the signal from the left to the right channel to produce a stereo effect. Any other parameter will revert to the default delay setting."
      ],
      "params": {
        "type": "String|Number: 'pingPong' (1) or 'default' (0)"
      }
    },
    "amp": {
      "description": [
        "Set the output level of the delay effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Reverb": {
    "description": [
      "Reverb adds depth to a sound through a large number of decaying echoes. It creates the perception that sound is occurring in a physical space. The p5.Reverb has paramters for Time (how long does the reverb last) and decayRate (how much the sound decays with each echo) that can be set with the .set() or .process() methods. The p5.Convolver extends p5.Reverb allowing you to recreate the sound of actual physical spaces through convolution. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "process": {
      "description": [
        "Connect a source to the reverb, and assign reverb parameters."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output.",
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "set": {
      "description": [
        "Set the reverb settings. Similar to .process(), but without assigning a new input."
      ],
      "params": {
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "amp": {
      "description": [
        "Set the output level of the reverb effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Convolver": {
    "description": [
      "p5.Convolver extends p5.Reverb. It can emulate the sound of real physical spaces through a process called <a href=\" https://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\"> convolution</a>.  ",
      "Convolution multiplies any audio input by an \"impulse response\" to simulate the dispersion of sound over time. The impulse response is generated from an audio file that you provide. One way to generate an impulse response is to pop a balloon in a reverberant space and record the echo. Convolution can also be used to experiment with sound.  ",
      "Use the method <code>createConvolution(path)</code> to instantiate a p5.Convolver with a path to your impulse response audio file."
    ],
    "params": {
      "path": "String: path to a sound file",
      "callback": "Function: (Optional) function to call when loading succeeds",
      "errorCallback": "Function: (Optional) function to call if loading fails.  This function will receive an error or  XMLHttpRequest object with information  about what went wrong."
    },
    "convolverNode": {
      "description": [
        "Internally, the p5.Convolver uses the a <a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\"> Web Audio Convolver Node</a>."
      ]
    },
    "process": {
      "description": [
        "Connect a source to the convolver."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "impulses": {
      "description": [
        "If you load multiple impulse files using the .addImpulse method, they will be stored as Objects in this Array. Toggle between them with the <code>toggleImpulse(id)</code> method."
      ]
    },
    "addImpulse": {
      "description": [
        "Load and assign a new Impulse Response to the p5.Convolver. The impulse is added to the <code>.impulses</code> array. Previous impulses can be accessed with the <code>.toggleImpulse(id)</code> method."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "resetImpulse": {
      "description": [
        "Similar to .addImpulse, except that the <code>.impulses</code> Array is reset to save memory. A new <code>.impulses</code> array is created with this impulse as the only item."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "toggleImpulse": {
      "description": [
        "If you have used <code>.addImpulse()</code> to add multiple impulses to a p5.Convolver, then you can use this method to toggle between the items in the <code>.impulses</code> Array. Accepts a parameter to identify which impulse you wish to use, identified either by its original filename (String) or by its position in the <code>.impulses </code> Array (Number).",
        "You can access the objects in the .impulses Array directly. Each Object has two attributes: an <code>.audioBuffer</code> (type: Web Audio <a href=\" http://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\"> AudioBuffer)</a> and a <code>.name</code>, a String that corresponds with the original filename."
      ],
      "params": {
        "id": "String|Number: Identify the impulse by its original filename  (String), or by its position in the  <code>.impulses</code> Array (Number)."
      }
    }
  },
  "p5.Phrase": {
    "description": [
      "A phrase is a pattern of musical events over time, i.e. a series of notes and rests.  ",
      "Phrases must be added to a p5.Part for playback, and each part can play multiple phrases at the same time. For example, one Phrase might be a kick drum, another could be a snare, and another could be the bassline.  ",
      "The first parameter is a name so that the phrase can be modified or deleted later. The callback is a a function that this phrase will call at every step—for example it might be called <code>playNote(value){}</code>. The array determines which value is passed into the callback at each step of the phrase. It can be numbers, an object with multiple numbers, or a zero (0) indicates a rest so the callback won't be called)."
    ],
    "params": {
      "name": "String: Name so that you can access the Phrase.",
      "callback": "Function: The name of a function that this phrase  will call. Typically it will play a sound,  and accept two parameters: a time at which  to play the sound (in seconds from now),  and a value from the sequence array. The  time should be passed into the play() or  start() method to ensure precision.",
      "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
    },
    "sequence": {
      "description": [
        "Array of values to pass into the callback at each step of the phrase. Depending on the callback function's requirements, these values may be numbers, strings, or an object with multiple parameters. Zero (0) indicates a rest."
      ]
    }
  },
  "p5.Part": {
    "description": [
      "A p5.Part plays back one or more p5.Phrases. Instantiate a part with steps and tatums. By default, each step represents a 1/16th note.  ",
      "See p5.Phrase for more about musical timing."
    ],
    "params": {
      "steps": "Number: (Optional) Steps in the part",
      "tatums": "Number: (Optional) Divisions of a beat, e.g. use 1/4, or 0.25 for a quater note (default is 1/16, a sixteenth note)"
    },
    "setBPM": {
      "description": [
        "Set the tempo of this part, in Beats Per Minute."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: (Optional) Seconds from now"
      }
    },
    "getBPM": {
      "description": [
        "Returns the tempo, in Beats Per Minute, of this part."
      ],
      "returns": "Number: "
    },
    "start": {
      "description": [
        "Start playback of this part. It will play through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop playback of this part. It will begin looping through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "noLoop": {
      "description": [
        "Tell the part to stop looping."
      ]
    },
    "stop": {
      "description": [
        "Stop the part and cue it to step 0. Playback will resume from the begining of the Part when it is played again."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "pause": {
      "description": [
        "Pause the part. Playback will resume from the current step."
      ],
      "params": {
        "time": "Number: seconds from now"
      }
    },
    "addPhrase": {
      "description": [
        "Add a p5.Phrase to this Part."
      ],
      "params": {
        "phrase": "p5.Phrase: reference to a p5.Phrase"
      }
    },
    "removePhrase": {
      "description": [
        "Remove a phrase from this part, based on the name it was given when it was created."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "getPhrase": {
      "description": [
        "Get a phrase from this part, based on the name it was given when it was created. Now you can modify its array."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "replaceSequence": {
      "description": [
        "Find all sequences with the specified name, and replace their patterns with the specified array."
      ],
      "params": {
        "phraseName": "String",
        "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
      }
    },
    "onStep": {
      "description": [
        "Set the function that will be called at every step. This will clear the previous function."
      ],
      "params": {
        "callback": "Function: The name of the callback  you want to fire  on every beat/tatum."
      }
    }
  },
  "p5.Score": {
    "description": [
      "A Score consists of a series of Parts. The parts will be played back in order. For example, you could have an A part, a B part, and a C part, and play them back in this order <code>new p5.Score(a, a, b, a, c)</code>"
    ],
    "params": {
      "parts": "p5.Part: (Optional) One or multiple parts, to be played in sequence."
    },
    "start": {
      "description": [
        "Start playback of the score."
      ]
    },
    "stop": {
      "description": [
        "Stop playback of the score."
      ]
    },
    "pause": {
      "description": [
        "Pause playback of the score."
      ]
    },
    "loop": {
      "description": [
        "Loop playback of the score."
      ]
    },
    "noLoop": {
      "description": [
        "Stop looping playback of the score. If it is currently playing, this will go into effect after the current round of playback completes."
      ]
    },
    "setBPM": {
      "description": [
        "Set the tempo for all parts in the score"
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.SoundLoop": {
    "description": [
      "SoundLoop"
    ],
    "params": {
      "callback": "Function: this function will be called on each iteration of theloop",
      "interval": "Number|String: (Optional) amount of time (if a number) or beats (if a string, following <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention) for each iteration of the loop. Defaults to 1 second."
    },
    "musicalTimeMode": {
      "description": [
        "musicalTimeMode uses <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention true if string, false if number"
      ]
    },
    "maxIterations": {
      "description": [
        "Set a limit to the number of loops to play. defaults to Infinity"
      ]
    },
    "start": {
      "description": [
        "Start the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a starting time"
      }
    },
    "stop": {
      "description": [
        "Stop the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a stopping time"
      }
    },
    "pause": {
      "description": [
        "Pause the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a pausing time"
      }
    },
    "syncedStart": {
      "description": [
        "Synchronize loops. Use this method to start two more more loops in synchronization or to start a loop in synchronization with a loop that is already playing This method will schedule the implicit loop in sync with the explicit master loop i.e. loopToStart.syncedStart(loopToSyncWith)"
      ],
      "params": {
        "otherLoop": "Object: a p5.SoundLoop to sync with",
        "timeFromNow": "Number: (Optional) Start the loops in sync after timeFromNow seconds"
      }
    },
    "bpm": {
      "description": [
        "Getters and Setters, setting any paramter will result in a change in the clock's frequency, that will be reflected after the next callback beats per minute (defaults to 60)"
      ]
    },
    "timeSignature": {
      "description": [
        "number of quarter notes in a measure (defaults to 4)"
      ]
    },
    "interval": {
      "description": [
        "length of the loops interval"
      ]
    },
    "iterations": {
      "description": [
        "how many times the callback has been called so far"
      ]
    }
  },
  "p5.Compressor": {
    "description": [
      "Compressor is an audio effect class that performs dynamics compression on an audio input source. This is a very commonly used technique in music and sound production. Compression creates an overall louder, richer, and fuller sound by lowering the volume of louds and raising that of softs. Compression can be used to avoid clipping (sound distortion due to peaks in volume) and is especially useful when many sounds are played at once. Compression can be used on indivudal sound sources in addition to the master output. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "compressor": {
      "description": [
        "The p5.Compressor is built with a <a href=\"https://www.w3.org/TR/webaudio/#the-dynamicscompressornode-interface\"  target=\"_blank\" title=\"W3 spec for Dynamics Compressor Node\">Web Audio Dynamics Compressor Node  </a>"
      ]
    },
    "process": {
      "description": [
        "Performs the same function as .connect, but also accepts optional parameters to set compressor's audioParams"
      ],
      "params": {
        "src": "Object: Sound source to be connected",
        "attack": "Number: (Optional) The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: (Optional) The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: (Optional) The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "set": {
      "description": [
        "Set the paramters of a compressor."
      ],
      "params": {
        "attack": "Number: The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "attack": {
      "description": [
        "Get current attack or set value w/ time ramp"
      ],
      "params": {
        "attack": "Number: (Optional) Attack is the amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "knee": {
      "description": [
        "Get current knee or set value w/ time ramp"
      ],
      "params": {
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "ratio": {
      "description": [
        "Get current ratio or set value w/ time ramp"
      ],
      "params": {
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "threshold": {
      "description": [
        "Get current threshold or set value w/ time ramp"
      ],
      "params": {
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "release": {
      "description": [
        "Get current release or set value w/ time ramp"
      ],
      "params": {
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "reduction": {
      "description": [
        "Return the current reduction value"
      ],
      "returns": "Number: Value of the amount of gain reduction that is applied to the signal"
    }
  },
  "p5.SoundRecorder": {
    "description": [
      "Record sounds for playback and/or to save as a .wav file. The p5.SoundRecorder records all sound output from your sketch, or can be assigned a specific source with setInput(). ",
      "The record() method accepts a p5.SoundFile as a parameter. When playback is stopped (either after the given amount of time, or with the stop() method), the p5.SoundRecorder will send its recording to that p5.SoundFile for playback."
    ],
    "setInput": {
      "description": [
        "Connect a specific device to the p5.SoundRecorder. If no parameter is given, p5.SoundRecorer will record all audible p5.sound from your sketch."
      ],
      "params": {
        "unit": "Object: (Optional) p5.sound object or a web audio unit  that outputs sound"
      }
    },
    "record": {
      "description": [
        "Start recording. To access the recording, provide a p5.SoundFile as the first parameter. The p5.SoundRecorder will send its recording to that p5.SoundFile for playback once recording is complete. Optional parameters include duration (in seconds) of the recording, and a callback function that will be called once the complete recording has been transfered to the p5.SoundFile."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile",
        "duration": "Number: (Optional) Time (in seconds)",
        "callback": "Function: (Optional) The name of a function that will be  called once the recording completes"
      }
    },
    "stop": {
      "description": [
        "Stop the recording. Once the recording is stopped, the results will be sent to the p5.SoundFile that was given on .record(), and if a callback function was provided on record, that function will be called."
      ]
    }
  },
  "p5.PeakDetect": {
    "description": [
      "PeakDetect works in conjunction with p5.FFT to look for onsets in some or all of the frequency spectrum.  ",
      "To use p5.PeakDetect, call <code>update</code> in the draw loop and pass in a p5.FFT object.  ",
      "You can listen for a specific part of the frequency spectrum by setting the range between <code>freq1</code> and <code>freq2</code>.",
      "<code>threshold</code> is the threshold for detecting a peak, scaled between 0 and 1. It is logarithmic, so 0.1 is half as loud as 1.0.",
      "The update method is meant to be run in the draw loop, and <b>frames</b> determines how many loops must pass before another peak can be detected. For example, if the frameRate() = 60, you could detect the beat of a 120 beat-per-minute song with this equation: <code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>   ",
      "Based on example contribtued by @b2renger, and a simple beat detection explanation by <a href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" target=\"_blank\">Felix Turner</a>. "
    ],
    "params": {
      "freq1": "Number: (Optional) lowFrequency - defaults to 20Hz",
      "freq2": "Number: (Optional) highFrequency - defaults to 20000 Hz",
      "threshold": "Number: (Optional) Threshold for detecting a beat between 0 and 1  scaled logarithmically where 0.1 is 1/2 the loudness  of 1.0. Defaults to 0.35.",
      "framesPerPeak": "Number: (Optional) Defaults to 20."
    },
    "isDetected": {
      "description": [
        "isDetected is set to true when a peak is detected."
      ]
    },
    "update": {
      "description": [
        "The update method is run in the draw loop. ",
        "Accepts an FFT object. You must call .analyze() on the FFT object prior to updating the peakDetect because it relies on a completed FFT analysis."
      ],
      "params": {
        "fftObject": "p5.FFT: A p5.FFT object"
      }
    },
    "onPeak": {
      "description": [
        "onPeak accepts two arguments: a function to call when a peak is detected. The value of the peak, between 0.0 and 1.0, is passed to the callback."
      ],
      "params": {
        "callback": "Function: Name of a function that will  be called when a peak is  detected.",
        "val": "Object: (Optional) Optional value to pass  into the function when  a peak is detected."
      }
    }
  },
  "p5.Gain": {
    "description": [
      "A gain node is usefull to set the relative volume of sound. It's typically used to build mixers."
    ],
    "setInput": {
      "description": [
        "Connect a source to the gain node."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    },
    "amp": {
      "description": [
        "Set the output level of the gain node."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    }
  },
  "p5.Distortion": {
    "description": [
      "A Distortion effect created with a Waveshaper Node, with an approach adapted from <a href=\"http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\">Kevin Ennis</a> ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
      "oversample": "String: (Optional) 'none', '2x', or '4x'."
    },
    "WaveShaperNode": {
      "description": [
        "The p5.Distortion is built with a <a href=\"http://www.w3.org/TR/webaudio/#WaveShaperNode\"> Web Audio WaveShaper Node</a>."
      ]
    },
    "process": {
      "description": [
        "Process a sound source, optionally specify amount and oversample values."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "set": {
      "description": [
        "Set the amount and oversample of the waveshaper distortion."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "getAmount": {
      "description": [
        "Return the distortion amount, typically between 0-1."
      ],
      "returns": "Number: Unbounded distortion amount.  Normal values range from 0-1."
    },
    "getOversample": {
      "description": [
        "Return the oversampling."
      ],
      "returns": "String: Oversample can either be 'none', '2x', or '4x'."
    }
  }
}
