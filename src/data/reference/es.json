{
  "h1": "Referencia",
  "reference-search": "Busca en la API",
  "reference-description1": "¿No encuentras lo que buscas? Quizás debas revisar en",
  "reference-description3": "Puedes descargar una versión de la referencia.",
  "reference-contribute2": "Por favor dinos.",
  "reference-error1": "¿Encontraste algún error?",
  "reference-error3": "Por favor, siéntete libre de editar",
  "reference-error5": "y de publicar un pull request.",
  "reference-example": "Ejemplo",
  "reference-description": "Descripción",
  "reference-extends": "Extiende",
  "reference-parameters": "Parámetros",
  "reference-syntax": "Sintaxis",
  "reference-returns": "Retorna",
  "Environment": "Ambiente",
  "Color": "Color",
  "Color Conversion": "Color Conversion",
  "Creating & Reading": "Creación y lectura",
  "Setting": "Configuración",
  "Shape": "Forma",
  "2D Primitives": "Primitivas 2D",
  "Attributes": "Atributos",
  "Curves": "Curvas",
  "Vertex": "Vértices",
  "Constants": "Constantes",
  "Structure": "Estructura",
  "DOM": "DOM",
  "Rendering": "Render",
  "Foundation": "Foundation",
  "Transform": "Transformación",
  "Data": "Datos",
  "LocalStorage": "LocalStorage",
  "Dictionary": "Diccionario",
  "Events": "Eventos",
  "Acceleration": "Aceleración",
  "Keyboard": "Teclado",
  "Mouse": "Ratón",
  "Touch": "Tacto",
  "Image": "Imagen",
  "Loading & Displaying": "Cargar & Mostrar",
  "Pixels": "Pixeles",
  "IO": "Entrada y salida",
  "Input": "Entrada",
  "Output": "Salida",
  "Table": "Tabla",
  "Math": "Matemáticas",
  "Calculation": "Cálculo",
  "Vector": "Vector",
  "Noise": "Ruido",
  "Random": "Random",
  "Trigonometry": "Trigonometría",
  "Typography": "Tipografía",
  "Array Functions": "Funciones de arreglo",
  "Conversion": "Conversión",
  "String Functions": "Funciones de String",
  "Time & Date": "Tiempo & Fecha",
  "3D Primitives": "Primitivas 3D",
  "Lights, Camera": "Luces, cámara",
  "Interaction": "Interacción",
  "Lights": "Luces",
  "3D Models": "Modelos 3D",
  "Material": "Materiales",
  "Camera": "Cámara",
  "p5": {
    "description": [
      "Este es el constructor para una instancia de p5.",
      "Una instancia de p5 contiene todas la propiedades y métodos relacionados a un boceto de p5. Recibe una clausura (closure) de un boceto y tambien puede tomar un nodo opcional como parametro para adjuntar el lienzo de p5 generado para un nodo. La clausura del boceto toma la recién creada instancia de p5 como su único argumento y podra poner opcionalmente las propiedades <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, y/o <a href=\"#/p5/draw\">draw()</a> en ella para ejecutar el boceto.",
      "Un boceto de p5 puede correr en los modos \"global\" o \"instance\": \"global\" - todas las propiedades y métodos están adjuntas a la ventana. \"instance\" - todas las propiedades y métodos estan unidos a este objeto de p5."
    ],
    "returns": "P5: una instancia de p5",
    "params": {
      "sketch": "Función: una clausura que puede poner opcionalmente las propiedades <a href=\"#/p5/preload\">preload()</a>,  <a href=\"#/p5/setup\">setup()</a>, y/o <a href=\"#/p5/draw\">draw()</a> en la instancia de p5 dada",
      "node": "HTMLElement: (Opcional) elemento para adjuntar al lienzo"
    },
    "describe": {
      "description": [
        "Crea una descripción del lienzo accesible para lectores de pantalla. El primer parametro debera ser una cadena de texto con una descripción del lienzo. El segundo parametro es opcional. Si se especifica, determina como la descripción es mostrada.",
        "<code class=\"language-javascript\">describe(text, LABEL)</code> muestra la descripción para todos los usuarios como una <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\">lápida o como una etiqueta o leyenda de exhibición</a> en un <code class=\"language-javascript\"><div class=\"p5Label\"></div></code> adyacente al lienzo. Puedes estilizarlo como desees en tu CSS.",
        "<code class=\"language-javascript\">describe(text, FALLBACK)</code> hace a la descripción accesible solo para los usuarios de lectores de pantalla, en <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> un sub DOM dentro del elemento del lienzo</a>. Si un segundo parametro no es especificado, por defecto, la descripción solo estará disponible para usuarios de lectores de pantalla."
      ],
      "params": {
        "text": "String: descripción del lienzo",
        "display": "Constante: (Opcional) ya sea LABEL o FALLBACK (Opcional)"
      }
    },
    "describeElement": {
      "description": [
        "Esta función crear una descripción accesible para los elementos (formas o grupos de formas que juntas crean un sentido) en el lienzo. El primer parametro debe ser el nombre del elemento. El segundo parametro debe ser una cadena de texto con una descripción del elemento. El tercer parametro es opcional. Si se especifica, determina como la descripción del elemento es mostrada.",
        "<code class=\"language-javascript\">describeElement(name, text, LABEL)</code> muestra la descripción del elemento a todos los usuarios como <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\"> lápida o como una etiqueta o leyenda de exhibición</a> en un <code class=\"language-javascript\"><div class=\"p5Label\"></div></code> adyacente al lienzo. Puedes estilizarlo como desees en tu CSS.",
        "<code class=\"language-javascript\">describeElement(name, text, FALLBACK)</code> hace a la descripción accesible solo para los usuarios de lectores de pantalla, en <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> un sub DOM dentro del elemento del lienzo</a>. Si un segundo parametro no es especificado, por defecto, la descripción solo estará disponible para usuarios de lectores de pantalla."
      ],
      "params": {
        "name": "String: nombre del elemento",
        "text": "String: descripción del elemento",
        "display": "Constante: (Opcional) ya sea LABEL o FALLBACK (Opcional)"
      }
    },
    "textOutput": {
      "description": [
        "<code class=\"language-javascript\">textOutput()</code> crea una salida accesible para lectores de pantalla que describe las figuras presentes en el lienzo. La descripción general del lienzo incluye el tamaño del lienzo, su color, y el numero de elementos en el lienzo (por ejemplo: 'Your output is a, 400 by 400 pixels, lavender blue canvas containing the following 4 shapes:'). Esta descripción es seguida por una lista de formas donde el color, la posición, y el área de cada figura son describidas (por ejemplo: \"orange ellipse at top left covering 1% of the canvas\"). Cada elemento puede ser seleccionado para obtener más detalles. También se provee de una tabla de elementos. En esta tabla la forma, el color, la posición, las coordenadas y el área son descritas (por ejemplo: \"orange ellipse location=top left area=2\"). ",
        "<code class=\"language-javascript\">textOutput()</code> y <code class=\"language-javascript\">texOutput(FALLBACK)</code> hacen disponible el resultado en <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> un sub DOM dentro del elementos del lienzo</a> el cual es accesible para los lectores de pantalla. <code class=\"language-javascript\">textOutput(LABEL)</code> crea un div adicional con el resultado cerca del lienzo, esto es util para los usuarios que no utilicen lectores de pantalla que podran querer mostrar el resultado afuera del sub DOM del lienzo a medida que programan. Sin embargo, utilizar LABEL creará redundancia innecesaria para los usuario de lectores de pantalla. Recomendamos utilizar LABEL solo como parte del proceso de desarrollo de un boceto y removerlo antes de publicar o compartir con los usuarios de lectores de pantalla."
      ],
      "params": {
        "display": "Constante: (Opcional) ya sea FALLBACK o LABEL (Opcional)"
      }
    },
    "gridOutput": {
      "description": [
        "<code class=\"language-javascript\">gridOutput()</code> establece el contenido del lienzo en la forma de una cuadrícula (tabla de html) basada en la posición espacial de cada figura. Una breve descripción del lienzo esta disponible antes de la tabla resultante. La descripción incluye: el color del fondo, el tamaño del lienzo, el numero de objetos, y los tipos de objeto (por ejemplo: \"lavender blue canvas is 200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). La cuadrícula describe el contenido espacialmente, cada elemento es colocado en una celda de la tabla dependiendo su posición. Dentro de cada celda un elemento, el color y el tipo de forma de ese elemento esta disponible (por ejemplo: \"orange ellipse\"). Estas descripciones pueden ser seleccionadas individualmente para obtener más detalles. Tambien esta disponible una lista de elementos donde la forma, el color, la posición, y el área son descritos (por ejemplo: \"orange ellipse location=top left area=1%\").",
        "<code class=\"language-javascript\">gridOutput()</code> y <code class=\"language-javascript\">gridOutput(FALLBACK)</code> hace el resultado disponible en <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> un sub DOM dentro del elemento del lienzo</a> el cual es accesible para los lectores de pantalla. <code class=\"language-javascript\">gridOutput(LABEL)</code> crea un div adicional con el resultado cerca del lienzo, esto es util para los usuarios que no utilizan lectores de pantalla que podran querer mostrar el resultado afuera del sub DOM del lienzo a medida que van programando. Sin embargo, utilizar LABEL creará redundancia innecesaria para usuarios de lectores de pantalla. Recomendamos utilizar LABEL solo como parte del proceso de desarrollo de un boceto y removerlo antes de publicarlo o compartirlo con usuarios de lectores de pantalla."
      ],
      "params": {
        "display": "Constante: (Opcional) ya sea FALLBACK o LABEL (Opcional)"
      }
    },
    "alpha": {
      "description": [
        "Extrae el valor de alpha de un color o de un arreglo de pixeles."
      ],
      "returns": "Numero: el valor alpha",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "blue": {
      "description": [
        "Extrae el valor de azul de un color o de un arreglo de pixeles."
      ],
      "returns": "Número: el valor azul",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "brightness": {
      "description": [
        "Extrae el valor de brillo HSB de un color o de un arreglo de pixeles."
      ],
      "returns": "Número: el valor de brillo",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "color": {
      "description": [
        "Crea colores para ser almacenados en variables del tipo color. Los parámetros son interpretados como valores RGB o HSB, dependiendo del modo actual de color según <a href=\"https://p5js.org/es/reference/#/p5/colorMode\">colorMode()</a>. El modo por defecto son valores RGB entre 0 y 255 y, por lo tanto, la función color(255, 204, 0) retorna un color amarillo brillante.",
        "Nota que si solo se provee un valor a la función color(), será interpretado como un valor en escala de grises. Añade un segundo valor, y será usado como transparencia alpha. Cuando se especifican tres valores, son interpretados como valores RGB o HSB. Al añadir un cuarto valor se aplica transparencia alpha.",
        "Si se provee solo un parámetro de tipo string, colores RGB, RGBA y HEX de CSS todos los coloers nombrados son soportados. En este caso, un valor alpha como un segundo argumento no es soportado, la forma RGBA deberia ser usada."
      ],
      "returns": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: color resultante",
      "params": {
        "gray": "Número|String: número especificando el valor entre blanco y negro.",
        "alpha": "Número: valor de alpha relativo al rango de color actual (por defecto es 0-255)",
        "v1": "Número|String: valor de rojo o tinte relativo al rango de color actual, o un string de color",
        "v2": "Número: valor de verde o saturación relativo al rango de color actual",
        "v3": "Número: valor de azul o brillo relativo al rango de color actual",
        "value": "String: un string de un color",
        "values": "Númbero[]: un arreglo que contiene los componentes rojo, azul, verde, azul y alpha del color",
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>"
      }
    },
    "green": {
      "description": [
        "Extrae el valor de verde de un color o de un arreglo de pixeles."
      ],
      "returns": "Número: el valor verde",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "hue": {
      "description": [
        "Extrae el valor del matiz de un color o de un arreglo de pixeles.",
        "El matiz (hue) existe en HSB y HSL. Esta función retorna el matiz normalizado HSB que cuando se le provee un objeto de color HSB (o cuando se le provee un arreglo de pixeles mientras el modo de color es HSB), pero por defecto retornará el matiz normalizado según HSB en otro caso. (Estos valores solo son diferentes si la configuración de valor de matiz máximo de cada sistema es diferente.)"
      ],
      "returns": "Número: el matiz",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "lerpColor": {
      "description": [
        "Mezcla dos colores para encontrar un tercer color según la combinación de ambos. El parámetro amt es la cantidad a interpolar entre los dos valores, donde 0.0 es igual al primer color, 0.1 es muy cercano al primer color, 0.5 está a medio camino entre ambos, etc. Un valor menor que 0 será tratado como 0. Del mismo modo, valores sobre 1 serán tratados como 1. Esto es distinto al comportamiento de <a href=\"https://p5js.org/es/reference/#/p5/lerp\">lerp()</a>, pero necesario porque de otra manera los números fuera de rango producirían colores no esperados y extraños.",
        "La manera en que los colores son interpolados depende del modo de color actual."
      ],
      "returns": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: color interpolado",
      "params": {
        "c1": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: interpola desde este color",
        "c2": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: interpola hacia este color",
        "amt": "Número: número entre 0 y 1"
      }
    },
    "lightness": {
      "description": [
        "Extrae el valor de luminosidad HSL de un color o de un arreglo de pixeles."
      ],
      "returns": "Número: la luminosidad",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "red": {
      "description": [
        "Extrae el valor de rojo de un color o de un arreglo de pixeles."
      ],
      "returns": "Número: el valor rojo",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "saturation": {
      "description": [
        "Extrae el valor de saturación de un color o de un arreglo de pixeles.",
        "La saturación es escalada en HSB y HSL de forma distinta. Esta función retornará la saturación HSB cuando le sea provisto un objeto de color HSB (o cuando le sea provisto un arreglo de pixeles mientras el modo de color es HSB), pero por defecto retornará saturación HSL."
      ],
      "returns": "Número: el valor de la saturación",
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>|Number[]|String: objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>, componentes de color o colores CSS"
      }
    },
    "background": {
      "description": [
        "La función background() define el color usado como fondo del lienzo de p5.js. El fondo por defecto es transparente. Esta función es típicamente usada dentro de <a href=\"https://p5js.org/es/reference/#/p5/draw\">draw()</a> para limpiar la ventana mostrada al inicio de cada cuadro, pero puede ser usada dentro de <a href=\"https://p5js.org/es/reference/#/p5/setup\">setup()</a> para definir el fondo en el primer cuadro de la animación o si el fondo solo necesita ser definido una vez.",
        "El color es tambien especificado en termino de colores RGB, HSB, o HSL dependiendo del <a href=\"https://p5js.org/es/reference/#/p5/colorMode\">colorMode</a>. (El espacio de color por defeco es RGB, con cada valor dentro del rango de 0 a 255). El rango alpha por defecto es también de 0 a 255.",
        "Si un solo argumento de tipo string es dado, cadena de colores RGB, RGBA y HEX y todos los nombres de colores son soportados. En este caso, el valor alpha como un segundo argumento no es soportado, la forma RGBA deberia ser usado.",
        "Un objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a> también puede ser proveido para asignar el color de fondo",
        "Un <a href=\"https://p5js.org/es/reference/#/p5.Image\">p5.Image</a> también pueder ser proporcionado para asignar la imagen de fondo."
      ],
      "params": {
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>cualquier valor creado con la función <a href=\"https://p5js.org/es/reference/#/p5/color\">color()</a>",
        "colorstring": "String: string de color, formatos posibles: enteros rgb() o rgba(), porcentajes rgb() o rgba(), hex de 3 dígitos, hex de 6 dígitos",
        "a": "Número: opacidad del fondo relativo al rango de color actual (por defecto es 0-255) (Opcional)",
        "gray": "Número: especifica un valor entre blanco y negro",
        "v1": "Número: valor de rojo o matiz (dependiendo del modo de color actual)",
        "v2": "Número: valor de verde o saturación (dependiendo del modo de color actual)",
        "v3": "Número: valor de azul o brillo (dependiendo del modo de color actual)",
        "values": "Number[]: un arreglo que contenga los componentes rojo, verde, azul y alpha del color",
        "image": "<a href=\"https://p5js.org/es/reference/#/p5.Image\">p5.Image</a>: imagen creada con <a href=\"https://p5js.org/es/reference/#/p5/loadImage\">loadImage()</a> o <a href=\"https://p5js.org/es/reference/#/p5/createImage\">createImage()</a>, para ser definida como fondo (debe ser del mismo tamaño que la ventana del boceto)"
      }
    },
    "clear": {
      "description": [
        "Borra los pixeles dentro de un búfer. Esta función solo funciona en lienzos. No funcionara con objetos creados por funciones de createX(), como <a href=\"https://p5js.org/es/reference/#/p5/createVideo\">createVideo()</a> o <a href=\"https://p5js.org/es/reference/#/p5/createDiv\">createDiv()</a>. A diferencia del contexto de los graficos principales, pixeles en áreas graficas adicionales creadas con <a href=\"https://p5js.org/es/reference/#/p5/createGraphics\">createGraphics()</a> pueden ser completa o parcialmente transparentes. Esta función limpia todo para hacer a todos los pixeles 100% transparantes.",
        "Nota: En el modo WebGL, esta función puede pasar valores normalizados para limpiar la pantalla a un color específico. Adicionalmente al color, tambien limpiará el búfer profundo. Si no esta usando el renderizador de WebGL estos valores de color no tendrán efecto."
      ],
      "params": {
        "r": "Número: valor normalizado de rojo.",
        "g": "Número: valor normalizado de verde.",
        "b": "Número: valor normalizado de azul.",
        "a": "Número: valor normalizado de alpha."
      }
    },
    "colorMode": {
      "description": [
        "colorMode() cambia la manera en que p5.js interpreta los datos de color. Por defecto, los parámetros de <a href=\"https://p5js.org/es/reference/#/p5/fill\">fill()</a>, <a href=\"https://p5js.org/es/reference/#/p5/stroke\">stroke()</a>, <a href=\"https://p5js.org/es/reference/#/p5/background\">background()</a> y <a href=\"https://p5js.org/es/reference/#/p5/color\">color()</a> son definidos por valores entre 0 y 255 usando el modelo de color RGB. Esto es equivalente a definir el modo de color según colorMode(RGB, 255). Definir el modo de color en colorMode(HSB) permite usar el sistema HSB en su lugar. Por defecto, este modo de color es colorMode(HSB, 360, 100, 100, 1). También se puede usar HSL.",
        "Nota: los objetos de color existentes recuerdan el modo en que fueron creados, por lo que puedes cambiar los modos como quieras, sin afectar su apariencia."
      ],
      "params": {
        "mode": "Constante: ya sea RGB, HSB o HSL, correspondiente a Rojo/Verde/Azul o Matiz/Saturación/brillo (o luminosidad)",
        "max": "Número: rango para todos los colores (Opcional)",
        "max1": "Número: rango de rojo o matiz, dependiendo del modo de color actual",
        "max2": "Número: rango de verde o saturación, dependiendo del modo de color actual.",
        "max3": "Número: rango de azul o brillo/luminosidad, dependiendo del modo de color actual.",
        "maxA": "Número: rango de transparencia alpha (Opcional)"
      }
    },
    "fill": {
      "description": [
        "Define el color usado para rellenar las figuras. Por ejemplo, si ejecutas fill(204, 102, 0), todas las figuras a continuación tendrán relleno naranja. Este color también es especificado en términos de color RGB o HSB, dependiendo del modo de color según <a href=\"https://p5js.org/es/reference/#/p5/colorMode\">colorMode()</a>. (El espacio de color por defecto es RGB, con cada valor en el rango entre 0 y 255). El rango de alpha por defecto es también de 0 a 255.",
        "Si se provee un argumento tipo string, los tipos RGB, RGBA y CSS hexadecimal y todos los nombre de los colores son soportados. En este caso, valor alpha como un segundo argumento no es soportado, la forma RGBA debería ser usada.",
        "Un objeto p5 <a href=\"#/p5.Color\">Color</a> también puede ser dado para definir el color de relleno."
      ],
      "params": {
        "v1": "Número: el valor de rojo o matiz relativo al rango de color",
        "v2": "Número: valor de verde o saturación relativo al rango de color",
        "v3": "Número: valor de azul o brillo relativo al rango de color",
        "alpha": "Número: opacidad del fondo (Opcional)",
        "value": "String: una cadena de color",
        "gray": "Number: un valor de gris",
        "values": "Número[]: un arreglo que contenga los componentes rojo, verde, azul y alpha del color",
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: el color de relleno"
      }
    },
    "noFill": {
      "description": [
        "Deshabilita el relleno de figuras geométricas. Si tanto <a href=\"https://p5js.org/es/reference/#/p5/noStroke\">noStroke()</a> como <a href=\"https://p5js.org/es/reference/#/p5/noFill\">noFill()</a> son ejecutados, nada será dibujado en pantalla."
      ]
    },
    "noStroke": {
      "description": [
        "Deshabilita el dibujo de los trazos (bordes). Si tanto <a href=\"https://p5js.org/es/reference/#/p5/noStroke\">noStroke()</a> como <a href=\"https://p5js.org/es/reference/#/p5/noFill\">noFill()</a> son ejecutados, nada será dibujado en pantalla."
      ]
    },
    "stroke": {
      "description": [
        "Define el color usado para dibujar líneas y bordes de figuras. Este color especificado en términos de color RGB o HSB, dependiendo del modo de color actual según <a href=\"https://p5js.org/es/reference/#/p5/colorMode\">colorMode()</a> (el espacio de color por defecto es RGB, con cada valor en el rango entre 0 y 255). El rango de valor de alpha por defecto es también de 0 a 255.",
        "Si se provee un argumento tipo string, los tipos RGB, RGBA y CSS hexadecimal y todos los nombres de los colores son soportados. En este acaso, valor de alpha como segundo argumento no es soportado, la forma RGBA debería ser usada.",
        "Un objeto <a href=\"https://p5js.org/es/reference/#/p5.Color\">Color</a> p5 puede ser provisto para definir el color del trazado."
      ],
      "params": {
        "v1": "Número: el valor de rojo o matiz relativo al rango de color",
        "v2": "Número: valor de verde o saturación relativo al rango de color",
        "v3": "Número: valor de azul o brillo relativo al rango de color",
        "alpha": "Número: opacidad del fondo (Opcional)",
        "value": "String: una cadena de color",
        "gray": "Number: un valor de gris",
        "values": "Número[]: un arreglo que contenga los componentes rojo, verde, azul y alpha del color",
        "color": "<a href=\"https://p5js.org/es/reference/#/p5.Color\">p5.Color</a>: el color de trazado"
      }
    },
    "erase": {
      "description": [
        "Todos los diujos que siguen de <a href=\"https://p5js.org/es/reference/#/p5/erase\">erase()</a> serán eliminados del lienzo. La áreas borradas revelarán la pagina web debajo del lienzo. Borrar puede ser canceldo con <a href=\"https://p5js.org/es/reference/#/p5/noErase\">noErase()</a>.",
        "Dibujos hechos con <a href=\"https://p5js.org/es/reference/#/p5/image\">image()</a> y <a href=\"ttps://p5js.org/es/reference/#/p5/background\"> background()</a> entre <a href=\"https://p5js.org/es/reference/#/p5/erase\">erase()</a> and <a href=\"https://p5js.org/es/reference/#/p5/noErase\">noErase()</a> no borrarán el lienzo pero funciona como es usual.",
        "Drawing done with <a href=\"#/p5/image\">image()</a> and <a href=\"#/p5/background\"> background()</a> in between <a href=\"#/p5/erase\">erase()</a> and <a href=\"#/p5/noErase\">noErase()</a> will not erase the canvas but works as usual."
      ],
      "params": {
        "strengthFill": "Number: (Optional) A number (0-255) for the strength of erasing for a shape's fill.  This will default to 255 when no argument is given, which  is full strength.",
        "strengthStroke": "Number: (Optional) A number (0-255) for the strength of erasing for a shape's stroke.  This will default to 255 when no argument is given, which  is full strength."
      }
    },
    "noErase": {
      "description": [
        "Termina borrando lo que fue empezado con <a href=\"https://p5js.org/es/reference/#/p5/erase\">erase()</a>. Las configuraciones de <a href=\"https://p5js.org/es/reference/#/p5/fill\">fill()</a>, <a href=\"https://p5js.org/es/reference/#/p5/stroke\">stroke()</a>, y <a href=\"https://p5js.org/es/reference/#/p5/blendMode\">blendMode()</a> volverán a lo que eran antes de llamar <a href=\"https://p5js.org/es/reference/#/p5/erase\">erase()</a>."
      ]
    },
    "arc": {
      "description": [
        "Dibuja un arco en la pantalla. Los arcos se forman a través del borde exterior de un elíptico (óvalo) definido por los parámetros <code>x</code>, <code>y</code>, <code>w</code>, y <code>h</code>. Usa los parámetros <code>start</code> (comenzar) y <code>stop</code> (detener) para especificar los ángulos (en radianes) a los que se va a formar el arco. Los arcos siempre se forman a favor de las manecillas del reloj, comenzando desde <code>start</code> hasta <code>stop</code>. El origen del elíptico del arco se puede cambiar utilizando la función de <a href=\"#/p5/ellipseMode\">ellipseMode()</a>.",
        "Sumando y restando <code>TWO_PI</code> (Dos Pi) a los ángulos de el arco no afecta su posición. Si los parámetros de <code>start</code> y <code>stop</code> tienen el mismo valor, se formará una elipse completa. El eje de <code>y</code> aumenta en dirección hacia abajo, por tanto, los ángulos se miden a favor de las manecillas del reloj, comenzando desde la posición positiva del eje de <code>x</code> (La posición de las 3:00 en el reloj).",
        "El parámetro opcional <code>mode</code> determina el estilo de relleno del arco. Los modos de relleno son: semicírculo (<code>OPEN</code>), un semicírculo cerrado (<code>CHORD</code>), o un segmento cerrado de un pastel (<code>PIE</code>).",
        "El parámetro opcional <code>detail</code> se utiliza para especificar el número de vértices que forman el perímetro del arco. Su valor por defecto es de 25, y solo se puede utilizar en el modo WebGL."
      ],
      "params": {
        "x": "Número: coordenada x del arco de elipse.",
        "y": "Número: coordenada y del arco de elipse.",
        "w": "Número: ancho del arco de elipse.",
        "h": "Número: altura del arco de elipse.",
        "start": "Número: ángulo inicial del arco de elipse.",
        "stop": "Número: ángulo final del arco de elipse.",
        "mode": "Constante: parámetro opcional para determinar la manera de dibujar el arco.",
        "detail": "Number: (Optional) optional parameter for WebGL mode only. This is to  specify the number of vertices that makes up the  perimeter of the arc. Default value is 25."
      }
    },
    "ellipse": {
      "description": [
        "Dibuja una elipse (óvalo)  en la pantalla. Una elipse con igual ancho y altura es un círculo. Por defecto, los primeros dos parámetros definen la ubicación, y el tercero y cuarto definen el ancho y altura de la figura. Si no especifica una altura, el valor del ancho es usado como ancho y altura. El origen puede ser cambiado con la función ellipseMode().",
        "Una elipse con lo ancho y lo alto igual es un círculo. El origen puede ser cambiado con la función <a href=\"#/p5/ellipseMode\">ellipseMode()</a>."
      ],
      "params": {
        "x": "Número: coordenada x de la elipse.",
        "y": "Número: coordenada y de la elipse.",
        "w": "Número: ancho de la elipse.",
        "h": "Número: altura de la elipse.",
        "detail": "Integro: número de sectores radiales para dibujar (para modo WebGL)"
      }
    },
    "circle": {
      "description": [
        "Dibuja un círculo en la pantalla. Un círculo es una forma sencilla cerrada. Es el conjunto de todos los puntos en un plano que están a una distancia dada de un punto dado, el centro. Esta función es un caso especial de la función ellipse(), donde lo ancho y lo alto de la elipse son lo mismo. Lo alto y lo ancho de la elipse corresponde al diámetro del círculo. De forma predeterminada, los primeros dos parámetros establecen la posición del centro del círculo, el tercer establece el diametro del círculo."
      ],
      "params": {
        "x": "Número: coordenada x del centro del círculo.",
        "y": "Número: coordenada y del centro del círculo.",
        "d": "Número: diámetro del círculo."
      }
    },
    "line": {
      "description": [
        "Dibuja una línea (un camino directo entre dos puntos) en la pantalla. La versión de line() con cuatro parámetros dibuja la línea en 2D. Para darle color a una línea, usa la función stroke(). Una línea no puede ser rellenada, por lo que la función fill() no afectará el color de una línea. Las líneas 2D son dibujadas con una ancho de un pixel por defecto, pero esto puede ser cambiado con la función strokeWeight()."
      ],
      "params": {
        "x1": "Número: coordenada x del primer punto.",
        "y1": "Número: coordenada y del primer punto.",
        "x2": "Número: coordenada x del segundo punto.",
        "y2": "Número: coordenada y del segundo punto.",
        "z1": "Number: the z-coordinate of the first point",
        "z2": "Number: the z-coordinate of the second point"
      }
    },
    "point": {
      "description": [
        "Dibuja un punto, una coordenada en el espacio de un pixel de dimensión. El primer parámetro es la coordenada horizontal del punto, el segundo valor es la coordenada vertical del punto. El color del punto es determinado por el trazado actual con la función stroke()."
      ],
      "params": {
        "x": "Número: coordenada x.",
        "y": "Número: coordenada y .",
        "z": "Number: (Optional) the z-coordinate (for WebGL mode)",
        "coordinate_vector": "p5.Vector: the coordinate vector"
      }
    },
    "quad": {
      "description": [
        "Dibuja un cuadrilátero, un polígono de cuatro lados. Es similar a un rectángulo, pero los ángulos entre sus bordes no están limitados a noventa grados. El primer par de parámetros (x1, y1) corresponde a las coordenadas del primer vértice y los pares siguientes deben seguir en el mismo orden, según las manecillas del reloj o en contra, alrededor de la figura a definir."
      ],
      "params": {
        "x1": "Número: coordenada x del primer punto.",
        "y1": "Número: coordenada y del primer punto.",
        "x2": "Número: coordenada x del segundo punto.",
        "y2": "Número: coordenada y del segundo punto.",
        "x3": "Número: coordenada x del tercer punto.",
        "y3": "Número: coordenada y del tercer punto.",
        "x4": "Número: coordenada x del cuarto punto.",
        "y4": "Número: coordenada y del cuarto punto.",
        "detailX": "Integer: (Optional) number of segments in the x-direction",
        "detailY": "Integer: (Optional) number of segments in the y-direction",
        "z1": "Number: the z-coordinate of the first point",
        "z2": "Number: the z-coordinate of the second point",
        "z3": "Number: the z-coordinate of the third point",
        "z4": "Number: the z-coordinate of the fourth point"
      }
    },
    "rect": {
      "description": [
        "Dibuja un rectángulo en la pantalla. Un rectángulo es una figura de cuatro lados con cada ángulo interior de noventa grados. Por defecto, los dos primeros parámetros definen la ubicación de la esquina superior izquierda, el tercero el ancho y el cuarto la altura. La manera en que estos parámetros son interpretados, sin embargo, puede ser cambiado con la función rectMode(). Los parámetros quinto, sexto, séptimo y octavo, si son especificados, determinan el radio de la esquina superior derecha, superior izquierda, inferior derecha e inferior izquierda, respectivamente. Si se omite un parámetro de radio de esquina, se usa el radio especificado por el valor anterior en la lista.",
        "The fifth, sixth, seventh and eighth parameters, if specified, determine corner radius for the top-left, top-right, lower-right and lower-left corners, respectively. An omitted corner radius parameter is set to the value of the previously specified radius value in the parameter list."
      ],
      "params": {
        "x": "Número: coordenada x del rectángulo.",
        "y": "Número: coordenada y del rectángulo.",
        "w": "Número: ancho del rectángulo.",
        "h": "Número: altura del rectángulo.",
        "tl": "Número: radio opcional de la esquina superior izquierda.",
        "tr": "Número: radio opcional de la esquina superior derecha.",
        "br": "Número: radio opcional de la esquina inferior derecha.",
        "bl": "Número: radio opcional de la esquina inferior izquierda.",
        "detailX": "Número:",
        "detailY": "Número:"
      }
    },
    "square": {
      "description": [
        "Dibuja un cuadrado en la pantalla. Un cuadrado es una forma de cuatro lados con cada ángulo a noventa grados y con los lados de un mismo tamaño. Esta función es un caso especial de la función rect(), donde el ancho y el alto son iguales y el parámetro se llama \"s\" para el tamaño del lado. De forma predeterminada, los dos primeros parámetros establecen la ubicación de la esquina superior izquierda, el tercero establece el tamaño de los lados del cuadrado. La forma en que se interpretan estos parámetros se puede cambiar con la función <a href=\"#/p5/rectMode\">rectMode()</a>.",
        "Los parámetros cuarto, quinto, sexto y séptimo, si se especifican, determinan el radio de esquina para las esquinas superior izquierda, superior derecha, inferior derecha e inferior izquierda, respectivamente. Un parámetro de radio de esquina omitido se establece con el valor de radio previamente especificado en la lista de parámetros."
      ],
      "params": {
        "x": "Number: x-coordinate of the square.",
        "y": "Number: y-coordinate of the square.",
        "s": "Number: side size of the square.",
        "tl": "Number: (Optional) optional radius of top-left corner.",
        "tr": "Number: (Optional) optional radius of top-right corner.",
        "br": "Number: (Optional) optional radius of bottom-right corner.",
        "bl": "Number: (Optional) optional radius of bottom-left corner."
      }
    },
    "triangle": {
      "description": [
        "Un triángulo es un plano creado por la conexión de tres puntos. Los primeros dos argumentos especifican el primer punto, los parámetros centrales especifican el segundo punto, y los dos últimos parámetros especifican el tercer punto."
      ],
      "params": {
        "x1": "Número: coordenada x del primer punto.",
        "y1": "Número: coordenada y del primer punto.",
        "x2": "Número: coordenada x del segundo punto.",
        "y2": "Número: coordenada y del segundo punto.",
        "x3": "Número: coordenada x del tercer punto.",
        "y3": "Número: coordenada y del tercer punto."
      }
    },
    "ellipseMode": {
      "description": [
        "Modifica la ubicación de donde las elipses son dibujadas, cambiando la manera en que los parámetros dados a ellipse() son interpretados. El modo por defecto es ellipseMode(CENTER), que interpreta los dos primeros parámetros de ellipse() como el centro de la figura, mientras que los parámetros tercero y cuarto son el ancho y la altura. ellipseMode(RADIUS) también usa los dos primeros parámetros de ellipse() como el punto central de la figura, pero usa los parámetros tercero y cuarto para especificar la mitad del ancho y la altura de la figura. ellipseMode(CORNER) interpreta los dos primeros parámetros de ellipse() como la esquina superior izquierda de la figura, mientras que los parámetros tercero y cuarto son el ancho y la altura. ellipseMode(CORNERS) interpreta los dos primeros parámetros de ellipse() como la ubicación de una esquina del rectángulo contenedor de la elipse, y los parámetros tercero y cuarto como la ubicación de la esquina opuesta. El parámetro debe ser escrito en MAYÚSCULAS porque Javascript es una lenguaje de programación que distingue entre mayúsculas y minúsculas.",
        "The default mode is CENTER, in which the first two parameters are interpreted as the shape's center point's x and y coordinates respectively, while the third and fourth parameters are its width and height.",
        "ellipseMode(RADIUS) also uses the first two parameters as the shape's center point's x and y coordinates, but uses the third and fourth parameters to specify half of the shapes's width and height.",
        "ellipseMode(CORNER) interprets the first two parameters as the upper-left corner of the shape, while the third and fourth parameters are its width and height.",
        "ellipseMode(CORNERS) interprets the first two parameters as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.",
        "The parameter to this method must be written in ALL CAPS because they are predefined as constants in ALL CAPS and Javascript is a case-sensitive language."
      ],
      "params": {
        "mode": "Constante: puede ser CENTER, RADIUS, CORNER, o CORNERS."
      }
    },
    "noSmooth": {
      "description": [
        "Dibuja las figuras geométricas con bordes no suaves (aliasing). Notar que smooth() está activo por defecto, así que es necesario ejectuar noSmooth() para deshabilitar el suavizado de las figuras geométricas, imágenes y tipografías."
      ]
    },
    "rectMode": {
      "description": [
        "Modifica la ubicación en que los rectángulos son dibujados, cambiando la manera en que los parámetros dados a rect() son interpretados. El modo por defecto es rectMode(CORNER), que interpreta los primeros dos parámetros de rect() como la esquina superior izquierda de la figura, mientras que los parámetros tercero y cuarto son su ancho y altura. rectMode(CORNERS) interpreta los dos primeros parámetros de rect() como la ubicación de una esquina, y los parámetros tercero y cuarto como la ubicación de la esquina opuesta. rectMode(CENTER) interpreta los dos primeros parámetros de rect() como el punto central de la figura, mientas que los parámetros tercero y cuarto son su ancho y altura. rectMode(RADIUS) también usa los dos primeros parámetros de rect()= como el punto central de la figura, pero usa los parámetros tercero y cuarto para especificar la mitad del ancho y la altura de la figura. Los parámetros deben ser escritos en MAYÚSCULAS porque Javascript es un lenguaje que distingue entre mayúsculas y minúsculas.",
        "The default mode is CORNER, which interprets the first two parameters as the upper-left corner of the shape, while the third and fourth parameters are its width and height.",
        "rectMode(CORNERS) interprets the first two parameters as the location of one of the corners, and the third and fourth parameters as the location of the diagonally opposite corner. Note, the rectangle is drawn between the coordinates, so it is not neccesary that the first corner be the upper left corner.",
        "rectMode(CENTER) interprets the first two parameters as the shape's center point, while the third and fourth parameters are its width and height.",
        "rectMode(RADIUS) also uses the first two parameters as the shape's center point, but uses the third and fourth parameters to specify half of the shape's width and height respectively.",
        "The parameter to this method must be written in ALL CAPS because they are predefined as constants in ALL CAPS and Javascript is a case-sensitive language."
      ],
      "params": {
        "mode": "Constante: puede ser CORNER, CORNERS, CENTER, o RADIUS."
      }
    },
    "smooth": {
      "description": [
        "Dibuja todas las figuras geométricas con bordes suaves (sin aliasing). smooth() también mejorará la calidad de las imágenes cuyo tamaño ha sido modificado. Notar que smooth() está activo por defecto; noSmooth() puede ser usado para deshabilitar el suavizado de las figuras geométricas, imágenes y tipografía."
      ]
    },
    "strokeCap": {
      "description": [
        "Define el estilo de rendering de los extremos de las líneas. Estos extremos pueden ser cuadrados, extendidos o redondeados, cada uno de estos especifados con los parámetros correspondientes: SQUARE, PROJECT, y ROUND. El extremo por defecto es redonedeado (ROUND).",
        "The parameter to this method must be written in ALL CAPS because they are predefined as constants in ALL CAPS and Javascript is a case-sensitive language."
      ],
      "params": {
        "cap": "Constante: puede ser SQUARE, PROJECT, o ROUND."
      }
    },
    "strokeJoin": {
      "description": [
        "Define el estilo de las uniones que conectan segmentos de líneas. Estas uniones pueden ser tipo inglete, biseladas o redondeadas, y especificadas con los parámetros correspondientes: MITER, BEVEL, y ROUND. La unión por defecto es MITER.",
        "The parameter to this method must be written in ALL CAPS because they are predefined as constants in ALL CAPS and Javascript is a case-sensitive language."
      ],
      "params": {
        "join": "Constante: puede ser MITER, BEVEL, o ROUND."
      }
    },
    "strokeWeight": {
      "description": [
        "Define el ancho del trazo usado para dibujar líneas, puntos y los bordes de las figuras geométricas. Todos los anchos son medidos en pixeles."
      ],
      "params": {
        "weight": "Número: el peso (en pixeles) del trazado"
      }
    },
    "bezier": {
      "description": [
        "Dibuja una curva Bezier cúbica en la pantalla. Estas curvas están definidas por una serie de puntos ancla y de control. Los primeros dos parámetros especifican el primer punto ancla y los dos últimos especifican el otro punto ancla, que se convierten en los puntos primero y último de la curva. Los parámetros en el medio especifican los dos puntos de control que definen la forma de la curva. De forma aproximada, los puntos de control atraen la curva hacia ellos. Las curvas Bezier fueron desarrolladas por el ingeniero automotriz Pierre Bezier, y son comúnmente usadas en gráficas computacionales para definir curvas de pendiente suave. Ver también curve().",
        "Bezier curves were developed by French automotive engineer Pierre Bezier, and are commonly used in computer graphics to define gently sloping curves. See also <a href=\"#/p5/curve\">curve()</a>."
      ],
      "params": {
        "x1": "Número: coordenada x del primer punto ancla",
        "y1": "Número: coordenada y del primer punto ancla",
        "x2": "Número: coordenada x del primer punto de control",
        "y2": "Número: coordenada y del primer punto de control",
        "x3": "Número: coordenada x del segundo punto de control",
        "y3": "Número: coordenada y del segundo punto de control",
        "x4": "Número: coordenada x del segundo punto ancla",
        "y4": "Número: coordenada y del segundo punto ancla",
        "z1": "Número: coordenada z del primer punto ancla",
        "z2": "Número: coordenada z del primer punto de control",
        "z3": "Número: coordenada z del segundo punto de control",
        "z4": "Número: coordenada z del segundo punto ancla"
      }
    },
    "bezierDetail": {
      "description": [
        "Ajusta la resolución a la que se muestran las curvas de Bezier. Su valor por defecto es 20.",
        "Nota: esta función sólo tiene efecto cuando se usa el renderizador WEBGL debido a que el renderizador por defecto no utiliza esta información."
      ],
      "params": {
        "detail": "Número: resolución de las curvas"
      }
    },
    "bezierPoint": {
      "description": [
        "Evalua la curva Bezier en la posición t para los puntos a, b, c, d. Los parámetros a y d son los puntos primero y último de la curva, mientras que b y c son los puntos de control. El parámetro final t varía entre 0 y 1. Esto puede ser realizado una vez con las coordenadas x y una segunda vez con las coordenadas y para obtener la ubicación de la curva Bezier en t."
      ],
      "returns": "el valor de la curva Bezier en la posición t",
      "params": {
        "a": "Número: coordenada del primer punto de la curva",
        "b": "Número: coordenada del primer punto de control de la curva",
        "c": "Número: coordenada del segundo punto de control de la curva",
        "d": "Número: coordenada del segundo punto de la curva",
        "t": "Número: valor entre 0 y 1"
      }
    },
    "bezierTangent": {
      "description": [
        "Evalua la tangente de la curva Bezier en la posición t para los puntos a, b, c, d. Los parámetros a y d son los puntos primero y último de la curva, mientras que b y c son los puntos de control. El parámetro final t varía entre 0  1."
      ],
      "returns": "la tangente en la posición t",
      "params": {
        "a": "Número: coordenada del primer punto de la curva",
        "b": "Número: coordenada del primer punto de control de la curva",
        "c": "Número: coordenada del segundo punto de control de la curva",
        "d": "Número: coordenada del segundo punto de la curva",
        "t": "Número: valor entre 0 y 1"
      }
    },
    "curve": {
      "description": [
        "Dibuja una línea curva en la pantalla entre dos puntos, dados como los cuatro parámetros centrales. Los dos primeros puntos son un punto de control, como si la curva viniera desde este punto, aunque no sea dibujado. Los dos últimos parámetros de forma similar describen el otro punto de control. Se pueden crear curvas más largas, por medio del posicionamiento de varias funciones curve() juntas o usando curveVertex(). Una función adicional llamada curveTightness() provee control de la calidad visual de la curva. La función curve() es una implementación de la Catmull-Rom spline."
      ],
      "params": {
        "x1": "Número: coordenada x del punto de control inicial",
        "y1": "Número: coordenada y del punto de control inicial",
        "x2": "Número: coordenada x del primer punto",
        "y2": "Número: coordenada y del primer punto",
        "x3": "Número: coordenada x del segundo punto",
        "y3": "Número: coordenada y del segundo punto",
        "x4": "Número: coordenada x del punto de control final",
        "y4": "Número: coordenada y del punto de control final",
        "z1": "Número: coordenada z del punto de control inicial",
        "z2": "Número: coordenada z del primer punto",
        "z3": "Número: coordenada z del segundo punto",
        "z4": "Número: coordenada z del punto de control final"
      }
    },
    "curveDetail": {
      "description": [
        "Sets the resolution at which curves display. The default value is 20 while the minimum value is 3.",
        "This function is only useful when using the WEBGL renderer as the default canvas renderer does not use this information."
      ],
      "params": {
        "resolution": "Number: resolution of the curves"
      }
    },
    "curveTightness": {
      "description": [
        "Modifica la calidad de las formas creadas con curve() y curveVertex(). El parámetro tightness (tirantez) determina cómo la curva calza con los vértices. El valor 0.0 es el valor por defecto (este valor define las curvas Spline Catmull-Rom) y el valor 1.0 conecta todos los puntos con líneas rectas. Valores en el rango entre -5.0 y 5.0 deformarán las curvas pero las dejarán reconocibles, y a medida que los valores crecen en magnitud, se continuarán deformando."
      ],
      "params": {
        "amount": "Número: deformación de los vértices originales"
      }
    },
    "curvePoint": {
      "description": [
        "Evalua la curva en la posición t para los puntos a, b, c, d. El parámetro t varía entre 0 y 1, los puntos a y d son puntos en la cruva, y b y c son los puntos de control. Esto puede ser hecho una vez con las coordenadas x y una segunda vez con las coordenadas y para obtener la ubicación de la curva en t."
      ],
      "returns": "el objeto p5",
      "params": {
        "a": "Número: coordenada del primer punto de la curva",
        "b": "Número: coordenada del primer punto de control de la curva",
        "c": "Número: coordenada del segundo punto de control de la curva",
        "d": "Número: coordenada del segundo punto de la curva",
        "t": "Número: valor entre 0 y 1"
      }
    },
    "curveTangent": {
      "description": [
        "Evalua la tangente de la curva en la posición t para los puntos a, b, c, d. El parámetro t varía entre 0 y 1, a y d son los puntos de la curva, b y c son los puntos de control."
      ],
      "returns": "la tangente en la posición t",
      "params": {
        "a": "Número: coordenada del primer punto de la curva",
        "b": "Número: coordenada del primer punto de control de la curva",
        "c": "Número: coordenada del segundo punto de control de la curva",
        "d": "Número: coordenada del segundo punto de la curva",
        "t": "Número: valor entre 0 y 1"
      }
    },
    "beginContour": {
      "description": [
        "Usa las funciones beginContour() y endContour() para crear figuras negativas dentro de figuras como el centro de la letra 'O'. beginContour() empieza la grabación de los vértices para la figura y endContour() finaliza la grabación. Los vértices que definen una figura negativa deben ser definidos en la dirección opuesta a la figura exterior. Primero dibuja los vértices de la figura exterior en el orden de las manecillas del reloj, y luego para figuras internas, dibuja vértices en el sentido contrario a las manecillas del reloj. Estas funciones solo pueden ser usadas dentro de un par beginShape()/endShape() y transformaciones como translate(), rotate(), y scale() no funcionan dentro de un par beginContour()/endContour(). Tampoco es posible usar otras figuras, como elupse() o rect() dentro.",
        "These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within."
      ]
    },
    "beginShape": {
      "description": [
        "El uso de las funciones beginShape() y endShape() permiten la creación de figuras más complejas. beginShape() empieza la grabación de vértices para una figura, mientras que endShape() termina la grabación. El valor del parámetro kind (tipo) define qué tipo de figuras serán creadas a partir de los vértices. Si no se especifica un modo, la figura puede ser cualquier polígono irregular. Los parámetros disponibles para beginShape() son POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, y QUAD_STRIP. Después de llamar a la función beginShape(), debe ser seguida por una serie de comandos vertex(). Para detener el dibujo de la figura, ejecuta endShape(). Cada figura será dibujada con el color de trazo y el color de relleno actual. Transformaciones como translate(), rotate(), y scale() no funcionan dentro de beginShape(). Tampoco es posible usar otras figuras como ellipse() o rect() dentro de beginShape().",
        "The parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are:",
        "POINTS Draw a series of points",
        "LINES Draw a series of unconnected line segments (individual lines)",
        "TRIANGLES Draw a series of separate triangles",
        "TRIANGLE_FAN Draw a series of connected triangles sharing the first vertex in a fan-like fashion",
        "TRIANGLE_STRIP Draw a series of connected triangles in strip fashion",
        "QUADS Draw a series of seperate quad",
        "QUAD_STRIP Draw quad strip using adjacent edges to form the next quad",
        "TESS (WebGl only) Handle irregular polygon for filling curve by explicit tessellation",
        "After calling the <a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop drawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the current stroke color and filled with the fill color.",
        "Transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work within <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "kind": "Constante: puede ser POINTS, LINES, TRIANGLES, TRIANGLE_FAN TRIANGLE_STRIP, QUADS, o QUAD_STRIP"
      }
    },
    "bezierVertex": {
      "description": [
        "Especifica las coordenadas de un vértice para una curva Bezier. Cada llamada a la función bezierVertex() define la posición de dos puntos de control y un punto ancla de una curva Bezier, añadiendo un nuevo segmento a la línea o figura. La primera vez que bezierVertex() es usada dentro de una llamada a beginShape(), debe ser antecedida por una llamada a la función vertex() para definir el primer punto ancla. Esta función debe ser usada entre beginShape() y endShape() y solo cuando no se ha especificado el parámetro MODE (modo) a beginShape().",
        "The first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there is no MODE or POINTS parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "x2": "Número: coordenada x del primer punto de control la curva",
        "y2": "Número: coordenada y del primer punto de control la curva",
        "x3": "Número: coordenada x del segundo punto de control la curva",
        "y3": "Número: coordenada y del segundo punto de control la curva",
        "x4": "Número: coordenada x del primer punto ancla",
        "y4": "Número: coordenada y del primer punto ancla",
        "z2": "Number: z-coordinate for the first control point (for WebGL mode)",
        "z3": "Number: z-coordinate for the second control point (for WebGL mode)",
        "z4": "Number: z-coordinate for the anchor point (for WebGL mode)"
      }
    },
    "curveVertex": {
      "description": [
        "Especifica las coordenadas de un vértice para una curva. Esta función solo puede ser usada entre beginShape() y endShape() y cuando no se ha especificado el parámetro MODE en la función beginShape(). Los puntos primero y último en una serie de líneas curveVertex() serán usados para guiar el inicio y final de una curva. Un mínimo de cuatro puntos es requerido para dibujar una pequeña curva entre los puntos segundo y tercero, Añadir un quinto punto con curveVertex() dibujará la curva entre los puntos segundo, tercero y cuarto. La función curveVertex() es una implementación de las splines de Catmull-Rom.",
        "The first and last points in a series of curveVertex() lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with curveVertex() will draw the curve between the second, third, and fourth points. The curveVertex() function is an implementation of Catmull-Rom splines."
      ],
      "params": {
        "x": "Número: coordenada x del vértice",
        "y": "Número: coordenada y del vértice",
        "z": "Number: (Optional) z-coordinate of the vertex (for WebGL mode)"
      }
    },
    "endContour": {
      "description": [
        "Usa las funciones beginContour() y endContour() para crear figuras negativas dentro de figuras como el centro de la letra 'O'. beginContour() empieza la grabación de los vértices para la figura y endContour() finaliza la grabación. Los vértices que definen una figura negativa deben ser definidos en la dirección opuesta a la figura exterior. Primero dibuja los vértices de la figura exterior en el orden de las manecillas del reloj, y luego para figuras internas, dibuja vértices en el sentido contrario a las manecillas del reloj. Estas funciones solo pueden ser usadas dentro de un par beginShape()/endShape() y transformaciones como translate(), rotate(), y scale() no funcionan dentro de un par beginContour()/endContour(). Tampoco es posible usar otras figuras, como elupse() o rect() dentro.",
        "These functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work within a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within."
      ]
    },
    "endShape": {
      "description": [
        "La función endShape() es compañera de la función beginShape() y solo puede ser ejecutada tras la ejecución de beginShape(). Cuando endshape() es ejecutada, todos los datos de imagen definidos desde la llamada anterior a beginShape() son escritos en el buffer de imagen. La constante CLOSE se usa como valor para el parámetro MODE para cerrar la figura (para conectar el comienzo con el final)."
      ],
      "params": {
        "mode": "Constante: usa CLOSE para cerrar la figura."
      }
    },
    "quadraticVertex": {
      "description": [
        "Especifica las coordenadas de vértices par curvas Bezier cuadráticas. Cada llamada a quadraticVertex() define la posición de uno de los puntos de control y ancla de una curva Bezier, añadiendo un nuevo segmento a la línea o figura. La primera vez que quadraticVertex() es usada dentro de una llamada a beginShape(), debe ser precedida por una llamada a la función vertex() para definir el primer punto ancla. Esta función debe ser usada entre un par beginShape() y endShape() y solo cuando no se ha especificado el parámetro MODE de beginShape().",
        "This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there is no MODE or POINTS parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "cx": "Número: coordenada x del punto de control",
        "cy": "Número: coordenada y del punto de control",
        "x3": "Número: coordenada x del punto ancla",
        "y3": "Número: coordenada y del punto ancla",
        "cz": "Number: z-coordinate for the control point (for WebGL mode)",
        "z3": "Number: z-coordinate for the anchor point (for WebGL mode)"
      }
    },
    "vertex": {
      "description": [
        "Todas las figuras son construidas mediante la conexión de una serie de vértices. vertex() es usado para especificar las coordenadas de los vértices para puntos, líneas, triángulos, cuadriláteros y polígonos. Es usada exclusivamente dentro de un par de funciones beginShape() y endShape()."
      ],
      "params": {
        "x": "Número: coordenada x del vértice",
        "y": "Número: coordenada y del vértice",
        "z": "Number: z-coordinate of the vertex",
        "u": "Number: (Optional) the vertex's texture u-coordinate",
        "v": "Number: (Optional) the vertex's texture v-coordinate"
      }
    },
    "normal": {
      "description": [
        "Sets the 3d vertex normal to use for subsequent vertices drawn with <a href=\"#/p5/vertex\">vertex()</a>. A normal is a vector that is generally nearly perpendicular to a shape's surface which controls how much light will be reflected from that part of the surface."
      ],
      "params": {
        "vector": "Vector: A p5.Vector representing the vertex normal.",
        "x": "Number: The x component of the vertex normal.",
        "y": "Number: The y component of the vertex normal.",
        "z": "Number: The z component of the vertex normal."
      }
    },
    "VERSION": {
      "description": [
        "Version of this p5.js."
      ]
    },
    "P2D": {
      "description": [
        "The default, two-dimensional renderer."
      ]
    },
    "WEBGL": {
      "description": [
        "One of the two render modes in p5.js: P2D (default renderer) and WEBGL Enables 3D render by introducing the third dimension: Z"
      ]
    },
    "ARROW": {},
    "CROSS": {},
    "HAND": {},
    "MOVE": {},
    "TEXT": {},
    "WAIT": {},
    "HALF_PI": {
      "description": [
        "HALF_PI es una constante matemática de valor 1.57079632679489661923. Es la mitad de la razón entre la circunferencia de un círculo y su diámetro. Es útil en combinación con las funciones trigonométricas sin() y cos()."
      ]
    },
    "PI": {
      "description": [
        "PI es una constante matemática de valor 3.14159265358979323846. Es la razón entre la circunferencia de un círculo y su diámetro. Es útil en combinación con las funciones trigonométricas sin() y cos()."
      ]
    },
    "QUARTER_PI": {
      "description": [
        "QUARTER_PI es una constante matemática de valor 0.7853982. Es un cuarto de la razón entre la circunferencia de un círculo y su diámetro. Es útil en combinación con las funciones trigonométricas sin() y cos()."
      ]
    },
    "TAU": {
      "description": [
        "TAU es un alias de TWO_PI, una constante matemática de valor 6.28318530717958647693. Es el doble de la razón entre la circunferencia de un círculo y su diámetro. Es útil en combinación con las funciones trigonométricas sin() y cos()."
      ]
    },
    "TWO_PI": {
      "description": [
        "TWO_PI es una constante matemática de valor 6.28318530717958647693. Es el doble de la razón entre la circunferencia de un círculo y su diámetro. Es útil en combinación con las funciones trigonométricas sin() y cos()."
      ]
    },
    "DEGREES": {
      "description": [
        "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which p5.js interprets and calculates angles (either DEGREES or RADIANS)."
      ]
    },
    "RADIANS": {
      "description": [
        "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which p5.js interprets and calculates angles (either RADIANS or DEGREES)."
      ]
    },
    "CORNER": {},
    "CORNERS": {},
    "RADIUS": {},
    "RIGHT": {},
    "LEFT": {},
    "CENTER": {},
    "TOP": {},
    "BOTTOM": {},
    "BASELINE": {},
    "POINTS": {},
    "LINES": {},
    "LINE_STRIP": {},
    "LINE_LOOP": {},
    "TRIANGLES": {},
    "TRIANGLE_FAN": {},
    "TRIANGLE_STRIP": {},
    "QUADS": {},
    "QUAD_STRIP": {},
    "TESS": {},
    "CLOSE": {},
    "OPEN": {},
    "CHORD": {},
    "PIE": {},
    "PROJECT": {},
    "SQUARE": {},
    "ROUND": {},
    "BEVEL": {},
    "MITER": {},
    "RGB": {},
    "HSB": {
      "description": [
        "HSB (hue, saturation, brightness) is a type of color model. You can learn more about it at <a href=\"https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html\">HSB</a>."
      ]
    },
    "HSL": {},
    "AUTO": {
      "description": [
        "AUTO allows us to automatically set the width or height of an element (but not both), based on the current height and width of the element. Only one parameter can be passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time."
      ]
    },
    "ALT": {},
    "BACKSPACE": {},
    "CONTROL": {},
    "DELETE": {},
    "DOWN_ARROW": {},
    "ENTER": {},
    "ESCAPE": {},
    "LEFT_ARROW": {},
    "OPTION": {},
    "RETURN": {},
    "RIGHT_ARROW": {},
    "SHIFT": {},
    "TAB": {},
    "UP_ARROW": {},
    "BLEND": {},
    "REMOVE": {},
    "ADD": {},
    "DARKEST": {},
    "LIGHTEST": {},
    "DIFFERENCE": {},
    "SUBTRACT": {},
    "EXCLUSION": {},
    "MULTIPLY": {},
    "SCREEN": {},
    "REPLACE": {},
    "OVERLAY": {},
    "HARD_LIGHT": {},
    "SOFT_LIGHT": {},
    "DODGE": {},
    "BURN": {},
    "THRESHOLD": {},
    "GRAY": {},
    "OPAQUE": {},
    "INVERT": {},
    "POSTERIZE": {},
    "DILATE": {},
    "ERODE": {},
    "BLUR": {},
    "NORMAL": {},
    "ITALIC": {},
    "BOLD": {},
    "BOLDITALIC": {},
    "CHAR": {},
    "WORD": {},
    "LINEAR": {},
    "QUADRATIC": {},
    "BEZIER": {},
    "CURVE": {},
    "STROKE": {},
    "FILL": {},
    "TEXTURE": {},
    "IMMEDIATE": {},
    "IMAGE": {},
    "NEAREST": {},
    "REPEAT": {},
    "CLAMP": {},
    "MIRROR": {},
    "LANDSCAPE": {},
    "PORTRAIT": {},
    "GRID": {},
    "AXES": {},
    "LABEL": {},
    "FALLBACK": {},
    "print": {
      "description": [
        "La función print() escribe en la consola del navegador. Esta función es a menudo de ayuda para observar los datos que un programa está produciendo. Esta función crea una nueva línea de texto por cada ejecución de la función. Elementos individuales pueden ser separados por comillas (\"\") y unidos con el operador de adición (+). Aunque print() es similar a console.log(), no llama a console.log() directamente, para simular una manera más simple de entender el comportamiento del programa. Por esto mismo, es más lento. Para resultados más rápidos, usar directamente console.log().",
        "Nota que llamar a print() sin ningún argumento invoca la función window.print() la cual abre el dialogo de impresión del navegador. Para imprimir una línea vacia en la consola puedes escribir print('\\n')"
      ],
      "params": {
        "contents": "Cualquiera: cualquier combinación de número, string, objeto, booleano o arreglo a imprimir"
      }
    },
    "frameCount": {
      "description": [
        "La variable de sistema <a href=\"#/p5/frameCount\">frameCount</a> contiene el número de cuadros (frames) que se han mostrado desde que el programa empezó a ejecutarse. Dentro de <a href=\"#/p5/setup\">setup()</a> el valor es 0, después de la primera iteración de <a href=\"#/p5/draw\">draw()</a> es 1, etc."
      ]
    },
    "deltaTime": {
      "description": [
        "La variable del sistema <a href=\"#/p5/deltaTime\">deltaTime</a> contiene la diferencia de tiempo entre cuando empezo el cuadro (frame) anterior y cuando empezo el cuadro actual en milisegundos.",
        "Esta variable es util para crear animaciones sensibles al tiempo o cálculos físicos que deberian mantenerse constantes independientemente de los cuadros por segundo."
      ]
    },
    "focused": {
      "description": [
        "Confirma si la ventana de un programa de p5.js está en foco, lo que significa que el boceto aceptará entradas desde el ratón o teclado. Esta variable es verdadera (true) si la ventana está en foco y falsa (false) si no."
      ]
    },
    "cursor": {
      "description": [
        "Define el cursor como un símbolo predeterminado o una imagen, o hace el cursor visible si es que estaba escondido. Si estás tratando de asignar una imagen al cursor, el tamaño recomendado es 16x16 o 32x32 pixeles. No es posible cargar una imagen al cursor si estás exportando tu programa a la Web, y no todos los modos funcionan con todos los navegadores. Los valores de los parámetros x e y deben ser menores a la dimensión de la imagen."
      ],
      "params": {
        "type": "String|Constante: puede ser las propiedades ARROW, CROSS, HAND, MOVE, TEXT, y WAIT. Propiedades nativas de CSS: 'grab', 'progress', 'cell', etc. Externos: rutas para imagenes del cursos (Se permiten las extensiones de archivo: .cur, .gif, .jpg, .jpeg, .png). Para más información acerca de los cursores nativos de CSS y url visita: <a href=\"https://developer.mozilla.org/es/docs/Web/CSS/cursor\">https://developer.mozilla.org/es/docs/Web/CSS/cursor</a>.",
        "x": "Número: el punto activo horizontal del cursor (Deberá ser menor que 32) (Opcional)",
        "y": "Número: el punto activo vertical del cursor (Deberá ser menor que 32) (Opcional)"
      }
    },
    "frameRate": {
      "description": [
        "Especifica el número de cuadros mostrados por segundo. Por ejemplo, la llamada a la función frameRate(30), tratará de refrescar 30 veces por segundo. Si el procesador no es lo suficientemente rápido para mantener la tasa especificada, la tasa de cuadros por segundo no será lograda. Se recomienda definir la tasa de cuadros por segundo dentro de <a href=\"#/p5/setup\">setup()</a>. La tasa cuadros por segundo por defecto esta basada en la tasa del monitos (tambien llamada \"tasa de actualización\") es de 60 veces por segundo en la mayoría de computadores. Un tasa de 24 cuadros por segundo (usualmente para películas) o por debajo será suficiente para animaciones fluidas. Esto es lo mismo que setFrameRate(val).",
        "Llamar a <a href=\"#/p5/frameRate\">frameRate()</a> sin argumentos retorna la tasa de cuadros por segundo actual. La funcion draw() deberá ejecutarse por lo menos una vez antes de que retorne un valor. Esto es lo mismo que <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.",
        "Llamar a <a href=\"#/p5/frameRate\">frameRate()</a> con argumentos que no son de tipo numérico o no son positivos tambien retorna la tasa de cuadros por segundo."
      ],
      "params": {
        "fps": "Número: número de cuadros a ser mostrados cada segundo."
      }
    },
    "noCursor": {
      "description": [
        "Esconde el cursor."
      ]
    },
    "displayWidth": {
      "description": [
        "Variable de sistema que almacena el ancho de la pantalla del monitor de acuerdo con el <a href=\"https://p5js.org/reference/#/p5/pixelDensity\">pixelDensity</a> por defecto. Esto es usado para correr un programa a pantalla completa en cualquier dimensión de pantalla. Para retornar el tamaño real de la pantalla, multiplica este por pixelDensity."
      ]
    },
    "displayHeight": {
      "description": [
        "Variable de sistema que almacena la altura de la pantalla del monitor de acuerdo con el <a href=\"https://p5js.org/reference/#/p5/pixelDensity\">pixelDensity</a> por defecto. Esto es usado para correr un programa a pantalla completa en cualquier dimensión de pantalla. Para retornar el tamaño real de la pantalla, multiplica este por pixelDensity."
      ]
    },
    "windowWidth": {
      "description": [
        "Variable de sistema que almacena el ancho interior de la ventana del navegador, equivale a window.innerWidth."
      ]
    },
    "windowHeight": {
      "description": [
        "Variable de sistema que almacena la altura interior de la ventana del navegador, equivale a window.innerHeight."
      ]
    },
    "windowResized": {
      "description": [
        "La función windowResized() es llamada cada vez que la ventana del navegador cambia de tamaño. Es un buen lugar para cambiar las dimensiones del lienzo o hacer cualquier otros ajustes para acomodar las nuevas dimensiones de la ventana."
      ],
      "params": {
        "event": "Objecto: (Opcional) Callback opcional de Event"
      }
    },
    "width": {
      "description": [
        "Variable de sistema que almacena el ancho del lienzo dibujado. Este valor es definido por el primer parámetro de la función <a href=\"#/p5/createCanvas\">createCanvas()</a>. Por ejemplo, la llamada a la función createCanvas(320, 240) define la variable width al valor 320. El valor por defecto del ancho es de 100 si <a href=\"#/p5/createCanvas\">createCanvas()</a> no ha sido usado en el programa."
      ]
    },
    "height": {
      "description": [
        "Variable de sistema que almacena la altura del lienzo dibujado. Este valor es definido por el segundo parámetro de la función <a href=\"#/p5/createCanvas\">createCanvas()</a>. Por ejemplo, la llamada a la función createCanvas(320, 240) define la variable height al valor 240. El valor por defecto de la altura es de 100 si <a href=\"#/p5/createCanvas\">createCanvas()</a> no ha sido usado en el programa."
      ]
    },
    "fullscreen": {
      "description": [
        "Si se da un argumento, define que el boceto esté a pantalla completa o no basado en el valor del argumento. Si no se da un argumento, retorna el estado actual de pantalla completa. Nota que debido a restricciones del navegador esto solo puede ser llamado con una entrada de parte del usuario, por ejemplo, cuando se presiona el ratón como en el ejemplo."
      ],
      "returns": "Booleano: estado de pantalla completa actual",
      "params": {
        "val": "Booleano: define si el boceto debe estar a pantalla completa o no."
      }
    },
    "pixelDensity": {
      "description": [
        "Define el escalamiento de pixeles para monitores de alta densidad de pixeles. Por defecto, la densidad de pixeles es definida para calzar con la densidad del monitor, ejecuta pixelDensity(1) para que no sea así. Llamar a pixelDensity() sin argumentos retorna la densidad de pixeles actual del bosquejo."
      ],
      "params": {
        "val": "Número: si es que el bosquejo debe ser escalado y cuánto."
      }
    },
    "displayDensity": {
      "description": [
        "Retorna la densidad de pixeles del monitor actual en que el boceto está corriendo."
      ],
      "returns": "Número: la densidad de pixeles actual del monitor"
    },
    "getURL": {
      "description": [
        "Retorna la URL actual. Nota: cuando se usa el p5 Editor, esto retornará un objeto vacio porque el boceto esta embebido en un ifram. Esto funcionará correctamente si tú visualizas el boceto usando las URLs presentes o compartidas del editor."
      ],
      "returns": "String: URL"
    },
    "getURLPath": {
      "description": [
        "Retorna la dirección URL como un arreglo. Nota: cuando se usa el p5 Editor, esto retornará un objeto vacio porque el boceto esta embebido en un ifram. Esto funcionará correctamente si tú visualizas el boceto usando las URLs presentes o compartidas del editor."
      ],
      "returns": "String[]: los componentes de la dirección"
    },
    "getURLParams": {
      "description": [
        "Retorna los parámetros de la URL actual como un objeto. Nota: cuando se usa el p5 Editor, esto retornará un objeto vacio porque el boceto esta embebido en un ifram. Esto funcionará correctamente si tú visualizas el boceto usando las URLs presentes o compartidas del editor."
      ],
      "returns": "Objeto: parámetros de la URL"
    },
    "preload": {
      "description": [
        "La función preload() es ejecutada antes de setup(), es usada para manejar la carga asíncrona de archivos externos. Si se define una función preload(), setup() esperará hasta que las llamadas a funciones load hayan terminado. Solo se deben incluir instrucciones de carga dentro de preload() (loadImage, loadJSON, loadFont, loadStrings, etc).",
        "By default the text \"loading...\" will be displayed. To make your own loading page, include an HTML element with id \"p5_loading\" in your page. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>."
      ]
    },
    "setup": {
      "description": [
        "La función setup() es ejecutada una vez, cuando el programa empieza. Es usada para definir propiedades iniciales como amaño de la pantalla y color de fondo y para cargar medios como imágenes y tipografías cuando el programa empieza. Solo puede haber una función setup() en cada programa y no debe ser llamada después de su ejecución inicial. Nota: las variables declaradas dentro de setup() no son accesibles dentro de otras funciones, como draw().",
        "Note: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other functions, including <a href=\"#/p5/draw\">draw()</a>."
      ]
    },
    "draw": {
      "description": [
        "La función draw() es ejecutada después de setup(), y ejecuta contínuamente las líneas de código dentro de su bloque hasta que el programa es detenido o se ejecuta la función noLoop(). Notar que si noLoop() es ejecutada dentro de setup(), draw() igualmente será ejecutado una vez antes de parar. La función draw() es ejecutada automáticamente y nunca debiera ser ejecutada explícitamente. Siempre debería ser controlada con noLoop(), redraw() y loop(). Después de que noLoop() detiene la ejecución del código dentro de draw(), redraw() causa que el código dentro de draw() se ejecute una vez, y loop() causa que el código dentro de draw() siga ejecutándose de forma continua. El número de veces que draw() se ejecuta por segundo puede ser controlado con la función frameRate(). Solo puede haber una función draw() en cada bosquejo, y draw() solo debe existir si quieres que el código corra de forma continua, o para procesar eventos como mousePressed(). Algunas veces, podrías querer ejecutar una función draw() vacía, como se mostró en el ejemplo más arriba. Es importante notar que el sistema de coordenadas de dibujo será reiniciado al principio de cada ejecución de la función draw(). Si cualquier transformación es hecha dentro de draw() (por ejemplo: escalar, rotar, trasladar), sus efectos serán anulados al principio de cada ejecución de draw(), así que las transformaciones no se acumulan en el tiempo. Por el otro lado, el estilo aplicado (color de relleno, color de trazado) sí se mantendrá en efecto.",
        "It should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After <a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the code inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code inside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.",
        "The number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with the <a href=\"#/p5/frameRate\">frameRate()</a> function.",
        "There can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must exist if you want the code to run continuously, or to process events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in your program, as shown in the above example.",
        "It is important to note that the drawing coordinate system will be reset at the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed within <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be undone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate over time. On the other hand, styling applied (ex: fill, stroke, etc) will remain in effect."
      ]
    },
    "remove": {
      "description": [
        "Remueve el bosquejo de p5 completamente. Esto removerá el lienzo y cualquier otro elemento creado por p5.js. También detendrá el bucle de dibujo y desvinculará cualquier propiedad o método global de la ventana. Dejará una variable p5 en caso que quieras crear un nuevo bosquejo p5. Si quieres, puedes definir p5 = null para borrar esta variable."
      ]
    },
    "disableFriendlyErrors": {
      "description": [
        "Allows for the friendly error system (FES) to be turned off when creating a sketch, which can give a significant boost to performance when needed. See <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'> disabling the friendly error system</a>."
      ]
    },
    "let": {
      "description": [
        "Creates and names a new variable. A variable is a container for a value.",
        "Variables that are declared with <a href=\"#/p5/let\">let</a> will have block-scope. This means that the variable only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">the MDN entry</a>: Declares a block scope local variable, optionally initializing it to a value."
      ]
    },
    "const": {
      "description": [
        "Creates and names a new constant. Like a variable created with <a href=\"#/p5/let\">let</a>, a constant that is created with <a href=\"#/p5/const\">const</a> is a container for a value, however constants cannot be reassigned once they are declared. Although it is noteworthy that for non-primitive data types like objects & arrays, their elements can still be changeable. So if a variable is assigned an array, you can still add or remove elements from the array but cannot reassign another array to it. Also unlike <code>let</code>, you cannot declare variables without value using const.",
        "Constants have block-scope. This means that the constant only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within. A constant cannot be redeclared within a scope in which it already exists.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">the MDN entry</a>: Declares a read-only named constant. Constants are block-scoped, much like variables defined using the 'let' statement. The value of a constant can't be changed through reassignment, and it can't be redeclared."
      ]
    },
    "===": {
      "description": [
        "The strict equality operator <a href=\"#/p5/===\">===</a> checks to see if two values are equal and of the same type.",
        "A comparison expression always evaluates to a <a href=\"#/p5/boolean\">boolean</a>.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">the MDN entry</a>: The non-identity operator returns true if the operands are not equal and/or not of the same type.",
        "Note: In some examples around the web you may see a double-equals-sign <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\">==</a>, used for comparison instead. This is the non-strict equality operator in Javascript. This will convert the two values being compared to the same type before comparing them."
      ]
    },
    ">": {
      "description": [
        "The greater than operator <a href=\"#/p5/>\">></a> evaluates to true if the left value is greater than the right value. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"> There is more info on comparison operators on MDN.</a>"
      ]
    },
    ">=": {
      "description": [
        "The greater than or equal to operator <a href=\"#/p5/>=\">>=</a> evaluates to true if the left value is greater than or equal to the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<": {
      "description": [
        "The less than operator <a href=\"#/p5/<\"><</a> evaluates to true if the left value is less than the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<=": {
      "description": [
        "The less than or equal to operator <a href=\"#/p5/<=\"><=</a> evaluates to true if the left value is less than or equal to the right value.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "if-else": {
      "description": [
        "The <a href=\"#/p5/if-else\">if-else</a> statement helps control the flow of your code.",
        "A condition is placed between the parenthesis following 'if', when that condition evalues to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a>, the code between the following curly braces is run. Alternatively, when the condition evaluates to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>, the code between the curly braces of 'else' block is run instead. Writing an else block is optional.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">the MDN entry</a>: The 'if' statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed"
      ]
    },
    "function": {
      "description": [
        "Creates and names a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">function</a>. A <a href=\"#/p5/function\">function</a> is a set of statements that perform a task.",
        "Optionally, functions can have parameters. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parameter\">Parameters</a> are variables that are scoped to the function, that can be assigned a value when calling the function.Multiple parameters can be given by seperating them with commas.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">the MDN entry</a>: Declares a function with the specified parameters."
      ]
    },
    "return": {
      "description": [
        "Specifies the value to be returned by a function. For more info checkout <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"> the MDN entry for return</a>."
      ]
    },
    "boolean": {
      "description": [
        "Convierte un número o string a su representación en boolean. Para números, cualquier valor distinto de cero (positivo o ne gativo), evalua a true, mientras que cero evalua a falso. Para un string, el valor true evalua a true, mientras que cualquier otro valor evalua a falso. Cuando un arreglo de números o strings es introducido, entonces un arreglo de booleans de la misma longitud es retornado."
      ],
      "returns": "Boolean: representación en formato boolean del valor",
      "params": {
        "n": "String|Boolean|Número|Arreglo: valor a procesar"
      }
    },
    "string": {
      "description": [
        "A <a href=\"#/p5/string\">string</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A string is a series of text characters. In Javascript, a string value must be surrounded by either single-quotation marks(') or double-quotation marks(\").",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/string\">the MDN entry</a>: A string is a sequence of characters used to represent text."
      ]
    },
    "number": {
      "description": [
        "A <a href=\"#/p5/number\">number</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A number can be a whole number or a decimal number.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/number\">The MDN entry for number</a>"
      ]
    },
    "object": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">MDN's object basics</a>:  An <a href=\"#/p5/object\">object</a> is a collection of related data and/or  functionality (which usually consists of several variables and functions —  which are called properties and methods when they are inside objects.)"
      ]
    },
    "class": {
      "description": [
        "Creates and names a <a href=\"#/p5/class\">class</a> which is a template for the creation of <a href=\"#/p5/objects\">objects</a>.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">the MDN entry</a>: The class declaration creates a new Class with a given name using prototype-based inheritance."
      ]
    },
    "for": {
      "description": [
        "<a href=\"#/p5/for\">for</a> creates a loop that is useful for executing one section of code multiple times.",
        "A 'for loop' consists of three different expressions inside of a parenthesis, all of which are optional.These expressions are used to control the number of times the loop is run.The first expression is a statement that is used to set the initial state for the loop.The second expression is a condition that you would like to check before each loop. If this expression returns false then the loop will exit.The third expression is executed at the end of each loop. These expression are separated by ; (semi-colon).In case of an empty expression, only a semi-colon is written.",
        "The code inside of the loop body (in between the curly braces) is executed between the evaluation of the second and third expression.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. The test condition with a <a href=\"#/p5/for\">for</a> loop is the second expression detailed above. Ensuring that this expression can eventually become false ensures that your loop doesn't attempt to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">the MDN entry</a>: Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
      ]
    },
    "while": {
      "description": [
        "<a href=\"#/p5/while\">while</a> creates a loop that is useful for executing one section of code multiple times.",
        "With a 'while loop', the code inside of the loop body (between the curly braces) is run repeatedly until the test condition (inside of the parenthesis) evaluates to false. The condition is tested before executing the code body with <a href=\"#/p5/while\">while</a>, so if the condition is initially false the loop body, or statement, will never execute.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. This is to keep your loop from trying to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">the MDN entry</a>: The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true.The condition is evaluated before executing the statement."
      ]
    },
    "createCanvas": {
      "description": [
        "Crea un elemento canvas en el documento, y define sus dimensiones medidas en pixeles. Este método debe ser llamado solo una vez al comienzo de la función setup(). Llamar a la función createCanvas() más de una vez en un bosquejo puede resultar en comportamientos impredecibles. Si quieres más de un lienzo donde dibujar, debes usar la función createGraphics() (escondido por defecto, pero puede ser mostrado), Las variables de sistema width (ancho) y height (altura) son definidas por los parámetros pasados a la función. Si createCanvas() no es usado, la ventana tendrá un tamaño por defecto de 100 x 100 pixeles. Para más maneras de posicionar el lienzo, ver la sección de posición del lienzo.",
        "Important note: in 2D mode (i.e. when <code>p5.Renderer</code> is not set) the origin (0,0) is positioned at the top left of the screen. In 3D mode (i.e. when <code>p5.Renderer</code> is set to <code>WEBGL</code>), the origin is positioned at the center of the canvas. See <a href=\"https://github.com/processing/p5.js/issues/1545\">this issue</a> for more information.",
        "The system variables width and height are set by the parameters passed to this function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the window will be given a default size of 100x100 pixels.",
        "For more ways to position the canvas, see the <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'> positioning the canvas</a> wiki page."
      ],
      "returns": "Objeto: lienzo generado",
      "params": {
        "w": "Número: ancho del lienzo",
        "h": "Número: altura del lienzo",
        "renderer": "Constante: P2D o WEBGL"
      }
    },
    "resizeCanvas": {
      "description": [
        "Redimensiona el linezo al ancho y la altura dados. El lienzo será borrado y la función draw() será llamada inmediatamente, permitiendo que el bosquejo se ajuste al nuevo lienzo"
      ],
      "params": {
        "w": "Number: width of the canvas",
        "h": "Number: height of the canvas",
        "noRedraw": "Boolean: (Optional) don't redraw the canvas immediately"
      }
    },
    "noCanvas": {
      "description": [
        "Remueve el lienzo por defecto para un bosquejo de p5 que no requiere un lienzo."
      ]
    },
    "createGraphics": {
      "description": [
        "Crea y retorna un nuevo objeto p5.Renderer. Usa esta clase si necesitas dibujar fuera de pantalla en un buffer gráfico. Los dos parámetros definen el ancho y la altura en pixeles."
      ],
      "returns": "buffer gráfico fuera de pantalla",
      "params": {
        "w": "Número: ancho del buffer gráfico fuera de pantalla",
        "h": "Número: altura del buffer gráfico fuera de pantalla",
        "renderer": "Constante: P2D o WEBGL, si no se define es P2D por defecto"
      }
    },
    "blendMode": {
      "description": [
        "Combina los pixeles en la ventana según el modo definido. Existen distintas maneras de combinar los pixeles de la fuente (A) con los ya existentes en la pantalla mostrada (B). TODO",
        "<em>(2D)</em> indicates that this blend mode <b>only</b> works in the 2D renderer. <em>(3D)</em> indicates that this blend mode <b>only</b> works in the WEBGL renderer."
      ],
      "params": {
        "mode": "Constante: modo de combinar del lienzo"
      }
    },
    "drawingContext": {
      "description": [
        "The p5.js API provides a lot of functionality for creating graphics, but there is some native HTML5 Canvas functionality that is not exposed by p5. You can still call it directly using the variable <code>drawingContext</code>, as in the example shown. This is the equivalent of calling <code>canvas.getContext('2d');</code> or <code>canvas.getContext('webgl');</code>. See this <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\"> reference for the native canvas API</a> for possible drawing functions you can call."
      ]
    },
    "noLoop": {
      "description": [
        "Detiene la ejecución continua del código de draw() de p5.js. Si se llama a la función loop(), el código dentro de draw() empieza a correr de forma continua nuevamente. Si se usa noLoop() dentro de setup(), debe ser la última línea de código dentro del bloque. Cuando se usa noLoop(), no es posible manipular o acceder a la pantalla dentro de las funciones que manejan eventos como mousePressed() o keyPressed(). En vez de eso, usa estas funciones para llamar a redraw() o loop(), que permitirán la ejecución de draw(), lo que permite el refresco correcto de la pantalla. Esto significa que cuando noLoop() ha sido ejecutado, no se sigue dibujando, y funciones como saveFrame() o loadPixels() no se pueden usar. Notar que si el bosquejo es escalado, redraw() será llamado para actualizar el bosquejo, incluso si noLoop() ha sido ejecutada. Por otro lado, el bosquejo entrará a un estado singular, hasta que loop() sea ejecutado.",
        "When <a href=\"#/p5/noLoop\">noLoop()</a> is used, it's not possible to manipulate or access the screen inside event handling functions such as <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>, which will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen properly. This means that when <a href=\"#/p5/noLoop\">noLoop()</a> has been called, no drawing can happen, and functions like <a href=\"#/p5/saveFrames\">saveFrames()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.",
        "Note that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will be called to update the sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a> has been specified. Otherwise, the sketch would enter an odd state until <a href=\"#/p5/loop\">loop()</a> was called.",
        "Use <a href=\"#/p5/isLooping\">isLooping()</a> to check current state of loop()."
      ]
    },
    "loop": {
      "description": [
        "Por defecto, p5.js repite de forma continua la función draw(), ejecutado el código dentro de su bloque. Sin embargo, el bucle de dibujo puede ser detenido llamando a la función noLoop(). En ese caso, el bucle de draw() puede ser retomado con loop().",
        "Avoid calling loop() from inside setup().",
        "Use <a href=\"#/p5/isLooping\">isLooping()</a> to check current state of loop()."
      ]
    },
    "isLooping": {
      "description": [
        "By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously, executing the code within it. If the sketch is stopped with <a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>, isLooping() returns the current state for use within custom event handlers."
      ]
    },
    "push": {
      "description": [
        "La función push() graba la configuración actual de estilo de dibujo, y pop() restaura esta configuración. Notar que estas funciones siempre son usadas en conjunto. Permiten cambiar las configuraciones de estilo y transformaciones y luego volver a lo que tenías. Cuando un nuevo estado es iniciado con push(), construye encima de la información actual de estilo y transformación. Las funciones push() y pop() pueden ser embebidas para proveer más control (ver el segundo ejemplo para una demostración). push() almacena información relacionada a la configuración de estado de transformación y de estulo actual, controlada por las siguientes funciones: fill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading().",
        "<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.",
        "In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> and <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "pop": {
      "description": [
        "La función push() graba la configuración actual de estilo de dibujo, y pop() restaura esta configuración. Notar que estas funciones siempre son usadas en conjunto. Permiten cambiar las configuraciones de estilo y transformaciones y luego volver a lo que tenías. Cuando un nuevo estado es iniciado con push(), construye encima de la información actual de estilo y transformación. Las funciones push() y pop() pueden ser embebidas para proveer más control (ver el segundo ejemplo para una demostración). push() almacena información relacionada a la configuración de estado de transformación y de estulo actual, controlada por las siguientes funciones: fill(), stroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(), imageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(), textFont(), textMode(), textSize(), textLeading().",
        "<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state and style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/noiseSeed\">noiseSeed()</a>.",
        "In WEBGL mode additional style settings are stored. These are controlled by the following functions: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionalLight\">directionalLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> and <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "redraw": {
      "description": [
        "Ejecuta una vez el código dentro de la función draw(). Esta función permite al programa actualizar la ventana mostrada solamente cuando es necesario, por ejemplo, cuando un evento registrado por mousePressed() o keyPressed() ocurre. En la estructura de un programa, solo hace sentido llamar a redraw() dentro de eventos como mousePressed(). Esto es porque redraw() no hace que draw() se ejecute de forma inmediata (solo define una indicación de que se necesita un refresco). La función redraw() no funciona de forma correcta cuando se llama dentro de la función draw(). Para habilitar y deshabilitar animaciones, usa las funcioens loop() y noLoop(). Adicionalmente, puedes definir el número de veces que se dibuja por cada llamada a este método. Para esto, añade un entero como parámetro único a la función, que señale cuántas veces se requiere dibujar.",
        "In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a> within events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This is because <a href=\"#/p5/redraw\">redraw()</a> does not run <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates an update is needed).",
        "The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when called inside <a href=\"#/p5/draw\">draw()</a>.To enable/disable animations, use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.",
        "In addition you can set the number of redraws per method call. Just add an integer as single parameter for the number of redraws."
      ],
      "params": {
        "n": "Entero: redibuja n-veces. Por defecto el valor es 1"
      }
    },
    "p5": {
      "description": [
        "The <code>p5()</code> constructor enables you to activate \"instance mode\" instead of normal \"global mode\". This is an advanced topic. A short description and example is included below. Please see <a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\"> Dan Shiffman's Coding Train video tutorial</a> or this <a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a> for more info.",
        "By default, all p5.js functions are in the global namespace (i.e. bound to the window object), meaning you can call them simply <code>ellipse()</code>, <code>fill()</code>, etc. However, this might be inconvenient if you are mixing with other JS libraries (synchronously or asynchronously) or writing long programs of your own. p5.js currently supports a way around this problem called \"instance mode\". In instance mode, all p5 functions are bound up in a single variable instead of polluting your global namespace.",
        "Optionally, you can specify a default container for the canvas and any other elements to append to with a second argument. You can give the ID of an element in your html, or an html node itself.",
        "Note that creating instances like this also allows you to have more than one p5 sketch on a single web page, as they will each be wrapped up with their own set up variables. Of course, you could also use iframes to have multiple sketches in global mode."
      ],
      "params": {
        "sketch": "Object: a function containing a p5.js sketch",
        "node": "String|Object: ID or pointer to HTML DOM node to contain sketch in"
      }
    },
    "applyMatrix": {
      "description": [
        "Multiplica la matriz actual por la especificada según los parámetros. Esto es muy lento porque tratará de calcular el inverso de la transformada, así que evítalo cuando sea posible",
        "The naming of the arguments here follows the naming of the <a href= \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\"> WHATWG specification</a> and corresponds to a transformation matrix of the form: <blockquote>",
        "<img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\" alt=\"The transformation matrix used when applyMatrix is called\"/> </blockquote>"
      ],
      "params": {
        "a": "Número: números que definen la matriz 3x2 a multiplicar",
        "b": "Número: números que definen la matriz 3x2 a multiplicar",
        "c": "Número: números que definen la matriz 3x2 a multiplicar",
        "d": "Número: números que definen la matriz 3x2 a multiplicar",
        "e": "Número: números que definen la matriz 3x2 a multiplicar",
        "f": "Número: números que definen la matriz 3x2 a multiplicar"
      }
    },
    "resetMatrix": {
      "description": [
        "Reemplaza la matriz actual con la matriz identidad"
      ]
    },
    "rotate": {
      "description": [
        "Rota una figura según el monto especificado por el parámetro ángulo. Esta función toma en cuenta el modo de ángulo definido por angleMode(), así que los ángulos pueden ser ingresados en radianes o grados. Los objetos son siempre rotados según su posición relativa al origen y los números positivos rotan en la dirección de las manecillas del reloj. Las transformaciones se aplican a todo lo que ocurre de forma posterior y las subsecuentes llamadas a la función acumulan el efecto. Por ejemplo, llamar a la función rotate(HALF_PI) y luego rotate(HALF_PI) equivale a una llamada a rotate(PI). Todas las transformaciones son anuladas cuando la función draw() comienza nuevamente. Técnicamente, rotate() multiplica la matriz de transformación actual por una matriz de rotación. Esta función puede ser controlada además con las funciones push() y pop().",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling rotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI). All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.",
        "Technically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "angle": "Ángulo: el ángulo de rotación, especificado en radianes o grados, dependiendo de angleMode()",
        "axis": "p5.Vector|Arreglo: eje sobre el que se rota"
      }
    },
    "rotateX": {
      "description": [
        "Rota en torno al eje X",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Número: ángulo en radianes"
      }
    },
    "rotateY": {
      "description": [
        "Rota en torno al eje Y",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Número: ángulo en radianes"
      }
    },
    "rotateZ": {
      "description": [
        "Rota en torno al eje Z,. Sólo disponible en el modo WEBGL.",
        "This method works in WEBGL mode only.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Número: ángulo en radianes"
      }
    },
    "scale": {
      "description": [
        "Aumenta o decrementa el tamaño de una figura por medio de expandir o contraer sus vértices. Los objetos siempre escalan desde su origen relativo al sistema de coordenadas. Los valores de escalamiento son porcentajes decimales. Por ejemplo, la llamada a la función scale(2.0) aumenta la dimensión de una figura en un 200%. Las transformaciones se aplican a todo lo que ocurre después y llamadas subsecuentes a la función multiplican el efecto. Por ejemplo, llamar a scale(2.0) y luego a scale(1.5) equivale a llamar a scale(3.0). Si la función scale() es llamad dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. El uso de esta función con el parámetro z está solo disponible en el modo WEBGL. Esta función puede también ser controlada con las funciones push() y pop().",
        "Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling scale(2.0) and then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Using this function with the z parameter is only available in WEBGL mode. This function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "s": "Número | p5.Vector| Arreglo: porcentaje a escalar del objeto, o porcentaje a esacalar del objeto en el eje x si se dan múltiples argumentos",
        "y": "Número: porcentaje a escalar el objeto en el eje y",
        "z": "Número: porcentaje a escalar el objeto en el eje z (sólo en modo WEBGL)",
        "scales": "p5.Vector|Number[]: per-axis percents to scale the object"
      }
    },
    "shearX": {
      "description": [
        "Corta la figura en torno al eje x según el monto especificado por el parámetro ángulo. Los ángulos deben ser especificados según el modo actual de ángulo angleMode(). Los objetos son siempre cortados según su posición relativa al origen y los números positivos cortan los objetos en la dirección de las manecillas del reloj. Las transformaciones aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a shearX(PI/2) y luego a shearX(PI/2) equivale a llamar a shearX(PI). Si shearX() es llamado dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. Técnicamente, shearX() multiplica la matriz de transformación actual por una matriz de rotación. La función puede ser controlada con las funciones push() y pop().",
        "Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling shearX(PI/2) and then shearX(PI/2) is the same as shearX(PI). If <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Technically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions."
      ],
      "params": {
        "angle": "Número: ángulo de corte especificado en radianes o grados, dependiendo del modo de ángulo actual angleMode()"
      }
    },
    "shearY": {
      "description": [
        "Corta la figura en torno al eje y según el monto especificado por el parámetro ángulo. Los ángulos deben ser especificados según el modo actual de ángulo angleMode(). Los objetos son siempre cortados según su posición relativa al origen y los números positivos cortan los objetos en la dirección de las manecillas del reloj. Las transformaciones aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a shearY(PI/2) y luego a shearY(PI/2) equivale a llamar a shearY(PI). Si shearY() es llamado dentro de draw(), la transformación es anulada cuando el bucle empieza nuevamente. Técnicamente, shearY() multiplica la matriz de transformación actual por una matriz de rotación. La función puede ser controlada con las funciones push() y pop().",
        "Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling shearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If <a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.",
        "Technically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions."
      ],
      "params": {
        "angle": "Número: ángulo de corte especificado en radianes o grados, dependiendo del modo de ángulo actual angleMode()"
      }
    },
    "translate": {
      "description": [
        "Especifica una cantidad a desplazar los objetos dentro de la ventana mostrada. El parámetro x especifica la traslación de izquierda a derecha, el parámetro y especifica la traslación de arriba a abajo. Las transformaciones son acumulativas y aplican a todo lo que ocurre después y llamadas posteriores a la misma función acumulan el efecto. Por ejemplo, llamar a translate(50, 0) y luego a translate(20, 0) equivale a llamar a translate(70, 0). Si translate() es llamado dentro de draw(), la transformación es anulada cada vez que el bucle empieza nuevamente. Esta función peude ser controlada con las funciones push() y pop().",
        "Transformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling translate(50, 0) and then translate(20, 0) is the same as translate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again. This function can be further controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>."
      ],
      "params": {
        "x": "Número: traslación izquierda-derecha",
        "y": "Número: traslación arriba-abajo",
        "z": "Número: traslación adelante-atrás (solo en modo WEBGL)",
        "vector": "p5.Vector: the vector to translate by"
      }
    },
    "storeItem": {
      "description": [
        "Stores a value in local storage under the key name.  Local storage is saved in the browser and persists  between browsing sessions and page reloads.  The key can be the name of the variable but doesn't  have to be. To retrieve stored items  see <a href=\"#/p5/getItem\">getItem</a>. Sensitive data such as passwords or personal information  should not be stored in local storage."
      ],
      "params": {
        "key": "String",
        "value": "String|Number|Object|Boolean|p5.Color|p5.Vector"
      }
    },
    "getItem": {
      "description": [
        "Returns the value of an item that was stored in local storage  using storeItem()"
      ],
      "returns": "Number|Object|String|Boolean|p5.Color|p5.Vector: Value of stored item",
      "params": {
        "key": "String: name that you wish to use to store in local storage"
      }
    },
    "clearStorage": {
      "description": [
        "Clears all local storage items set with storeItem()  for the current domain."
      ]
    },
    "removeItem": {
      "description": [
        "Removes an item that was stored with storeItem()"
      ],
      "params": {
        "key": "String"
      }
    },
    "createStringDict": {
      "description": [
        "Creates a new instance of p5.StringDict using the key-value pair  or the object you provide."
      ],
      "returns": "p5.StringDict:",
      "params": {
        "key": "String",
        "value": "String",
        "object": "Object: object"
      }
    },
    "createNumberDict": {
      "description": [
        "Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair  or object you provide."
      ],
      "returns": "p5.NumberDict:",
      "params": {
        "key": "Number",
        "value": "Number",
        "object": "Object: object"
      }
    },
    "select": {
      "description": [
        "Searches the page for the first element that matches the given CSS selector string (can be an ID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\">p5.Element</a>. The DOM node itself can be accessed with .elt. Returns null if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element|null: <a href=\"#/p5.Element\">p5.Element</a> containing node found",
      "params": {
        "selectors": "String: CSS selector string of element to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or  HTML element to search within"
      }
    },
    "selectAll": {
      "description": [
        "Searches the page for elements that match the given CSS selector string (can be an ID a class, tag name or a combination) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s in an array. The DOM node itself can be accessed with .elt. Returns an empty array if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element[]: Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found",
      "params": {
        "selectors": "String: CSS selector string of elements to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>  , or HTML element to search within"
      }
    },
    "removeElements": {
      "description": [
        "Removes all elements created by p5, except any canvas / graphics elements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>. Event handlers are removed, and element is removed from the DOM."
      ]
    },
    "changed": {
      "description": [
        "The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an element changes. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when the value of  an element changes.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "input": {
      "description": [
        "The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is detected with an element. The input event is often used to detect keystrokes in a input element, or changes on a slider element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when any user input is  detected within the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "createDiv": {
      "description": [
        "Creates a <div></div> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createP": {
      "description": [
        "Creates a <code>&lt;p&gt;&lt;/p&gt;</code> element in the DOM with given inner HTML. Used for paragraph length text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createSpan": {
      "description": [
        "Creates a <span></span> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createImg": {
      "description": [
        "Creates an <img> element in the DOM with given src and alternate text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "src": "String: src path or url for image",
        "alt": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (<code>\"\"</code>) if that an image is not intended to be viewed.",
        "crossOrigin": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used",
        "successCallback": "Function: (Optional) callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument"
      }
    },
    "createA": {
      "description": [
        "Creates an <a></a> element in the DOM for including a hyperlink."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "href": "String: url of page to link to",
        "html": "String: inner html of link element to display",
        "target": "String: (Optional) target where new link should open,  could be _blank, _self, _parent, _top."
      }
    },
    "createSlider": {
      "description": [
        "Creates a slider <input></input> element in the DOM. Use .size() to set the display length of the slider."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "min": "Number: minimum value of the slider",
        "max": "Number: maximum value of the slider",
        "value": "Number: (Optional) default value of the slider",
        "step": "Number: (Optional) step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)"
      }
    },
    "createButton": {
      "description": [
        "Crea un elemento <button></button> en el DOM. Utiliza .size() para establecer el tamaño de visualización del botón. Usa .mousePressed() para especificar el comportamiento al pulsarlo."
      ],
      "returns": "p5.Element: apunta a <a href=\"#/p5.Element\">p5.Element</a> que contiene el nodo creado",
      "params": {
        "label": "String: Etiqueta mostrada en el botón",
        "value": "String: (Opcional) valor del botón"
      }
    },
    "createCheckbox": {
      "description": [
        "Creates a checkbox <input></input> element in the DOM. Calling .checked() on a checkbox returns if it is checked or not"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "label": "String: (Optional) label displayed after checkbox",
        "value": "Boolean: (Optional) value of the checkbox; checked is true, unchecked is false"
      }
    },
    "createSelect": {
      "description": [
        "Creates a dropdown menu <select></select> element in the DOM. It also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box. <ul> <li><code>.option(name, [value])</code> can be used to set options for the select after it is created.</li> <li><code>.value()</code> will return the currently selected option.</li> <li><code>.selected()</code> will return current dropdown element which is an instance of <a href=\"#/p5.Element\">p5.Element</a></li> <li><code>.selected(value)</code> can be used to make given option selected by default when the page first loads.</li> <li><code>.disable()</code> marks whole of dropdown element as disabled.</li> <li><code>.disable(value)</code> marks given option as disabled</li> </ul>"
      ],
      "returns": "p5.Element:",
      "params": {
        "multiple": "Boolean: (Optional) true if dropdown should support multiple selections",
        "existing": "Object: DOM select element"
      }
    },
    "createRadio": {
      "description": [
        "Creates a radio button element in the DOM.It also helps existing radio buttons assign methods of <a href=\"#/p5.Element/\">p5.Element</a>. <ul> <li><code>.option(value, [label])</code> can be used to create a new option for the element. If an option with a value already exists, it will be returned. Optionally, a label can be provided as second argument for the option.</li> <li><code>.remove(value)</code> can be used to remove an option for the element.</li> <li><code>.value()</code> method will return the currently selected value.</li> <li><code>.selected()</code> method will return the currently selected input element.</li> <li><code>.selected(value)</code> method will select the option and return it.</li> <li><code>.disable(Boolean)</code> method will enable/disable the whole radio button element.</li> </ul>"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "containerElement": "Object: An container HTML Element either a div or span inside which all existing radio inputs will be considered as options.",
        "name": "String: (Optional) A name parameter for each Input Element."
      }
    },
    "createColorPicker": {
      "description": [
        "Creates a colorPicker element in the DOM for color input. The .value() method will return a hex string (#rrggbb) of the color. The .color() method will return a p5.Color object with the current chosen color."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String|p5.Color: (Optional) default color of element"
      }
    },
    "createInput": {
      "description": [
        "Creates an <input></input> element in the DOM for text input. Use .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String: default value of the input box",
        "type": "String: (Optional) type of text, ie text, password etc. Defaults to text.  Needs a value to be specified first."
      }
    },
    "createFileInput": {
      "description": [
        "Creates an <input></input> element in the DOM of type 'file'. This allows users to select local files for use in a sketch."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element",
      "params": {
        "callback": "Function: callback function for when a file is loaded",
        "multiple": "Boolean: (Optional) optional, to allow multiple files to be selected"
      }
    },
    "createVideo": {
      "description": [
        "Creates an HTML5 <video> element in the DOM for simple playback of audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a> and drawn into canvas using <a href=\"#/p5/image\">image()</a>. The first parameter can be either a single string path to a video file, or an array of string paths to different formats of the same video. This is useful for ensuring that your video can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page</a> for further information about supported formats."
      ],
      "returns": "p5.MediaElement: pointer to video <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "src": "String|String[]: path to a video file, or array of paths for  supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "createAudio": {
      "description": [
        "Creates a hidden HTML5 <audio> element in the DOM for simple audio playback. The first parameter can be either a single string path to a audio file, or an array of string paths to different formats of the same audio. This is useful for ensuring that your audio can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page for further information about supported formats</a>."
      ],
      "returns": "p5.MediaElement: pointer to audio <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "src": "String|String[]: (Optional) path to an audio file, or array of paths  for supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "VIDEO": {},
    "AUDIO": {},
    "createCapture": {
      "description": [
        "Creates a new HTML5 <video> element that contains the audio/video feed from a webcam. The element is separate from the canvas and is displayed by default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>. The feed can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>. The loadedmetadata property can be used to detect when the element has fully loaded (see second example).",
        "More specific properties of the feed can be passing in a Constraints object. See the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'> W3C spec</a> for possible properties. Note that not all of these are supported by all browsers.",
        "<em>Security note</em>: A new browser security specification requires that getUserMedia, which is behind <a href=\"#/p5/createCapture\">createCapture()</a>, only works when you're running the code locally, or on HTTPS. Learn more <a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a> and <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>."
      ],
      "returns": "p5.Element: capture video <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "type": "String|Constant|Object: type of capture, either VIDEO or  AUDIO if none specified, default both,  or a Constraints object",
        "callback": "Function: (Optional) function to be called once  stream has loaded"
      }
    },
    "createElement": {
      "description": [
        "Creates element with given tag in the DOM with given content."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "tag": "String: tag for the new element",
        "content": "String: (Optional) html content to be inserted into the element"
      }
    },
    "deviceOrientation": {
      "description": [
        "La variable de sistema deviceOrientation siempre contiene la orientación del dispositivo. El valor de esta variable será o landscape (paisaje) o portrait (retrato). Si la información no está disponible, su valor será undefined."
      ]
    },
    "accelerationX": {
      "description": [
        "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje X. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "accelerationY": {
      "description": [
        "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje Y. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "accelerationZ": {
      "description": [
        "La variable de sistema accelerationX siempré contiene la aceleración del dispositivo en el eje Z. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "pAccelerationX": {
      "description": [
        "La variable de sistema pAccelerationX siempré contiene la aceleración del dispositivo en el eje X, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "pAccelerationY": {
      "description": [
        "La variable de sistema pAccelerationY siempré contiene la aceleración del dispositivo en el eje Y, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "pAccelerationZ": {
      "description": [
        "La variable de sistema pAccelerationZ siempré contiene la aceleración del dispositivo en el eje Z, del cuadro anterior al cuadro actual. El valor es representado en unidades de metros por segundo al cuadrado."
      ]
    },
    "rotationX": {
      "description": [
        "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje x. El valor está representado entre 0 y  +/-180 grados. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationY": {
      "description": [
        "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje x. El valor está representado entre 0 y  +/-180 grados. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationZ": {
      "description": [
        "La variable de sistema rotationX siempre contiene la rotación del dispositivo en el eje y. El valor está representado entre 0 y  360 grados. A diferencia de rotationX y rotationY, esta variable está solo disponible en dispositivos equipados con una brújula interna. Nota: el orden en que las rotaciones son llamadas es importante, por ejemplo, si se usan juntas, deben ser llamadas en el orden Z-X-Y, en caso contrario podría haber un comportamiento errado.",
        "Unlike rotationX and rotationY, this variable is available for devices with a built-in compass only.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "pRotationX": {
      "description": [
        "La variable de sistema pRotationX siempre contiene la rotación del dispositivo en el eje x, en el cuadro anterior al actual. El valor está representado entre 0 y  +/-180 grados. pRotationX puede ser usado en conjunto con rotationX para determinar la dirección de rotación del dispositivo a lo largo del eje x.",
        "pRotationX can also be used with rotationX to determine the rotate direction of the device along the X-axis."
      ]
    },
    "pRotationY": {
      "description": [
        "La variable de sistema pRotationY siempre contiene la rotación del dispositivo en el eje x, en el cuadro anterior al actual. El valor está representado entre 0 y  +/-90 grados. pRotationY puede ser usado en conjunto con rotationY para determinar la dirección de rotación del dispositivo a lo largo del eje y.",
        "pRotationY can also be used with rotationY to determine the rotate direction of the device along the Y-axis."
      ]
    },
    "pRotationZ": {
      "description": [
        "La variable de sistema pRotationZ siempre contiene la rotación del dispositivo en el eje z, en el cuadro anterior al actual. El valor está representado entre 0 y 359 grados. pRotationZ puede ser usado en conjunto con rotationZ para determinar la dirección de rotación del dispositivo a lo largo del eje z.",
        "pRotationZ can also be used with rotationZ to determine the rotate direction of the device along the Z-axis."
      ]
    },
    "turnAxis": {
      "description": [
        "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The turnAxis variable is only defined within the scope of deviceTurned()."
      ]
    },
    "setMoveThreshold": {
      "description": [
        "La función setMoveThreshold() es usada para definir el umbral para detectar movimiento de la función deviceMoved(). El valor umbral por defecto es 0.5"
      ],
      "params": {
        "value": "Número: el valor umbral"
      }
    },
    "setShakeThreshold": {
      "description": [
        "La función setShakeThreshold() es usada para definir el umbral para detectar agitamiento de la función deviceShaken(). El valor umbral por defecto es 30."
      ],
      "params": {
        "value": "Número: el valor umbral"
      }
    },
    "deviceMoved": {
      "description": [
        "La función deviceMoved() es llamada cuando el dispositivo es movido en una cantidad mayor al valor umbral en el eje X, Y o Z. El valor umbral por defecto es 0.5"
      ]
    },
    "deviceTurned": {
      "description": [
        "La función deviceTurned() es llamada cuando el dispositivo es girado en más de 90 grados de modo continuo. El eje que gatilla la función deviceTurned() es almacenado en la variable turnAxis. El método deviceTurned() puede ser restringido para gatillar en cualquier eje: X, Y o Z, comparando la variable turnAxis con X, Y o Z.",
        "The axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis: X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'."
      ]
    },
    "deviceShaken": {
      "description": [
        "La función deviceShaken() es llamada cuando la aceleración total de los cambios de accelerationX y accelerationY son mayores al valor umbral. El valor umbral por defecto es 30"
      ]
    },
    "keyIsPressed": {
      "description": [
        "La variable boolean de sistema keyIsPressed es verdadera (true) cuando cualquier tecla es presionada y falsa (false) si no hay ninguna tecla presionada"
      ]
    },
    "key": {
      "description": [
        "La variable de sistema key siempre contiene el valor más reciente de la tecla del teclado presionada. Para tener los mejores resultados, es mejor usarla dentro de la función keyTyped(). Para teclas sin valor ASCII, usa la variable keyCode"
      ]
    },
    "keyCode": {
      "description": [
        "La variable keyCode es usada para detectar teclas especiales, como BACKSPACE, DELETE, ENTER, RETURN, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. También puedes revisar las teclas especiales buscando el código keyCode de cualquier tecla en internet."
      ]
    },
    "keyPressed": {
      "description": [
        "La función keyPressed() es llamada una vez cada vez que una tecla es presionada. El código keyCode de la tecla presionada es almacenado en la variable keyCode. Para las teclas sin valor ASCII, usa la variable keyCode.  Puedes comprobar si la variable keyCode es igual a BACKSPACE, DELETE, ENTER, RETURN, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. Para las teclas con valor ASCII que son presionadas, el valor es almacenado en la variable key. Sin embargo, no distingue entre letras mayúsculas y minúsculas. Por esta razón, es recomendable usar la función keyTyped() para leer la variable key, que sí distingue entre mayúsculas y minúsculas. Por la forma en que los sistemas operativos manejan la repetición de teclas, mantener presionada una tecla puede causar múltiples llamadas a keyTyped() (y también keyReleased()). La tasa de repetición es definida por el sistema operativo y según cómo cada computador está configurado. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
        "For non-ASCII keys, use the keyCode variable. You can check if the keyCode equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.",
        "For ASCII keys, the key that was pressed is stored in the key variable. However, it does not distinguish between uppercase and lowercase. For this reason, it is recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the case of the variable will be distinguished.",
        "Because of how operating systems handle key repeats, holding down a key may cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyReleased": {
      "description": [
        "La función keyReleased() es llamada una vez cada vez que una tecla es soltada. Ver key y keyCode para más información. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyTyped": {
      "description": [
        "la función keyTyped es llamada cava vez que una tecla es presionada, excepto cuando son presionadas la steclas de acción como Ctrl, Shift y Alt, que son ignoradas. La tecla presionada más reciente será almacenada en la variable key. Por la forma en que los sistemas operativos manejan la repetición de teclas, mantener presionada una tecla puede causar múltiples llamadas a keyTyped() (y también keyReleased()). La tasa de repetición es definida por el sistema operativo y según cómo cada computador está configurado. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por teclas. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método.",
        "Because of how operating systems handle key repeats, holding down a key will cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyIsDown": {
      "description": [
        "La función keyIsDown() comprueba si la tecla está presionada. Puede ser usada si tienes un objeto que se mueve, y quieres que varias teclas sean capaces de afectar este comportamiento de manera simultánea, como cuando mueves una imagen de forma diagonal. Puedes ingresar cualquier número representando el código de tecla keyCode de la tecla, o usar cualquier de los nombres de la variable keyCode."
      ],
      "returns": "el objeto p5",
      "params": {
        "code": "Número: la tecla a buscar"
      }
    },
    "movedX": {
      "description": [
        "The variable movedX contains the horizontal movement of the mouse since the last frame"
      ]
    },
    "movedY": {
      "description": [
        "The variable movedY contains the vertical movement of the mouse since the last frame"
      ]
    },
    "mouseX": {
      "description": [
        "La variable de sistema mouseX siempre contiene la posición horizontal actual del ratón, relativa al origen (0, 0) del lienzo."
      ]
    },
    "mouseY": {
      "description": [
        "La variable de sistema mouseY siempre contiene la posición vertical actual del ratón, relativa al origen (0, 0) del lienzo."
      ]
    },
    "pmouseX": {
      "description": [
        "La variable de sistema pmouseX siempre contiene la posición horizontal actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) del lienzo."
      ]
    },
    "pmouseY": {
      "description": [
        "La variable de sistema pmouseY siempre contiene la posición vertical actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) del lienzo."
      ]
    },
    "winMouseX": {
      "description": [
        "La variable de sistema winMouseX siempre contiene la posición horizontal actual del ratón, relativa al origen (0, 0) de la ventana del navegador."
      ]
    },
    "winMouseY": {
      "description": [
        "La variable de sistema winMouseY siempre contiene la posición vertical actual del ratón, relativa al origen (0, 0) de la ventana del navegador."
      ]
    },
    "pwinMouseX": {
      "description": [
        "La variable de sistema pwinMouseX siempre contiene la posición horizontal actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) de la ventana del navegador."
      ]
    },
    "pwinMouseY": {
      "description": [
        "La variable de sistema pwinMouseY siempre contiene la posición vertical actual del ratón, en el cuadro anterior al actual, relativa al origen (0, 0) de la ventana del navegador."
      ]
    },
    "mouseButton": {
      "description": [
        "P5.js automáticamente rastrea si el botón del ratón está presionado y cuál botón está presionado. El valor de la variable de sistema mouseButton es o LEFT, RIGHT o CENTER dependiendo de cual fue el último botón presionado. Advertencia: diferentes navegadores pueden diferir."
      ]
    },
    "mouseIsPressed": {
      "description": [
        "La variable boolean de sistema mouseIsPressed es verdadera (true) si el ratón está siendo presionado, y falsa (false) en caso contrario."
      ]
    },
    "mouseMoved": {
      "description": [
        "La función mouseMoved() es llamada cada vez que el ratón se mueve y un botón del ratón no está siendo presionado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseDragged": {
      "description": [
        "La función mouseDragged() es llamada cada vez que el ratón se mueve y un botón del ratón está siendo presionado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mousePressed": {
      "description": [
        "La función mousePressed() es llamada cada vez que un botón del ratón está siendo presionado. La variable mouseButton (ver la referencia) puede ser usada para determinar cual botón está siendo presionado. Si no se define una función mousePressed(), la función touchStarted() será llamada en su reemplazo, si es que está definida. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseReleased": {
      "description": [
        "La función mouseReleased() es llamada cada vez que un botón del ratón es soltado. Si no se define una función mouseReleased(), la función touchEnded() será llamada en su reemplazo, si es que está definida. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseClicked": {
      "description": [
        "La función mouseClicked() es llamada cada vez que un botón del ratón es presionado y luego soltado. Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "doubleClicked": {
      "description": [
        "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event listener has detected a dblclick event which is a part of the DOM L3 specification. The doubleClicked event is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element. For more info on the dblclick event refer to mozilla's documentation here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>"
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseWheel": {
      "description": [
        "La función mouseWheel() es llamada cada vez que se detecta un evento de rueda de ratón vertical, ya sea gatillado por un ratón o por un touchpad. La propiedad event.delta retorna el monto que el ratón ha avanzado. Estos valores pueden ser positivos o negativos, dependiendo de la dirección de navegación (en OS X con natural scrolling, los signos son invertidos).  Los navegadores pueden tener comportamientos por defecto asociados a distintos eventos del ratón. Para prevenir cualquier comportamiento por defecto, añade return false como última línea de este método. Debido al soporte actual del evento wheel en Safari, la función podría solo funcionar si return false es incluido cuando se usa Safari."
      ],
      "params": {
        "event": "Object: (Optional) optional WheelEvent callback argument."
      }
    },
    "requestPointerLock": {
      "description": [
        "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a> locks the pointer to its current position and makes it invisible. Use <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since the last call of draw. Note that not all browsers support this feature. This enables you to create experiences that aren't limited by the mouse moving out of the screen even if it is repeatedly moved into one direction. For example, a first person perspective experience."
      ]
    },
    "exitPointerLock": {
      "description": [
        "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a> exits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a> for example to make ui elements usable etc"
      ]
    },
    "touches": {
      "description": [
        "The system variable touches[] contains an array of the positions of all current touch points, relative to (0, 0) of the canvas, and IDs identifying a unique touch as it moves. Each element in the array is an object with x, y, and id properties.",
        "The touches[] array is not supported on Safari and IE on touch-based desktops (laptops)."
      ]
    },
    "touchStarted": {
      "description": [
        "La función touchStarted() es llamada una vez, cada vez que un toque nuevo es registrado. Si la función touchStarted() no ha sido definida, la función mouseIsPressed() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchMoved": {
      "description": [
        "La función touchStarted() es llamada una vez, cada vez que es registrado el movimiento de un toque. Si la función touchMoved() no ha sido definida, la función mouseDragged() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchEnded": {
      "description": [
        "La función touchEnded() es llamada una vez, cada vez que un toque finaliza. Si la función touchEnded() no ha sido definida, la función mouseReleased() será llamada en su lugar, si es que está definida. Los navegadores tienen distintos comportamientos por defecto asociados a distintos eventos gatillados por toque. Para prevenir cualquier comportamiento por defecto para este evento, añade return false al final de este método."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "createImage": {
      "description": [
        "Crea una nueva p5.Image (el tipo de datos para almacenar imágenes). Esto provee un nuevo buffer de pixeles para jugar. Define el tamaño del buffer con los parámetros de ancho y altuar. .pixels da acceso a un arreglo conteniendo los valores de todos los pixeles en la ventana mostrada. Estos valores son números. Este arreglo es del tamaño (incluyendo un factor apropiado de pixelDensity) de la ventana mostrada x4, representando los valroes R, G, B, A en orden para cada pixel., moviendo de izquierda a derecha en cada fila, y luego bajando de columna. Ver .pixels para mayor información. Podría ser más simple usar set() y get(). Antes de acceder a los pixeles de una imagen, los datos deben ser cargados con la función loadPixels(). Después de que el arreglo de datos ha sido modificado, la función updatePixels() debe ejecutarse para actualizar los cambios.",
        ".<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels in the display window. These values are numbers. This array is the size (including an appropriate factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.",
        "Before accessing the pixels of an image, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ],
      "returns": "el objeto p5",
      "params": {
        "width": "Entero: ancho en pixeles",
        "height": "Entero: altura en pixeles"
      }
    },
    "saveCanvas": {
      "description": [
        "Graba el lienzo actual como una imagen. En Safari, esto abrirá la imagen en la ventana y el usuario deberá proveer su propio nombre de archivo. Otros navegadores o grabarán el archivo de inmediato, o abrirán una ventana de diálogo."
      ],
      "params": {
        "selectedCanvas": "Canvas seleccionado: una variable representando un canvas HTML5 específico (opcional)",
        "filename": "String",
        "extension": "String: jpg o png"
      }
    },
    "saveFrames": {
      "description": [
        "Captura una secuencia de cuadros que pueden ser usados para crear una película. Acepta una función callback. Por ejemplo, puedes querer mandar los cuadros a un servidor donde pueden ser almacenados o convertidos en una película. Si no se provee una función callback, el navegador abrirá varios diálogos tratando de descargar todas las imágenes que han sido creadas. Con una función callback provista, los datos de imagen no son grabados por defecto, sino que son pasados como argumento a la función callback como un arreglo de objetos, con el tamaño del arreglo siendo igual al número total de cuadros.",
        "Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation. To export longer animations, you might look into a library like <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>."
      ],
      "params": {
        "filename": "String:",
        "extension": "String: jpg o png",
        "duration": "Número: duración en segundos para grabar los cuadros",
        "framerate": "Número: tasa de cuadros por segundo a grabar",
        "callback": "Función: una función callback que será ejecutada para manejar los datos de imagen. Esta función deberá aceptar un arreglo como argumento. El arreglo contendrá el número especificado de cuadros como objetos. Cada objeto tiene tres propiedades: datos de imagen imageData, nombre del archivo y extensión"
      }
    },
    "loadImage": {
      "description": [
        "Carga una imagen desde una ruta de archivo y crea un objeto p5.Image. La imagen puede no estar inmediatamente disponible para render. Si quieres asegurarte que esté lista antes de hacer algo con ella, ubica la función loadImage() dentro de preload(). También puedes proveer una función callback para manejar la imagen cuando esté lista. La ruta a la imagen debe ser relativa al archivo HTML de tu bosquejo. Cargar desde una URL u otra ubicación remota podría estar bloqueado por las opciones de seguridad del navegador.",
        "The image may not be immediately available for rendering. If you want to ensure that the image is ready before doing anything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>. You may also supply a callback function to handle the image when it's ready.",
        "The path to the image should be relative to the HTML file that links in your sketch. Loading an image from a URL or other remote location may be blocked due to your browser's built-in security.",
        "You can also pass in a string of a base64 encoded image as an alternative to the file path. Remember to add \"data:image/png;base64,\" in front of the string."
      ],
      "returns": "el objeto p5",
      "params": {
        "path": "String: ruta de la imagen a cargar",
        "successCallback": "Función(p5.Image): función a ser llamada una vez que la imagen sea cargada. Le será pasado el objeto p5.Image",
        "failureCallback": "Función(evento): llamada con el evento error si es que la carga de la imagen falla."
      }
    },
    "image": {
      "description": [
        "Dibuja una imagen en el lienzo principal del bosquejo p5.js.",
        "This function can be used with different numbers of parameters. The simplest use requires only three parameters: img, x, and y—where (x, y) is the position of the image. Two more parameters can optionally be added to specify the width and height of the image.",
        "This function can also be used with all eight Number parameters. To differentiate between all these parameters, p5.js uses the language of \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the \"source image\" dimensions can be useful when you want to display a subsection of the source image instead of the whole thing. Here's a diagram to explain further: <img src=\"assets/drawImage.png\"></img>"
      ],
      "params": {
        "img": "p5.Image: la imagen a mostrar",
        "x": "Número: la coordenada x donde se ubicará la esquina superior de la imagen",
        "y": "Número: la coordenada y donde se ubicará la esquina superior de la imagen",
        "width": "Número: ancho de la imagen a dibujar",
        "height": "Número: altura de la imagen a dibujar",
        "dx": "Número: la coordenada x en el lienzo de destino donde se ubicará la esquina superior izquierda de la imagen",
        "dy": "Número: la coordenada y en el lienzo de destino donde se ubicará la esquina superior izquierda de la imagen",
        "dWidth": "Número: ancho de la imagen a dibujar en el lienzo de destino",
        "dHeight": "Número: altura de la imagen a dibujar en el lienzo de destino",
        "sx": "Número: la coordenada x de la esquina superior izquierda del subrectángulo de la imagen original a dibujar en el lienzo de destino",
        "sy": "Número: la coordenada y de la esquina superior izquierda del subrectángulo de la imagen original a dibujar en el lienzo de destino",
        "sWidth": "Número: el ancho del subrectángulo de la imagen original a dibujar en el lienzo de destino",
        "sHeight": "Número: la altura del subrectángulo de la imagen original a dibujar en el lienzo de destino"
      }
    },
    "tint": {
      "description": [
        "Define el valor de relleno para mostrar imágenes. Las imágenes pueden ser teñidas en colores específicos o hacerse transparentes al incluir un valor alpha. Para aplicar transparencia a una imagen sin afectar su color, usa blanco como color de teñido y especifica un valor alpha. Por ejemplo, tint(255, 128) hará una imagen 50% transparente (asumiendo el rango alpha por defecto entre 0 y 255, el que puede ser modificado con la función colorMode()). El valor del parámetro gris debe ser menor o igual al actual valor máximo según lo especificado por colorMode(). El valor máximo por defecto es 255.",
        "To apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, tint(255, 128) will make an image 50% transparent (assuming the default alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).",
        "The value for the gray parameter must be less than or equal to the current maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is 255."
      ],
      "params": {
        "v1": "Número|Arreglo: valor de gris, rojo o tinte (dependiendo del modo de color actual), o un arreglo de colores",
        "v2": "Número|Arreglo: valor de verde o saturación (dependiendo del modo de color actual)",
        "v3": "Número|Arreglo: valor de azul o brillo (dependiendo del modo de color actual)",
        "alpha": "Número|Arreglo: opacidad del fondo",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the tint color"
      }
    },
    "noTint": {
      "description": [
        "Remueve el valor actual de relleno para mostrar imágenes y revierte a mostrar las imágenes con sus colores originales."
      ]
    },
    "imageMode": {
      "description": [
        "Define el modo de imagen. Modifica la ubicación desde la que las imágenes son dibujadas, por medio de cambiar la manera en que los parámetros dados a image() son interpretados. El modo por defecto es imageMode(CORNER), que interpreta los paráemtros segundo y tercero de image() como la posición de la esquina superior izquierda de la imagen. Si se dan dos parámetros adicionales, son usados para definir el ancho y la altura la imagen. imageMode(CORNERS) interpreta los paráemtros segundo y tercero de image() como la ubicación de una esquina, y los parámetros cuarto y quinto como la ubicación de la esquina opuesta. imageMode(CENTER) interpreta los parámetros segundo y tercero de image() como el punto central de la imagen. Si dos parámetros adicionales son especificados, son usados para definir el ancho y la altura de la imagen.",
        "imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the location of one corner, and the fourth and fifth parameters as the opposite corner.",
        "imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the image's center point. If two additional parameters are specified, they are used to set the image's width and height."
      ],
      "params": {
        "mode": "Constante: puede ser CORNER, CORNERS, o CENTER"
      }
    },
    "pixels": {
      "description": [
        "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a> containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays will have more pixels[] (by a factor of pixelDensity^2). For example, if the image is 100x100 pixels, there will be 40,000. On a retina display, there will be 160,000.",
        "The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre>",
        "While the above method is complex, it is flexible enough to work with any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at any pixelDensity, but the performance may not be as fast when lots of modifications are made to the pixel array.",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a> function must be run to update the changes.",
        "Note that this is not a standard javascript array. This means that standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not work."
      ]
    },
    "blend": {
      "description": [
        "Copia una región de pixeles de una imagen a otra, usando un modo específico de mezcla para hacer la operación. Los modos disponibles de mezcla son: BLEND | DARKEST | LIGHTEST | DIFFERENCE | MULTIPLY| EXCLUSION | SCREEN | REPLACE | OVERLAY | HARD_LIGHT | SOFT_LIGHT | DODGE | BURN | ADD | NORMAL"
      ],
      "params": {
        "srcImage": "p5.Image: imagen fuente",
        "sx": "Entero: coordenada x de la esquina superior izquierda de la fuente",
        "sy": "Entero: coordenada y de la esquina superior izquierda de la fuente",
        "sw": "Entero: ancho de la imagen fuente",
        "sh": "Entero: altura de la imagen fuente",
        "dx": "Entero: coordenada x de la esquina superior izquierda del destino",
        "dy": "Entero: coordenada y de la esquina superior izquierda del destino",
        "dw": "Entero: ancho de la imagen destino",
        "dh": "Entero: altura de la imagen destino",
        "blendMode": "Constante: el modo de mezcla"
      }
    },
    "copy": {
      "description": [
        "Copia una región del lienzo a otra región del lienzo desde una imagen usada como el parámetro srcImage en el lienzo. Si la fuente y el destino no son del mismo tamaño, automáticamente redimensionará los pixeles de la fuente para calzar con la región especificada como destino."
      ],
      "params": {
        "srcImage": "p5.Image: imagen fuente",
        "sx": "Entero: coordenada x de la esquina superior izquierda de la fuente",
        "sy": "Entero: coordenada y de la esquina superior izquierda de la fuente",
        "sw": "Entero: ancho de la imagen fuente",
        "sh": "Entero: altura de la imagen fuente",
        "dx": "Entero: coordenada x de la esquina superior izquierda de destino",
        "dy": "Entero: coordenada y de la esquina superior izquierda de destino",
        "dw": "Entero: ancho de la imagen de destino",
        "dh": "Entero: altura de la imagen de destino"
      }
    },
    "filter": {
      "description": [
        "Aplica un filtro al lienzo. Las opciones posibles son: THRESHOLD, que convierte la imagen a pixeles blancos y negros dependiendo de si están arriba o abajo del umbral definido por el parámetro. El parámetro debe estar entre 0.0 (negro) y 1.0 (blanco). Si no se especifica ningún valor, el valor por defecto es 0.5. GRAY, convierte cualquier color en la imagen a un equivalente en la escala de grises, no tiene parámetros. OPAQUE, hace que el canal alpha sea totalmente opaco, no tiene parámetros. INVERT, hace que cada pixel tenga su valor inverso, no tiene parámetros. POSTERIZE, limita cada canal de la imagen a un número de colores especificado como parámetro. El parámetro puede definir entre 2 y 255 valores, pero los resultados más notorios se dan con valores bajos. BLUR, hace que la imagen sea borrosa con un proceso Gaussiano, siendo el parámetro el nivel de cuán borroso es el resultado, si no se usa ningún parámetro, el parámetro por defecto es 1, a mayores valores es más borroso el resultado. ERODE, reduce las áreas claras, no tiene parámetros. DILATE, aumenta las áreas claras, no tiene parámetros.",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used.",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used.",
        "INVERT Sets each pixel to its inverse value. No parameter is used.",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.",
        "ERODE Reduces the light areas. No parameter is used.",
        "DILATE Increases the light areas. No parameter is used.",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constante:",
        "filterParam": "Número: un parámetro opcional único a cada filtro, ver más arriba"
      }
    },
    "get": {
      "description": [
        "Retorna un arreglo de valores RGBA por cada pixel o toma una sección de una imagen. Si no especifican parámetros, se retorna la imagen entera. Usa los parámetros x e y para obtener el valor de un pixel. Toma una sección de la ventana mostrada si especificas los parámetros adicionales w y h. Cuando se obtiene una imagen, los parámetros x e y definen las coordenadas de la esquina superior izquierda de la imagen, sin importar el actual mode imagen definido por imageMode(). Si el pixel solicitado está fuera de la imagen, se retorna el valor [0, 0, 0, 255]. Para obtener los números escalados según los rangoes de color actuales y tomar en cuenta el modo de color según colorMode(), usa getColor() en vez de get(). Tomar el valor de un pixel con get(x, y) es fácil, pero no tan rápido como tomar los datos directamente desde pixels[]. La instrucción equivalente a get(x, y) usando pixels[] con densidad de pixeles d es  var off = (y width + x) d * 4; [pixels[off], pixels[off+1], pixels[off+2], pixels[off+3]]. Ver la referencia de pixels[] para mayor información.",
        "Returns an array of [R,G,B,A] values for any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Use the x and y parameters to get the value of one pixel. Get a section of the display window by specifying additional w and h parameters. When getting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.",
        "Getting the color of a single pixel with get(x, y) is easy, but not as fast as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is <pre><code class=\"language-javascript\">let x, y, d; // set these to the coordinates let off = (y * width + x) * d * 4; let components = [  pixels[off],  pixels[off + 1],  pixels[off + 2],  pixels[off + 3] ]; print(components);</code></pre>",
        "See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.",
        "If you want to extract an array of colors or a subimage from an p5.Image object, take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>"
      ],
      "returns": "Arreglo|p5.Image: valores de pixel en la posición (x, y) en formato arreglo RGBAs o p5.Image",
      "params": {
        "x": "Número: coordenada x del pixel",
        "y": "Número: coordenada y del pixel",
        "w": "Número: ancho",
        "h": "Número: altura"
      }
    },
    "loadPixels": {
      "description": [
        "Carga los datos de los pixeles en pantalla al arreglo pixels[]. Esta función siempre debe ser llamada antes de leer o escribir en el arreglo pixels[]"
      ]
    },
    "set": {
      "description": [
        "Cambia el color de cualquier pixel, o pone una imagen directamente en la ventana. Los parámetros x e y especifican el pixel a cambiar y c especifica el valor del color. Puede ser un objeto p5.Color o un arreglo de pixeles RGBA. También puede ser un valor único en escala de grises. Cuando se define una imagen, los parámetros x e y definen las coordenadas de la esquina superior izquierda de la imagen, sin importar el modo actual de imagen según imageMode(). Después de usar set(), debes llamar a updatePixels()' para que tus cambios aparezcan. Esta función debería ser llamada una vez que todos los pixeles han sido definidos. Definir el color de un solo pixel con set(x, y) es fácil, pero es tan rápido como poner los datos directamente en el arreglo pixels[]. Definir los valores de pixels[] directamente puede ser complicado cuando se trabaja con un monitor retina, pero tendrá un mejor desempeño cuando muchos pixeles necesiten ser definidos directamente en cada iteración. Ver la referencia de pixels[] para mayor información.",
        "After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear. This should be called once all pixels have been set, and must be called before calling .<a href=\"#/p5/get\">get()</a> or drawing the image.",
        "Setting the color of a single pixel with set(x, y) is easy, but not as fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a> values directly may be complicated when working with a retina display, but will perform better when lots of pixels need to be set directly on every loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information."
      ],
      "params": {
        "x": "Número: coordenada x del pixel",
        "y": "Número: coordenada y del pixel",
        "c": "Número|Arreglo|Objeto: inserta un valor en escala de grises | un arreglo de pixeles | un objeto p5.Color | un objeto p5.Image a copiar"
      }
    },
    "updatePixels": {
      "description": [
        "Actualiza la ventana mostrada con los datos del arreglo pixels[]. Se usa en conjunto con loadPixels(). Si solo estás leyendo pixeles desde el arreglo, no hay necesidad de llamar a updatePixels() - actualizar es solo necesario para aplicar cambios. updatePixels() debe ser llamada cada vez que el arreglo de pixeles es manipulado o si se llama a la función set()."
      ],
      "params": {
        "x": "Número: coordenada x de la esquina superior izquierda de la región a actualizar",
        "y": "Número: coordenada y de la esquina superior izquierda de la región a actualizar",
        "w": "Número: ancho de la región a actualizar",
        "h": "Número: altura de la región a actualizar"
      }
    },
    "loadJSON": {
      "description": [
        "Carga un archivo JSON desde un archivo o una URL, y retorna un objeto o un arreglo. Este método es asíncrono, lo que significa que puede que no termine antes que se ejecute la siguiente línea en tu bosquejo.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. JSONP is supported via a polyfill and you can pass in as the second argument an object with definitions of the json callback following the syntax specified <a href=\"https://github.com/camsong/ fetch-jsonp\">here</a>.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Objeto|Arreglo: datos JSON",
      "params": {
        "path": "String: nombre de archivo o URL a cargar",
        "jsonpOptions": "Object: (Optional) options object for jsonp related settings",
        "datatype": "Función: función a ser ejecutada después de que loadJSON() finalice, los datos son pasados como primer argumento",
        "callback": "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento",
        "errorCallback": "String: json o jsonp"
      }
    },
    "loadStrings": {
      "description": [
        "Lee los contenidos de un archivo y crea un arreglo de Strings de sus líneas individuales. Si el nombre del archivo es usado como parámetro, como en el ejemplo anterior, el archivo debe estar ubicado en el directorio del bosquejo. Alternativamente, el archivo puede ser cargado desde cualquier lugar del computador local usando una dirección absoluta (empieza con / en Unix y Linux, o una letra representando el disco en Windows), o el parámetro de nombre de archivo puede ser una URL donde esté el archivo dentro de una red. Este método es asíncrono, lo que significa que puede ser que su ejecución no termine antes de que se ejecute la siguiente línea del bosquejo.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Arreglo: un arreglo de Strings",
      "params": {
        "filename": "String: nombre de archivo o URL a cargar",
        "callback": "Función: función a ser ejecutada después de que loadStrings() finalice, el arreglo es pasado como primer argumento",
        "errorCallback": "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"
      }
    },
    "loadTable": {
      "description": [
        "Lee los contenidos de un archivo o URL y crea un objeto p5.Table con sus valores. Si un archivo es especificado, debe ser ubicado en el directorio data del bosquejo. El parámetro de nombre de archivo puede también ser una URL de un archivo en línea. Por defecto, se asume que el archivo está separado por comas (formato CSV), La tabla sólo busca una fila de encabezado si es que se incluye la opción header. Las opciones posibles incluyen: csv: se procesan los datos como valores separados por comas, tsv: se procesan los datos como separados por tabulación, header: la tabla tiene una fila de encabezados (títulos). Si se incluyenn múltiples opciones, se deben ingresar como parámetros separados por comas. Todos los archivos son cargados y grabados usando codificación UTF-8. Este método es asíncrono, lo que significa que su ejecución puede no haber terminado antes de que se ejecute la siguiente línea del bosquejo. Si se llama a loadTable() dentro de preload() se garantiza que se complete la operación antes de que setup() y draw() sean llamadas. Fuera de preload(), puedes suplir una función callback para manejar el objeto.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called. Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object:",
        "All files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Objeto Table conteniendo los datos",
      "params": {
        "filename": "String: nombre de archivo o URL a cargar",
        "extension": "String: (Optional) parse the table by comma-separated values \"csv\", semicolon-separated  values \"ssv\", or tab-separated values \"tsv\"",
        "header": "String: (Optional) \"header\" to indicate table has header row",
        "callback": "String|Strings: header, csv, tsv",
        "errorCallback": "Función: función a ser ejecutada después de que loadTable() finalice, el arreglo es pasado como primer argumento. Si es exitosa, el objeto Table es pasado como primer argumento, en caso contrario se pasa el valor boolean false."
      }
    },
    "loadXML": {
      "description": [
        "Lee los contenidos de un archivo y crea un objeto XML con sus valores. Si el nombre del archivo es usado como parámetro, el archivo debe estar ubicado en el directorio del bosquejo. Alternativamente, el archivo puede ser cargado desde cualquier lugar del computador local usando una dirección absoluta (que empieza con / en Unix y Linux, o con una letra que simbolice el disco duro en Windows). También se puede usar como parámetro de nombre de archivo una URL para un archivo en una red. Este método es asíncrono, lo que significa que su ejecución puede no estar completa antes de que se ejecute la siguiente línea de código en el bosquejo. Llamar a loadXML() dentro de preload() garantiza que la operación se complete antes de que setup() y draw() sean llamados. Fuera de preload(), puedes suplir una función callBack para manejar el objeto.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.",
        "Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "objeto XML que contiene los datos",
      "params": {
        "filename": "String: nombre de archivo o URL a cargar",
        "callback": "Función: función a ser ejecutada después de que loadXML() finalice, el objeto XML es pasado como primer argumento",
        "errorCallback": "Función: la función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"
      }
    },
    "loadBytes": {
      "description": [
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: an object whose 'bytes' property will be the loaded buffer",
      "params": {
        "file": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>  completes",
        "errorCallback": "Function: (Optional) function to be executed if there  is an error"
      }
    },
    "httpGet": {
      "description": [
        "Método para ejecutar una solicitud HTTP GET. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto."
      ],
      "returns": "el objeto p5",
      "params": {
        "path": "String: nombre del archivo o URL a cargar",
        "datatype": "Objeto: parámetro de datos pasados con la solicitud enviada",
        "data": "String: json, jsonp, xml o text",
        "callback": "Función: función a ser ejecutada después de que httpGet() finalice, los datos son pasados como primer argumento",
        "errorCallback": "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"
      }
    },
    "httpPost": {
      "description": [
        "Método para ejecutar una solicitud HTTP POST. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto."
      ],
      "returns": "el objeto p5",
      "params": {
        "path": "String: nombre del archivo o URL a cargar",
        "datatype": "Objeto: parámetro de datos pasados con la solicitud enviada",
        "data": "String: json, jsonp, xml o text",
        "callback": "Función: función a ser ejecutada después de que httpPost() finalice, los datos son pasados como primer argumento",
        "errorCallback": "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento"
      }
    },
    "httpDo": {
      "description": [
        "Método para ejecutar una solicitud HTTP. Si no se especifica el tipo de datos, p5 tratará de adivinar basándose en la URL, usando texto por defecto. También puedes pasar un objeto especificando todos los parámetros de la solicitud siguiendo los ejemplos dentro de las llamadas de reqwest()"
      ],
      "returns": "el objeto p5",
      "params": {
        "path": "String: nombre del archivo o URL a cargar",
        "method": "Objeto: parámetro de datos pasados con la solicitud enviada",
        "datatype": "String: json, jsonp, xml o text",
        "data": "Función: función a ser ejecutada después de que httpDo() finalice, los datos son pasados como primer argumento",
        "callback": "Función: función a ser ejecutada si es que hay un error, la respuesta es pasada como primer argumento",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument",
        "options": "Object: Request object options as documented in the  \"fetch\" API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>"
      }
    },
    "createWriter": {
      "returns": "p5.PrintWriter:",
      "params": {
        "name": "String: name of the file to be created",
        "extension": "String (Optional)"
      }
    },
    "save": {
      "description": [
        "Graba una imagen, text, json, csv, wav o html. Hace que la descarga ocurra en el computador cliente. Notar que no es recomendado llamar a save() dentro de draw() si está en bucle, porque la función save() abrirá una ventana de diálogo en cada cuadro. El comportamiento por defecto es grabar el lienzo como una imagen. Puedes opcionalmente especificar un nombre de archivo. Por ejemplo: TODO. Alternativamente, el primer parámetro puede ser un puntero a un lienzo p5.Element, un arreglo de Strings, un arreglo de JSON, un objeto JSON, un p5.Table, un p5.Image, o un p5.SoundFile (requiere p5.sound). El segundo parámetro es el nombre del archivo (incluyendo la extensión). El tercer parámetro es para opciones específicas a este tipo de objeto. Este método grabará un archivo que se austa a los parámetros dados. Por ejemplo: TODO."
      ],
      "params": {
        "objectOrFilename": "Objeto|String: si se provee un nombre de archivo, se grabará el lienzo como una imagen con la extensión png o jpg, dependiendo del nombre del archivo. Si se provee un objeto, se grabará dependiendo del objeto y el nombre del archivo (ver los ejemplos anteriores)",
        "filename": "String: Si se provee un objeto como el primer parámetro, entonces el segundo parámetro indica el nombre del archivo, y debe incluir la extensión apropiada (ver los ejemplos anteriores).",
        "options": "Boolean|String: opciones adicionales depndiendo del tipo de archivo. Por ejemplo, cuando se graba un archivo JSON, true indica que la salida será optimizada según el tamaño del archivo, en vez de por legibilidad."
      }
    },
    "saveJSON": {
      "description": [
        "Escribe los contenidos de un arreglo o un objeto JSON a un archivo .json. El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web."
      ],
      "params": {
        "json": "Arreglo|Objeto:",
        "filename": "String",
        "optimize": "Boolean: si es verdadero (true), remueve los saltos de línea del archivo de salida para optimizar el tamaño del archivo, en desmedro de la legibilidad."
      }
    },
    "saveStrings": {
      "description": [
        "Escribe un arreglo de Strings a un archivo de texto, una línea por String. El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web."
      ],
      "params": {
        "list": "Arreglo: arreglo de Strings a ser escrito",
        "filename": "String: nombre del archivo de salida",
        "extension": "String: (Optional) the filename's extension",
        "isCRLF": "Boolean: (Optional) if true, change line-break to CRLF"
      }
    },
    "saveTable": {
      "description": [
        "Escribe los contenidos de un objeto Table a un archivo. Por defecto es un archivo de texto con valores separados por coma (csv), pero también puede usar separación por tabulación (tsv), o generar una tabla HTML (html). El proceso de grabación del archivo y su ubicación pueden variar entre navegadores web."
      ],
      "params": {
        "Table": "p5.Table: the <a href=\"#/p5.Table\">Table</a> object to save to a file",
        "filename": "String: el nombre del archivo en el que Table será grabado",
        "options": "String: puede ser tsv, csv o html."
      }
    },
    "abs": {
      "description": [
        "Calcula el valor absoluto (magnitud) de un número. Usa Math.abs(). El valor absoluto de un número es siempre positivo."
      ],
      "returns": "Número: valor absoluto del número dado",
      "params": {
        "n": "Número: número a computar"
      }
    },
    "ceil": {
      "description": [
        "Calcula el entero más cercano que es mayor o igual que el valor del parámetro. Usa Math.ceil(). Por ejemplo, ceil(9.03) retorna el valor 10."
      ],
      "returns": "Número: número redondeado hacia arriba",
      "params": {
        "n": "Número: número a redondear"
      }
    },
    "constrain": {
      "description": [
        "Restringe un valor a estar entre un valor mínimo y uno máximo."
      ],
      "returns": "Número: número restringido",
      "params": {
        "n": "Número: número a restringir",
        "low": "Número: límite mínimo",
        "high": "Número: límite máximo"
      }
    },
    "dist": {
      "description": [
        "Calcula la distancia entre dos puntos"
      ],
      "returns": "Número: distancia entre los dos puntos",
      "params": {
        "x1": "Número: la coordenada x del primer punto",
        "y1": "Número: la coordenada y del primer punto",
        "x2": "Número: la coordenada x del segundo punto",
        "y2": "Número: la coordenada y del segundo punto",
        "z1": "Número: la coordenada z del primer punto",
        "z2": "Número: la coordenada z del segundo punto"
      }
    },
    "exp": {
      "description": [
        "Retorna el número de Euler (2.71828...) elevado al parámetro n. Usa Math.exp()."
      ],
      "returns": "e^n",
      "params": {
        "n": "Número: exponente a elevar"
      }
    },
    "floor": {
      "description": [
        "Calcula el valor entero más cercano que es menor o igual al parámetro. Usa Math.floor()."
      ],
      "returns": "Número: número redondeado hacia abajo",
      "params": {
        "n": "Número: número a ser redondeado hacia abajo"
      }
    },
    "lerp": {
      "description": [
        "Calcula un número entre dos números a un incremento específico. El parámetro amt es la cantidad a interpolar entre los dos valores donde 0.0 es igual al primer punto, 0.1 está muy cerca del primer punto, 0.5 está a medio camino entre ambos números, etc. La función lerp es conveniente para crear movimiento a lo largo de un camino recto y para dibujar líneas punteadas."
      ],
      "returns": "Número: valor interpolado",
      "params": {
        "start": "Número: primer valor",
        "stop": "Número: segundo valor",
        "amt": "Número: número entre 0.0 y 1.0"
      }
    },
    "log": {
      "description": [
        "Calcula el logaritmo natural (logaritmo con base e) de un número. Esta función espera que el parámetro n sea de un valor más grande que 0.0. Usa Math.log()."
      ],
      "returns": "Número: logaritmo naturla de n",
      "params": {
        "n": "Number: number greater than 0"
      }
    },
    "mag": {
      "description": [
        "Calcula la magnitud (o tamaño) de un vector. Un vector es una dirección en el espacio comúnmente usada en gráfica computacional y álgebra lineal. Como no tiene posición de inicio, la magnitud del vector puede ser pensada como la distancia entre la coordenada 0,0 a su valor x,y. Por lo tanto, mag() es un atajo a escribir dist(0, 0, x, y)."
      ],
      "returns": "Número: magnitud del vector entre (0, 0) y (a, b)",
      "params": {
        "a": "Número: primer valor",
        "b": "Número: segundo valor"
      }
    },
    "map": {
      "description": [
        "Escala un nombre de un rango a otro rango. En el primer ejemplo anterior, el número 25 es convertido de un valor en el rango entre 0 y 100 a un valor cuyo rango está entre el borde izquierdo de la ventana (0) y el borde derecho (ancho).",
        "In the first example above, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width)."
      ],
      "returns": "Número: número escalado",
      "params": {
        "value": "Número: el valor a ser convertido",
        "start1": "Número: límite inferior del rango actual",
        "stop1": "Número: límite superior del rango actual",
        "start2": "Número: límite inferior del rango deseado",
        "stop2": "Número: límite superior del rango deseado",
        "withinBounds": "Boolean: (Optional) constrain the value to the newly mapped range"
      }
    },
    "max": {
      "description": [
        "Determina el valor más grande en una secuencia de números, y luego retorna ese valor. max() acepta cualquier número de parámetros tipo número, o un arreglo de cualquier largo."
      ],
      "returns": "Número: número máximo",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Número|Arreglo: números a comparar"
      }
    },
    "min": {
      "description": [
        "Determina el valor más pequeño en una secuencia de números, y luego retorna ese valor. max() acepta cualquier número de parámetros tipo número, o un arreglo de cualquier largo."
      ],
      "returns": "Número: número mínimo",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Número|Arreglo: números a comparar"
      }
    },
    "norm": {
      "description": [
        "Normaliza un número de un rango a otro rango entre 0 y 1. Es idéntico a map(value, low, high, 0, 1). Los números fuera del rango no son saturados a 0 o 1, porque los números fuera de rango son muchas veces intencionales y útiles (ver el segundo ejemplo más arriba)"
      ],
      "returns": "Número: número normalizado",
      "params": {
        "value": "Número: valor entrante a ser normalizado",
        "start": "Número: límite inferior del rango actual",
        "stop": "Número: límite superior del rango actual"
      }
    },
    "pow": {
      "description": [
        "Facilita las expresiones exponenciales. La función pow() es una manera eficiente de multiplicar números po sí mismos (o sus recíprocos) en grandes cantidades. Por ejemplo, pow(3, 5) es equivalente a la expresión 3*3*3*3*3 y pow (3, -5) es equivalente a 1/3*3*3*3*3. Usa Math.pow()."
      ],
      "returns": "n^e",
      "params": {
        "n": "Número: base de la expresión exponencial",
        "e": "Número: potencia a la que se eleva la base"
      }
    },
    "round": {
      "description": [
        "Calcula el entero más cercano al parámetro n. Por ejemplo, round(133.8) retorna el valor 134. Usa la función Math.round()."
      ],
      "returns": "Número: número redondeado",
      "params": {
        "n": "Número: número a redondear",
        "decimals": "Number: (Optional) number of decimal places to round to, default is 0"
      }
    },
    "sq": {
      "description": [
        "Eleva al cuadrado un número (lo multiplica por sí mismo), El resultado es siempre un número positivo, porque multiplicar dos números negativos siempre resulta en un número positivo."
      ],
      "returns": "Número: número elevado al cuadrado",
      "params": {
        "n": "Número: número a elevar al cuadrado"
      }
    },
    "sqrt": {
      "description": [
        "Calcula la raíz cuadrada de un número. La raíz cuadrada de un número es siempre positiva, aunque puede haber una raíz cuadrada válida que sea negativa. La raíz cuadrada s de un número a es tal que s*s = a. Es lo opuesto a elevar al cuadrado. Usa Math.sqrt()."
      ],
      "returns": "Número: raíz cuadrada del número",
      "params": {
        "n": "Número: número no negativo al que se le calcula la raíz cuadrada"
      }
    },
    "fract": {
      "description": [
        "Calculates the fractional part of a number."
      ],
      "returns": "Number: fractional part of x, i.e, {x}",
      "params": {
        "num": "Number: Number whose fractional part needs to be found out"
      }
    },
    "createVector": {
      "description": [
        "Crea un nuevo objeto p5.Vector (el tipo de datos para almacenar vectores). Esto provee un vector de dos o tres dimensiones, específicamente un vector euclideano (también conocido como geométrico). Un vector es una entidad que tiene tanto magnitud como dirección."
      ],
      "returns": "p5.Vector",
      "params": {
        "x": "Número: componente x del vector",
        "y": "Número: componente y del vector",
        "z": "Número: componente z del vector"
      }
    },
    "noise": {
      "description": [
        "Retorna el valor del ruido Perlin en las coordenadas específicas. El ruido Perlin es un generador de secuencias aleatorias produciendo una sucesión de números más naturalmente ordenada y armónica, en comparación con la función estándar random(). Fue inventada por Ken Perlin en los 1980s y ha sido usada desde entonces en aplicaciones gráficas para producir texturas procedurales, movimiento natural, figuras, terrenos, etc. La principal diferencia con la función random() es definida en una espacio infinito n-dimensional donde cada par de coordenadas corresponde a un valor fijo semi-aleatorio (fijado solo durante el tiempo de vida del programa; ver la función noiseSeed()). p5.js puede calcular ruido 1D, 2D y 3D, dependiendo del número de coordenadas dado. El valor resultante siempre estará entre 0.0 y 1.0. El valor de ruido puede ser animado moviéndose a través del espacio del ruido como fue demostrado en el ejemplo superior. Las dimensiones segunda y tercera también pueden ser interpretadas como tiempo. El ruido está estructurado de forma similar a una señal de audio, con respecto al uso de la función de las frecuencias. De forma similar al conecpto de armónicas en física, el ruido Perlin es calculado a lo largo de varias octavas que se han sumado para dar forma al resultado final. Otra manera de ajustar el caracter de la secuencia resultante es la escala de las coordenadas de entrada. Como la función trabaja en un espacio infinito, el valor de las coordenadas no importa como tal, solo la distancia entre las coordenadas sucesivas importa (por ejemplo: cuando se usa noise() dentro de un bucle). Como regla general, a menor la diferencia entre coordenadas, más suave es el ruido resultante. Pasos entre 0.005 y 0.03 funcionan mejor para la mayor parte de las aplicaciones, pero esto diferirá dependiendo del uso."
      ],
      "returns": "valor de ruido Perlin (entre 0 y 1) en las coordenadas especificadas",
      "params": {
        "x": "Número: coordenada x en el espacio del ruido",
        "y": "Número: coordenada y en el espacio del ruido",
        "z": "Número: coordenada z en el espacio del ruido"
      }
    },
    "noiseDetail": {
      "description": [
        "Ajusta el caracter y nivel de detalle producido por la función de ruido Perlin. Similar al concepto de armónicas en física, el ruido es calculado a lo largo de varias octavas. Las octavas más graves contribuyen de forma más significativa a la señal de salida y como define la intensidad general del ruido, mientras que las octavas más altas crean detalles más finos en la secuencia de ruido. Por defecto, el ruido es calculado a lo largo de 4 octavas, con cada octava contribuyendo exactamente la mitad que su predecesora, partiendo con una intensidad de 50% para la primera octava. Este tamaño de caída puede ser cambiado al añadir un parámetro adicional a la función. Por ejemplo, un factor de caída de 75% significa que cada octava tendrá un 75% de impacto (25% menos) que la octava anterior. Cualquier valor entre 0.0 y 1.0 es válido, sin embargo nota que valores superiores a 0.5 pueden resultar en que noise() retorne valores mayores a 1.0. Al cambiar estos parámetros, la señal creada por noise() puede ser adaptada para calzar con necesidades y características específicas."
      ],
      "params": {
        "lod": "Número: número de octavas a ser usadas por el ruido",
        "falloff": "Número: factor de caída para cada octava"
      }
    },
    "noiseSeed": {
      "description": [
        "Define el valor semilla para la función noise(). Por defecto, noise() produce diferentes resultados cada vez que el programa es ejecutado. Defines el parámetro value a una constante para que retorne la misma secuencia de números pseudo-aleatorios cada vez que el programa es ejecutado"
      ],
      "params": {
        "seed": "Número: el valor semilla"
      }
    },
    "randomSeed": {
      "description": [
        "Define la semilla para la función random(). Por defecto, la función random() produce diferentes resultados cada vez que el programa es ejecutado. Definir el parámetro semilla como una constante hace que retorne la misma secuencia de números pseudo-aleatorios cada vez que el programa es ejecutado.",
        "By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Número: el valor semilla"
      }
    },
    "random": {
      "description": [
        "Retorna un número aleaotorio de tipo float (punto flotante). Acepta 0, 1 o 2 argumentos. Si no se le da un argumento, retorna un número aleatorio entre 0 y 1 (sin incluir 1). Si se da un argumento y es un número, retorna un número aleatorio entre 0 y hasta (pero sin incluir) el parámetro. Si se da un argumento y es un arreglo, retorna una elemento al azar del arreglo. Si se dan dos argumentos, retorna un número aleatorio entre el primer argumento y hasta (pero sin incluir) el segundo argumento.",
        "Takes either 0, 1 or 2 arguments.",
        "If no argument is given, returns a random number from 0 up to (but not including) 1.",
        "If one argument is given and it is a number, returns a random number from 0 up to (but not including) the number.",
        "If one argument is given and it is an array, returns a random element from that array.",
        "If two arguments are given, returns a random number from the first argument up to (but not including) the second argument."
      ],
      "returns": "Número: el número aleatorio o un elemento aleatorio de un conjunto de opciones",
      "params": {
        "min": "Número: el límite inferior (inclusivo)",
        "max": "Número: el límite superio (exclusivo)",
        "choices": "Arreglo: el arreglo del cual se elige"
      }
    },
    "randomGaussian": {
      "description": [
        "Retorna un número aleatorio ajjustado a una distribución Gaussiana o normal. No existe teóricamente un valor mínimo o máximo que la función randomGaussian() pueda retornar. En vez de eso, existe solo una muy baja probabilidad de retornar valores lejos de la media, y una alta probabilidad de retornar números cercanos a la media. Acepta 0, 1 o 2 argumentos. Si no tiene argumentos, retorna una media de 0 y una desviación estándar de 1. Si tiene un argumento, el argumento es la media (y la desviación estándar es 1). Si tiene dos argumentos, el primero es la media y el segundo es la desviación estándar."
      ],
      "returns": "el número aleatorio",
      "params": {
        "mean": "Número: la media",
        "sd": "Número: la desviación estándar"
      }
    },
    "acos": {
      "description": [
        "El inverso de la función cos(), retorna el arcocoseno de un valor. Esta función espera valores entre -1 y 1 y los valores retornados están en el rango entre 0 y PI (3.1415927)."
      ],
      "returns": "Número: el arcocoseno del valor",
      "params": {
        "value": "Número: el valor al que se aplica arcocoseno"
      }
    },
    "asin": {
      "description": [
        "El inverso de la función sin(), retorna el arcoseno de un valor. Esta función espera valores entre -1 y 1 y los valores retornados están en el rango entre -PI/2  y PI/2 ."
      ],
      "returns": "Número: el arcoseno del valor",
      "params": {
        "value": "Número: el valor al que se aplica arcoseno"
      }
    },
    "atan": {
      "description": [
        "El inverso de la función tan(), retorna el arcotangente de un valor. Esta función espera valores entre -Infinito e Infinito (exclusivo) y los valores retornados están en el rango entre -PI/2  y PI/2 ."
      ],
      "returns": "Número: el arcotangente del valor",
      "params": {
        "value": "Número: el valor al que se aplica arcotangente"
      }
    },
    "atan2": {
      "description": [
        "Calcula el ángulo (en radianes) desde un punto específico al origen, medido desde el eje x positivo. Los valores retornados son de tipo float entre  -PI/2  y PI/2. La función atan2() es más frecuentemente usada para orientar figuras figuras geométricas según la posición del cursor. Nota: la coordenada y del punto es el primer parámetro, y la coordenada x es el segundo parámetro, debido a la estructura para calcular la tangente.",
        "Note: The y-coordinate of the point is the first parameter, and the x-coordinate is the second parameter, due the the structure of calculating the tangent."
      ],
      "returns": "Número: el arcotangente del punto dado",
      "params": {
        "y": "Número: coordenada y del punto",
        "x": "Número: coordenada x del punto"
      }
    },
    "cos": {
      "description": [
        "calcula el coseno de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1."
      ],
      "returns": "Número: el coseno del ángulo",
      "params": {
        "angle": "Número: el ángulo"
      }
    },
    "sin": {
      "description": [
        "calcula el seno de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1."
      ],
      "returns": "Número: el seno del ángulo",
      "params": {
        "angle": "Número: el ángulo"
      }
    },
    "tan": {
      "description": [
        "calcula la tangente de un ángulo. Esta función toma en cuenta el modo actual de ángulo según angleMode(). Los valores son retornados en el rango entre -1 y 1."
      ],
      "returns": "Número: la tangente del ángulo",
      "params": {
        "angle": "Número: el ángulo"
      }
    },
    "degrees": {
      "description": [
        "Convierte una medida en radianes a su correspondiente valor en grados. Radianes y grados son dos maneras de calcular lo mismo. Hay 360 grados en un círculo y 2*PI radianes en un círculo. Por ejemplo, 90 grados equivalen a PI/2 radianes."
      ],
      "returns": "el ángulo convertido",
      "params": {
        "radians": "Número: valor en radianes a ser convertido a grados."
      }
    },
    "radians": {
      "description": [
        "Convierte una medida en grados a su correspondiente valor en radianes. Radianes y grados son dos maneras de calcular lo mismo. Hay 360 grados en un círculo y 2*PI radianes en un círculo. Por ejemplo, 90 grados equivalen a PI/2 radianes."
      ],
      "returns": "el ángulo convertido",
      "params": {
        "degrees": "Número: valor en grados a ser convertido a radianes."
      }
    },
    "angleMode": {
      "description": [
        "Define el modo actual de p5 para interpretar ángulos. El modo por defecto es en RADIANS (radianes)."
      ],
      "params": {
        "mode": "CONSTANTE: puede ser RADIANS (radianes) o DEGREES (grados)"
      }
    },
    "textAlign": {
      "description": [
        "Define el alineamiento actual para dibujar texto. Acepta dos argumentos: horizAlign(LEFT, CENTER o RIGHT) y vertAlign(TOP, BOTTOM, CENTER, o BASELINE). El parámetro horizAlign se refiere al valor x de la función text(), mientras que vel parámetro vertAlign al valor y. Así que si escribes textAlign(LEFT), estás alineando el borde izquierdo de tu texto al valor x dado en la función text(). Si escribes textAlign(RIGHT, TOP), estás alineando el borde derecho de tu texto con el valor x y el borde superior con el valor y del texto.",
        "The horizAlign parameter is in reference to the x value of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is in reference to the y value.",
        "So if you write textAlign(LEFT), you are aligning the left edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you write textAlign(RIGHT, TOP), you are aligning the right edge of your text to the x value and the top of edge of the text to the y value."
      ],
      "params": {
        "horizAlign": "Constante: alineamiento horizontal, puede ser LEFT, CENTER o RIGHT",
        "vertAlign": "Constante: alineamiento vertical, puede ser TOP, BOTTOM, CENTER o BASELINE"
      }
    },
    "textLeading": {
      "description": [
        "Define o retorna el espaciado, en pixeles, entre líneas de texto. Esta configuración será usada en todas las llamadas posteriores a la función text()."
      ],
      "params": {
        "leading": "Número: el tamaño en pixeles de espaciamiento entre líneas"
      }
    },
    "textSize": {
      "description": [
        "Define o retorna el tamaño actual de la tipografía. Este tamaño será usado en todas las llamadas posteriores a la función text(). El tamaño de la tipografía es medido en pixeles."
      ],
      "params": {
        "theSize": "Número: el tamaño en pixeles de las letras en pixeles"
      }
    },
    "textStyle": {
      "description": [
        "Define o retorna el estilo actual de la tipografía. Puede ser NORMAL (normal), ITALIC (cursivo) o BOLD (destacado). Notar que puede ser anulado por estilo CSS. Para tipografías que no sean de sistema (opentype, truetype, etc.), usa loadFont()."
      ],
      "params": {
        "theStyle": "Número|Constante: estilo del texto, puede ser NORMAL, ITALIC o BOLD"
      }
    },
    "textWidth": {
      "description": [
        "Calcula y retorna el ancho de cualquier caracter o string."
      ],
      "returns": "Número",
      "params": {
        "theText": "String: el String de caracteres a medir"
      }
    },
    "textAscent": {
      "description": [
        "Returns the ascent of the current font at its current size. The ascent represents the distance, in pixels, of the tallest character above the baseline."
      ],
      "returns": "Number:"
    },
    "textDescent": {
      "description": [
        "Returns the descent of the current font at its current size. The descent represents the distance, in pixels, of the character with the longest descender below the baseline."
      ],
      "returns": "Number:"
    },
    "textWrap": {
      "description": [
        "Specifies how lines of text are wrapped within a text box. This requires a max-width set on the text area, specified in <a href=\"#/p5/text\">text()</a> as parameter <code>x2</code>.",
        "WORD wrap style only breaks lines at spaces. A single string without spaces that exceeds the boundaries of the canvas or text area is not truncated, and will overflow the desired area, disappearing at the canvas edge.",
        "CHAR wrap style breaks lines wherever needed to stay within the text box.",
        "WORD is the default wrap style, and both styles will still break lines at any line breaks (<code>\\n</code>) specified in the original text. The text area max-height parameter (<code>y2</code>) also still applies to wrapped text in both styles, lines of text that do not fit within the text area will not be drawn to the screen."
      ],
      "returns": "String: wrapStyle",
      "params": {
        "wrapStyle": "Constant: text wrapping style, either WORD or CHAR"
      }
    },
    "loadFont": {
      "description": [
        "Carga un archivo de fuente de letra (.otf, .ttf) desde un archivo o URL, y retorna un objeto PFont. Este método es asíncrono, lo que significa que puede que no finalice antes de que la siguiente línea en tu bosquejo sea ejecutada. La ubicación del archivo debe ser relativo al archivo HTML que lo vincula con tu bosquejo. Cargar desde una URL u otra ubicación remota puede ser bloqueado por las opciones de seguridad del navegador.",
        "The path to the font should be relative to the HTML file that links in your sketch. Loading fonts from a URL or other remote location may be blocked due to your browser's built-in security."
      ],
      "returns": "Objeto: objeto p5.Font",
      "params": {
        "path": "String: número del archivo o URL a cargar",
        "callback": "Función: función a ser ejecutada después de que loadFont() es completada",
        "onError": "Function: (Optional) function to be executed if  an error occurs"
      }
    },
    "text": {
      "description": [
        "Dibuja texto en la pantalla. Muestra la información especificada en el primer parámetro en la pantalla, en la posición especificada por los parámetros adicionales. Una fuente por defecto será usada a menos que una fuente sea definida por la función textFont() y un tamaño por defecto será usado a menos que se use la función textSize(). Cambia el color del texto con la función fill(). Cambia la apariencia del texto con las funciones stroke() y strokeWeight(). El texto se muestra en relación a la función textAlign(), que da la opción de dibujar a la izuiqerda, derecha y centro de las coordenadas. Los parámetros x2 e y2 definen un área rectangular donde mostrar el texto y solo puede ser usado por los datos tipo String. Cuando estos parámetros son especificados, son interpretados según la configuración de rectMode(). El texto que no cabe completamente dentro del rectángulo especificado no será dibujado en pantalla.",
        "The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the option to draw to the left, right, and center of the coordinates.",
        "The x2 and y2 parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen. If x2 and y2 are not specified, the baseline alignment is the default, which means that the text will be drawn upwards from x and y.",
        "<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above). <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode."
      ],
      "params": {
        "str": "String: símbolos alfanuméricos a ser mostrados",
        "x": "Número: coordenada x del texto",
        "y": "Número: coordenada y del texto",
        "x2": "Número: por defecto, el ancho de la caja contenedora del texto, ver rectMode() para más información",
        "y2": "Número: por defecto, la altura de la caja contenedora del texto, ver rectMode() para más información"
      }
    },
    "textFont": {
      "description": [
        "Define la función actual con la que se dibujará el contenido de la función text()",
        "<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported."
      ],
      "returns": "Objeto",
      "params": {
        "font": "Objeto|String: una fuente cargada con loadFont(), o un String representando una tipografía segura de la web (una fuente ampliamente disponible a lo largo de todos los sistemas).",
        "size": "Number: (Optional) the font size to use"
      }
    },
    "append": {
      "description": [
        "Añade un valor al final de un arreglo. Extiende el largo de un arreglo en una unidad. Usa la función Array.push()"
      ],
      "returns": "el objeto p5",
      "params": {
        "array": "Arreglo: Arreglo al que se agregará el dato",
        "value": "Cualquiera: a ser añadido al arreglo"
      }
    },
    "arrayCopy": {
      "description": [
        "Copia el arreglo (o una parte del arreglo) a otro arreglo. El arreglo fuente es copiado al arreglo de destino, empezando por la posición especificada por srcPosition y a la posición especificada por dstPosition. El número de elementos a copiar es determinado por el largo. Notar que al copiar valores se sobreescriben los valores existentes en el arreglo de destino. Para anexar valores en vez de sobreescribirlos, usa la función concat(). La versión simplificada con dos argumentos, arrayCopy(src, dest), copia un arreglo entero a otro del mismo tamaño. Es equivaletne a arrayCopy(src, 0, dst, 0, src.length). Usar esta función es mucho más eficiente para copiar datos de un arreglo que iterar con un bucle for() y copiar cada elemento individualmente.",
        "The simplified version with only two arguments, arrayCopy(src, dst), copies an entire array to another of the same size. It is equivalent to arrayCopy(src, 0, dst, 0, src.length).",
        "Using this function is far more efficient for copying array data than iterating through a for() loop and copying each element individually."
      ],
      "params": {
        "src": "Arreglo: el arreglo fuente",
        "srcPosition": "Número: posición inicial en el arreglo fuente",
        "dst": "Arreglo: el arreglo de destino",
        "dstPosition": "Número: posición inicial del arreglo de destino",
        "length": "Número: númeor de elementos del arreglo a ser copiados"
      }
    },
    "concat": {
      "description": [
        "Concatena dos arreglos, usa la función Array.concat(). No modifica los arreglos de entrada."
      ],
      "returns": "Arreglo: el arreglo concatenado",
      "params": {
        "a": "Arreglo: primer arreglo a concatenar",
        "b": "Arreglo: segundo arreglo a concatenar"
      }
    },
    "reverse": {
      "description": [
        "Invierte el orden un arreglo, usa Array.reverse()."
      ],
      "returns": "el objeto p5",
      "params": {
        "list": "Arreglo: arreglo a ser invertido"
      }
    },
    "shorten": {
      "description": [
        "Disminuye un arreglo en un elemento y retorna el arreglo más corto, usa Array.pop()."
      ],
      "returns": "Arreglo: el arreglo acortado",
      "params": {
        "list": "Lista: arreglo a acortar"
      }
    },
    "shuffle": {
      "description": [
        "Ordena aleatoriamente los elementos de un arreglo. Implementa el algoritmo Fisher Yates."
      ],
      "returns": "Arreglo: retorna el arreglo ordenado",
      "params": {
        "array": "Arreglo: Arreglo a ordenar",
        "bool": "Boolean: modifica el arreglo"
      }
    },
    "sort": {
      "description": [
        "Ordena un arreglo de números, desde el más pequeño al más grande, o pone un arreglo de palabras en orden alfabético. El arreglo original no es modificado, un nuevo arreglo ordenado es retornado. El parámetro count define el número de elementos a ordenar. Por ejemplo, si hay 12 elementos en un arreglo y count es 5, los primeros 5 elementos del arreglo serán ordenados."
      ],
      "returns": "el objeto p5",
      "params": {
        "list": "Arreglo: arreglo a ordenar",
        "count": "Número: número de elementos a ordenar, empezando desde 0"
      }
    },
    "splice": {
      "description": [
        "Inserta un valor o un arreglo de valores en un arreglo existente El primer parámetro especifica el arreglo inicial a ser modificado, y el segundo parámetro define los datos a insertarse. El tercer parámetro es un índice que especifica la posición del arreglo a partir de la que se insertarán los datos. Recuerda que el índice del arreglo empieza en 0, así que la primera posición es 0, la segunda es 1, etc."
      ],
      "returns": "el objeto p5",
      "params": {
        "list": "Arreglo: arreglo a ser modificado",
        "value": "Cualquiera: valor a ser introducido",
        "position": "Número: posición del arreglo donde se inserta el dato"
      }
    },
    "subset": {
      "description": [
        "Extrae un arreglo de elementos de un arreglo existente. El parámetro list define el arreglo desde el cual los elementos serán copiados, y los parámetros start y count especifican cuáles elementos extraer. Si no especifica count, los elementos serán extraidos desde el principio. Esta función no modifica el arreglo original"
      ],
      "returns": "Arreglo: arreglo de elementos extraidos",
      "params": {
        "list": "Arreglo: arreglo del cual se extrae",
        "start": "Número: posición de donde empezar a extraer",
        "count": "Número: número de valores a extraer"
      }
    },
    "float": {
      "description": [
        "Convierte un String a su representación de punto flotante. Los contenidos de un String deben parecerse a un número, en otro caso NaN es retornado. Por ejemplo, float('1234.56') evalua a 1234.56, pero float('giraffe') retorna NaN. Cuando un arreglo de valores es pasado, un arreglo de floats del mismo largo es retornado.",
        "When an array of values is passed in, then an array of floats of the same length is returned."
      ],
      "returns": "Número: representación en punto flotante de un string",
      "params": {
        "str": "String: string a ser procesado"
      }
    },
    "int": {
      "description": [
        "Convierte un boolean, string o float a su representación en número entero. Cuando un arreglo de valores es introducido, entonces un arreglo de enteros de la misma longitud es retornado."
      ],
      "returns": "Número: valor representado como entero",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "radix": "Integer: (Optional) the radix to convert to (default: 10)",
        "ns": "String|Boolean|Número|Arreglo: valor a procesar"
      }
    },
    "str": {
      "description": [
        "Convierte un boolean, string, o número a su representación en string. Cuando un arreglo de valores es introducido, entonces un arreglo de strings de la misma longitud es retornado."
      ],
      "returns": "String: valor representado como string",
      "params": {
        "n": "String|Boolean|Número|Arreglo: valor a procesar"
      }
    },
    "byte": {
      "description": [
        "Convierte un número, string o boolean a su representación en byte. Un byte puede solo ser un número entero entre -128 y 127, así que cuando un valor fuera de este rango es convertido, se hace wrap a la representación correspondiente en byte. Cuando un arreglo de números, string, o booleans es introducido, entonces un arreglo de bytes de la misma longitud es retornado."
      ],
      "returns": "Número: representación en formato byte del valor",
      "params": {
        "n": "String|Boolean|Número|Arreglo: valor a procesar",
        "ns": "Array: values to parse"
      }
    },
    "char": {
      "description": [
        "Convierte un número o string a su representaciómo como un string de un único caracter. Si se provee un parámetro, es primero pasado como entero y luego evaluado como un string de un único caracter. Cuando un arreglo de números o strings es introducido, entonces un arreglo de strings de un único caracter de la misma longitud es retornado."
      ],
      "returns": "String: representación en formato string del valor",
      "params": {
        "n": "String|Número|Arreglo: valor a procesar",
        "ns": "Array: values to parse"
      }
    },
    "unchar": {
      "description": [
        "Convierte un string de un único caracter a su correspondiente representación como valor entero. Cuando un arreglo de strings de un caracter es introducido, entonces un arreglo de enteros de la misma longitud es retornado."
      ],
      "returns": "Número: representación en formato entero del valor",
      "params": {
        "n": "String|Arreglo: valor a procesar",
        "ns": "Array: values to parse"
      }
    },
    "hex": {
      "description": [
        "Convierte un número a su correspondiente representación como hexadecimal. Si se ingersa un segundo parámetro, es usado para definir el número de caracteres a generar en la notación hexadecimal. Cuando un arreglo es introducido, entonces un arreglo de strings en notación hexadecimal de la misma longitud es retornado."
      ],
      "returns": "String: representación en formato string hexadecimal del valor",
      "params": {
        "n": "Número|Arreglo: valor a procesar",
        "digits": "Number (Optional)",
        "ns": "Number[]: array of values to parse"
      }
    },
    "unhex": {
      "description": [
        "Convierte una representación en string de un número hexadecimal a su correspondiente representación como valor entero. Cuando un arreglo de strings en notación hexadecimal es introducido, entonces un arreglo de enteros de la misma longitud es retornado."
      ],
      "returns": "Número: representación en formato entero del valor hexadecimal",
      "params": {
        "n": "String|Arreglo: valor a procesar",
        "ns": "Array: values to parse"
      }
    },
    "join": {
      "description": [
        "Combina una arreglo de Strings en un String, cada uno separado por los caracteres usados como parámetro separator. Para unir arreglos de enteros o floats, es necesario primero convertirlos a Strings usando las funciones nf() o nfs()."
      ],
      "returns": "String: String unificado",
      "params": {
        "list": "Arreglo: arreglo de Strings a ser unidos",
        "separator": "String: String a ser posicionado entre cada item"
      }
    },
    "match": {
      "description": [
        "Esta función es usada para aplicar una expresión regular a una porción de texto,  y retorna grupos coincidentes (elementos encontrados entre paréntesis) como un arreglo de Strings. Si no existen coincidencias, se retorna el valor null. Si no se especifican grupos en la expresión regular, pero la secuencia coincide, un arreglo de largo 1 (con el texto coincidente como primer elemento del arreglo) será retornado. Para usar la función, primero comprueba si el resultado es null. Si el resultado es null, entonces la secuencia no tuvo coincidencias. Si la secuencia tuvo coincidencias, retorna un arreglo. Si exsiten grupos (especificados como conjuntos de paréntesis) en la expresión regular, entonces los contenidos de cada uno serán retornados en el arreglo. El elemento[0] de una coincidencia de expresión regular retorna el string coincidente, y el grupo de coincidencia empieza en el elemento[1] (el primer grupo es [1], el segundo es [2], etc).",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, an array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Element [0] of a regular expression match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on)."
      ],
      "returns": "Arreglo: arreglo de Strings encontrados",
      "params": {
        "str": "String: el String a ser buscado",
        "regexp": "String: la expresión regular a ser usada para buscar coincidencias"
      }
    },
    "matchAll": {
      "description": [
        "Esta función es usada para aplicar una expresión regular a una porción de texto,  y retorna una lista de grupos coincidentes (elementos encontrados entre paréntesis) como un arreglo de Strings bidimensional. Si no existen coincidencias, se retorna el valor null. Si no se especifican grupos en la expresión regular, pero la secuencia coincide, un arreglo de dos dimensiones es retornado, pero es de largo 1. Para usar la función, primero comprueba si el resultado es null. Si el resultado es null, entonces la secuencia no tuvo coincidencias. Si la secuencia tuvo coincidencias, retorna un arreglo 2D. Si exsiten grupos (especificados como conjuntos de paréntesis) en la expresión regular, entonces los contenidos de cada uno serán retornados en el arreglo. El elemento[i][0] de una coincidencia de expresión regular retorna el string coincidente completo, y el grupo de coincidencia empieza en el elemento[i][1] (el primer grupo es [i][1], el segundo es [i][2], etc).",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Assuming a loop with counter variable i, element [i][0] of a regular expression match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on)."
      ],
      "returns": "Arreglo: arreglo 2D de Strings encontrados",
      "params": {
        "str": "String: el String a ser buscado",
        "regexp": "String: la expresión regular a ser usada para buscar coincidencias"
      }
    },
    "nf": {
      "description": [
        "Función de utilidad para formatear números a strings. Existen dos veriones: una para formatear floats, y una para formatear enteros. Los valores de los dígitos y los parámetros left y right siempre deben ser enteros positivos"
      ],
      "returns": "String|Arreglo: String formateada",
      "params": {
        "num": "Número|Arreglo: el número a formatear",
        "left": "Número: número de dígitos a la izquierda del punto decimal",
        "right": "Número: número de dígitos a la derecha del punto decimal",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfc": {
      "description": [
        "Función de utilidad para formatear números en strings y poner las comas apropiadas para señalar múltiplos de mil. Hay dos versiones: una para números enteros y otra para arreglos de enteros. El valor del parámetro right debe siempre ser un entero positivo."
      ],
      "returns": "String|Arreglo: String formateada",
      "params": {
        "num": "Número|Arreglo: el número a formatear",
        "right": "Número: número de dígitos a la derecha del punto decimal",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfp": {
      "description": [
        "Función de utilidad para formatear números en strings. Similar a nf() pero pone un signo + en frente de los números positivos y un signo - en frente de números negativos. Hay dos versiones, una para formatear floats y otra para formatear enteros. Los valores de los parámetros left y right deben siempre ser enteros positivos."
      ],
      "returns": "String|Arreglo: String formateada",
      "params": {
        "num": "Número|Arreglo: el número a formatear",
        "left": "Número: número de dígitos a la izquierda del punto decimal",
        "right": "Número: número de dígitos a la derecha del punto decimal",
        "nums": "Number[]: the Numbers to format"
      }
    },
    "nfs": {
      "description": [
        "Función de utilidad para formatear números en strings. Similar a nf() pero pone un espacio en frente de los números positivos y un signo - en frente de números negativos. Hay dos versiones, una para formatear floats y otra para formatear enteros. Los valores de los parámetros left y right deben siempre ser enteros positivos."
      ],
      "returns": "String|Arreglo: String formateada",
      "params": {
        "num": "Número|Arreglo: el número a formatear",
        "left": "Número: número de dígitos a la izquierda del punto decimal",
        "right": "Número: número de dígitos a la derecha del punto decimal",
        "nums": "Array: the Numbers to format"
      }
    },
    "split": {
      "description": [
        "La función split usa String.split(), corta un String en pedazos usando un caracter o String como delimitador. El parámetro delim especifica el caracter o caracteres que marcan los bordes entre cada pieza. Un arreglo String[] es retornado, que contiene cada una de las piezas. La función splitTokens() funciona de forma similar, excepto que divide usango un rango de caracteres en vez de usar un caracter o una secuencia de caracteres específicos.",
        "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence."
      ],
      "returns": "Arreglo: arreglo de Strings",
      "params": {
        "value": "String: el String a ser dividido",
        "delim": "String: el String usado para separar los datos"
      }
    },
    "splitTokens": {
      "description": [
        "La función splitTokens() divide un String en uno o varios caracteres delimitadores o tokens. El parámetro delim especifica el o los caracteres a ser usados como borde.",
        "Si no se especifican caracteres delim, cualquier caracter tipo whitespace será usado para dividir. Los caracteres whitespace incluyen tabulación (\\t), nueva línea (\\n), retorno de carro (\\r), entrada de formulario (\\f), y espacio."
      ],
      "returns": "Arreglo: arreglo de Strings",
      "params": {
        "value": "String: el String a ser dividido",
        "delim": "String: lista de Strings individuales que serán usados como separadores"
      }
    },
    "trim": {
      "description": [
        "Remueve caracteres tipo whitespace (espacio en blanco) del comienzo y el final de un String. En adición a los caracteres estámdar de whitespace como espacio, retorno de carro y tabulación, esta función también remueve el caracter Unicode nbsp."
      ],
      "returns": "String|Arreglo: un String o arreglo de Strings recortados.",
      "params": {
        "str": "String: a String to be trimmed",
        "strs": "Array: an Array of Strings to be trimmed"
      }
    },
    "day": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función day() retorna el día actual como un valor entre 1 y 31."
      ],
      "returns": "Número: el día actual"
    },
    "hour": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función hour() retorna la hora actual como un valor entre 0 y 23."
      ],
      "returns": "Número: la hora actual"
    },
    "minute": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función minute() retorna el minuto actual como un valor entre 0 y 59."
      ],
      "returns": "Número: el minuto actual"
    },
    "millis": {
      "description": [
        "Retorna el número de milisegundos (milésimas de segundo) desde que el programa empezó a correr. La información es usada a menudo para temporizar eventos y animar secuencias"
      ],
      "returns": "Número: el número de milisegundos desde que empezó el programa"
    },
    "month": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función month() retorna el mes actual como un valor entre 1 y 12."
      ],
      "returns": "Número: el mes actual"
    },
    "second": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función second() retorna el mes actual como un valor entre 0 y 59."
      ],
      "returns": "Número: el segundo actual"
    },
    "year": {
      "description": [
        "p5.js se comunica con el reloj de tu computador. La función year() retorna el año actual como un entero (2014, 2015, 2015, etc)."
      ],
      "returns": "Número: el año actual"
    },
    "plane": {
      "description": [
        "Dibuja un plano con ancho y altura dados."
      ],
      "params": {
        "width": "Número: ancho del plano",
        "height": "Número: altura del plano",
        "detailX": "Número: número opcional de subdivisiones triangulares en la dimensión x",
        "detailY": "Número: número opcional de subdivisiones triangulares en la dimensión y"
      }
    },
    "box": {
      "description": [
        "Dibuja una caja con ancho, altura y profundidad dados."
      ],
      "params": {
        "width": "Número: ancho de la caja",
        "Height": "Número: altura de la caja",
        "depth": "Número: profundidad de la caja",
        "detailX": "Número: número opcional de subdivisiones triangulares en la dimensión x",
        "detailY": "Número: número opcional de subdivisiones triangulares en la dimensión y"
      }
    },
    "sphere": {
      "description": [
        "Dibuja una esfera de radio dado.",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a sphere. More subdivisions make the sphere seem smoother. The recommended maximum values are both 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Número: radio del círculo",
        "detailX": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 24",
        "detailY": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 16"
      }
    },
    "cylinder": {
      "description": [
        "Dibuja un cilindro de radio y altura dados.",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Número: radio de la superficie",
        "height": "Número: altura del cilindro",
        "detailX": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 24",
        "detailY": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 16",
        "bottomCap": "Boolean: (Optional) whether to draw the bottom of the cylinder",
        "topCap": "Boolean: (Optional) whether to draw the top of the cylinder"
      }
    },
    "cone": {
      "description": [
        "Dibuja un cono de radio y altura dados.",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the cone seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Número: radio de la superficie inferior",
        "height": "Número: altura del cono",
        "detailX": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 24",
        "detailY": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 16",
        "cap": "Boolean: (Optional) whether to draw the base of the cone"
      }
    },
    "ellipsoid": {
      "description": [
        "Dibuja un elipsoide de radio dado.",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother. Avoid detail number above 150, it may crash the browser."
      ],
      "params": {
        "radiusx": "Número: radio x del círculo",
        "radiusy": "Número: radio y del círculo",
        "radiusz": "Número: radio z del círculo",
        "detailX": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 24. Evita números mayores a 150 que podrían colapsar el navegador.",
        "detailY": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 16. Evita números mayores a 150 que podrían colapsar el navegador."
      }
    },
    "torus": {
      "description": [
        "Dibuja un toroide con radio y tubo dado.",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a torus. More subdivisions make the torus appear to be smoother. The default and maximum values for detailX and detailY are 24 and 16, respectively. Setting them to relatively small values like 4 and 6 allows you to create new shapes other than a torus."
      ],
      "params": {
        "radius": "Número: radio del anillo completo",
        "tubeRadius": "Número: radio del tubo",
        "detailX": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 24.",
        "detailY": "Número: opcional, número de segmentos, a mayor número de segmentos la geometría es más suave, por defecto es 16."
      }
    },
    "orbitControl": {
      "description": [
        "Allows movement around a 3D sketch using a mouse or trackpad. Left-clicking and dragging will rotate the camera position about the center of the sketch, right-clicking and dragging will pan the camera position without rotation, and using the mouse wheel (scrolling) will move the camera closer or further from the center of the sketch. This function can be called with parameters dictating sensitivity to mouse movement along the X and Y axes. Calling this function without parameters is equivalent to calling orbitControl(1,1). To reverse direction of movement in either axis, enter a negative number for sensitivity."
      ],
      "params": {
        "sensitivityX": "Number: (Optional) sensitivity to mouse movement along X axis",
        "sensitivityY": "Number: (Optional) sensitivity to mouse movement along Y axis",
        "sensitivityZ": "Number: (Optional) sensitivity to scroll movement along Z axis"
      }
    },
    "debugMode": {
      "description": [
        "debugMode() helps visualize 3D space by adding a grid to indicate where the ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z directions. This function can be called without parameters to create a default grid and axes icon, or it can be called according to the examples above to customize the size and position of the grid and/or axes icon. The grid is drawn using the most recently set stroke color and weight. To specify these parameters, add a call to stroke() and strokeWeight() just before the end of the draw() loop.",
        "By default, the grid will run through the origin (0,0,0) of the sketch along the XZ plane and the axes icon will be offset from the origin. Both the grid and axes icon will be sized according to the current canvas size. Note that because the grid runs parallel to the default camera view, it is often helpful to use debugMode along with orbitControl to allow full view of the grid."
      ],
      "params": {
        "mode": "Constant: either GRID or AXES",
        "gridSize": "Number: (Optional) size of one side of the grid",
        "gridDivisions": "Number: (Optional) number of divisions in the grid",
        "xOff": "Number: (Optional) X axis offset from origin (0,0,0)",
        "yOff": "Number: (Optional) Y axis offset from origin (0,0,0)",
        "zOff": "Number: (Optional) Z axis offset from origin (0,0,0)",
        "axesSize": "Number: (Optional) size of axes icon",
        "gridXOff": "Number (Optional)",
        "gridYOff": "Number (Optional)",
        "gridZOff": "Number (Optional)",
        "axesXOff": "Number (Optional)",
        "axesYOff": "Number (Optional)",
        "axesZOff": "Number (Optional)"
      }
    },
    "noDebugMode": {
      "description": [
        "Turns off debugMode() in a 3D sketch."
      ]
    },
    "ambientLight": {
      "description": [
        "Crea una luz ambiente con color"
      ],
      "params": {
        "v1": "Número|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
        "v2": "Número: opcional, valor de verde o saturación",
        "v3": "Número: opcional, valor de azul o brillo",
        "alpha": "Número: opcional, valor de opacidad",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the ambient light color"
      }
    },
    "specularColor": {
      "description": [
        "Set's the color of the specular highlight when using a specular material and specular light.",
        "This method can be combined with specularMaterial() and shininess() functions to set specular highlights. The default color is white, ie (255, 255, 255), which is used if this method is not called before specularMaterial(). If this method is called without specularMaterial(), There will be no effect.",
        "Note: specularColor is equivalent to the processing function <a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the ambient light color"
      }
    },
    "directionalLight": {
      "description": [
        "Crea una luz direccional con color y dirección",
        "A maximum of 5 directionalLight can be active at one time"
      ],
      "params": {
        "v1": "Número|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
        "v2": "Número: opcional, valor de verde o saturación",
        "v3": "Número: opcional, valor de azul o brillo",
        "position": "p5.Vector: the direction of the light",
        "color": "Number[]|String|p5.Color: color Array, CSS color string,  or <a href=\"#/p5.Color\">p5.Color</a> value",
        "x": "Número|p5.Vector: dirección del eje x o un p5.Vector",
        "y": "Número: opcional, dirección del eje y",
        "z": "Número: opcional, dirección del eje z"
      }
    },
    "pointLight": {
      "description": [
        "Crea una luz puntual con color y posición",
        "A maximum of 5 pointLight can be active at one time"
      ],
      "params": {
        "v1": "Número|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color actual), o arreglo de color o String de color CSS",
        "v2": "Número: opcional, valor de verde o saturación",
        "v3": "Número: opcional, valor de azul o brillo",
        "x": "Número|p5.Vector: dirección del eje x o un p5.Vector",
        "y": "Número: opcional, dirección del eje y",
        "z": "Número: opcional, dirección del eje z",
        "position": "p5.Vector: the position of the light",
        "color": "Number[]|String|p5.Color: color Array, CSS color string, or <a href=\"#/p5.Color\">p5.Color</a> value"
      }
    },
    "lights": {
      "description": [
        "Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop."
      ]
    },
    "lightFalloff": {
      "description": [
        "Sets the falloff rates for point lights. It affects only the elements which are created after it in the code. The default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:",
        "d = distance from light position to vertex position",
        "falloff = 1 / (CONSTANT + d * LINEAR + ( d * d ) * QUADRATIC)"
      ],
      "params": {
        "constant": "Number: constant value for determining falloff",
        "linear": "Number: linear value for determining falloff",
        "quadratic": "Number: quadratic value for determining falloff"
      }
    },
    "spotLight": {
      "description": [
        "Creates a spotlight with a given color, position, direction of light, angle and concentration. Here, angle refers to the opening or aperture of the cone of the spotlight, and concentration is used to focus the light towards the center. Both angle and concentration are optional, but if you want to provide concentration, you will also have to specify the angle.",
        "A maximum of 5 spotLight can be active at one time"
      ],
      "params": {
        "v1": "Number: red or hue value (depending on the current color mode),",
        "v2": "Number: green or saturation value",
        "v3": "Number: blue or brightness value",
        "x": "Number: x axis position",
        "y": "Number: y axis position",
        "z": "Number: z axis position",
        "rx": "Number: x axis direction of light",
        "ry": "Number: y axis direction of light",
        "rz": "Number: z axis direction of light",
        "angle": "Number: (Optional) optional parameter for angle. Defaults to PI/3",
        "conc": "Number: (Optional) optional parameter for concentration. Defaults to 100",
        "color": "Number[]|String|p5.Color: color Array, CSS color string, or <a href=\"#/p5.Color\">p5.Color</a> value",
        "position": "p5.Vector: the position of the light",
        "direction": "p5.Vector: the direction of the light"
      }
    },
    "noLights": {
      "description": [
        "This function will remove all the lights from the sketch for the subsequent materials rendered. It affects all the subsequent methods. Calls to lighting methods made after noLights() will re-enable lights in the sketch."
      ]
    },
    "loadModel": {
      "description": [
        "Carga un modelo 3d desde un archivo OBJ. Una de las limitaciones del formato OBJ es que no trae incorporado un sentido de escala. Esto significa que los modelos exportados por distintos programas pueden ser de tamaños radicalmente distintos. Si tu modelo no está siendo mostrado en pantalla, trata llamando a la función loadMode() con el parámetro de normalización configurado como verdadero. Esto escalará el tamaño del modelo a una escala apropiada para p5. También puedes hacer cambios adicionales al tamaño final de tu modelo con la función scale().",
        "<a href=\"#/p5/loadModel\">loadModel()</a> should be placed inside of <a href=\"#/p5/preload\">preload()</a>. This allows the model to load fully before the rest of your code is run.",
        "One of the limitations of the OBJ and STL format is that it doesn't have a built-in sense of scale. This means that models exported from different programs might be very different sizes. If your model isn't displaying, try calling <a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the model to a scale appropriate for p5. You can also make additional changes to the final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.",
        "Also, the support for colored STL files is not present. STL files with color will be rendered without color properties."
      ],
      "returns": "el objeto p5.Geometry3D",
      "params": {
        "path": "String: ubicación del modelo a cargar",
        "normalize": "Boolean:  Si es verdadero (true), escala el modelo a un tamaño estandarizado al momento de cargarlo.",
        "successCallback": "Función(p5.Geometry3D): función a ser llamada cuando el modelo se cargue. Será pasada al modelo del objeto 3D.",
        "failureCallback": "Función(evento): llamada con el error evento si la imagen no falla al cargar.",
        "fileType": "String: (Optional) The file extension of the model  (<code>.stl</code>, <code>.obj</code>)."
      }
    },
    "model": {
      "description": [
        "Hace el render de un modelo 3D en la pantalla."
      ],
      "params": {
        "model": "p5.Geometry: modelo 3D cargado para realizar render"
      }
    },
    "loadShader": {
      "description": [
        "Loads a custom shader from the provided vertex and fragment shader paths. The shader files are loaded asynchronously in the background, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.",
        "For now, there are three main types of shaders. p5 will automatically supply appropriate vertices, normals, colors, and lighting attributes if the parameters defined in the shader match the names."
      ],
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shader files.",
      "params": {
        "vertFilename": "String: path to file containing vertex shader source code",
        "fragFilename": "String: path to file containing fragment shader source code",
        "callback": "Function: (Optional) callback to be executed after loadShader completes. On success, the Shader object is passed as the first argument.",
        "errorCallback": "Function: (Optional) callback to be executed when an error occurs inside loadShader. On error, the error is passed as the first argument."
      }
    },
    "createShader": {
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shaders.",
      "params": {
        "vertSrc": "String: source code for the vertex shader",
        "fragSrc": "String: source code for the fragment shader"
      }
    },
    "shader": {
      "description": [
        "The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader to fill in shapes in WEBGL mode. Users can create their own shaders by loading vertex and fragment shaders with <a href=\"#/p5/loadShader\">loadShader()</a>."
      ],
      "params": {
        "s": "p5.Shader: (Optional) the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering shapes."
      }
    },
    "resetShader": {
      "description": [
        "This function restores the default shaders in WEBGL mode. Code that runs after resetShader() will not be affected by previously defined shaders. Should be run after <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "texture": {
      "description": [
        "Textura para geometría. Puedes ver todos los posibles materiales en este ejemplo (TODO)."
      ],
      "params": {
        "tex": "p5.Image|p5.MediaElement|p5.Graphics: gráfica bidimensional para hacer render como textura."
      }
    },
    "textureMode": {
      "description": [
        "Sets the coordinate space for texture mapping. The default mode is IMAGE which refers to the actual coordinates of the image. NORMAL refers to a normalized space of values ranging from 0 to 1. This function only works in WEBGL mode.",
        "With IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire size of a quad would require the points (0,0) (100, 0) (100,200) (0,200). The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1)."
      ],
      "params": {
        "mode": "Constant: either IMAGE or NORMAL"
      }
    },
    "textureWrap": {
      "description": [
        "Sets the global texture wrapping mode. This controls how textures behave when their uv's go outside of the 0 - 1 range. There are three options: CLAMP, REPEAT, and MIRROR.",
        "CLAMP causes the pixels at the edge of the texture to extend to the bounds REPEAT causes the texture to tile repeatedly until reaching the bounds MIRROR works similarly to REPEAT but it flips the texture with every new tile",
        "REPEAT & MIRROR are only available if the texture is a power of two size (128, 256, 512, 1024, etc.).",
        "This method will affect all textures in your sketch until a subsequent textureWrap call is made.",
        "If only one argument is provided, it will be applied to both the horizontal and vertical axes."
      ],
      "params": {
        "wrapX": "Constant: either CLAMP, REPEAT, or MIRROR",
        "wrapY": "Constant: (Optional) either CLAMP, REPEAT, or MIRROR"
      }
    },
    "normalMaterial": {
      "description": [
        "Material normal para geometría. Puedes ver todos los posibles materiales en este ejemplo (TODO)."
      ]
    },
    "ambientMaterial": {
      "description": [
        "Material ambiente para geometría con un color dado. Puedes ver todos los posibles materiales en este ejemplo (TODO)."
      ],
      "params": {
        "v1": "Número|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color), o arreglo de color, o String de color CSS",
        "v2": "Número: opcional, valor de verde o saturación",
        "v3": "Número: opcional, valor de azul o brillo",
        "color": "Number[]|String|p5.Color: color, color Array, or CSS color string"
      }
    },
    "emissiveMaterial": {
      "description": [
        "Sets the emissive color of the material used for geometry drawn to the screen. This is a misnomer in the sense that the material does not actually emit light that effects surrounding polygons. Instead, it gives the appearance that the object is glowing. An emissive material will display at full strength even if there is no light for it to reflect."
      ],
      "params": {
        "v1": "Number: gray value, red or hue value  (depending on the current color mode),",
        "v2": "Number: (Optional) green or saturation value",
        "v3": "Number: (Optional) blue or brightness value",
        "a": "Number: (Optional) opacity",
        "color": "Number[]|String|p5.Color: color, color Array, or CSS color string"
      }
    },
    "specularMaterial": {
      "description": [
        "Material espejo para geometría con un color dado. Puedes ver todos los posibles materiales en este ejemplo."
      ],
      "params": {
        "gray": "Number: number specifying value between white and black.",
        "alpha": "Número: opcional, valor de opacidad",
        "v1": "Número|Arreglo|String|p5.Color: valor de gris, rojo o tinte (dependiendo del modo de color), o arreglo de color, o String de color CSS",
        "v2": "Número: opcional, valor de verde o saturación",
        "v3": "Número: opcional, valor de azul o brillo",
        "color": "Number[]|String|p5.Color: color Array, or CSS color string"
      }
    },
    "shininess": {
      "description": [
        "Sets the amount of gloss in the surface of shapes. Used in combination with specularMaterial() in setting the material properties of shapes. The default and minimum value is 1."
      ],
      "params": {
        "shine": "Number: Degree of Shininess.  Defaults to 1."
      }
    },
    "camera": {
      "description": [
        "Define la posición de la cámara",
        "This function simulates the movements of the camera, allowing objects to be viewed from various angles. Remember, it does not move the objects themselves but the camera instead. For example when the centerX value is positive, and the camera is rotating to the right side of the sketch, the object will seem like it's moving to the left.",
        "See this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a> to view the position of your camera.",
        "If no parameters are given, the following default is used: camera(0, 0, (height/2) / tan(PI/6), 0, 0, 0, 0, 1, 0)"
      ],
      "params": {
        "x": "Número: valor de la posición de la cámara en el eje x",
        "y": "Número: valor de la posición de la cámara en el eje y",
        "z": "Número: valor de la posición de la cámara en el eje z",
        "centerX": "Number: (Optional) x coordinate representing center of the sketch",
        "centerY": "Number: (Optional) y coordinate representing center of the sketch",
        "centerZ": "Number: (Optional) z coordinate representing center of the sketch",
        "upX": "Number: (Optional) x component of direction 'up' from camera",
        "upY": "Number: (Optional) y component of direction 'up' from camera",
        "upZ": "Number: (Optional) z component of direction 'up' from camera"
      }
    },
    "perspective": {
      "description": [
        "Define la perspectiva de la cámara",
        "The parameters to this function define the viewing frustum (the truncated pyramid within which objects are seen by the camera) through vertical field of view, aspect ratio (usually width/height), and near and far clipping planes.",
        "If no parameters are given, the following default is used: perspective(PI/3, width/height, eyeZ/10, eyeZ*10), where eyeZ is equal to ((height/2) / tan(PI/6))."
      ],
      "params": {
        "fovy": "Número: frustum del campo de visión vertical de la cámara, de abajo hacia arriba, en grados",
        "aspect": "Número: frustum de la relación de aspecto de la cámara",
        "near": "Número: frustum del largo del plano cercano",
        "far": "Número: frustum del largo del plano lejano"
      }
    },
    "ortho": {
      "description": [
        "Define la cámara ortogonal",
        "The parameters to this function specify the viewing frustum where left and right are the minimum and maximum x values, top and bottom are the minimum and maximum y values, and near and far are the minimum and maximum z values.",
        "If no parameters are given, the following default is used: ortho(-width/2, width/2, -height/2, height/2)."
      ],
      "params": {
        "left": "Número: define el frustum del plano izquierdo de la cámara",
        "right": "Número: define el frustum del plano derecho de la cámara",
        "bottom": "Número: define el frustum del plano inferior de la cámara",
        "top": "Número: define el frustum del plano superior de la cámara",
        "near": "Número: define el frustum del plano cercano de la cámara",
        "far": "Número: define el frustum del plano lejano de la cámara"
      }
    },
    "frustum": {
      "description": [
        "Sets a perspective matrix as defined by the parameters.",
        "A frustum is a geometric form: a pyramid with its top cut off. With the viewer's eye at the imaginary top of the pyramid, the six planes of the frustum act as clipping planes when rendering a 3D view. Thus, any form inside the clipping planes is visible; anything outside those planes is not visible.",
        "Setting the frustum changes the perspective of the scene being rendered. This can be achieved more simply in many cases by using <a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.",
        "If no parameters are given, the following default is used: frustum(-width/2, width/2, -height/2, height/2, 0, max(width, height))."
      ],
      "params": {
        "left": "Number: (Optional) camera frustum left plane",
        "right": "Number: (Optional) camera frustum right plane",
        "bottom": "Number: (Optional) camera frustum bottom plane",
        "top": "Number: (Optional) camera frustum top plane",
        "near": "Number: (Optional) camera frustum near plane",
        "far": "Number: (Optional) camera frustum far plane"
      }
    },
    "createCamera": {
      "description": [
        "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the renderer to use that camera. Returns the p5.Camera object.",
        "The new camera is initialized with a default position (see <a href=\"#/p5.Camera/camera\">camera()</a>) and a default perspective projection (see <a href=\"#/p5.Camera/perspective\">perspective()</a>). Its properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a> methods.",
        "Note: Every 3D sketch starts with a default camera initialized. This camera can be controlled with the global methods <a href=\"#/p5/camera\">camera()</a>, <a href=\"#/p5/perspective\">perspective()</a>, <a href=\"#/p5/ortho\">ortho()</a>, and <a href=\"#/p5/frustum\">frustum()</a> if it is the only camera in the scene."
      ],
      "returns": "p5.Camera: The newly created camera object."
    },
    "setCamera": {
      "description": [
        "Sets rendererGL's current camera to a p5.Camera object. Allows switching between multiple cameras."
      ],
      "params": {
        "cam": "p5.Camera: p5.Camera object"
      }
    },
    "setAttributes": {
      "description": [
        "Set attributes for the WebGL Drawing context. This is a way of adjusting how the WebGL renderer works to fine-tune the display and performance.",
        "Note that this will reinitialize the drawing context if called after the WebGL canvas is made.",
        "If an object is passed as the parameter, all attributes not declared in the object will be set to defaults.",
        "The available attributes are:  alpha - indicates if the canvas contains an alpha buffer default is true",
        "depth - indicates whether the drawing buffer has a depth buffer of at least 16 bits - default is true",
        "stencil - indicates whether the drawing buffer has a stencil buffer of at least 8 bits",
        "antialias - indicates whether or not to perform anti-aliasing default is false (true in Safari)",
        "premultipliedAlpha - indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha default is false",
        "preserveDrawingBuffer - if true the buffers will not be cleared and and will preserve their values until cleared or overwritten by author (note that p5 clears automatically on draw loop) default is true",
        "perPixelLighting - if true, per-pixel lighting will be used in the lighting shader otherwise per-vertex lighting is used. default is true."
      ],
      "params": {
        "key": "String: Name of attribute",
        "value": "Boolean: New value of named attribute",
        "obj": "Object: object with key-value pairs"
      }
    },
    "getAudioContext": {
      "description": [
        "Returns the Audio Context for this sketch. Useful for users who would like to dig deeper into the <a target='_blank' href= 'http://webaudio.github.io/web-audio-api/'>Web Audio API </a>.",
        "Some browsers require users to startAudioContext with a user gesture, such as touchStarted in the example below."
      ],
      "returns": "Object: AudioContext for this sketch"
    },
    "userStartAudio": {
      "description": [
        "It is not only a good practice to give users control over starting audio. This policy is enforced by many web browsers, including iOS and <a href=\"https://goo.gl/7K7WLu\" title=\"Google Chrome's autoplay policy\">Google Chrome</a>, which create the Web Audio API's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" title=\"Audio Context @ MDN\">Audio Context</a> in a suspended state.",
        "In these browser-specific policies, sound will not play until a user interaction event (i.e. <code>mousePressed()</code>) explicitly resumes the AudioContext, or starts an audio node. This can be accomplished by calling <code>start()</code> on a <code>p5.Oscillator</code>, <code> play()</code> on a <code>p5.SoundFile</code>, or simply <code>userStartAudio()</code>.",
        "<code>userStartAudio()</code> starts the AudioContext on a user gesture. The default behavior will enable audio on any mouseUp or touchEnd event. It can also be placed in a specific interaction function, such as <code>mousePressed()</code> as in the example below. This method utilizes <a href=\"https://github.com/tambien/StartAudioContext\">StartAudioContext </a>, a library by Yotam Mann (MIT Licence, 2016)."
      ],
      "returns": "Promise: Returns a Promise that resolves when  the AudioContext state is 'running'",
      "params": {
        "element(s)": "Element|Array: (Optional) This argument can be an Element,  Selector String, NodeList, p5.Element,  jQuery Element, or an Array of any of those.",
        "callback": "Function: (Optional) Callback to invoke when the AudioContext  has started"
      }
    },
    "getOutputVolume": {
      "description": [
        "Returns a number representing the output volume for sound in this sketch."
      ],
      "returns": "Number: Output volume for sound in this sketch.  Should be between 0.0 (silence) and 1.0."
    },
    "outputVolume": {
      "description": [
        "Scale the output of all sound in this sketch Scaled between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal.",
        "<b>How This Works</b>: When you load the p5.sound module, it creates a single instance of p5sound. All sound objects in this module output to p5sound before reaching your computer's output. So if you change the amplitude of p5sound, it impacts all of the sound in this module.",
        "If no value is provided, returns a Web Audio API Gain Node"
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "soundOut": {
      "description": [
        "<code>p5.soundOut</code> is the p5.sound final output bus. It sends output to the destination of this window's web audio context. It contains Web Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>), and Gain Nodes for <code>.input</code> and <code>.output</code>."
      ]
    },
    "sampleRate": {
      "description": [
        "Returns a number representing the sample rate, in samples per second, of all sound objects in this audio context. It is determined by the sampling rate of your operating system's sound card, and it is not currently possile to change. It is often 44100, or twice the range of human hearing."
      ],
      "returns": "Number: samplerate samples per second"
    },
    "freqToMidi": {
      "description": [
        "Returns the closest MIDI note value for a given frequency."
      ],
      "returns": "Number: MIDI note value",
      "params": {
        "frequency": "Number: A freqeuncy, for example, the \"A\"  above Middle C is 440Hz"
      }
    },
    "midiToFreq": {
      "description": [
        "Returns the frequency value of a MIDI note value. General MIDI treats notes as integers where middle C is 60, C# is 61, D is 62 etc. Useful for generating musical frequencies with oscillators."
      ],
      "returns": "Number: Frequency value of the given MIDI note",
      "params": {
        "midiNote": "Number: The number of a MIDI note"
      }
    },
    "soundFormats": {
      "description": [
        "List the SoundFile formats that you will include. LoadSound will search your directory for these extensions, and will pick a format that is compatable with the client's web browser. <a href=\"http://media.io/\">Here</a> is a free online file converter."
      ],
      "params": {
        "formats": "String: (Optional) i.e. 'mp3', 'wav', 'ogg'"
      }
    },
    "saveSound": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. For uploading audio to a server, use <a href=\"/docs/reference/#/p5.SoundFile/saveBlob\"><code>p5.SoundFile.saveBlob</code></a>."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile that you wish to save",
        "fileName": "String: name of the resulting .wav file."
      }
    },
    "loadSound": {
      "description": [
        "loadSound() returns a new p5.SoundFile from a specified path. If called during preload(), the p5.SoundFile will be ready to play in time for setup() and draw(). If called outside of preload, the p5.SoundFile will not be ready immediately, so loadSound accepts a callback as the second parameter. Using a <a href=\"https://github.com/processing/p5.js/wiki/Local-server\"> local server</a> is recommended when loading external files."
      ],
      "returns": "SoundFile: Returns a p5.SoundFile",
      "params": {
        "path": "String|Array: Path to the sound file, or an array with  paths to soundfiles in multiple formats  i.e. ['sound.ogg', 'sound.mp3'].  Alternately, accepts an object: either  from the HTML5 File API, or a p5.File.",
        "successCallback": "Function: (Optional) Name of a function to call once file loads",
        "errorCallback": "Function: (Optional) Name of a function to call if there is  an error loading the file.",
        "whileLoading": "Function: (Optional) Name of a function to call while file is loading.  This function will receive the percentage loaded  so far, from 0.0 to 1.0."
      }
    },
    "createConvolver": {
      "description": [
        "Create a p5.Convolver. Accepts a path to a soundfile that will be used to generate an impulse response."
      ],
      "returns": "p5.Convolver:",
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: (Optional) function to call if loading is successful.  The object will be passed in as the argument  to the callback function.",
        "errorCallback": "Function: (Optional) function to call if loading is not successful.  A custom error will be passed in as the argument  to the callback function."
      }
    },
    "setBPM": {
      "description": [
        "Set the global tempo, in beats per minute, for all p5.Parts. This method will impact all active p5.Parts."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.Color": {
    "description": [
      "Cada color almacena el modo de color y los niveles máximos que se aplicaron en el momento de su construcción. Estos se utilizan para interpretar los argumentos de entrada (en la construcción y más tarde para esa instancia de color) y para formatear el output, p. ej. cuando se solicita la <a href=\"#/p5/saturation\">saturation()</a>.",
      "Internamente almacenamos una matriz que representa los valores ideales de RGBA en forma de coma flotante, normalizada de 0 a 1. A partir de esto, calculamos el color de pantalla más cercano (niveles de RGBA de 0 a 255) y lo exponemos al renderizador.",
      "También almacenamos en caché normalizado, componentes de coma flotante de color flotante del color en varias representaciones a medida que se calculan. Esto se hace para evitar repetir una conversión que ya se ha realizado."
    ],
    "setRed": {
      "description": [
        "La función setRed establece el componente rojo de un color. El rango depende de su modo de color, en el modo RGB predeterminado está entre 0 y 255."
      ],
      "params": {
        "red": "Number: the new red value"
      }
    },
    "setGreen": {
      "description": [
        "La función setGreen establece el componente verde de un color. El rango depende de su modo de color, en el modo RGB predeterminado está entre 0 y 255."
      ],
      "params": {
        "green": "Number: the new green value"
      }
    },
    "setBlue": {
      "description": [
        "La función setBlue establece el componente azul de un color. El rango depende de su modo de color, en el modo RGB predeterminado está entre 0 y 255."
      ],
      "params": {
        "blue": "Number: the new blue value"
      }
    },
    "setAlpha": {
      "description": [
        "La función setAlpha establece el valor de transparencia (alfa) de un color. El rango depende de su modo de color, en el modo RGB predeterminado está entre 0 y 255."
      ],
      "params": {
        "alpha": "Number: the new alpha value"
      }
    }
  },
  "p5.Element": {
    "description": [
      "Clase base para todos los elementos añadidos al bosuqejo, incluyendo lienzo, buffers de gráficas, y otros elementos HTML. Los métodos en azul están incluidos en la funcionalidad base, los métodos en marrón son añadidos con la biblioteca p5.dom. No se ejecutan directamente, pero los objetos p5.Element son creados llamando a las funciones createCanvas(), createGraphics(), o en la biblioteca p5.dom, createDiv, createImg, createInput, etc."
    ],
    "params": {
      "elt": "String: node DOM envolvente.",
      "pInst": "Objeto: puntero a instancia p5."
    },
    "elt": {
      "description": [
        "Underlying HTML element. All normal HTML methods can be called on this."
      ]
    },
    "parent": {
      "description": [
        "Attaches the element to the parent specified. A way of setting  the container for the element. Accepts either a string ID, DOM  node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.  For more ways to position the canvas, see the  <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>  positioning the canvas</a> wiki page."
      ],
      "params": {
        "parent": "String|p5.Element|Object: the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  of desired parent element"
      }
    },
    "id": {
      "description": [
        "Sets the ID of the element. If no ID argument is passed in, it instead  returns the current ID of the element.  Note that only one element can have a particular id in a page.  The <a href=\"#/p5.Element/class\">.class()</a> function can be used  to identify multiple elements with the same class name."
      ],
      "params": {
        "id": "String: ID of the element"
      }
    },
    "class": {
      "description": [
        "Adds given class to the element. If no class argument is passed in, it  instead returns a string containing the current class(es) of the element."
      ],
      "params": {
        "class": "String: class to add"
      }
    },
    "mousePressed": {
      "description": [
        "The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called once after every time a mouse button is pressed over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  pressed over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "doubleClicked": {
      "description": [
        "The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a mouse button is pressed twice over the element. This can be used to attach element and action specific event listeners."
      ],
      "returns": "p5.Element:",
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  double clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseWheel": {
      "description": [
        "The <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called once after every time a mouse wheel is scrolled over the element. This can be used to attach element specific event listeners.",
        "The function accepts a callback function as argument which will be executed when the <code>wheel</code> event is triggered on the element, the callback function is passed one argument <code>event</code>. The <code>event.deltaY</code> property returns negative values if the mouse wheel is rotated up or away from the user and positive in the other direction. The <code>event.deltaX</code> does the same as <code>event.deltaY</code> except it reads the horizontal wheel scroll of the mouse wheel.",
        "On OS X with \"natural\" scrolling enabled, the <code>event.deltaY</code> values are reversed."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  scrolled over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is called once after every time a mouse button is released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  released over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseClicked": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is called once after a mouse button is pressed and released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap.This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseMoved": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a mouse moves over the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOver": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a mouse moves onto the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  onto the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOut": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a mouse moves off the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse  moves off of an element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchStarted": {
      "description": [
        "The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch  starts over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchMoved": {
      "description": [
        "The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch moves over  the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchEnded": {
      "description": [
        "The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch ends  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragOver": {
      "description": [
        "The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a file is dragged over the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragLeave": {
      "description": [
        "The .dragLeave() function is called once after every time a dragged file leaves the element area. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged off the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "addClass": {
      "description": [
        "Adds specified class to the element."
      ],
      "params": {
        "class": "String: name of class to add"
      }
    },
    "removeClass": {
      "description": [
        "Removes specified class from the element."
      ],
      "params": {
        "class": "String: name of class to remove"
      }
    },
    "hasClass": {
      "description": [
        "Checks if specified class already set to element"
      ],
      "returns": "Boolean: a boolean value if element has specified class",
      "params": {
        "c": "String: class name of class to check"
      }
    },
    "toggleClass": {
      "description": [
        "Toggles element class"
      ],
      "params": {
        "c": "String: class name to toggle"
      }
    },
    "child": {
      "description": [
        "Attaches the element as a child to the parent specified.  Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.  If no argument is specified, an array of children DOM nodes is returned."
      ],
      "returns": "Node[]: an array of child nodes",
      "params": {
        "child": "String|p5.Element: (Optional) the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  to add to the current element"
      }
    },
    "center": {
      "description": [
        "Centers a p5 Element either vertically, horizontally, or both, relative to its parent or according to the body if the Element has no parent. If no argument is passed the Element is aligned both vertically and horizontally."
      ],
      "params": {
        "align": "String: (Optional) passing 'vertical', 'horizontal' aligns element accordingly"
      }
    },
    "html": {
      "description": [
        "If an argument is given, sets the inner HTML of the element,  replacing any existing html. If true is included as a second  argument, html is appended instead of replacing existing html.  If no arguments are given, returns  the inner HTML of the element."
      ],
      "returns": "String: the inner HTML of the element",
      "params": {
        "html": "String: (Optional) the HTML to be placed inside the element",
        "append": "Boolean: (Optional) whether to append HTML to existing"
      }
    },
    "position": {
      "description": [
        "Sets the position of the element. If no position type argument is given, the  position will be relative to (0, 0) of the window.  Essentially, this sets position:absolute and left and top  properties of style. If an optional third argument specifying position type is given,  the x and y coordinates will be interpreted based on the <a target=\"_blank\"  href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.  If no arguments given, the function returns the x and y position of the element. found documentation on how to be more specific with object type  <a href=\"https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc\">https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc</a>"
      ],
      "returns": "Object: object of form { x: 0, y: 0 } containing the position of the element in an object",
      "params": {
        "x": "Number: (Optional) x-position relative to upper left of window (optional)",
        "y": "Number: (Optional) y-position relative to upper left of window (optional)",
        "positionType": "String: it can be static, fixed, relative, sticky, initial or inherit (optional)"
      }
    },
    "style": {
      "description": [
        "Sets the given style (css) property (1st arg) of the element with the given value (2nd arg). If a single argument is given, .style() returns the value of the given property; however, if the single argument is given in css syntax ('text-align:center'), .style() sets the css appropriately."
      ],
      "returns": "String: value of property",
      "params": {
        "property": "String: property to be set",
        "value": "String|p5.Color: value to assign to property"
      }
    },
    "attribute": {
      "description": [
        "Adds a new attribute or changes the value of an existing attribute  on the specified element. If no value is specified, returns the  value of the given attribute, or null if attribute is not set."
      ],
      "returns": "String: value of attribute",
      "params": {
        "attr": "String: attribute to set",
        "value": "String: value to assign to attribute"
      }
    },
    "removeAttribute": {
      "description": [
        "Removes an attribute on the specified element."
      ],
      "params": {
        "attr": "String: attribute to remove"
      }
    },
    "value": {
      "description": [
        "Either returns the value of the element if no arguments given, or sets the value of the element."
      ],
      "returns": "String|Number: value of the element",
      "params": {
        "value": "String|Number"
      }
    },
    "show": {
      "description": [
        "Shows the current element. Essentially, setting display:block for the style."
      ]
    },
    "hide": {
      "description": [
        "Hides the current element. Essentially, setting display:none for the style."
      ]
    },
    "size": {
      "description": [
        "Sets the width and height of the element. AUTO can be used to  only adjust one dimension at a time. If no arguments are given, it  returns the width and height of the element in an object. In case of  elements which need to be loaded, such as images, it is recommended  to call the function after the element has finished loading."
      ],
      "returns": "Object: the width and height of the element in an object",
      "params": {
        "w": "Number|Constant: width of the element, either AUTO, or a number",
        "h": "Number|Constant: (Optional) height of the element, either AUTO, or a number"
      }
    },
    "remove": {
      "description": [
        "Removes the element, stops all media streams, and deregisters all listeners."
      ]
    },
    "drop": {
      "description": [
        "Registers a callback that gets called every time a file that is dropped on the element has been loaded. p5 will load every dropped file into memory and pass it as a p5.File object to the callback. Multiple files dropped at the same time will result in multiple calls to the callback.",
        "You can optionally pass a second callback which will be registered to the raw <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event. The callback will thus be provided the original <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>. Dropping multiple files at the same time will trigger the second callback once per drop, whereas the first callback will trigger for each loaded file."
      ],
      "params": {
        "callback": "Function: callback to receive loaded file, called for each file dropped.",
        "fxn": "Function: (Optional) callback triggered once when files are dropped with the drop event."
      }
    }
  },
  "p5.Graphics": {
    "description": [
      "Contenedor fino alrededor de un renderizador, que se utilizará para crear un objeto de búfer de gráficos. Use esta clase si necesita dibujar en un búfer de gráficos fuera de la pantalla. Los dos parámetros definen el ancho y el alto en píxeles. Los campos y métodos para esta clase son extensos, pero reflejan la API de dibujo normal para p5."
    ],
    "params": {
      "w": "Número: ancho",
      "h": "Número: altura",
      "renderer": "Constant: renderer el renderizador a utilizar, ya sea P2D o WEBGL",
      "pInst": "P5: pointer a una instancia p5 (Opcional)"
    },
    "reset": {
      "description": [
        "Restablece ciertos valores, como los modificados por funciones en la categoría Transformar y en la categoría Luces que no se restablecen automáticamente con objetos gráficos de búfer. Llamando a esto en <a href='#/p5/draw'>draw()</a> copiará el comportamiento del canvas estándar."
      ]
    },
    "remove": {
      "description": [
        "Elimina un objeto Graphics de la página y libera todos los recursos asociados con él."
      ]
    }
  },
  "p5.Renderer": {
    "description": [
      "Main graphics and rendering context, as well as the base API implementation for p5.js \"core\". To be used as the superclass for Renderer2D and Renderer3D classes, respectively."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance",
      "isMainCanvas": "Boolean: (Optional) whether we're using it as main canvas"
    }
  },
  "JSON": {
    "stringify": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">the MDN entry</a>: The JSON.stringify() method converts a JavaScript object or value to a JSON <a href=\"#/p5/string\">string</a>."
      ],
      "params": {
        "object": "Object: :Javascript object that you would like to convert to JSON"
      }
    }
  },
  "console": {
    "log": {
      "description": [
        "Prints a message to your browser's web console. When using p5, you can use <a href=\"#/p5/print\">print</a> and <a href=\"#/p5/console/log\">console.log</a> interchangeably.",
        "The console is opened differently depending on which browser you are using. Here are links on how to open the console in <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console\">Firefox</a> , <a href=\"https://developers.google.com/web/tools/chrome-devtools/open\">Chrome</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console\">Edge</a>, and <a href=\"https://support.apple.com/en-ca/guide/safari/sfri20948/mac\">Safari</a>. With the <a href=\"https://editor.p5js.org/\">online p5 editor</a> the console is embedded directly in the page underneath the code editor.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\">the MDN entry</a>: The Console method log() outputs a message to the web console. The message may be a single <a href=\"#/p5/string\">string</a> (with optional substitution values), or it may be any one or more JavaScript <a href=\"#/p5/object\">objects</a>."
      ],
      "params": {
        "message": "String|Expression|Object: :Message that you would like to print to the console"
      }
    }
  },
  "p5.TypedDict": {
    "description": [
      "Base class for all p5.Dictionary types. Specifically  typed Dictionary classes inherit from this class."
    ],
    "size": {
      "description": [
        "Returns the number of key-value pairs currently stored in the Dictionary."
      ],
      "returns": "Integer: the number of key-value pairs in the Dictionary"
    },
    "hasKey": {
      "description": [
        "Returns true if the given key exists in the Dictionary, otherwise returns false."
      ],
      "returns": "Boolean: whether that key exists in Dictionary",
      "params": {
        "key": "Number|String: that you want to look up"
      }
    },
    "get": {
      "description": [
        "Returns the value stored at the given key."
      ],
      "returns": "Number|String: the value stored at that key",
      "params": {
        "the": "Number|String: key you want to access"
      }
    },
    "set": {
      "description": [
        "Updates the value associated with the given key in case it already exists in the Dictionary. Otherwise a new key-value pair is added."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String"
      }
    },
    "create": {
      "description": [
        "Creates a new key-value pair in the Dictionary."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String",
        "obj": "Object: key/value pair"
      }
    },
    "clear": {
      "description": [
        "Removes all previously stored key-value pairs from the Dictionary."
      ]
    },
    "remove": {
      "description": [
        "Removes the key-value pair stored at the given key from the Dictionary."
      ],
      "params": {
        "key": "Number|String: for the pair to remove"
      }
    },
    "print": {
      "description": [
        "Logs the set of items currently stored in the Dictionary to the console."
      ]
    },
    "saveTable": {
      "description": [
        "Converts the Dictionary into a CSV file for local download."
      ]
    },
    "saveJSON": {
      "description": [
        "Converts the Dictionary into a JSON file for local download."
      ]
    }
  },
  "p5.StringDict": {
    "description": [
      "A simple Dictionary class for Strings."
    ]
  },
  "p5.NumberDict": {
    "description": [
      "Una simple clase de Diccionario para Números."
    ],
    "add": {
      "description": [
        "Agregue el número dado al valor actualmente almacenado en la clave dada. La suma luego reemplaza el valor previamente almacenado en el Diccionario."
      ],
      "params": {
        "Key": "Number: for the value you wish to add to",
        "Number": "Number: to add to the value"
      }
    },
    "sub": {
      "description": [
        "Subtract the given number from the value currently stored at the given key. The difference then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to subtract from",
        "Number": "Number: to subtract from the value"
      }
    },
    "mult": {
      "description": [
        "Resta el número dado del valor actualmente almacenado en la clave dada. La diferencia luego reemplaza el valor previamente almacenado en el Diccionario."
      ],
      "params": {
        "Key": "Number: for value you wish to multiply",
        "Amount": "Number: to multiply the value by"
      }
    },
    "div": {
      "description": [
        "Divida el número dado con el valor actualmente almacenado en la clave dada. El cociente luego reemplaza el valor previamente almacenado en el Diccionario."
      ],
      "params": {
        "Key": "Number: for value you wish to divide",
        "Amount": "Number: to divide the value by"
      }
    },
    "minValue": {
      "description": [
        "Devuelve el número más bajo actualmente almacenado en el Diccionario."
      ],
      "returns": "Number:"
    },
    "maxValue": {
      "description": [
        "Devuelve el número más alto actualmente almacenado en el Diccionario."
      ],
      "returns": "Number:"
    },
    "minKey": {
      "description": [
        "Devuelve la clave más baja utilizada actualmente en el Diccionario."
      ],
      "returns": "Number:"
    },
    "maxKey": {
      "description": [
        "Devuelve la clave más alta utilizada actualmente en el Diccionario."
      ],
      "returns": "Number:"
    }
  },
  "p5.MediaElement": {
    "description": [
      "Extiende <a href=\"#/p5.Element\">p5.Element</a> para manejar audio y video. Además de los métodos de <a href=\"#/p5.Element\">p5.Element</a>, también contiene métodos para controlar los medios. No se llama directamente, pero <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s se crea llamando a <a href=\"#/p5/createVideo\">createVideo</a>, <a href=\"#/p5/createAudio\">createAudio</a> y <a href=\"#/p5/createCapture\">createCapture</a>."
    ],
    "params": {
      "elt": "String: nodo DOM que está envuelto"
    },
    "src": {
      "description": [
        "Ruta a la fuente del elemento multimedia."
      ],
      "returns": "String: src"
    },
    "play": {
      "description": [
        "Reproduce un elemento multimedia HTML5."
      ]
    },
    "stop": {
      "description": [
        "Detiene un elemento multimedia HTML5 (establece la hora actual en cero)"
      ]
    },
    "pause": {
      "description": [
        "Pausa un elemento multimedia HTML5."
      ]
    },
    "loop": {
      "description": [
        "Establezca 'loop' en verdadero para un elemento multimedia HTML5 y comienza a reproducir."
      ]
    },
    "noLoop": {
      "description": [
        "Set 'loop' to false for an HTML5 media element. Element will stop when it reaches the end."
      ]
    },
    "autoplay": {
      "description": [
        "Establezca 'loop' en falso para un elemento multimedia HTML5. El elemento se detendrá cuando llegue al final."
      ],
      "params": {
        "shouldAutoplay": "Boolean: whether the element should autoplay"
      }
    },
    "volume": {
      "description": [
        "Establece el volumen para este elemento multimedia HTML5. Si no se proporciona ningún argumento, devuelve el volumen actual."
      ],
      "returns": "Number: current volume",
      "params": {
        "val": "Number: volume between 0.0 and 1.0"
      }
    },
    "speed": {
      "description": [
        "Si no se dan argumentos, devuelve la velocidad de reproducción actual del elemento. El parámetro de velocidad establece la velocidad donde 2.0 reproducirá el elemento dos veces más rápido, 0.5 reproducirá a la mitad de la velocidad y -1 reproducirá el elemento a velocidad normal en reversa (tenga en cuenta que no todos los navegadores admiten la reproducción hacia atrás e incluso si lo hacen, la reproducción podría no ser fluido.)"
      ],
      "returns": "Number: current playback speed of the element",
      "params": {
        "speed": "Number: speed multiplier for element playback"
      }
    },
    "time": {
      "description": [
        "Si no se dan argumentos, devuelve la hora actual del elemento. Si se proporciona un argumento, la hora actual del elemento se establece a la indicada."
      ],
      "returns": "Number: current time (in seconds)",
      "params": {
        "time": "Number: time to jump to (in seconds)"
      }
    },
    "duration": {
      "description": [
        "Devuelve la duración del elemento multimedia HTML5."
      ],
      "returns": "Number: duration"
    },
    "onended": {
      "description": [
        "Programe un evento para ser llamado cuando el elemento de audio o video llegue al final. Si el elemento está looping, esto no se llamará. El elemento se pasa como argumento para el onended callback."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended. The  media element will be passed  in as the argument to the  callback."
      }
    },
    "connect": {
      "description": [
        "Envíe la salida de audio de este elemento a un objeto audioNode o p5.sound especificado. Si no se proporciona ningún elemento, se conecta a la salida maestra de p5. Esa conexión se establece cuando este método se llama por primera vez. Todas las conexiones se eliminan mediante el método .disconnect ().",
        "Este método está destinado a ser utilizado con la biblioteca de complementos p5.sound.js."
      ],
      "params": {
        "audioNode": "AudioNode|Object: AudioNode from the Web Audio API, or an object from the p5.sound library"
      }
    },
    "disconnect": {
      "description": [
        "Desconecta todo el enrutamiento de audio web, incluso a la salida maestra. Esto es útil si desea redirigir la salida a través de efectos de audio, por ejemplo."
      ]
    },
    "showControls": {
      "description": [
        "Muestra los controles de MediaElement predeterminados, según lo determine el navegador web."
      ]
    },
    "hideControls": {
      "description": [
        "Ocultar los controles predeterminados de mediaElement."
      ]
    },
    "addCue": {
      "description": [
        "Programe eventos para que se activen cada vez que un MediaElement (audio / video) llegue a un punto de referencia de reproducción.",
        "Acepta una función de devolución de llamada, un tiempo (en segundos) para activar el callback y un parámetro opcional para el callback.",
        "El tiempo pasará como primer parámetro a la función de callback, y param será el segundo parámetro."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Eliminar una devolución de llamada en función de su ID. La identificación es devuelta por el método addCue."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Elimine todos los callbacks que originalmente se habían programado mediante el método addCue."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    }
  },
  "p5.File": {
    "description": [
      "Base class for a file. Used for Element.drop and createFileInput."
    ],
    "params": {
      "file": "File: File that is wrapped"
    },
    "file": {
      "description": [
        "Underlying File object. All normal File methods can be called on this."
      ]
    },
    "type": {
      "description": [
        "File type (image, text, etc.)"
      ]
    },
    "subtype": {
      "description": [
        "File subtype (usually the file extension jpg, png, xml, etc.)"
      ]
    },
    "name": {
      "description": [
        "File name"
      ]
    },
    "size": {
      "description": [
        "File size"
      ]
    },
    "data": {
      "description": [
        "URL string containing either image data, the text contents of the file or a parsed object if file is JSON and p5.XML if XML"
      ]
    }
  },
  "p5.Image": {
    "description": [
      "Crea un nuevo <a href=\"#/p5.Image\">p5.Image</a>. Un <a href=\"#/p5.Image\">p5.Image</a> es una representación de una imagen respaldada por un canvas.",
      "p5 puede mostrar imágenes .gif, .jpg y .png. Las imágenes pueden mostrarse en espacio 2D y 3D. Antes de usar una imagen, debe cargarse con la función <a href=\"#/p5/loadImage\">loadImage()</a>. La clase <a href=\"#/p5.Image\">p5.Image</a> contiene campos para el ancho y alto de la imagen, así como una matriz llamada <a href=\"#/p5.Image/pixels\">pixels[]</a> que contiene los valores para cada píxel en la imagen.",
      "Los métodos descritos a continuación permiten un fácil acceso a los píxeles de la imagen y al canal alfa y simplifican el proceso de composición.",
      "Antes de usar la matriz de <a href=\"#/p5.Image/pixels\">pixels[]</a>, asegúrese de usar el método <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> en la imagen para asegurarse de que los datos de píxeles estén cargados correctamente."
    ],
    "params": {
      "width": "Número de ancho:",
      "height": "Número de altura:"
    },
    "width": {
      "description": [
        "Ancho de la imagen."
      ]
    },
    "height": {
      "description": [
        "Altura de imagen."
      ]
    },
    "pixels": {
      "description": [
        "Matriz que contiene los valores para todos los píxeles en la ventana de visualización. Estos valores son números. Esta matriz es el tamaño (incluya un factor apropiado para la densidad de píxeles) de la ventana de visualización x4, que representa los valores R, G, B, A en orden para cada píxel, moviéndose de izquierda a derecha a través de cada fila, luego hacia abajo en cada columna. La retina y otras pantallas de alta densidad pueden tener más píxeles (por un factor de densidad de píxeles ^ 2). Por ejemplo, si la imagen es de 100x100 píxeles, habrá 40,000. Con pixelDensity = 2, habrá 160,000. Los primeros cuatro valores (índices 0-3) en la matriz serán los valores R, G, B, A del píxel en (0, 0). Los segundos cuatro valores (índices 4-7) contendrán los valores R, G, B, A del píxel en (1, 0). Más generalmente, para establecer valores para un píxel en (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre>",
        "Antes de acceder a esta matriz, los datos deben cargarse con la función <a href=\"#/p5.Image/loadPixels\">loadPixels()</a>. Después de que se hayan modificado los datos de la matriz, se debe ejecutar la función <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> para actualizar los cambios."
      ]
    },
    "loadPixels": {
      "description": [
        "Carga los datos de píxeles para esta imagen en el atributo [píxeles]."
      ]
    },
    "updatePixels": {
      "description": [
        "Actualiza el canvas de respaldo para esta imagen con el contenido de la matriz [píxeles].",
        "Si esta imagen es un GIF animado, los píxeles se actualizarán en el cuadro que se muestra actualmente"
      ],
      "params": {
        "x": "Integer: x-offset of the target update area for the  underlying canvas",
        "y": "Integer: y-offset of the target update area for the  underlying canvas",
        "w": "Integer: height of the target update area for the  underlying canvas",
        "h": "Integer: height of the target update area for the  underlying canvas"
      }
    },
    "get": {
      "description": [
        "Obtiene una región de píxeles de una imagen.",
        "Si no se pasan parámetros, se devuelve toda la imagen. Si x e y son los únicos parámetros pasados, se extrae un solo píxel. Si se pasan todos los parámetros, se extrae una región rectangular y se devuelve un <a href=\"#/p5.Image\">p5.Image</a>."
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "set": {
      "description": [
        "Establece el color de un solo píxel o escribe una imagen en este <a href=\"#/p5.Image\">p5.Image</a>.",
        "Tenga en cuenta que para una gran cantidad de píxeles esto será más lento que manipular directamente la matriz de píxeles y luego llamar a <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "a": "Number|Number[]|Object: grayscale value | pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> | image to copy"
      }
    },
    "resize": {
      "description": [
        "Cambiar el tamaño de la imagen a un nuevo ancho y alto. Para hacer que la imagen escale proporcionalmente, use 0 como valor para el parámetro ancho o alto. Por ejemplo, para hacer que el ancho de una imagen sea de 150 píxeles y cambiar la altura con la misma proporción, use cambiar el tamaño (150, 0)."
      ],
      "params": {
        "width": "Number: the resized image width",
        "height": "Number: the resized image height"
      }
    },
    "copy": {
      "description": [
        "Copia una región de píxeles de una imagen a otra. Si no se especifica srcImage, se usa como fuente. Si las regiones de origen y destino no son del mismo tamaño, automáticamente redimensionará los píxeles de origen para que se ajusten a la región de destino especificada."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "mask": {
      "description": [
        "Enmascara parte de una imagen para que no se muestre cargando otra imagen y usando su canal alfa como canal alfa para esta imagen."
      ],
      "params": {
        "srcImage": "p5.Image: source image"
      }
    },
    "filter": {
      "description": [
        "Aplica un filtro de imagen a un <a href=\"#/p5.Image\">p5.Image</a>",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used.",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used.",
        "INVERT Sets each pixel to its inverse value. No parameter is used.",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.",
        "ERODE Reduces the light areas. No parameter is used.",
        "DILATE Increases the light areas. No parameter is used.",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, BLUR, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "blend": {
      "description": [
        "Copia una región de píxeles de una imagen a otra, utilizando un modo de blend específico para realizar la operación."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. Available blend modes are: normal | multiply | screen | overlay |  darken | lighten | color-dodge | color-burn | hard-light |  soft-light | difference | exclusion | hue | saturation |  color | luminosity <a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a>"
      }
    },
    "save": {
      "description": [
        "Guarda la imagen en un archivo y obliga al navegador a descargarla. Acepta dos cadenas para nombre de archivo y extensión de archivo Admite png (predeterminado), jpg y gif  Tenga en cuenta que el archivo solo se descargará como un GIF animado si la p5.Image se cargó desde un archivo GIF."
      ],
      "params": {
        "filename": "String: give your file a name",
        "extension": "String: 'png' or 'jpg'"
      }
    },
    "reset": {
      "description": [
        "Inicia un GIF animado en el estado inicial."
      ]
    },
    "getCurrentFrame": {
      "description": [
        "Obtiene el índice del marco que está visible actualmente en un GIF animado."
      ],
      "returns": "Number: The index for the currently displaying frame in animated GIF"
    },
    "setFrame": {
      "description": [
        "Establece el índice del marco que está visible actualmente en un GIF animado"
      ],
      "params": {
        "index": "Number: the index for the frame that should be displayed"
      }
    },
    "numFrames": {
      "description": [
        "Devuelve el número de fotogramas en un GIF animado"
      ],
      "returns": "Number:"
    },
    "play": {
      "description": [
        "Reproduce un GIF animado que se detuvo con <a href=\"#/p5.Image/pause\">pause()</a>"
      ]
    },
    "pause": {
      "description": [
        "Pausa un GIF animado."
      ]
    },
    "delay": {
      "description": [
        "Cambia el retraso entre fotogramas en un GIF animado. Hay un segundo parámetro opcional que indica un índice para una trama específica que debería tener su retraso modificado. Si no se proporciona ningún índice, todos los cuadros tendrán el nuevo retraso."
      ],
      "params": {
        "d": "Number: the amount in milliseconds to delay between switching frames",
        "index": "Number: (Optional) the index of the frame that should have the new delay value {optional}"
      }
    }
  },
  "p5.PrintWriter": {
    "params": {
      "filename": "String",
      "extension": "String (Optional)"
    },
    "write": {
      "description": [
        "Writes data to the PrintWriter stream"
      ],
      "params": {
        "data": "Array: all data to be written by the PrintWriter"
      }
    },
    "print": {
      "description": [
        "Writes data to the PrintWriter stream, and adds a new line at the end"
      ],
      "params": {
        "data": "Array: all data to be printed by the PrintWriter"
      }
    },
    "clear": {
      "description": [
        "Clears the data already written to the PrintWriter object"
      ]
    },
    "close": {
      "description": [
        "Closes the PrintWriter"
      ]
    }
  },
  "p5.Table": {
    "description": [
      "Los objetos Table almacenan datos con múltiples filas y columnas, tal como una hoja de cálculo tradicional. Los objetos Table pueden ser generados desde cero, dinámicamente, o usando datos desde un archivo existente."
    ],
    "params": {
      "rows": "Arreglo: un arreglo de objetos p5.TableRow"
    },
    "columns": {
      "description": [
        "Una matriz que contiene los nombres de las columnas en la tabla, si el \"header\" la tabla se carga con el parámetro \"header\"."
      ]
    },
    "rows": {
      "description": [
        "Una matriz que contiene los objetos <a href=\"#/p5.Table\">p5.TableRow</a> que forman las filas de la tabla. El mismo resultado que llamar <a href=\"#/p5/getRows\">getRows()</a>"
      ]
    },
    "addRow": {
      "description": [
        "Use <a href=\"#/p5/addRow\">addRow()</a> para agregar una nueva fila de datos a un objeto <a href=\"#/p5.Table\">p5.Table</a>. Por defecto, se crea una fila vacía. Por lo general, almacenaría una referencia a la nueva fila en un objeto TableRow (consulte newRow en el ejemplo anterior) y luego establecería valores individuales usando <a href=\"#/p5/set\">set()</a>.",
        "Si se incluye un objeto <a href=\"#/p5.TableRow\">p5.TableRow</a> como parámetro, entonces esa fila se duplica y se agrega a la tabla."
      ],
      "returns": "p5.TableRow: the row that was added",
      "params": {
        "row": "p5.TableRow: (Optional) row to be added to the table"
      }
    },
    "removeRow": {
      "description": [
        "Elimina una fila del objeto de tabla."
      ],
      "params": {
        "id": "Integer: ID number of the row to remove"
      }
    },
    "getRow": {
      "description": [
        "Devuelve una referencia al <a href=\"#/p5.TableRow\">p5.TableRow</a> especificado. La referencia se puede utilizar para obtener y establecer valores de la fila seleccionada."
      ],
      "returns": "p5.TableRow: <a href=\"#/p5.TableRow\">p5.TableRow</a> object",
      "params": {
        "rowID": "Integer: ID number of the row to get"
      }
    },
    "getRows": {
      "description": [
        "Obtiene todas las filas de la tabla. Devuelve una matriz de <a href=\"#/p5.TableRow\">p5.TableRow</a>s."
      ],
      "returns": "p5.TableRow[]: Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s"
    },
    "findRow": {
      "description": [
        "Encuentra la primera fila de la tabla que contiene el valor proporcionado y devuelve una referencia a esa fila. Incluso si varias filas son posibles coincidencias, solo se devuelve la primera fila coincidente. La columna a buscar puede especificarse por su ID o título."
      ],
      "returns": "p5.TableRow:",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "findRows": {
      "description": [
        "Encuentra las filas en la tabla que contienen el valor proporcionado y devuelve referencias a esas filas. Devuelve una matriz, por lo que debe usarse para recorrer en iteración todas las filas, como se muestra en el ejemplo anterior. La columna a buscar puede especificarse por su ID o título."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "matchRow": {
      "description": [
        "Encuentra la primera fila de la tabla que coincide con la expresión regular proporcionada y devuelve una referencia a esa fila. Incluso si varias filas son posibles coincidencias, solo se devuelve la primera fila coincidente. La columna a buscar puede especificarse por su ID o título."
      ],
      "returns": "p5.TableRow: TableRow object",
      "params": {
        "regexp": "String|RegExp: The regular expression to match",
        "column": "String|Integer: The column ID (number) or  title (string)"
      }
    },
    "matchRows": {
      "description": [
        "Encuentra las filas en la tabla que coinciden con la expresión regular proporcionada y devuelve referencias a esas filas. Devuelve una matriz, por lo que debe usarse para recorrer en iteración todas las filas, como se muestra en el ejemplo. La columna a buscar puede especificarse por su ID o título."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "regexp": "String: The regular expression to match",
        "column": "String|Integer: (Optional) The column ID (number) or  title (string)"
      }
    },
    "getColumn": {
      "description": [
        "Recupera todos los valores en la columna especificada y los devuelve como una matriz. La columna se puede especificar por su ID o título."
      ],
      "returns": "Array: Array of column values",
      "params": {
        "column": "String|Number: String or Number of the column to return"
      }
    },
    "clearRows": {
      "description": [
        "Elimina todas las filas de una tabla. Mientras se eliminan todas las filas, se mantienen las columnas y los títulos de las columnas."
      ]
    },
    "addColumn": {
      "description": [
        "Use <a href=\"#/p5/addColumn\">addColumn()</a> para agregar una nueva columna a un objeto <a href=\"#/p5.Table\">Table</a>. Por lo general, querrá especificar un título, por lo que la columna puede ser referenciada fácilmente más tarde por su nombre. (Si no se especifica ningún título, el título de la nueva columna será nulo)."
      ],
      "params": {
        "title": "String: (Optional) title of the given column"
      }
    },
    "getColumnCount": {
      "description": [
        "Devuelve el número total de columnas en una tabla."
      ],
      "returns": "Integer: Number of columns in this table"
    },
    "getRowCount": {
      "description": [
        "Devuelve el número total de filas en una tabla."
      ],
      "returns": "Integer: Number of rows in this table"
    },
    "removeTokens": {
      "description": [
        "Elimina cualquiera de los caracteres especificados (o \"tokens\").",
        "Si no se especifica ninguna columna, se procesan los valores en todas las columnas y filas. Se puede hacer referencia a una columna específica por su ID o título."
      ],
      "params": {
        "chars": "String: String listing characters to be removed",
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "trim": {
      "description": [
        "Recorta los espacios en blanco iniciales y finales, como los espacios y las pestañas, a partir de los valores de la tabla de cadenas. Si no se especifica ninguna columna, los valores en todas las columnas y filas se recortan. Se puede hacer referencia a una columna específica por su ID o título."
      ],
      "params": {
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "removeColumn": {
      "description": [
        "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> para eliminar una columna existente de un objeto Table. La columna que se eliminará puede identificarse por su título (una Cadena) o su valor de índice (un int). removeColumn (0) eliminaría la primera columna, removeColumn (1) eliminaría la segunda columna, y así sucesivamente."
      ],
      "params": {
        "column": "String|Integer: columnName (string) or ID (number)"
      }
    },
    "set": {
      "description": [
        "Almacena un valor en la fila y columna especificadas de la tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String|Number: value to assign"
      }
    },
    "setNum": {
      "description": [
        "Almacena un valor flotante en la fila y columna especificadas de la tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "Number: value to assign"
      }
    },
    "setString": {
      "description": [
        "Almacena un valor de cadena en la fila y columna especificadas de la tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String: value to assign"
      }
    },
    "get": {
      "description": [
        "Recupera un valor de la fila y columna especificadas en la Tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "returns": "String|Number:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Recupera un valor flotante de la fila y columna especificadas en la tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "returns": "Number:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Recupera un valor de cadena de la fila y columna especificadas en la tabla. La fila se especifica por su ID, mientras que la columna se puede especificar por su ID o título."
      ],
      "returns": "String:",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getObject": {
      "description": [
        "Recupera todos los datos de la tabla y los devuelve como un objeto. Si se pasa un nombre de columna, cada objeto de fila se almacenará con ese atributo como título."
      ],
      "returns": "Object:",
      "params": {
        "headerColumn": "String: (Optional) Name of the column which should be used to  title each row object (optional)"
      }
    },
    "getArray": {
      "description": [
        "Recupera todos los datos de la tabla y los devuelve como una matriz multidimensional."
      ],
      "returns": "Array:"
    }
  },
  "p5.TableRow": {
    "description": [
      "Un objeto TableRow representa una única fila de datos, grabados en columnas, de una tabla. Un objeto TableRow contiene tanto un arreglo ordenado, como un objeto JSON desordenado.",
      "A Table Row contains both an ordered array, and an unordered JSON object."
    ],
    "params": {
      "str": "String: opcional, puebla la fila con una serie de valores, separados por el separador",
      "separator": "String: por defecto, valores separados por coma (csv)"
    },
    "set": {
      "description": [
        "Stores a value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number: The value to be stored"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "Number|String: The value to be stored  as a Float"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number|Boolean|Object: The value to be stored  as a String"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String|Number:",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "Number: Float Floating point number",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves an String value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String: String",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    }
  },
  "p5.XML": {
    "description": [
      "XML es una representación de un objeto XML, capaz de procesar código XML. Usa loadXML() para cargar archivos externos XML y crear objetos XML"
    ],
    "getParent": {
      "description": [
        "Gets a copy of the element's parent. Returns the parent as another <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "returns": "p5.XML: element parent"
    },
    "getName": {
      "description": [
        "Gets the element's full name, which is returned as a String."
      ],
      "returns": "String: the name of the node"
    },
    "setName": {
      "description": [
        "Sets the element's name, which is specified as a String."
      ],
      "params": {
        "the": "String: new name of the node"
      }
    },
    "hasChildren": {
      "description": [
        "Checks whether or not the element has any children, and returns the result as a boolean."
      ],
      "returns": "Boolean:"
    },
    "listChildren": {
      "description": [
        "Get the names of all of the element's children, and returns the names as an array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a> on each child element individually."
      ],
      "returns": "String[]: names of the children of the element"
    },
    "getChildren": {
      "description": [
        "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When the name parameter is specified, then it will return all children that match that name."
      ],
      "returns": "p5.XML[]: children of the element",
      "params": {
        "name": "String: (Optional) element name"
      }
    },
    "getChild": {
      "description": [
        "Returns the first of the element's children that matches the name parameter or the child of the given index.It returns undefined if no matching child is found."
      ],
      "returns": "p5.XML:",
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "addChild": {
      "description": [
        "Appends a new child to the element. The child can be specified with either a String, which will be used as the new tag's name, or as a reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object. A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "params": {
        "node": "p5.XML: a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added"
      }
    },
    "removeChild": {
      "description": [
        "Removes the element specified by name or index."
      ],
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "getAttributeCount": {
      "description": [
        "Counts the specified element's number of attributes, returned as an Number."
      ],
      "returns": "Integer:"
    },
    "listAttributes": {
      "description": [
        "Gets all of the specified element's attributes, and returns them as an array of Strings."
      ],
      "returns": "String[]: an array of strings containing the names of attributes"
    },
    "hasAttribute": {
      "description": [
        "Checks whether or not an element has the specified attribute."
      ],
      "returns": "Boolean: true if attribute found else false",
      "params": {
        "the": "String: attribute to be checked"
      }
    },
    "getNum": {
      "description": [
        "Returns an attribute value of the element as an Number. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, the value 0 is returned."
      ],
      "returns": "Number:",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "getString": {
      "description": [
        "Returns an attribute value of the element as an String. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, null is returned."
      ],
      "returns": "String:",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "setAttribute": {
      "description": [
        "Sets the content of an element's attribute. The first parameter specifies the attribute name, while the second specifies the new content."
      ],
      "params": {
        "name": "String: the full name of the attribute",
        "value": "Number|String|Boolean: the value of the attribute"
      }
    },
    "getContent": {
      "description": [
        "Returns the content of an element. If there is no such content, defaultValue is returned if specified, otherwise null is returned."
      ],
      "returns": "String:",
      "params": {
        "defaultValue": "String: (Optional) value returned if no content is found"
      }
    },
    "setContent": {
      "description": [
        "Sets the element's content."
      ],
      "params": {
        "text": "String: the new content"
      }
    },
    "serialize": {
      "description": [
        "Serializes the element into a string. This function is useful for preparing the content to be sent over a http request or saved to file."
      ],
      "returns": "String: Serialized string of the element"
    }
  },
  "p5.Vector": {
    "description": [
      "Una clase para describir un vector de dos o tres dimensiones, específicamente un vector euclidiano (también conocido como geométrico). Un vector es una entidad que tiene tanto magnitud como dirección. El tipo de datos, sin embargo, graba los componentes del vector (<code>x</code>, <code>y</code> para 2D y <code>x</code>, <code>y</code>, <code>z</code> para 3D). La magnitud y la dirección pueden ser calculados con los métodos <a href=\"#/p5.Vector/mag\">mag()</a> y <a href=\"#/p5.Vector/heading\">heading()</a>.",
      "En muchos de los ejemplos de p5.js, verás que <a href=\"#/p5.Vector\">p5.Vector</a> es usado para describir una posición, velocidad o aceleración. Por ejemplo, si consideras un rectángulo moviéndose a lo largo de la pantalla, en cada instante tiene una posición (un vector que apunta desde el origen hasta su ubicación), una velocidad (la tasa a la que la posición del objeto cambia por unidad de tiempo, expresada como vector), y aceleración (la tasa a la que la velocidad del objeto cambia por unidad de tiempo, expresada como vector).",
      "Como los vectores representan grupos de valores, no podemos simplemente usar las operaciones tradicionales de adición, multiplicación, etc. En vez de eso, necesitaremos hacer matemática de vectores, lo que es simplificado con los métodos dentro de la clase <a href=\"#/p5.Vector\">p5.Vector</a>."
    ],
    "params": {
      "x": "Número: componente x del vector",
      "y": "Número: componente y del vector",
      "z": "Número: componente z del vector"
    },
    "x": {
      "description": [
        "Componente x del vector"
      ]
    },
    "y": {
      "description": [
        "Componente y del vector"
      ]
    },
    "z": {
      "description": [
        "Componente z del vector"
      ]
    },
    "toString": {
          "description": [
         "Devuelve la representación como cadena de caracteres de un vector <code>v</code> llamando a <code>String(v)</code> o <code>v.toString()</code>. Este método es util para imprimir vectores en la consola."
          ],
       "returns": "String:"
    },
    "set": {
      "description": [
        "Asigna las componentes <code>x</code>, <code>y</code>, <code>z</code> de un vector usando dos o tres variables, los datos de otro <a href=\"#/p5.Vector\">p5.Vector</a>, o los valores de un arreglo de números de punto flotante."
      ],
      "params": {
        "x": "Number: (Optional) the x component of the vector",
        "y": "Number: (Optional) the y component of the vector",
        "z": "Number: (Optional) the z component of the vector",
        "value": "p5.Vector|Number[]: the vector to set"
      }
    },
    "copy": {
      "description": [
        "Crea una copia del vector, devuelve un objeto <a href=\"#/p5.Vector\">p5.Vector</a>."
      ],
      "returns": "p5.Vector: the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "add": {
      "description": [
        "Suma las componentes <code>x</code>, <code>y</code>, <code>z</code> a un vector, suma un vector a otro, o suma dos vectores independientes. La version del método que suma dos vectores independientes es un método estático y regresa un objeto <a href=\"#/p5.Vector\">p5.Vector</a>, las otras versiones actúan directamente sobre el vector. Adicionalmente, se pueden pasar arreglos como argumentos de esta función. Ver el ejemplo para más detalles ."
      ],
      "params": {
        "x": "Number: the x component of the vector to be added",
        "y": "Number: (Optional) the y component of the vector to be added",
        "z": "Number: (Optional) the z component of the vector to be added",
        "value": "p5.Vector|Number[]: the vector to add",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "rem": {
      "description": [
        "Devuelve el residuo de un vector cuando es dividido(componente a componente) por otro vector. Ver el ejemplo para más detalles."
      ],
      "params": {
        "x": "Number: the x component of divisor vector",
        "y": "Number: the y component of divisor vector",
        "z": "Number: the z component of divisor vector",
        "value": "p5.Vector | Number[]: divisor vector",
        "v1": "p5.Vector: dividend <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: divisor <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "sub": {
      "description": [
        "Resta las componentes <code>x</code>, <code>y</code>, <code>z</code> a un vector, resta un vector de otro o resta dos vectores independientes. La versión del método que resta dos vectores independientes es un método estático y regresa un objeto <a href=\"#/p5.Vector\">p5.Vector</a>, los otras versiones actúan directamente sobre el vector. Adicionalmente , se pueden pasar arreglos como argumentos de esta función. Ver el ejemplo para más detalles"
      ],
      "params": {
        "x": "Number: the x component of the vector to subtract",
        "y": "Number: (Optional) the y component of the vector to subtract",
        "z": "Number: (Optional) the z component of the vector to subtract",
        "value": "p5.Vector|Number[]: the vector to subtract",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "mult": {
      "description": [
        "Multiplica un vector por un escalar, multiplica las componentes <code>x</code>, <code>y</code>, <code>z</code> de un vector, o multiplica las componentes  <code>x</code>, <code>y</code>, <code>z</code> de dos vectores independientes. Cuando se multiplica un vector por un escalar, las componentes <code>x</code>, <code>y</code>, <code>z</code> del vector se multiplican todas por el escalar. Cuando se multiplican un vector por otro vector, las componentes <code>x</code>, <code>y</code>, <code>z</code> de ambos vectores se multiplican una a una (por ejemplo, con los vectores <code>a</code> y <code>b</code>: <code>a.x*b.x</code>, <code>a.y*b.y</code>, <code>a.z*b.z</code>). La versión estática de este método crea un objeto <a href=\"#/p5.Vector\">p5.Vector</a> mientras que las no estáticas actúan directamente sobre el vector. Adicionalmente, se pueden pasar arreglos como argumentos a esta función. Ver ejemplo para más detalles."
      ],
      "params": {
        "n": "Number: The number to multiply with the vector",
        "x": "Number: The number to multiply with the x component of the vector",
        "y": "Number: The number to multiply with the y component of the vector",
        "z": "Number: (Optional) The number to multiply with the z component of the vector",
        "arr": "Number[]: The array to multiply with the components of the vector",
        "v": "p5.Vector: The vector to multiply with the components of the original vector",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "div": {
      "description": [ 
        "Divide un vector por un escalar, divide las componentes <code>x</code>, <code>y</code>, <code>z</code> de un vector, o divide las componentes <code>x</code>, <code>y</code>, <code>z</code> de dos vectores independientes. Cuando se divide un vector por un escalar, las componentes <code>x</code>, <code>y</code>, <code>z</code> del vector se dividen todas por el escalar. Cuando se divide un vector por otro vector, las componentes <code>x</code>, <code>y</code>, <code>z</code> de ambos vectores se dividen una a una (por ejemplo, con los vectores <code>a</code> y <code>b</code>: <code>a.x/b.x,</code>, <code>a.y/b.y</code>, <code>a.z/b.z</code>). La versión estática de este método crea un objeto <a href=\"#/p5.Vector\">p5.Vector</a> mientras que las no estáticas actúan directamente sobre el vector. Adicionalmente, se pueden pasar arreglos como argumentos a esta función. Ver ejemplo para más detalles."
      ],
      "params": {
        "n": "Number: The number to divide the vector by",
        "x": "Number: The number to divide with the x component of the vector",
        "y": "Number: The number to divide with the y component of the vector",
        "z": "Number: (Optional) The number to divide with the z component of the vector",
        "arr": "Number[]: The array to divide the components of the vector by",
        "v": "p5.Vector: The vector to divide the components of the original vector by",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "mag": {
      "description": [
        "Calcula la magnitud (longitud) de un vector y devuelve el resultado como un numero de punto flotante. (Se calcula como <code>sqrt(x*x+y*y+z*z)</code>)"
      ],
      "returns": "Number: magnitude of the vector",
      "params": {
        "vecT": "p5.Vector: the vector to return the magnitude of"
      }
    },
    "magSq": {
      "description": [
        "Calcula el cuadrado de la magnitud de un vector y devuelve el resultado como un numero de punto flotante. (Se calcula como <code>x*x+y*y+z*z</code>). Mas rápido si no se necesita la longitud real, por ejemplo al comparar vectores."
      ],
      "returns": "Number: squared magnitude of the vector"
    },
    "dot": {
      "description": [
        "Calcula el producto punto de dos vectores. La versión del método que calcula el producto punto de dos vectores independientes es un método estático. Ver los ejemplos para más detalles."
      ],
      "returns": "Number: the dot product",
      "params": {
        "x": "Number: x component of the vector",
        "y": "Number: (Optional) y component of the vector",
        "z": "Number: (Optional) z component of the vector",
        "value": "p5.Vector: value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "cross": {
      "description": [
        "Calcula y devuelve el producto cruz de dos vectores. Tanto el método estático como en lo estático devuelven un nuevo objeto <a href=\"#/p5.Vector\">p5.Vector</a>. Ver los ejemplos para más detalles."
      ],
      "returns": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product",
      "params": {
        "v": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "dist": {
      "description": [
        "Calcula la distancia Euclidiana entre dos puntos (considerando los puntos como vectores). Si quieres calcular la distancia entre dos puntos revisa <a href=\"#/p5/dist\">dist()</a>."
      ],
      "returns": "Number: the distance",
      "params": {
        "v": "p5.Vector: the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "normalize": {
      "description": [
        "Normaliza la longitud de un vector a 1 (vector unitario)."
      ],
      "returns": "p5.Vector: normalized <a href=\"#/p5.Vector\">p5.Vector</a>",
      "params": {
        "v": "p5.Vector: the vector to normalize",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "limit": {
      "description": [
        "Restringe la magnitud de este vector al valor establecido por el parámetro <code>max</code>."
      ],
      "params": {
        "max": "Number: the maximum magnitude for the vector"
      }
    },
    "setMag": {
      "description": [
        "Asigna el parámetro <code>len</code> a la magnitud del vector."
      ],
      "params": {
        "len": "Number: the new length for this vector"
      }
    },
    "heading": {
      "description": [
        "Calcula el ángulo de rotación para este vector (solo para vectores 2D). Los p5.Vectors que son creados usando <a src=\"#/p5/createVector\">createVector()</a> tomaran en cuenta el <a href=\"#/p5/angleMode\">angleMode</a>, y devolverá el ángulo en radianes o grados respectivamente."
      ],
      "returns": "Number: the angle of rotation"
    },
    "setHeading": {
      "description": [
        "Rota el vector a un ángulo especifico (solamente vectores 2D); la magnitud se conserva."
      ],
      "params": {
        "angle": "Number: the angle of rotation"
      }
    },
    "rotate": {
      "description": [
        "Rota el vector por un ángulo (solamente vectores 2D); la magnitud se conserva."
      ],
      "params": {
        "angle": "Number: the angle of rotation",
        "v": "p5.Vector",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "angleBetween": {
      "description": [
        "Calcula y devuelve el ángulo entre dos vectores. Este método considera el <a href=\"#/p5/angleMode\">angleMode</a> y devuelve el ángulo en radianes o grados respectivamente."
      ],
      "returns": "Number: the angle between (in radians)",
      "params": {
        "value": "p5.Vector: the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "lerp": {
      "description": [
        "Interpola linealmente entre dos vectores."      ],
      "params": {
        "x": "Number: the x component",
        "y": "Number: the y component",
        "z": "Number: the z component",
        "amt": "Number: the amount of interpolation; some value between 0.0  (old vector) and 1.0 (new vector). 0.9 is very near  the new vector. 0.5 is halfway in between.",
        "v": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to",
        "v1": "p5.Vector",
        "v2": "p5.Vector",
        "target": "p5.Vector: (Optional) the vector to receive the result (Optional)"
      }
    },
    "reflect": {
      "description": [
        "Refleja un vector respecto a la normal a una linea en 2D, o respecto a la normal a un plano en 3D. Este método actúa directamente sobre el vector."
      ],
      "params": {
        "surfaceNormal": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a> to reflect about, will be normalized by this method"
      }
    },
    "array": {
      "description": [
        "Devuelve la representación de un vector como un arreglo de números con punto flotante. Esto es solo para uso temporal. Para otros usos, el contenido debe ser copiado usado <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b>."
      ],
      "returns": "Number[]: an Array with the 3 values"
    },
    "equals": {
      "description": [
        "Verifica cuando dos <a href=\"#/p5.Vector\">p5.Vector</a> son iguales."
      ],
      "returns": "Boolean: whether the vectors are equals",
      "params": {
        "x": "Number: (Optional) the x component of the vector",
        "y": "Number: (Optional) the y component of the vector",
        "z": "Number: (Optional) the z component of the vector",
        "value": "p5.Vector|Array: the vector to compare"
      }
    },
    "fromAngle": {
      "description": [
        "Crea un nuevo vector 2D a partir de un ángulo."
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "angle": "Number: the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)",
        "length": "Number: (Optional) the length of the new vector (defaults to 1)"
      }
    },
    "fromAngles": {
      "description": [
        "Crea un nuevo vector 3D a partir de sus coordenadas esféricas estándar(ISO)."
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "theta": "Number: the polar angle, in radians (zero is up)",
        "phi": "Number: the azimuthal angle, in radians  (zero is out of the screen)",
        "length": "Number: (Optional) the length of the new vector (defaults to 1)"
      }
    },
    "random2D": {
      "description": [
        "Crea un nuevo vector 2D a partir de un ángulo aleatorio."
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "random3D": {
      "description": [
        "Crea un nuevo vector 3D (unitario) aleatorio."
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    }
  },
  "p5.Font": {
    "description": [
      "Clase base para manipulación de tipografía"
    ],
    "params": {
      "pInst": "Objeto: puntero a la instancia p5"
    },
    "font": {
      "description": [
        "Underlying opentype font implementation"
      ]
    },
    "textBounds": {
      "description": [
        "Returns a tight bounding box for the given text string using this font"
      ],
      "returns": "Object: a rectangle object with properties: x, y, w, h",
      "params": {
        "line": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: (Optional) font size to use (optional) Default is 12.",
        "options": "Object: (Optional) opentype options (optional)  opentype fonts contains alignment and baseline options.  Default is 'LEFT' and 'alphabetic'"
      }
    },
    "textToPoints": {
      "description": [
        "Computes an array of points following the path for specified text"
      ],
      "returns": "Array: an array of points, each with x, y, alpha (the path angle)",
      "params": {
        "txt": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: font size to use (optional)",
        "options": "Object: (Optional) an (optional) object that can contain: sampleFactor - the ratio of path-length to number of samples (default=.1); higher values yield more points and are therefore more precise simplifyThreshold - if set to a non-zero value, collinear points will be be removed from the polygon; the value represents the threshold angle to use when determining whether two edges are collinear"
      }
    }
  },
  "p5.Camera": {
    "description": [
      "This class describes a camera for use in p5's <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\"> WebGL mode</a>. It contains camera position, orientation, and projection information necessary for rendering a 3D scene.",
      "New p5.Camera objects can be made through the <a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through the methods described below. A camera created in this way will use a default position in the scene and a default perspective projection until these properties are changed through the various methods available. It is possible to create multiple cameras, in which case the current camera can be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.",
      "Note: The methods below operate in two coordinate systems: the 'world' coordinate system describe positions in terms of their relationship to the origin along the X, Y and Z axes whereas the camera's 'local' coordinate system describes positions from the camera's point of view: left-right, up-down, and forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method, for instance, moves the camera along its own axes, whereas the <a href=\"#/p5.Camera/setPosition\">setPosition()</a> method sets the camera's position in world-space.",
      "The camera object propreties <code>eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</code> which describes camera position, orientation, and projection are also accessible via the camera object generated using <a href=\"#/p5/createCamera\">createCamera()</a>"
    ],
    "params": {
      "rendererGL": "RendererGL: instance of WebGL renderer"
    },
    "eyeX": {
      "description": [
        "camera position value on x axis"
      ]
    },
    "eyeY": {
      "description": [
        "camera position value on y axis"
      ]
    },
    "eyeZ": {
      "description": [
        "camera position value on z axis"
      ]
    },
    "centerX": {
      "description": [
        "x coordinate representing center of the sketch"
      ]
    },
    "centerY": {
      "description": [
        "y coordinate representing center of the sketch"
      ]
    },
    "centerZ": {
      "description": [
        "z coordinate representing center of the sketch"
      ]
    },
    "upX": {
      "description": [
        "x component of direction 'up' from camera"
      ]
    },
    "upY": {
      "description": [
        "y component of direction 'up' from camera"
      ]
    },
    "upZ": {
      "description": [
        "z component of direction 'up' from camera"
      ]
    },
    "perspective": {
      "description": [
        "Sets a perspective projection for a p5.Camera object and sets parameters for that projection according to <a href=\"#/p5/perspective\">perspective()</a> syntax."
      ]
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection for a p5.Camera object and sets parameters for that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax."
      ]
    },
    "frustum": {
      "description": [
        "Sets the camera's frustum. Accepts the same parameters as the global <a href=\"#/p5/frustum\">frustum()</a>. More information on this function can be found there."
      ]
    },
    "pan": {
      "description": [
        "Panning rotates the camera view to the left and right."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "tilt": {
      "description": [
        "Tilting rotates the camera view up and down."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "lookAt": {
      "description": [
        "Reorients the camera to look at a position in world space."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    },
    "camera": {
      "description": [
        "Sets a camera's position and orientation. This is equivalent to calling <a href=\"#/p5/camera\">camera()</a> on a p5.Camera object."
      ]
    },
    "move": {
      "description": [
        "Move camera along its local axes while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: amount to move along camera's left-right axis",
        "y": "Number: amount to move along camera's up-down axis",
        "z": "Number: amount to move along camera's forward-backward axis"
      }
    },
    "setPosition": {
      "description": [
        "Set camera position in world-space while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    }
  },
  "p5.Geometry": {
    "description": [
      "p5 Geometry class"
    ],
    "params": {
      "detailX": "Integer: (Optional) number of vertices on horizontal surface",
      "detailY": "Integer: (Optional) number of vertices on horizontal surface",
      "callback": "Function: (Optional) function to call upon object instantiation."
    },
    "computeFaces": {
      "description": [
        "computes faces for geometry objects based on the vertices."
      ]
    },
    "computeNormals": {
      "description": [
        "computes smooth normals per vertex as an average of each face."
      ]
    },
    "averageNormals": {
      "description": [
        "Averages the vertex normals. Used in curved surfaces"
      ]
    },
    "averagePoleNormals": {
      "description": [
        "Averages pole normals. Used in spherical primitives"
      ]
    },
    "normalize": {
      "description": [
        "Modifies all vertices to be centered within the range -100 to 100."
      ]
    }
  },
  "p5.Shader": {
    "description": [
      "Clase Shader para el modo WEBGL"
    ],
    "params": {
      "renderer": "p5.RendererGL: una instancia de p5.RendererGL que servirá de contexto GL para este nuevo p5.Shader",
      "vertSrc": "String: código fuente para el vertex shader (en forma de string)",
      "fragSrc": "String: código fuente para el fragment shader (en forma de string)"
    },
    "setUniform": {
      "description": [
        "Wrapper de las funciones gl.uniform. Como almacenamos información de uniform en el shader, la podemos usar para revisar los datos provistos y llamar a la función apropiada."
      ],
      "params": {
        "uniformName": "String: the name of the uniform in the shader program",
        "data": "Object|Number|Boolean|Number[]: the data to be associated with that uniform; type varies (could be a single numerical value, array, matrix, or texture / sampler reference)"
      }
    }
  },
  "p5.sound": {},
  "p5.SoundFile": {
    "description": [
      "SoundFile object with a path to a file.",
      "The p5.SoundFile may not be available immediately because it loads the file information asynchronously.",
      "To do something with the sound as soon as it loads pass the name of a function as the second parameter.",
      "Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatibility, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works."
    ],
    "params": {
      "path": "String|Array: path to a sound file (String). Optionally,  you may include multiple file formats in  an array. Alternately, accepts an object  from the HTML5 File API, or a p5.File.",
      "successCallback": "Function: (Optional) Name of a function to call once file loads",
      "errorCallback": "Function: (Optional) Name of a function to call if file fails to  load. This function will receive an error or  XMLHttpRequest object with information  about what went wrong.",
      "whileLoadingCallback": "Function: (Optional) Name of a function to call while file  is loading. That function will  receive progress of the request to  load the sound file  (between 0 and 1) as its first  parameter. This progress  does not account for the additional  time needed to decode the audio data."
    },
    "isLoaded": {
      "description": [
        "Returns true if the sound file finished loading successfully."
      ],
      "returns": "Boolean:"
    },
    "play": {
      "description": [
        "Play the p5.SoundFile"
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule playback to start (in seconds from now).",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) amplitude (volume)  of playback",
        "cueStart": "Number: (Optional) (optional) cue start time in seconds",
        "duration": "Number: (Optional) (optional) duration of playback in seconds"
      }
    },
    "playMode": {
      "description": [
        "p5.SoundFile has two play modes: <code>restart</code> and <code>sustain</code>. Play Mode determines what happens to a p5.SoundFile if it is triggered while in the middle of playback. In sustain mode, playback will continue simultaneous to the new playback. In restart mode, play() will stop playback and start over. With untilDone, a sound will play only if it's not already playing. Sustain is the default mode."
      ],
      "params": {
        "str": "String: 'restart' or 'sustain' or 'untilDone'"
      }
    },
    "pause": {
      "description": [
        "Pauses a file that is currently playing. If the file is not playing, then nothing will happen.",
        "After pausing, .play() will resume from the paused position. If p5.SoundFile had been set to loop before it was paused, it will continue to loop after it is unpaused with .play()."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop the p5.SoundFile. Accepts optional parameters to set the playback rate, playback volume, loopStart, loopEnd."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) playback volume",
        "cueLoopStart": "Number: (Optional) (optional) startTime in seconds",
        "duration": "Number: (Optional) (optional) loop duration in seconds"
      }
    },
    "setLoop": {
      "description": [
        "Set a p5.SoundFile's looping flag to true or false. If the sound is currently playing, this change will take effect when it reaches the end of the current playback."
      ],
      "params": {
        "Boolean": "Boolean: set looping to true or false"
      }
    },
    "isLooping": {
      "description": [
        "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not."
      ],
      "returns": "Boolean:"
    },
    "isPlaying": {
      "description": [
        "Returns true if a p5.SoundFile is playing, false if not (i.e. paused or stopped)."
      ],
      "returns": "Boolean:"
    },
    "isPaused": {
      "description": [
        "Returns true if a p5.SoundFile is paused, false if not (i.e. playing or stopped)."
      ],
      "returns": "Boolean:"
    },
    "stop": {
      "description": [
        "Stop soundfile playback."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  in seconds from now"
      }
    },
    "pan": {
      "description": [
        "Set the stereo panning of a p5.sound object to a floating point number between -1.0 (left) and 1.0 (right). Default is 0.0 (center)."
      ],
      "params": {
        "panValue": "Number: (Optional) Set the stereo panner",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current stereo pan position (-1.0 to 1.0)"
      ],
      "returns": "Number: Returns the stereo pan setting of the Oscillator  as a number between -1.0 (left) and 1.0 (right).  0.0 is center and default."
    },
    "rate": {
      "description": [
        "Set the playback rate of a sound file. Will change the speed and the pitch. Values less than zero will reverse the audio buffer."
      ],
      "params": {
        "playbackRate": "Number: (Optional) Set the playback rate. 1.0 is normal,  .5 is half-speed, 2.0 is twice as fast.  Values less than zero play backwards."
      }
    },
    "setVolume": {
      "description": [
        "Multiply the output volume (amplitude) of a sound file between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal."
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "duration": {
      "description": [
        "Returns the duration of a sound file in seconds."
      ],
      "returns": "Number: The duration of the soundFile in seconds."
    },
    "currentTime": {
      "description": [
        "Return the current position of the p5.SoundFile playhead, in seconds. Time is relative to the normal buffer direction, so if <code>reverseBuffer</code> has been called, currentTime will count backwards."
      ],
      "returns": "Number: currentTime of the soundFile in seconds."
    },
    "jump": {
      "description": [
        "Move the playhead of a soundfile that is currently playing to a new position and a new duration, in seconds. If none are given, will reset the file to play entire duration from start to finish. To set the position of a soundfile that is not currently playing, use the <code>play</code> or <code>loop</code> methods."
      ],
      "params": {
        "cueTime": "Number: cueTime of the soundFile in seconds.",
        "duration": "Number: duration in seconds."
      }
    },
    "channels": {
      "description": [
        "Return the number of channels in a sound file. For example, Mono = 1, Stereo = 2."
      ],
      "returns": "Number: [channels]"
    },
    "sampleRate": {
      "description": [
        "Return the sample rate of the sound file."
      ],
      "returns": "Number: [sampleRate]"
    },
    "frames": {
      "description": [
        "Return the number of samples in a sound file. Equal to sampleRate * duration."
      ],
      "returns": "Number: [sampleCount]"
    },
    "getPeaks": {
      "description": [
        "Returns an array of amplitude peaks in a p5.SoundFile that can be used to draw a static waveform. Scans through the p5.SoundFile's audio buffer to find the greatest amplitudes. Accepts one parameter, 'length', which determines size of the array. Larger arrays result in more precise waveform visualizations.",
        "Inspired by Wavesurfer.js."
      ],
      "returns": "Float32Array: Array of peaks.",
      "params": {
        "length": "Number: (Optional) length is the size of the returned array.  Larger length results in more precision.  Defaults to 5*width of the browser window."
      }
    },
    "reverseBuffer": {
      "description": [
        "Reverses the p5.SoundFile's buffer source. Playback must be handled separately (see example)."
      ]
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the soundfile reaches the end of a buffer. If the soundfile is playing through once, this will be called when it ends. If it is looping, it will be called when stop is called."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended."
      }
    },
    "connect": {
      "description": [
        "Connects the output of a p5sound object to input of another p5.sound object. For example, you may connect a p5.SoundFile to an FFT or an Effect. If no parameter is given, it will connect to the master output. Most p5sound objects connect to the master output when they are created."
      ],
      "params": {
        "object": "Object: (Optional) Audio object that accepts an input"
      }
    },
    "disconnect": {
      "description": [
        "Disconnects the output of this p5sound object."
      ]
    },
    "setPath": {
      "description": [
        "Reset the source for this SoundFile to a new path (URL)."
      ],
      "params": {
        "path": "String: path to audio file",
        "callback": "Function: Callback"
      }
    },
    "setBuffer": {
      "description": [
        "Replace the current Audio Buffer with a new Buffer."
      ],
      "params": {
        "buf": "Array: Array of Float32 Array(s). 2 Float32 Arrays  will create a stereo source. 1 will create  a mono source."
      }
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point.",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback.",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ]
    },
    "save": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. To upload a file to a server, see <a href=\"/docs/reference/#/p5.SoundFile/getBlob\">getBlob</a>"
      ],
      "params": {
        "fileName": "String: (Optional) name of the resulting .wav file."
      }
    },
    "getBlob": {
      "description": [
        "This method is useful for sending a SoundFile to a server. It returns the .wav-encoded audio data as a \"<a target=\"_blank\" title=\"Blob reference at MDN\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a>\". A Blob is a file-like data object that can be uploaded to a server with an <a href=\"/docs/reference/#/p5/httpDo\">http</a> request. We'll use the <code>httpDo</code> options object to send a POST request with some specific options: we encode the request as <code>multipart/form-data</code>, and attach the blob as one of the form values using <code>FormData</code>."
      ],
      "returns": "Blob: A file-like data object"
    }
  },
  "p5.Amplitude": {
    "description": [
      "Amplitude measures volume between 0.0 and 1.0. Listens to all p5sound by default, or use setInput() to listen to a specific sound source. Accepts an optional smoothing value, which defaults to 0."
    ],
    "params": {
      "smoothing": "Number: (Optional) between 0.0 and .999 to smooth  amplitude readings (defaults to 0)"
    },
    "setInput": {
      "description": [
        "Connects to the p5sound instance (master output) by default. Optionally, you can pass in a specific source (i.e. a soundfile)."
      ],
      "params": {
        "snd": "SoundObject|undefined: (Optional) set the sound source  (optional, defaults to  master output)",
        "smoothing": "Number|undefined: (Optional) a range between 0.0 and 1.0  to smooth amplitude readings"
      }
    },
    "getLevel": {
      "description": [
        "Returns a single Amplitude reading at the moment it is called. For continuous readings, run in the draw loop."
      ],
      "returns": "Number: Amplitude as a number between 0.0 and 1.0",
      "params": {
        "channel": "Number: (Optional) Optionally return only channel 0 (left) or 1 (right)"
      }
    },
    "toggleNormalize": {
      "description": [
        "Determines whether the results of Amplitude.process() will be Normalized. To normalize, Amplitude finds the difference the loudest reading it has processed and the maximum amplitude of 1.0. Amplitude adds this difference to all values to produce results that will reliably map between 0.0 and 1.0. However, if a louder moment occurs, the amount that Normalize adds to all the values will change. Accepts an optional boolean parameter (true or false). Normalizing is off by default."
      ],
      "params": {
        "boolean": "Boolean: (Optional) set normalize to true (1) or false (0)"
      }
    },
    "smooth": {
      "description": [
        "Smooth Amplitude analysis by averaging with the last analysis frame. Off by default."
      ],
      "params": {
        "set": "Number: smoothing from 0.0 <= 1"
      }
    }
  },
  "p5.FFT": {
    "description": [
      "FFT (Fast Fourier Transform) is an analysis algorithm that isolates individual <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\"> audio frequencies</a> within a waveform.",
      "Once instantiated, a p5.FFT object can return an array based on two types of analyses: • <code>FFT.waveform()</code> computes amplitude values along the time domain. The array indices correspond to samples across a brief moment in time. Each value represents amplitude of the waveform at that sample of time. • <code>FFT.analyze() </code> computes amplitude values along the frequency domain. The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Use with <code>getEnergy()</code> to measure amplitude at specific frequencies, or within a range of frequencies.",
      "FFT analyzes a very short snapshot of sound called a sample buffer. It returns an array of amplitude measurements, referred to as <code>bins</code>. The array is 1024 bins long by default. You can change the bin array length, but it must be a power of 2 between 16 and 1024 in order for the FFT algorithm to function correctly. The actual size of the FFT buffer is twice the number of bins, so given a standard sample rate, the buffer is 2048/44100 seconds long."
    ],
    "params": {
      "smoothing": "Number: (Optional) Smooth results of Freq Spectrum.  0.0 < smoothing < 1.0.  Defaults to 0.8.",
      "bins": "Number: (Optional) Length of resulting array.  Must be a power of two between  16 and 1024. Defaults to 1024."
    },
    "setInput": {
      "description": [
        "Set the input source for the FFT analysis. If no source is provided, FFT will analyze all sound in the sketch."
      ],
      "params": {
        "source": "Object: (Optional) p5.sound object (or web audio API source node)"
      }
    },
    "waveform": {
      "description": [
        "Returns an array of amplitude values (between -1.0 and +1.0) that represent a snapshot of amplitude readings in a single buffer. Length will be equal to bins (defaults to 1024). Can be used to draw the waveform of a sound."
      ],
      "returns": "Array: Array Array of amplitude values (-1 to 1)  over time. Array length = bins.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "precision": "String: (Optional) If any value is provided, will return results  in a Float32 Array which is more precise  than a regular array."
      }
    },
    "analyze": {
      "description": [
        "Returns an array of amplitude values (between 0 and 255) across the frequency spectrum. Length is equal to FFT bins (1024 by default). The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Must be called prior to using <code>getEnergy()</code>."
      ],
      "returns": "Array: spectrum Array of energy (amplitude/volume)  values across the frequency spectrum.  Lowest energy (silence) = 0, highest  possible is 255.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "scale": "Number: (Optional) If \"dB,\" returns decibel  float measurements between  -140 and 0 (max).  Otherwise returns integers from 0-255."
      }
    },
    "getEnergy": {
      "description": [
        "Returns the amount of energy (volume) at a specific <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\"> frequency</a>, or the average amount of energy between two frequencies. Accepts Number(s) corresponding to frequency (in Hz), or a String corresponding to predefined frequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). Returns a range between 0 (no energy/volume at that frequency) and 255 (maximum energy). <em>NOTE: analyze() must be called prior to getEnergy(). Analyze() tells the FFT to analyze frequency data, and getEnergy() uses the results determine the value at a specific frequency or range of frequencies.</em>"
      ],
      "returns": "Number: Energy Energy (volume/amplitude) from  0 and 255.",
      "params": {
        "frequency1": "Number|String: Will return a value representing  energy at this frequency. Alternately,  the strings \"bass\", \"lowMid\" \"mid\",  \"highMid\", and \"treble\" will return  predefined frequency ranges.",
        "frequency2": "Number: (Optional) If a second frequency is given,  will return average amount of  energy that exists between the  two frequencies."
      }
    },
    "getCentroid": {
      "description": [
        "Returns the <a href=\"http://en.wikipedia.org/wiki/Spectral_centroid\" target=\"_blank\"> spectral centroid</a> of the input signal. <em>NOTE: analyze() must be called prior to getCentroid(). Analyze() tells the FFT to analyze frequency data, and getCentroid() uses the results determine the spectral centroid.</em>"
      ],
      "returns": "Number: Spectral Centroid Frequency Frequency of the spectral centroid in Hz."
    },
    "smooth": {
      "description": [
        "Smooth FFT analysis by averaging with the last analysis frame."
      ],
      "params": {
        "smoothing": "Number: 0.0 < smoothing < 1.0.  Defaults to 0.8."
      }
    },
    "linAverages": {
      "description": [
        "Returns an array of average amplitude values for a given number of frequency bands split equally. N defaults to 16. <em>NOTE: analyze() must be called prior to linAverages(). Analyze() tells the FFT to analyze frequency data, and linAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: linearAverages Array of average amplitude values for each group",
      "params": {
        "N": "Number: Number of returned frequency groups"
      }
    },
    "logAverages": {
      "description": [
        "Returns an array of average amplitude values of the spectrum, for a given set of <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\"> Octave Bands</a> <em>NOTE: analyze() must be called prior to logAverages(). Analyze() tells the FFT to analyze frequency data, and logAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: logAverages Array of average amplitude values for each group",
      "params": {
        "octaveBands": "Array: Array of Octave Bands objects for grouping"
      }
    },
    "getOctaveBands": {
      "description": [
        "Calculates and Returns the 1/N <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">Octave Bands</a> N defaults to 3 and minimum central frequency to 15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) Setting fCtr0 to a central value of a higher octave will ignore the lower bands and produce less frequency groups."
      ],
      "returns": "Array: octaveBands Array of octave band objects with their bounds",
      "params": {
        "N": "Number: Specifies the 1/N type of generated octave bands",
        "fCtr0": "Number: Minimum central frequency for the lowest band"
      }
    }
  },
  "p5.Oscillator": {
    "description": [
      "Creates a signal that oscillates between -1.0 and 1.0. By default, the oscillation takes the form of a sinusoidal shape ('sine'). Additional types include 'triangle', 'sawtooth' and 'square'. The frequency defaults to 440 oscillations per second (440Hz, equal to the pitch of an 'A' note).",
      "Set the type of oscillation with setType(), or by instantiating a specific oscillator: <a href=\"/reference/#/p5.SinOsc\">p5.SinOsc</a>, <a href=\"/reference/#/p5.TriOsc\">p5.TriOsc</a>, <a href=\"/reference/#/p5.SqrOsc\">p5.SqrOsc</a>, or <a href=\"/reference/#/p5.SawOsc\">p5.SawOsc</a>."
    ],
    "params": {
      "freq": "Number: (Optional) frequency defaults to 440Hz",
      "type": "String: (Optional) type of oscillator. Options:  'sine' (default), 'triangle',  'sawtooth', 'square'"
    },
    "start": {
      "description": [
        "Start an oscillator.",
        "Starting an oscillator on a user gesture will enable audio in browsers that have a strict autoplay policy, including Chrome and most mobile devices. See also: <code>userStartAudio()</code>."
      ],
      "params": {
        "time": "Number: (Optional) startTime in seconds from now.",
        "frequency": "Number: (Optional) frequency in Hz."
      }
    },
    "stop": {
      "description": [
        "Stop an oscillator. Accepts an optional parameter to determine how long (in seconds from now) until the oscillator stops."
      ],
      "params": {
        "secondsFromNow": "Number: Time, in seconds from now."
      }
    },
    "amp": {
      "description": [
        "Set the amplitude between 0 and 1.0. Or, pass in an object such as an oscillator to modulate amplitude with an audio signal."
      ],
      "returns": "AudioParam: gain If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's  gain/amplitude/volume)",
      "params": {
        "vol": "Number|Object: between 0 and 1.0  or a modulating signal/oscillator",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getAmp": {
      "description": [
        "Returns the value of output gain"
      ],
      "returns": "Number: Amplitude value between 0.0 and 1.0"
    },
    "freq": {
      "description": [
        "Set frequency of an oscillator to a value. Or, pass in an object such as an oscillator to modulate the frequency with an audio signal."
      ],
      "returns": "AudioParam: Frequency If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's frequency",
      "params": {
        "Frequency": "Number|Object: Frequency in Hz  or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Ramp time (in seconds)",
        "timeFromNow": "Number: (Optional) Schedule this event to happen  at x seconds from now"
      }
    },
    "getFreq": {
      "description": [
        "Returns the value of frequency of oscillator"
      ],
      "returns": "Number: Frequency of oscillator in Hertz"
    },
    "setType": {
      "description": [
        "Set type to 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "params": {
        "type": "String: 'sine', 'triangle', 'sawtooth' or 'square'."
      }
    },
    "getType": {
      "description": [
        "Returns current type of oscillator eg. 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "returns": "String: type of oscillator eg . 'sine', 'triangle', 'sawtooth' or 'square'."
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "pan": {
      "description": [
        "Pan between Left (-1) and Right (1)"
      ],
      "params": {
        "panning": "Number: Number between -1 and 1",
        "timeFromNow": "Number: schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current value of panPosition , between Left (-1) and Right (1)"
      ],
      "returns": "Number: panPosition of oscillator , between Left (-1) and Right (1)"
    },
    "phase": {
      "description": [
        "Set the phase of an oscillator between 0.0 and 1.0. In this implementation, phase is a delay time based on the oscillator's current frequency."
      ],
      "params": {
        "phase": "Number: float between 0.0 and 1.0"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Oscillator's output amplitude by a fixed value (i.e. turn it up!). Calling this method again will override the initial mult() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with multiplied output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this oscillator's amplitude values to a given range, and return the oscillator. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.SinOsc": {
    "description": [
      "Constructor: <code>new p5.SinOsc()</code>. This creates a Sine Wave Oscillator and is equivalent to <code> new p5.Oscillator('sine') </code> or creating a p5.Oscillator and then calling its method <code>setType('sine')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.TriOsc": {
    "description": [
      "Constructor: <code>new p5.TriOsc()</code>. This creates a Triangle Wave Oscillator and is equivalent to <code>new p5.Oscillator('triangle') </code> or creating a p5.Oscillator and then calling its method <code>setType('triangle')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SawOsc": {
    "description": [
      "Constructor: <code>new p5.SawOsc()</code>. This creates a SawTooth Wave Oscillator and is equivalent to <code> new p5.Oscillator('sawtooth') </code> or creating a p5.Oscillator and then calling its method <code>setType('sawtooth')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SqrOsc": {
    "description": [
      "Constructor: <code>new p5.SqrOsc()</code>. This creates a Square Wave Oscillator and is equivalent to <code> new p5.Oscillator('square') </code> or creating a p5.Oscillator and then calling its method <code>setType('square')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.Envelope": {
    "description": [
      "Envelopes are pre-defined amplitude distribution over time. Typically, envelopes are used to control the output volume of an object, a series of fades referred to as Attack, Decay, Sustain and Release ( <a href=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">ADSR</a> ). Envelopes can also control other Web Audio Parameters—for example, a p5.Envelope can control an Oscillator's frequency like this: <code>osc.freq(env)</code>.",
      "Use <code><a href=\"#/p5.Envelope/setRange\">setRange</a></code> to change the attack/release level. Use <code><a href=\"#/p5.Envelope/setADSR\">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime.",
      "Use the <code><a href=\"#/p5.Envelope/play\">play</a></code> method to play the entire envelope, the <code><a href=\"#/p5.Envelope/ramp\">ramp</a></code> method for a pingable trigger, or <code><a href=\"#/p5.Envelope/triggerAttack\">triggerAttack</a></code>/ <code><a href=\"#/p5.Envelope/triggerRelease\">triggerRelease</a></code> to trigger noteOn/noteOff."
    ],
    "attackTime": {
      "description": [
        "Time until envelope reaches attackLevel"
      ]
    },
    "attackLevel": {
      "description": [
        "Level once attack is complete."
      ]
    },
    "decayTime": {
      "description": [
        "Time until envelope reaches decayLevel."
      ]
    },
    "decayLevel": {
      "description": [
        "Level after decay. The envelope will sustain here until it is released."
      ]
    },
    "releaseTime": {
      "description": [
        "Duration of the release portion of the envelope."
      ]
    },
    "releaseLevel": {
      "description": [
        "Level at the end of the release."
      ]
    },
    "set": {
      "description": [
        "Reset the envelope with a series of time/value pairs."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds) before level  reaches attackLevel",
        "attackLevel": "Number: Typically an amplitude between  0.0 and 1.0",
        "decayTime": "Number: Time",
        "decayLevel": "Number: Amplitude (In a standard ADSR envelope,  decayLevel = sustainLevel)",
        "releaseTime": "Number: Release Time (in seconds)",
        "releaseLevel": "Number: Amplitude"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setRange": {
      "description": [
        "Set max (attackLevel) and min (releaseLevel) of envelope."
      ],
      "params": {
        "aLevel": "Number: attack level (defaults to 1)",
        "rLevel": "Number: release level (defaults to 0)"
      }
    },
    "setInput": {
      "description": [
        "Assign a parameter to be controlled by this envelope. If a p5.Sound object is given, then the p5.Envelope will control its output gain. If multiple inputs are provided, the env will control all of them."
      ],
      "params": {
        "inputs": "Object: (Optional) A p5.sound object or  Web Audio Param."
      }
    },
    "setExp": {
      "description": [
        "Set whether the envelope ramp is linear (default) or exponential. Exponential ramps can be useful because we perceive amplitude and frequency logarithmically."
      ],
      "params": {
        "isExp": "Boolean: true is exponential, false is linear"
      }
    },
    "play": {
      "description": [
        "Play tells the envelope to start acting on a given input. If the input is a p5.sound object (i.e. AudioIn, Oscillator, SoundFile), then Envelope will control its output volume. Envelopes can also be used to control any <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Audio Param.</a>"
      ],
      "params": {
        "unit": "Object: A p5.sound object or  Web Audio Param.",
        "startTime": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go. Input can be any p5.sound object, or a <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Param</a>."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time from now (in seconds)"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the Release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "ramp": {
      "description": [
        "Exponentially ramp to a value using the first two values from <code><a href=\"#/p5.Envelope/setADSR\">setADSR(attackTime, decayTime)</a></code> as <a href=\"https://en.wikipedia.org/wiki/RC_time_constant\"> time constants</a> for simple exponential ramps. If the value is higher than current value, it uses attackTime, while a decrease uses decayTime."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: When to trigger the ramp",
        "v": "Number: Target value",
        "v2": "Number: (Optional) Second target value (optional)"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Envelope's output amplitude by a fixed value. Calling this method again will override the initial mult() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this envelope's amplitude values to a given range, and return the envelope. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.Noise": {
    "description": [
      "Noise is a type of oscillator that generates a buffer with random values."
    ],
    "params": {
      "type": "String: Type of noise can be 'white' (default),  'brown' or 'pink'."
    },
    "setType": {
      "description": [
        "Set type of noise to 'white', 'pink' or 'brown'. White is the default."
      ],
      "params": {
        "type": "String: (Optional) 'white', 'pink' or 'brown'"
      }
    }
  },
  "p5.Pulse": {
    "description": [
      "Creates a Pulse object, an oscillator that implements Pulse Width Modulation. The pulse is created with two oscillators. Accepts a parameter for frequency, and to set the width between the pulses. See <a href=\" http://p5js.org/es/reference/#/p5.Oscillator\"> <code>p5.Oscillator</code> for a full list of methods."
    ],
    "params": {
      "freq": "Number: (Optional) Frequency in oscillations per second (Hz)",
      "w": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
    },
    "width": {
      "description": [
        "Set the width of a Pulse object (an oscillator that implements Pulse Width Modulation)."
      ],
      "params": {
        "width": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
      }
    }
  },
  "p5.AudioIn": {
    "description": [
      "Get audio from an input, i.e. your computer's microphone.",
      "Turn the mic on/off with the start() and stop() methods. When the mic is on, its volume can be measured with getLevel or by connecting an FFT object.",
      "If you want to hear the AudioIn, use the .connect() method. AudioIn does not connect to p5.sound output by default to prevent feedback.",
      "<em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/ Stream</a> API, which is not supported by certain browsers. Access in Chrome browser is limited to localhost and https, but access over http may be limited.</em>"
    ],
    "params": {
      "errorCallback": "Function: (Optional) A function to call if there is an error  accessing the AudioIn. For example,  Safari and iOS devices do not  currently allow microphone access."
    },
    "input": {},
    "output": {},
    "stream": {},
    "mediaStream": {},
    "currentSource": {},
    "enabled": {
      "description": [
        "Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access."
      ]
    },
    "amplitude": {
      "description": [
        "Input amplitude, connect to it by default but not to master out"
      ]
    },
    "start": {
      "description": [
        "Start processing audio input. This enables the use of other AudioIn methods like getLevel(). Note that by default, AudioIn is not connected to p5.sound's output. So you won't hear anything unless you use the connect() method.<br/>",
        "Certain browsers limit access to the user's microphone. For example, Chrome only allows access from localhost and over https. For this reason, you may want to include an errorCallback—a function that is called in case the browser won't provide mic access."
      ],
      "params": {
        "successCallback": "Function: (Optional) Name of a function to call on  success.",
        "errorCallback": "Function: (Optional) Name of a function to call if  there was an error. For example,  some browsers do not support  getUserMedia."
      }
    },
    "stop": {
      "description": [
        "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel(). If re-starting, the user may be prompted for permission access."
      ]
    },
    "connect": {
      "description": [
        "Connect to an audio unit. If no parameter is provided, will connect to the master output (i.e. your speakers).<br/>"
      ],
      "params": {
        "unit": "Object: (Optional) An object that accepts audio input,  such as an FFT"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.<br/>"
      ]
    },
    "getLevel": {
      "description": [
        "Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must .start() before using .getLevel().</em><br/>"
      ],
      "returns": "Number: Volume level (between 0.0 and 1.0)",
      "params": {
        "smoothing": "Number: (Optional) Smoothing is 0.0 by default.  Smooths values based on previous values."
      }
    },
    "amp": {
      "description": [
        "Set amplitude (volume) of a mic input between 0 and 1.0. <br/>"
      ],
      "params": {
        "vol": "Number: between 0 and 1.0",
        "time": "Number: (Optional) ramp time (optional)"
      }
    },
    "getSources": {
      "description": [
        "Returns a list of available input sources. This is a wrapper for <a title=\"MediaDevices.enumerateDevices() - Web APIs | MDN\" target=\"_blank\" href=  \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"</a> <blockquote>"
      ],
      "returns": "Promise: Returns a Promise that can be used in place of the callbacks, similar  to the enumerateDevices() method",
      "params": {
        "successCallback": "Function: (Optional) This callback function handles the sources when they  have been enumerated. The callback function  receives the deviceList array as its only argument",
        "errorCallback": "Function: (Optional) This optional callback receives the error  message as its argument."
      }
    },
    "setSource": {
      "description": [
        "Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support <a title=\"MediaDevices.enumerateDevices() - Web APIs | MDN\" target=\"_blank\" href= \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"\">https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"</a> <blockquote>"
      ],
      "params": {
        "num": "Number: position of input source in the array"
      }
    }
  },
  "p5.Effect": {
    "description": [
      "Effect is a base class for audio effects in p5. This module handles the nodes and methods that are common and useful for current and future effects.",
      "This class is extended by <a href=\"/reference/#/p5.Distortion\">p5.Distortion</a>, <a href=\"/reference/#/p5.Compressor\">p5.Compressor</a>, <a href=\"/reference/#/p5.Delay\">p5.Delay</a>, <a href=\"/reference/#/p5.Filter\">p5.Filter</a>, <a href=\"/reference/#/p5.Reverb\">p5.Reverb</a>."
    ],
    "params": {
      "ac": "Object: (Optional) Reference to the audio context of the p5 object",
      "input": "AudioNode: (Optional) Gain Node effect wrapper",
      "output": "AudioNode: (Optional) Gain Node effect wrapper",
      "_drywet": "Object: (Optional) Tone.JS CrossFade node (defaults to value: 1)",
      "wet": "AudioNode: (Optional) Effects that extend this class should connect  to the wet signal to this gain node, so that dry and wet  signals are mixed properly."
    },
    "amp": {
      "description": [
        "Set the output volume of the filter."
      ],
      "params": {
        "vol": "Number: (Optional) amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts until rampTime",
        "tFromNow": "Number: (Optional) schedule this event to happen in tFromNow seconds"
      }
    },
    "chain": {
      "description": [
        "Link effects together in a chain Example usage: filter.chain(reverb, delay, panner); May be used with an open-ended number of arguments"
      ],
      "params": {
        "arguments": "Object: (Optional) Chain together multiple sound objects"
      }
    },
    "drywet": {
      "description": [
        "Adjust the dry/wet value."
      ],
      "params": {
        "fade": "Number: (Optional) The desired drywet value (0 - 1.0)"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.js-sound, Web Audio Node, or use signal to control an AudioParam"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Filter": {
    "description": [
      "A p5.Filter uses a Web Audio Biquad Filter to filter the frequency response of an input source. Subclasses include: <a href=\"/reference/#/p5.LowPass\"><code>p5.LowPass</code></a>: Allows frequencies below the cutoff frequency to pass through, and attenuates frequencies above the cutoff.<br/> <a href=\"/reference/#/p5.HighPass\"><code>p5.HighPass</code></a>: The opposite of a lowpass filter. <br/> <a href=\"/reference/#/p5.BandPass\"><code>p5.BandPass</code></a>: Allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range.<br/>",
      "The <code>.res()</code> method controls either width of the bandpass, or resonance of the low/highpass cutoff frequency.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "type": "String: (Optional) 'lowpass' (default), 'highpass', 'bandpass'"
    },
    "biquadFilter": {
      "description": [
        "The p5.Filter is built with a <a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\"> Web Audio BiquadFilter Node</a>."
      ]
    },
    "process": {
      "description": [
        "Filter an audio signal according to a set of filter parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance/Width of the filter frequency  from 0.001 to 1000"
      }
    },
    "set": {
      "description": [
        "Set the frequency and the resonance of the filter."
      ],
      "params": {
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance (Q) from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "freq": {
      "description": [
        "Set the filter frequency, in Hz, from 10 to 22050 (the range of human hearing, although in reality most people hear in a narrower range)."
      ],
      "returns": "Number: value Returns the current frequency value",
      "params": {
        "freq": "Number: Filter Frequency",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "res": {
      "description": [
        "Controls either width of a bandpass frequency, or the resonance of a low/highpass cutoff frequency."
      ],
      "returns": "Number: value Returns the current res value",
      "params": {
        "res": "Number: Resonance/Width of filter freq  from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "gain": {
      "description": [
        "Controls the gain attribute of a Biquad Filter. This is distinctly different from .amp() which is inherited from p5.Effect .amp() controls the volume via the output gain node p5.Filter.gain() controls the gain parameter of a Biquad Filter node."
      ],
      "returns": "Number: Returns the current or updated gain value",
      "params": {
        "gain": "Number"
      }
    },
    "toggle": {
      "description": [
        "Toggle function. Switches between the specified type and allpass"
      ],
      "returns": "Boolean: [Toggle value]"
    },
    "setType": {
      "description": [
        "Set the type of a p5.Filter. Possible types include: \"lowpass\" (default), \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"."
      ],
      "params": {
        "t": "String"
      }
    }
  },
  "p5.LowPass": {
    "description": [
      "Constructor: <code>new p5.LowPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('lowpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.HighPass": {
    "description": [
      "Constructor: <code>new p5.HighPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('highpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.BandPass": {
    "description": [
      "Constructor: <code>new p5.BandPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('bandpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.EQ": {
    "description": [
      "p5.EQ is an audio effect that performs the function of a multiband audio equalizer. Equalization is used to adjust the balance of frequency compoenents of an audio signal. This process is commonly used in sound production and recording to change the waveform before it reaches a sound output device. EQ can also be used as an audio effect to create interesting distortions by filtering out parts of the spectrum. p5.EQ is built using a chain of Web Audio Biquad Filter Nodes and can be instantiated with 3 or 8 bands. Bands can be added or removed from the EQ by directly modifying p5.EQ.bands (the array that stores filters).",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "returns": "Object: p5.EQ object",
    "params": {
      "_eqsize": "Number: (Optional) Constructor will accept 3 or 8, defaults to 3"
    },
    "bands": {
      "description": [
        "The p5.EQ is built with abstracted p5.Filter objects. To modify any bands, use methods of the <a href=\"/reference/#/p5.Filter\" title=\"p5.Filter reference\"> p5.Filter</a> API, especially <code>gain</code> and <code>freq</code>. Bands are stored in an array, with indices 0 - 3, or 0 - 7"
      ]
    },
    "process": {
      "description": [
        "Process an input by connecting it to the EQ"
      ],
      "params": {
        "src": "Object: Audio source"
      }
    }
  },
  "p5.Panner3D": {
    "description": [
      "Panner3D is based on the <a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>. This panner is a spatial processing node that allows audio to be positioned and oriented in 3D space.",
      "The position is relative to an <a title=\"Web Audio Listener docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/AudioListener\"> Audio Context Listener</a>, which can be accessed by <code>p5.soundOut.audiocontext.listener</code>"
    ],
    "panner": {
      "description": [
        "<a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>",
        "Properties include <ul> <li><a title=\"w3 spec for Panning Model\" href=\"<a href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\"\">https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\"</a><blockquote>"
      ]
    },
    "process": {
      "description": [
        "Connect an audio sorce"
      ],
      "params": {
        "src": "Object: Input source"
      }
    },
    "set": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "positionX": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionY": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionZ": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orient": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "orientX": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientY": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientZ": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "setFalloff": {
      "description": [
        "Set the rolloff factor and max distance"
      ],
      "params": {
        "maxDistance": "Number (Optional)",
        "rolloffFactor": "Number (Optional)"
      }
    },
    "maxDist": {
      "description": [
        "Maxium distance between the source and the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "maxDistance": "Number"
      }
    },
    "rollof": {
      "description": [
        "How quickly the volume is reduced as the source moves away from the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "rolloffFactor": "Number"
      }
    }
  },
  "p5.Delay": {
    "description": [
      "Delay is an echo effect. It processes an existing sound source, and outputs a delayed version of that sound. The p5.Delay can produce different effects depending on the delayTime, feedback, filter, and type. In the example below, a feedback of 0.5 (the default value) will produce a looping delay that decreases in volume by 50% each repeat. A filter will cut out the high frequencies so that the delay does not sound as piercing as the original source.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "leftDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "rightDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "process": {
      "description": [
        "Add delay to an audio signal according to a set of delay parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "delayTime": "Number: (Optional) Time (in seconds) of the delay/echo.  Some browsers limit delayTime to  1 second.",
        "feedback": "Number: (Optional) sends the delay back through itself  in a loop that decreases in volume  each time.",
        "lowPass": "Number: (Optional) Cutoff frequency. Only frequencies  below the lowPass will be part of the  delay."
      }
    },
    "delayTime": {
      "description": [
        "Set the delay (echo) time, in seconds. Usually this value will be a floating point number between 0.0 and 1.0."
      ],
      "params": {
        "delayTime": "Number: Time (in seconds) of the delay"
      }
    },
    "feedback": {
      "description": [
        "Feedback occurs when Delay sends its signal back through its input in a loop. The feedback amount determines how much signal to send each time through the loop. A feedback greater than 1.0 is not desirable because it will increase the overall output each time through the loop, creating an infinite feedback loop. The default value is 0.5"
      ],
      "returns": "Number: Feedback value",
      "params": {
        "feedback": "Number|Object: 0.0 to 1.0, or an object such as an  Oscillator that can be used to  modulate this param"
      }
    },
    "filter": {
      "description": [
        "Set a lowpass filter frequency for the delay. A lowpass filter will cut off any frequencies higher than the filter frequency."
      ],
      "params": {
        "cutoffFreq": "Number|Object: A lowpass filter will cut off any  frequencies higher than the filter frequency.",
        "res": "Number|Object: Resonance of the filter frequency  cutoff, or an object (i.e. a p5.Oscillator)  that can be used to modulate this parameter.  High numbers (i.e. 15) will produce a resonance,  low numbers (i.e. .2) will produce a slope."
      }
    },
    "setType": {
      "description": [
        "Choose a preset type of delay. 'pingPong' bounces the signal from the left to the right channel to produce a stereo effect. Any other parameter will revert to the default delay setting."
      ],
      "params": {
        "type": "String|Number: 'pingPong' (1) or 'default' (0)"
      }
    },
    "amp": {
      "description": [
        "Set the output level of the delay effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Reverb": {
    "description": [
      "Reverb adds depth to a sound through a large number of decaying echoes. It creates the perception that sound is occurring in a physical space. The p5.Reverb has parameters for Time (how long does the reverb last) and decayRate (how much the sound decays with each echo) that can be set with the .set() or .process() methods. The p5.Convolver extends p5.Reverb allowing you to recreate the sound of actual physical spaces through convolution.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "process": {
      "description": [
        "Connect a source to the reverb, and assign reverb parameters."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output.",
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "set": {
      "description": [
        "Set the reverb settings. Similar to .process(), but without assigning a new input."
      ],
      "params": {
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "amp": {
      "description": [
        "Set the output level of the reverb effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Convolver": {
    "description": [
      "p5.Convolver extends p5.Reverb. It can emulate the sound of real physical spaces through a process called <a href=\" https://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\"> convolution</a>.",
      "Convolution multiplies any audio input by an \"impulse response\" to simulate the dispersion of sound over time. The impulse response is generated from an audio file that you provide. One way to generate an impulse response is to pop a balloon in a reverberant space and record the echo. Convolution can also be used to experiment with sound.",
      "Use the method <code>createConvolution(path)</code> to instantiate a p5.Convolver with a path to your impulse response audio file."
    ],
    "params": {
      "path": "String: path to a sound file",
      "callback": "Function: (Optional) function to call when loading succeeds",
      "errorCallback": "Function: (Optional) function to call if loading fails.  This function will receive an error or  XMLHttpRequest object with information  about what went wrong."
    },
    "convolverNode": {
      "description": [
        "Internally, the p5.Convolver uses the a <a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\"> Web Audio Convolver Node</a>."
      ]
    },
    "impulses": {
      "description": [
        "If you load multiple impulse files using the .addImpulse method, they will be stored as Objects in this Array. Toggle between them with the <code>toggleImpulse(id)</code> method."
      ]
    },
    "process": {
      "description": [
        "Connect a source to the convolver."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "addImpulse": {
      "description": [
        "Load and assign a new Impulse Response to the p5.Convolver. The impulse is added to the <code>.impulses</code> array. Previous impulses can be accessed with the <code>.toggleImpulse(id)</code> method."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "resetImpulse": {
      "description": [
        "Similar to .addImpulse, except that the <code>.impulses</code> Array is reset to save memory. A new <code>.impulses</code> array is created with this impulse as the only item."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "toggleImpulse": {
      "description": [
        "If you have used <code>.addImpulse()</code> to add multiple impulses to a p5.Convolver, then you can use this method to toggle between the items in the <code>.impulses</code> Array. Accepts a parameter to identify which impulse you wish to use, identified either by its original filename (String) or by its position in the <code>.impulses </code> Array (Number).<br/> You can access the objects in the .impulses Array directly. Each Object has two attributes: an <code>.audioBuffer</code> (type: Web Audio <a href=\" http://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\"> AudioBuffer)</a> and a <code>.name</code>, a String that corresponds with the original filename."
      ],
      "params": {
        "id": "String|Number: Identify the impulse by its original filename  (String), or by its position in the  <code>.impulses</code> Array (Number)."
      }
    }
  },
  "p5.Phrase": {
    "description": [
      "A phrase is a pattern of musical events over time, i.e. a series of notes and rests.",
      "Phrases must be added to a p5.Part for playback, and each part can play multiple phrases at the same time. For example, one Phrase might be a kick drum, another could be a snare, and another could be the bassline.",
      "The first parameter is a name so that the phrase can be modified or deleted later. The callback is a a function that this phrase will call at every step—for example it might be called <code>playNote(value){}</code>. The array determines which value is passed into the callback at each step of the phrase. It can be numbers, an object with multiple numbers, or a zero (0) indicates a rest so the callback won't be called)."
    ],
    "params": {
      "name": "String: Name so that you can access the Phrase.",
      "callback": "Function: The name of a function that this phrase  will call. Typically it will play a sound,  and accept two parameters: a time at which  to play the sound (in seconds from now),  and a value from the sequence array. The  time should be passed into the play() or  start() method to ensure precision.",
      "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
    },
    "sequence": {
      "description": [
        "Array of values to pass into the callback at each step of the phrase. Depending on the callback function's requirements, these values may be numbers, strings, or an object with multiple parameters. Zero (0) indicates a rest."
      ]
    }
  },
  "p5.Part": {
    "description": [
      "A p5.Part plays back one or more p5.Phrases. Instantiate a part with steps and tatums. By default, each step represents a 1/16th note.",
      "See p5.Phrase for more about musical timing."
    ],
    "params": {
      "steps": "Number: (Optional) Steps in the part",
      "tatums": "Number: (Optional) Divisions of a beat, e.g. use 1/4, or 0.25 for a quarter note (default is 1/16, a sixteenth note)"
    },
    "setBPM": {
      "description": [
        "Set the tempo of this part, in Beats Per Minute."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: (Optional) Seconds from now"
      }
    },
    "getBPM": {
      "description": [
        "Returns the tempo, in Beats Per Minute, of this part."
      ],
      "returns": "Number:"
    },
    "start": {
      "description": [
        "Start playback of this part. It will play through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop playback of this part. It will begin looping through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "noLoop": {
      "description": [
        "Tell the part to stop looping."
      ]
    },
    "stop": {
      "description": [
        "Stop the part and cue it to step 0. Playback will resume from the begining of the Part when it is played again."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "pause": {
      "description": [
        "Pause the part. Playback will resume from the current step."
      ],
      "params": {
        "time": "Number: seconds from now"
      }
    },
    "addPhrase": {
      "description": [
        "Add a p5.Phrase to this Part."
      ],
      "params": {
        "phrase": "p5.Phrase: reference to a p5.Phrase"
      }
    },
    "removePhrase": {
      "description": [
        "Remove a phrase from this part, based on the name it was given when it was created."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "getPhrase": {
      "description": [
        "Get a phrase from this part, based on the name it was given when it was created. Now you can modify its array."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "replaceSequence": {
      "description": [
        "Find all sequences with the specified name, and replace their patterns with the specified array."
      ],
      "params": {
        "phraseName": "String",
        "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
      }
    },
    "onStep": {
      "description": [
        "Set the function that will be called at every step. This will clear the previous function."
      ],
      "params": {
        "callback": "Function: The name of the callback  you want to fire  on every beat/tatum."
      }
    }
  },
  "p5.Score": {
    "description": [
      "A Score consists of a series of Parts. The parts will be played back in order. For example, you could have an A part, a B part, and a C part, and play them back in this order <code>new p5.Score(a, a, b, a, c)</code>"
    ],
    "params": {
      "parts": "p5.Part: (Optional) One or multiple parts, to be played in sequence."
    },
    "start": {
      "description": [
        "Start playback of the score."
      ]
    },
    "stop": {
      "description": [
        "Stop playback of the score."
      ]
    },
    "pause": {
      "description": [
        "Pause playback of the score."
      ]
    },
    "loop": {
      "description": [
        "Loop playback of the score."
      ]
    },
    "noLoop": {
      "description": [
        "Stop looping playback of the score. If it is currently playing, this will go into effect after the current round of playback completes."
      ]
    },
    "setBPM": {
      "description": [
        "Set the tempo for all parts in the score"
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.SoundLoop": {
    "description": [
      "SoundLoop"
    ],
    "params": {
      "callback": "Function: this function will be called on each iteration of theloop",
      "interval": "Number|String: (Optional) amount of time (if a number) or beats (if a string, following <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention) for each iteration of the loop. Defaults to 1 second."
    },
    "bpm": {
      "description": [
        "Getters and Setters, setting any paramter will result in a change in the clock's frequency, that will be reflected after the next callback beats per minute (defaults to 60)"
      ]
    },
    "timeSignature": {
      "description": [
        "number of quarter notes in a measure (defaults to 4)"
      ]
    },
    "interval": {
      "description": [
        "length of the loops interval"
      ]
    },
    "iterations": {
      "description": [
        "how many times the callback has been called so far"
      ]
    },
    "musicalTimeMode": {
      "description": [
        "musicalTimeMode uses <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention true if string, false if number"
      ]
    },
    "maxIterations": {
      "description": [
        "Set a limit to the number of loops to play. defaults to Infinity"
      ]
    },
    "start": {
      "description": [
        "Start the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a starting time"
      }
    },
    "stop": {
      "description": [
        "Stop the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a stopping time"
      }
    },
    "pause": {
      "description": [
        "Pause the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a pausing time"
      }
    },
    "syncedStart": {
      "description": [
        "Synchronize loops. Use this method to start two more more loops in synchronization or to start a loop in synchronization with a loop that is already playing This method will schedule the implicit loop in sync with the explicit master loop i.e. loopToStart.syncedStart(loopToSyncWith)"
      ],
      "params": {
        "otherLoop": "Object: a p5.SoundLoop to sync with",
        "timeFromNow": "Number: (Optional) Start the loops in sync after timeFromNow seconds"
      }
    }
  },
  "p5.Compressor": {
    "description": [
      "Compressor is an audio effect class that performs dynamics compression on an audio input source. This is a very commonly used technique in music and sound production. Compression creates an overall louder, richer, and fuller sound by lowering the volume of louds and raising that of softs. Compression can be used to avoid clipping (sound distortion due to peaks in volume) and is especially useful when many sounds are played at once. Compression can be used on individual sound sources in addition to the master output.",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "compressor": {
      "description": [
        "The p5.Compressor is built with a <a href=\"https://www.w3.org/TR/webaudio/#the-dynamicscompressornode-interface\"  target=\"_blank\" title=\"W3 spec for Dynamics Compressor Node\">Web Audio Dynamics Compressor Node  </a>"
      ]
    },
    "process": {
      "description": [
        "Performs the same function as .connect, but also accepts optional parameters to set compressor's audioParams"
      ],
      "params": {
        "src": "Object: Sound source to be connected",
        "attack": "Number: (Optional) The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: (Optional) The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: (Optional) The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "set": {
      "description": [
        "Set the parameters of a compressor."
      ],
      "params": {
        "attack": "Number: The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "attack": {
      "description": [
        "Get current attack or set value w/ time ramp"
      ],
      "params": {
        "attack": "Number: (Optional) Attack is the amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "knee": {
      "description": [
        "Get current knee or set value w/ time ramp"
      ],
      "params": {
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "ratio": {
      "description": [
        "Get current ratio or set value w/ time ramp"
      ],
      "params": {
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "threshold": {
      "description": [
        "Get current threshold or set value w/ time ramp"
      ],
      "params": {
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "release": {
      "description": [
        "Get current release or set value w/ time ramp"
      ],
      "params": {
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "reduction": {
      "description": [
        "Return the current reduction value"
      ],
      "returns": "Number: Value of the amount of gain reduction that is applied to the signal"
    }
  },
  "p5.PeakDetect": {
    "description": [
      "PeakDetect works in conjunction with p5.FFT to look for onsets in some or all of the frequency spectrum.",
      "To use p5.PeakDetect, call <code>update</code> in the draw loop and pass in a p5.FFT object.",
      "You can listen for a specific part of the frequency spectrum by setting the range between <code>freq1</code> and <code>freq2</code>.",
      "<code>threshold</code> is the threshold for detecting a peak, scaled between 0 and 1. It is logarithmic, so 0.1 is half as loud as 1.0.",
      "The update method is meant to be run in the draw loop, and <b>frames</b> determines how many loops must pass before another peak can be detected. For example, if the frameRate() = 60, you could detect the beat of a 120 beat-per-minute song with this equation: <code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>",
      "Based on example contribtued by @b2renger, and a simple beat detection explanation by <a href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" target=\"_blank\">Felix Turner</a>."
    ],
    "params": {
      "freq1": "Number: (Optional) lowFrequency - defaults to 20Hz",
      "freq2": "Number: (Optional) highFrequency - defaults to 20000 Hz",
      "threshold": "Number: (Optional) Threshold for detecting a beat between 0 and 1  scaled logarithmically where 0.1 is 1/2 the loudness  of 1.0. Defaults to 0.35.",
      "framesPerPeak": "Number: (Optional) Defaults to 20."
    },
    "isDetected": {
      "description": [
        "isDetected is set to true when a peak is detected."
      ]
    },
    "update": {
      "description": [
        "The update method is run in the draw loop.",
        "Accepts an FFT object. You must call .analyze() on the FFT object prior to updating the peakDetect because it relies on a completed FFT analysis."
      ],
      "params": {
        "fftObject": "p5.FFT: A p5.FFT object"
      }
    },
    "onPeak": {
      "description": [
        "onPeak accepts two arguments: a function to call when a peak is detected. The value of the peak, between 0.0 and 1.0, is passed to the callback."
      ],
      "params": {
        "callback": "Function: Name of a function that will  be called when a peak is  detected.",
        "val": "Object: (Optional) Optional value to pass  into the function when  a peak is detected."
      }
    }
  },
  "p5.SoundRecorder": {
    "description": [
      "Record sounds for playback and/or to save as a .wav file. The p5.SoundRecorder records all sound output from your sketch, or can be assigned a specific source with setInput().",
      "The record() method accepts a p5.SoundFile as a parameter. When playback is stopped (either after the given amount of time, or with the stop() method), the p5.SoundRecorder will send its recording to that p5.SoundFile for playback."
    ],
    "setInput": {
      "description": [
        "Connect a specific device to the p5.SoundRecorder. If no parameter is given, p5.SoundRecorer will record all audible p5.sound from your sketch."
      ],
      "params": {
        "unit": "Object: (Optional) p5.sound object or a web audio unit  that outputs sound"
      }
    },
    "record": {
      "description": [
        "Start recording. To access the recording, provide a p5.SoundFile as the first parameter. The p5.SoundRecorder will send its recording to that p5.SoundFile for playback once recording is complete. Optional parameters include duration (in seconds) of the recording, and a callback function that will be called once the complete recording has been transfered to the p5.SoundFile."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile",
        "duration": "Number: (Optional) Time (in seconds)",
        "callback": "Function: (Optional) The name of a function that will be  called once the recording completes"
      }
    },
    "stop": {
      "description": [
        "Stop the recording. Once the recording is stopped, the results will be sent to the p5.SoundFile that was given on .record(), and if a callback function was provided on record, that function will be called."
      ]
    }
  },
  "p5.Distortion": {
    "description": [
      "A Distortion effect created with a Waveshaper Node, with an approach adapted from <a href=\"http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\">Kevin Ennis</a>",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
      "oversample": "String: (Optional) 'none', '2x', or '4x'."
    },
    "WaveShaperNode": {
      "description": [
        "The p5.Distortion is built with a <a href=\"http://www.w3.org/TR/webaudio/#WaveShaperNode\"> Web Audio WaveShaper Node</a>."
      ]
    },
    "process": {
      "description": [
        "Process a sound source, optionally specify amount and oversample values."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "set": {
      "description": [
        "Set the amount and oversample of the waveshaper distortion."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "getAmount": {
      "description": [
        "Return the distortion amount, typically between 0-1."
      ],
      "returns": "Number: Unbounded distortion amount.  Normal values range from 0-1."
    },
    "getOversample": {
      "description": [
        "Return the oversampling."
      ],
      "returns": "String: Oversample can either be 'none', '2x', or '4x'."
    }
  },
  "p5.Gain": {
    "description": [
      "A gain node is useful to set the relative volume of sound. It's typically used to build mixers."
    ],
    "setInput": {
      "description": [
        "Connect a source to the gain node."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    },
    "amp": {
      "description": [
        "Set the output level of the gain node."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    }
  },
  "p5.AudioVoice": {
    "description": [
      "Base class for monophonic synthesizers. Any extensions of this class should follow the API and implement the methods below in order to remain compatible with p5.PolySynth();"
    ],
    "connect": {
      "description": [
        "Connect to p5 objects or Web Audio Nodes"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect from soundOut"
      ]
    }
  },
  "p5.MonoSynth": {
    "description": [
      "A MonoSynth is used as a single voice for sound synthesis. This is a class to be used in conjunction with the PolySynth class. Custom synthesizers should be built inheriting from this class."
    ],
    "attack": {
      "description": [
        "Getters and Setters"
      ]
    },
    "decay": {},
    "sustain": {},
    "release": {},
    "play": {
      "description": [
        "Play tells the MonoSynth to start playing a note. This method schedules the calling of .triggerAttack and .triggerRelease."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope. Defaults to 0.15 seconds."
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "amp": {
      "description": [
        "MonoSynth amp"
      ],
      "returns": "Number: new volume value",
      "params": {
        "vol": "Number: desired volume",
        "rampTime": "Number: (Optional) Time to reach new volume"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  },
  "p5.OnsetDetect": {
    "description": [
      "Listen for onsets (a sharp increase in volume) within a given frequency range."
    ],
    "params": {
      "freqLow": "Number: Low frequency",
      "freqHigh": "Number: High frequency",
      "threshold": "Number: Amplitude threshold between 0 (no energy) and 1 (maximum)",
      "callback": "Function: Function to call when an onset is detected"
    }
  },
  "p5.PolySynth": {
    "description": [
      "An AudioVoice is used as a single voice for sound synthesis. The PolySynth class holds an array of AudioVoice, and deals with voices allocations, with setting notes to be played, and parameters to be set."
    ],
    "params": {
      "synthVoice": "Number: (Optional) A monophonic synth voice inheriting  the AudioVoice class. Defaults to p5.MonoSynth",
      "maxVoices": "Number: (Optional) Number of voices, defaults to 8;"
    },
    "notes": {
      "description": [
        "An object that holds information about which notes have been played and which notes are currently being played. New notes are added as keys on the fly. While a note has been attacked, but not released, the value of the key is the audiovoice which is generating that note. When notes are released, the value of the key becomes undefined."
      ]
    },
    "polyvalue": {
      "description": [
        "A PolySynth must have at least 1 voice, defaults to 8"
      ]
    },
    "AudioVoice": {
      "description": [
        "Monosynth that generates the sound for each note that is triggered. The p5.PolySynth defaults to using the p5.MonoSynth as its voice."
      ]
    },
    "play": {
      "description": [
        "Play a note by triggering noteAttack and noteRelease with sustain time"
      ],
      "params": {
        "note": "Number: (Optional) midi note to play (ranging from 0 to 127 - 60 being a middle C)",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "noteADSR": {
      "description": [
        "noteADSR sets the envelope for a specific note that has just been triggered. Using this method modifies the envelope of whichever audiovoice is being used to play the desired note. The envelope should be reset before noteRelease is called in order to prevent the modified envelope from being used on other notes."
      ],
      "params": {
        "note": "Number: (Optional) Midi note on which ADSR should be set.",
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setADSR": {
      "description": [
        "Set the PolySynths global envelope. This method modifies the envelopes of each monosynth so that all notes are played with this envelope."
      ],
      "params": {
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "noteAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of a MonoSynth. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)/",
        "secondsFromNow": "Number: (Optional) time from now (in seconds)"
      }
    },
    "noteRelease": {
      "description": [
        "Trigger the Release of an AudioVoice note. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.  If no value is provided, all notes will be released.",
        "secondsFromNow": "Number: (Optional) time to trigger the release"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  }
}
