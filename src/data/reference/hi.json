{
  "h1": "संदर्भ",
  "reference-search": "एपीआई खोजें",
  "reference-description1": "आप जो खोज रहे हैं वह नहीं मिल रहा है? शायद आपको अंदर जांचना चाहिए",
  "reference-description3": "आप संदर्भ का एक संस्करण डाउनलोड कर सकते हैं",
  "reference-contribute2": "कृपया हमें बताएं",
  "reference-error1": "क्या आपको कोई गलती मिली?",
  "reference-error3": "कृपया बेझिझक करें",
  "reference-error5": "और पुल अनुरोध का संकेत देते हैं।",
  "reference-example": "उदाहरण",
  "reference-description": "विवरण",
  "reference-extends": "फैली",
  "reference-parameters": "मापदंडों",
  "reference-syntax": "वाक्य-विन्यास",
  "reference-returns": "रिटर्न",
  "Environment": "वातावरण",
  "Color": "रंग",
  "Color Conversion": "Color Conversion",
  "Creating & Reading": "सृजन और पढ़ना",
  "Setting": "विन्यास",
  "Shape": "आकार",
  "2D Primitives": "2D आदिम",
  "Attributes": "गुण",
  "Curves": "घटता",
  "Vertex": "कोने",
  "Constants": "स्थिरांक",
  "Structure": "संरचना",
  "DOM": "डोम",
  "Rendering": "प्रस्तुत करना",
  "Foundation": "नींव",
  "Transform": "परिवर्तन",
  "Data": "डेटा",
  "LocalStorage": "लोकाल्स्तोरागे",
  "Dictionary": "शब्दकोश",
  "Events": "घटनाक्रम",
  "Acceleration": "त्वरण",
  "Keyboard": "कीबोर्ड",
  "Mouse": "माउस",
  "Touch": "स्पर्श",
  "Image": "चित्र",
  "Loading & Displaying": "लोड और दिखाएँ",
  "Pixels": "पिक्सल",
  "IO": "प्रवेश और निकास",
  "Input": "प्रविष्टि",
  "Output": "उत्पादन",
  "Table": "तालिका",
  "Math": "गणित",
  "Calculation": "गणना",
  "Vector": "सदिश",
  "Noise": "शोर",
  "Random": "बेतरतीब",
  "Trigonometry": "त्रिकोणमिति",
  "Typography": "टाइपोग्राफी",
  "Array Functions": "सरणी कार्य करता है",
  "Conversion": "रूपांतरण",
  "String Functions": "स्ट्रिंग फ़ंक्शंस",
  "Time & Date": "समय और दिनांक",
  "3D Primitives": "3 डी प्रिमिटिव",
  "Lights, Camera": "रोशनी, कैमरा",
  "Interaction": "बातचीत",
  "Lights": "दीपक",
  "3D Models": "3 डी मॉडल",
  "Material": "सामग्री",
  "Camera": "कैमरा",
  "p5": {
    "description": [
      "This is the p5 instance constructor.",
      "A p5 instance holds all the properties and methods related to a p5 sketch. It expects an incoming sketch closure and it can also take an optional node parameter for attaching the generated p5 canvas to a node. The sketch closure takes the newly created p5 instance as its sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.",
      "A p5 sketch can run in \"global\" or \"instance\" mode: \"global\" - all properties and methods are attached to the window \"instance\" - all properties and methods are bound to this p5 object"
    ],
    "returns": "P5: a p5 instance",
    "params": {
      "sketch": "Function: a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,  <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the  given p5 instance",
      "node": "HTMLElement: (Optional) element to attach canvas to"
    },
    "describe": {
      "description": [
        "Creates a screen reader accessible description for the canvas. The first parameter should be a string with a description of the canvas. The second parameter is optional. If specified, it determines how the description is displayed.",
        "<code class=\"language-javascript\">describe(text, LABEL)</code> displays the description to all users as a <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\"> tombstone or exhibit label/caption</a> in a div adjacent to the canvas. You can style it as you wish in your CSS.",
        "<code class=\"language-javascript\">describe(text, FALLBACK)</code> makes the description accessible to screen-reader users only, in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> a sub DOM inside the canvas element</a>. If a second parameter is not specified, by default, the description will only be available to screen-reader users."
      ],
      "params": {
        "text": "String: description of the canvas",
        "display": "Constant: (Optional) either LABEL or FALLBACK"
      }
    },
    "describeElement": {
      "description": [
        "This function creates a screen-reader accessible description for elements —shapes or groups of shapes that create meaning together— in the canvas. The first paramater should be the name of the element. The second parameter should be a string with a description of the element. The third parameter is optional. If specified, it determines how the element description is displayed.",
        "<code class=\"language-javascript\">describeElement(name, text, LABEL)</code> displays the element description to all users as a <a href=\"https://en.wikipedia.org/wiki/Museum_label\" target=\"_blank\"> tombstone or exhibit label/caption</a> in a div adjacent to the canvas. You can style it as you wish in your CSS.",
        "<code class=\"language-javascript\">describeElement(name, text, FALLBACK)</code> makes the element description accessible to screen-reader users only, in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> a sub DOM inside the canvas element</a>. If a second parameter is not specified, by default, the element description will only be available to screen-reader users."
      ],
      "params": {
        "name": "String: name of the element",
        "text": "String: description of the element",
        "display": "Constant: (Optional) either LABEL or FALLBACK"
      }
    },
    "textOutput": {
      "description": [
        "<code class=\"language-javascript\">textOutput()</code> creates a screenreader accessible output that describes the shapes present on the canvas. The general description of the canvas includes canvas size, canvas color, and number of elements in the canvas (example: 'Your output is a, 400 by 400 pixels, lavender blue canvas containing the following 4 shapes:'). This description is followed by a list of shapes where the color, position, and area of each shape are described (example: \"orange ellipse at top left covering 1% of the canvas\"). Each element can be selected to get more details. A table of elements is also provided. In this table, shape, color, location, coordinates and area are described (example: \"orange ellipse location=top left area=2\").",
        "<code class=\"language-javascript\">textOutput()</code> and <code class=\"language-javascript\">textOutput(FALLBACK)</code> make the output available in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> a sub DOM inside the canvas element</a> which is accessible to screen readers. <code class=\"language-javascript\">textOutput(LABEL)</code> creates an additional div with the output adjacent to the canvas, this is useful for non-screen reader users that might want to display the output outside of the canvas' sub DOM as they code. However, using LABEL will create unnecessary redundancy for screen reader users. We recommend using LABEL only as part of the development process of a sketch and removing it before publishing or sharing with screen reader users."
      ],
      "params": {
        "display": "Constant: (Optional) either FALLBACK or LABEL"
      }
    },
    "gridOutput": {
      "description": [
        "<code class=\"language-javascript\">gridOutput()</code> lays out the content of the canvas in the form of a grid (html table) based on the spatial location of each shape. A brief description of the canvas is available before the table output. This description includes: color of the background, size of the canvas, number of objects, and object types (example: \"lavender blue canvas is 200 by 200 and contains 4 objects - 3 ellipses 1 rectangle\"). The grid describes the content spatially, each element is placed on a cell of the table depending on its position. Within each cell an element the color and type of shape of that element are available (example: \"orange ellipse\"). These descriptions can be selected individually to get more details. A list of elements where shape, color, location, and area are described (example: \"orange ellipse location=top left area=1%\") is also available.",
        "<code class=\"language-javascript\">gridOutput()</code> and <code class=\"language-javascript\">gridOutput(FALLBACK)</code> make the output available in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Hit_regions_and_accessibility\" target=\"_blank\"> a sub DOM inside the canvas element</a> which is accessible to screen readers. <code class=\"language-javascript\">gridOutput(LABEL)</code> creates an additional div with the output adjacent to the canvas, this is useful for non-screen reader users that might want to display the output outside of the canvas' sub DOM as they code. However, using LABEL will create unnecessary redundancy for screen reader users. We recommend using LABEL only as part of the development process of a sketch and removing it before publishing or sharing with screen reader users."
      ],
      "params": {
        "display": "Constant: (Optional) either FALLBACK or LABEL"
      }
    },
    "alpha": {
      "description": [
        "Extracts the alpha value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "blue": {
      "description": [
        "Extracts the blue value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "brightness": {
      "description": [
        "Extracts the HSB brightness value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "color": {
      "description": [
        "रंग डेटाटाइप के चरों में भंडारण के लिए रंग बनाता है। पैरामीटर को वर्तमान <a href=\"#/p5/colorMode\">colorMode()</a> के आधार पर RGB या HSB मानों के रूप में व्याख्यायित किया जाता है। डिफ़ॉल्ट मोड आरजीबी मान 0 से 255 तक है और इसलिए, फ़ंक्शन कॉल रंग (255, 204, 0) एक चमकदार पीला रंग लौटाएगा।",
        "ध्यान दें कि यदि <a href=\"#/p5/color\">color()</a> को केवल एक मान प्रदान किया जाता है, तो इसे ग्रेस्केल मान के रूप में समझा जाएगा। दूसरा मान जोड़ें, और यह होगा अल्फा पारदर्शिता के लिए उपयोग किया जाता है। जब तीन मान निर्दिष्ट किए जाते हैं, तो उन्हें आरजीबी या एचएसबी मान के रूप में व्याख्या किया जाता है। चौथा मान जोड़ने से अल्फा पारदर्शिता लागू होती है।",
        "यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग स्ट्रिंग और सभी नामित रंग स्ट्रिंग समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।"
      ],
      "returns": "फिक्स: परिणामस्वरूप रंग",
      "params": {
        "gray": "Number: number specifying value between white and black.",
        "alpha": "Number: (Optional) alpha value relative to current color range  (default is 0-255)",
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "value": "String: a color string",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color"
      }
    },
    "green": {
      "description": [
        "Extracts the green value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "hue": {
      "description": [
        "रंग या पिक्सेल सरणी से रंग मान निकालता है।",
        "ह्यू एचएसबी और एचएसएल दोनों में मौजूद है। एचएसबी रंग ऑब्जेक्ट के साथ आपूर्ति किए जाने पर यह फ़ंक्शन एचएसबी-सामान्यीकृत रंग लौटाएगा (या जब रंग मोड एचएसबी होने पर पिक्सेल सरणी के साथ आपूर्ति की जाती है), लेकिन एचएसएल-सामान्यीकृत रंग के लिए डिफ़ॉल्ट होगा अन्यथा। (मान केवल तभी भिन्न होंगे जब प्रत्येक सिस्टम के लिए अधिकतम ह्यू सेटिंग अलग हो।)"
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "lerpColor": {
      "description": [
        "दो रंगों को मिलाता है उनके बीच कहीं तीसरा रंग खोजने के लिए। एएमटी पैरामीटर दो मानों के बीच इंटरपोलेट करने की मात्रा है जहां 0.0 पहले रंग के बराबर है, 0.1 पहले रंग के बहुत करीब है, 0.5 बीच में आधा है, आदि। एक 0 से नीचे की राशि को 0 माना जाएगा। इसी तरह, 1 से ऊपर की राशि को 1 पर सीमित कर दिया जाएगा। यह <a href=\"#/p5/lerp\">lerp()</a> के व्यवहार से अलग है, लेकिन आवश्यक है क्योंकि अन्यथा सीमा के बाहर की संख्याएँ अजीब और अप्रत्याशित रंग उत्पन्न करेंगी।",
        "जिस तरह से रंगों को प्रक्षेपित किया जाता है वह वर्तमान रंग मोड पर निर्भर करता है।"
      ],
      "returns": "व्यवस्था / संख्या: प्रक्षेपित रंग",
      "params": {
        "c1": "p5.Color: interpolate from this color",
        "c2": "p5.Color: interpolate to this color",
        "amt": "Number: number between 0 and 1"
      }
    },
    "lightness": {
      "description": [
        "Extracts the HSL lightness value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "red": {
      "description": [
        "Extracts the red value from a color or pixel array."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "saturation": {
      "description": [
        "रंग या पिक्सेल सरणी से संतृप्ति मान निकालता है।",
        "संतृप्ति को एचएसबी और एचएसएल में अलग-अलग स्केल किया जाता है। यह फ़ंक्शन एचएसबी रंग ऑब्जेक्ट के साथ आपूर्ति किए जाने पर एचएसबी संतृप्ति लौटाएगा (या जब रंग मोड एचएसबी है, तो पिक्सेल सरणी के साथ आपूर्ति की जाती है), लेकिन अन्यथा एचएसएल संतृप्ति में डिफ़ॉल्ट होगा।"
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "color": "p5.Color|Number[]|String: <a href=\"#/p5.Color\">p5.Color</a> object, color components,  or CSS color"
      }
    },
    "background": {
      "description": [
        "<a href=\"#/p5/background\">background()</a> फ़ंक्शन p5.js कैनवास की पृष्ठभूमि के लिए उपयोग किए गए रंग को सेट करता है। डिफ़ॉल्ट पृष्ठभूमि पारदर्शी होती है। यह फ़ंक्शन आमतौर पर अंदर उपयोग किया जाता है <a href=\"#/p5/draw\">draw()</a> प्रत्येक फ्रेम की शुरुआत में डिस्प्ले विंडो को साफ करने के लिए, लेकिन इसका उपयोग <a href=\"#/p5/setup\">सेटअप ()</a> एनिमेशन के पहले फ्रेम पर बैकग्राउंड सेट करने के लिए या अगर बैकग्राउंड को सिर्फ एक बार सेट करने की जरूरत है।",
        "रंग या तो आरजीबी, एचएसबी, या एचएसएल रंग के संदर्भ में निर्दिष्ट किया गया है जो वर्तमान <a href=\"#/p5/colorMode\">colorMode</a> पर निर्भर करता है। (डिफ़ॉल्ट रंग स्थान RGB है, जिसमें 0 से 255 तक की सीमा में प्रत्येक मान)। डिफ़ॉल्ट रूप से अल्फा श्रेणी भी 0 से 255 तक होती है।",
        "यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।",
        "एक <a href=\"#/p5.Color\">p5.Color</a> ऑब्जेक्ट भी बैकग्राउंड कलर सेट करने के लिए दिया जा सकता है।",
        "एक <a href=\"#/p5.Image\">p5.Image</a> भी पृष्ठभूमि छवि सेट करने के लिए प्रदान किया जा सकता है।"
      ],
      "params": {
        "color": "p5.Color: any value created by the <a href=\"#/p5/color\">color()</a> function",
        "colorstring": "String: color string, possible formats include: integer  rgb() or rgba(), percentage rgb() or rgba(),  3-digit hex, 6-digit hex",
        "a": "Number: (Optional) opacity of the background relative to current  color range (default is 0-255)",
        "gray": "Number: specifies a value between white and black",
        "v1": "Number: red or hue value (depending on the current color  mode)",
        "v2": "Number: green or saturation value (depending on the current  color mode)",
        "v3": "Number: blue or brightness value (depending on the current  color mode)",
        "values": "Number[]: an array containing the red, green, blue  and alpha components of the color",
        "image": "p5.Image: image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,  to set as background  (must be same size as the sketch window)"
      }
    },
    "clear": {
      "description": [
        "Clears the pixels within a buffer. This function only clears the canvas. It will not clear objects created by createX() methods such as <a href=\"#/p5/createVideo\">createVideo()</a> or <a href=\"#/p5/createDiv\">createDiv()</a>. Unlike the main graphics context, pixels in additional graphics areas created with <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely or partially transparent. This function clears everything to make all of the pixels 100% transparent."
      ]
    },
    "colorMode": {
      "description": [
        "<a href=\"#/p5/colorMode\">colorMode()</a> p5.js रंग डेटा की व्याख्या करने के तरीके को बदल देता है। डिफ़ॉल्ट रूप से, <a href=\"#/p5/fill\">भरें()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>, और <a href=\"#/p5/color\">color()</a> को RGB रंग मॉडल का उपयोग करके 0 और 255 के बीच के मानों द्वारा परिभाषित किया जाता है। यह colorMode (RGB, 255) सेट करने के बराबर है कलरमोड (एचएसबी) सेट करने से आप इसके बजाय एचएसबी सिस्टम का उपयोग कर सकते हैं। डिफ़ॉल्ट रूप से, यह कलरमोड (एचएसबी, 360, 100, 100, 1) है। आप एचएसएल का भी उपयोग कर सकते हैं।",
        "नोट: मौजूदा रंगीन ऑब्जेक्ट उस मोड को याद रखते हैं जिसमें वे बनाए गए थे, इसलिए आप उनकी उपस्थिति को प्रभावित किए बिना अपनी पसंद के अनुसार मोड बदल सकते हैं।"
      ],
      "params": {
        "mode": "Constant: either RGB, HSB or HSL, corresponding to  Red/Green/Blue and Hue/Saturation/Brightness  (or Lightness)",
        "max": "Number: (Optional) range for all values",
        "max1": "Number: range for the red or hue depending on the  current color mode",
        "max2": "Number: range for the green or saturation depending  on the current color mode",
        "max3": "Number: range for the blue or brightness/lightness  depending on the current color mode",
        "maxA": "Number: (Optional) range for the alpha"
      }
    },
    "fill": {
      "description": [
        "आकृतियों को भरने के लिए प्रयुक्त रंग सेट करता है। उदाहरण के लिए, यदि आप भरण (204, 102, 0) चलाते हैं, तो भरण आदेश के बाद खींची गई सभी आकृतियों को नारंगी रंग से भर दिया जाएगा। यह रंग या तो आरजीबी के संदर्भ में निर्दिष्ट है या वर्तमान <a href=\"#/p5/colorMode\">colorMode()</a> के आधार पर HSB रंग। (डिफ़ॉल्ट रंग स्थान RGB है, जिसमें प्रत्येक मान 0 से 255 के बीच होता है)। अल्फा डिफ़ॉल्ट रूप से सीमा भी 0 से 255 तक होती है।",
        "यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।",
        "एक p5 <a href=\"#/p5.Color\">Color</a> ऑब्जेक्ट भी भरण रंग सेट करने के लिए प्रदान किया जा सकता है।"
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number (Optional)",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the fill color"
      }
    },
    "noFill": {
      "description": [
        "Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called, nothing will be drawn to the screen."
      ]
    },
    "noStroke": {
      "description": [
        "स्ट्रोक (रूपरेखा) खींचना अक्षम करता है। यदि दोनों <a href=\"#/p5/noStroke\">noStroke()</a> और <a href=\"#/p5/noFill\">noFill() </a> कहा जाता है, स्क्रीन पर कुछ भी नहीं खींचा जाएगा।"
      ]
    },
    "stroke": {
      "description": [
        "आकृतियों के चारों ओर रेखाएँ और सीमाएँ खींचने के लिए उपयोग किए गए रंग को सेट करता है। यह रंग या तो RGB या HSB रंग के संदर्भ में निर्दिष्ट होता है जो वर्तमान <a href=\"#/p5/colorMode\">colorMode()</a>पर निर्भर करता है। (डिफ़ॉल्ट रंग स्थान आरजीबी है, प्रत्येक मान 0 से 255 तक की सीमा में है। डिफ़ॉल्ट रूप से अल्फा श्रेणी भी 0 से 255 है।",
        "यदि एक एकल स्ट्रिंग तर्क प्रदान किया जाता है, तो आरजीबी, आरजीबीए और हेक्स सीएसएस रंग तार और सभी नामित रंग तार समर्थित हैं। इस मामले में, दूसरे तर्क के रूप में अल्फा संख्या मान समर्थित नहीं है, आरजीबीए फॉर्म का उपयोग किया जाना चाहिए।",
        "स्ट्रोक रंग सेट करने के लिए एक p5 <a href=\"#/p5.Color\">Color</a> ऑब्जेक्ट भी प्रदान किया जा सकता है।"
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number (Optional)",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the stroke color"
      }
    },
    "erase": {
      "description": [
        "All drawing that follows <a href=\"#/p5/erase\">erase()</a> will subtract from the canvas.Erased areas will reveal the web page underneath the canvas.Erasing can be canceled with <a href=\"#/p5/noErase\">noErase()</a>.",
        "Drawing done with <a href=\"#/p5/image\">image()</a> and <a href=\"#/p5/background\"> background()</a> in between <a href=\"#/p5/erase\">erase()</a> and <a href=\"#/p5/noErase\">noErase()</a> will not erase the canvas but works as usual."
      ],
      "params": {
        "strengthFill": "Number: (Optional) A number (0-255) for the strength of erasing for a shape's fill.  This will default to 255 when no argument is given, which  is full strength.",
        "strengthStroke": "Number: (Optional) A number (0-255) for the strength of erasing for a shape's stroke.  This will default to 255 when no argument is given, which  is full strength."
      }
    },
    "noErase": {
      "description": [
        "Ends erasing that was started with <a href=\"#/p5/erase\">erase()</a>. The <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, and <a href=\"#/p5/blendMode\">blendMode()</a> settings will return to what they were prior to calling <a href=\"#/p5/erase\">erase()</a>."
      ]
    },
    "arc": {
      "description": [
        "स्क्रीन पर एक चाप बनाएं। यदि केवल एक्स, वाई, डब्ल्यू, एच, स्टार्ट और स्टॉप के साथ बुलाया जाता है, तो चाप को एक खुले पाई सेगमेंट के रूप में खींचा और भर दिया जाएगा। यदि एक मोड पैरामीटर प्रदान किया जाता है, तो चाप भर जाएगा एक खुला अर्ध-वृत्त (OPEN), एक बंद अर्ध-वृत्त (CHORD), या एक बंद पाई खंड (PIE) के रूप में। मूल को <a href=\"#/p5/ellipseMode\">ellipseMode()</a>से बदला जा सकता है  समारोह।",
        "चाप हमेशा दक्षिणावर्त खींची जाती है, जहां से प्रारंभ गिरती है, जहां दीर्घवृत्त पर स्टॉप गिरती है। किसी भी कोण में TWO_PI को जोड़ने या घटाने से वह नहीं बदलता जहां वे गिरते हैं। यदि दोनों प्रारंभ और स्टॉप एक ही स्थान पर गिरते हैं, तो एक पूर्ण दीर्घवृत्त खींचा जाएगा। ध्यान रखें कि y-अक्ष नीचे की दिशा में बढ़ता है, इसलिए कोणों को धनात्मक x-दिशा (\"3 बजे\") से दक्षिणावर्त मापा जाता है।"
      ],
      "params": {
        "x": "Number: x-coordinate of the arc's ellipse",
        "y": "Number: y-coordinate of the arc's ellipse",
        "w": "Number: width of the arc's ellipse by default",
        "h": "Number: height of the arc's ellipse by default",
        "start": "Number: angle to start the arc, specified in radians",
        "stop": "Number: angle to stop the arc, specified in radians",
        "mode": "Constant: (Optional) optional parameter to determine the way of drawing  the arc. either CHORD, PIE or OPEN",
        "detail": "Integer: (Optional) optional parameter for WebGL mode only. This is to  specify the number of vertices that makes up the  perimeter of the arc. Default value is 25. Won't  draw a stroke for a detail of more than 50."
      }
    },
    "ellipse": {
      "description": [
        "स्क्रीन पर एक अंडाकार (अंडाकार) खींचता है। डिफ़ॉल्ट रूप से, पहले दो पैरामीटर अंडाकार के केंद्र का स्थान निर्धारित करते हैं, और तीसरा और चौथा पैरामीटर आकार की चौड़ाई और ऊंचाई निर्धारित करता है। यदि कोई ऊंचाई निर्दिष्ट नहीं है, तो का मान चौड़ाई का उपयोग चौड़ाई और ऊंचाई दोनों के लिए किया जाता है। यदि एक नकारात्मक ऊंचाई या चौड़ाई निर्दिष्ट की जाती है, तो निरपेक्ष मान लिया जाता है।",
        "समान चौड़ाई और ऊंचाई वाला एक दीर्घवृत्त एक वृत्त है। मूल को <a href=\"#/p5/ellipseMode\">ellipseMode()</a> फ़ंक्शन के साथ बदला जा सकता है।"
      ],
      "params": {
        "x": "Number: x-coordinate of the center of ellipse.",
        "y": "Number: y-coordinate of the center of ellipse.",
        "w": "Number: width of the ellipse.",
        "h": "Number: (Optional) height of the ellipse.",
        "detail": "Integer: (Optional) optional parameter for WebGL mode only. This is to  specify the number of vertices that makes up the  perimeter of the ellipse. Default value is 25. Won't  draw a stroke for a detail of more than 50."
      }
    },
    "circle": {
      "description": [
        "Draws a circle to the screen. A circle is a simple closed shape. It is the set of all points in a plane that are at a given distance from a given point, the centre. This function is a special case of the ellipse() function, where the width and height of the ellipse are the same. Height and width of the ellipse correspond to the diameter of the circle. By default, the first two parameters set the location of the centre of the circle, the third sets the diameter of the circle."
      ],
      "params": {
        "x": "Number: x-coordinate of the centre of the circle.",
        "y": "Number: y-coordinate of the centre of the circle.",
        "d": "Number: diameter of the circle."
      }
    },
    "line": {
      "description": [
        "स्क्रीन पर एक रेखा (दो बिंदुओं के बीच एक सीधा पथ) खींचता है। यदि केवल 4 पैरामीटर के साथ कॉल किया जाता है, तो यह 1 पिक्सेल की डिफ़ॉल्ट चौड़ाई के साथ 2D में एक रेखा खींचेगा। इस चौड़ाई को <a href=\"#/p5/strokeWeight\"> stokeWeight()</a>का उपयोग करके संशोधित किया जा सकता है फ़ंक्शन। एक लाइन को भरा नहीं जा सकता है, इसलिए <a href=\"#/p5/fill\">fill()</a> फंक्शन होगा किसी रेखा के रंग को प्रभावित न करें। इसलिए किसी रेखा को रंगने के लिए, <a href=\"#/p5/stroke\">stroke()</a> फ़ंक्शन का उपयोग करें।"
      ],
      "params": {
        "x1": "Number: the x-coordinate of the first point",
        "y1": "Number: the y-coordinate of the first point",
        "x2": "Number: the x-coordinate of the second point",
        "y2": "Number: the y-coordinate of the second point",
        "z1": "Number: the z-coordinate of the first point",
        "z2": "Number: the z-coordinate of the second point"
      }
    },
    "point": {
      "description": [
        "एक बिंदु खींचता है, एक पिक्सेल के आयाम पर अंतरिक्ष में एक निर्देशांक। पहला पैरामीटर बिंदु के लिए क्षैतिज मान है, दूसरा पैरामीटर बिंदु के लिए लंबवत मान है। बिंदु का रंग <a href =\"#/p5/stoke\">stoke()</a> के साथ बदल जाता है फ़ंक्शन। बिंदु का आकार <a href=\"#/p5/strokeWeight\">strokeWeight()</a से बदला जा सकता है > समारोह।"
      ],
      "params": {
        "x": "Number: the x-coordinate",
        "y": "Number: the y-coordinate",
        "z": "Number: (Optional) the z-coordinate (for WebGL mode)",
        "coordinate_vector": "p5.Vector: the coordinate vector"
      }
    },
    "quad": {
      "description": [
        "कैनवास पर एक क्वाड खींचता है। एक क्वाड एक चतुर्भुज, एक चार भुजा वाला बहुभुज है। यह एक आयत के समान है, लेकिन इसके किनारों के बीच के कोण नब्बे डिग्री तक सीमित नहीं हैं। मापदंडों की पहली जोड़ी (x1,y1) सेट पहले शीर्ष और बाद के जोड़े को परिभाषित आकार के चारों ओर दक्षिणावर्त या वामावर्त आगे बढ़ना चाहिए। z- तर्क केवल तभी काम करते हैं जब quad() का उपयोग WEBGL मोड में किया जाता है।"
      ],
      "params": {
        "x1": "Number: the x-coordinate of the first point",
        "y1": "Number: the y-coordinate of the first point",
        "x2": "Number: the x-coordinate of the second point",
        "y2": "Number: the y-coordinate of the second point",
        "x3": "Number: the x-coordinate of the third point",
        "y3": "Number: the y-coordinate of the third point",
        "x4": "Number: the x-coordinate of the fourth point",
        "y4": "Number: the y-coordinate of the fourth point",
        "detailX": "Integer: (Optional) number of segments in the x-direction",
        "detailY": "Integer: (Optional) number of segments in the y-direction",
        "z1": "Number: the z-coordinate of the first point",
        "z2": "Number: the z-coordinate of the second point",
        "z3": "Number: the z-coordinate of the third point",
        "z4": "Number: the z-coordinate of the fourth point"
      }
    },
    "rect": {
      "description": [
        "कैनवास पर एक आयत बनाता है। एक आयत एक चार-तरफा बंद आकार है जिसमें प्रत्येक कोण नब्बे डिग्री पर होता है। डिफ़ॉल्ट रूप से, पहले दो पैरामीटर ऊपरी-बाएं कोने का स्थान निर्धारित करते हैं, तीसरा चौड़ाई सेट करता है, और चौथा ऊंचाई सेट करता है। जिस तरह से इन मापदंडों की व्याख्या की जाती है, उसे <a href=\"#/p5/rectMode\">rectMode()</a> फ़ंक्शन के साथ बदला जा सकता है।",
        "पांचवां, छठा, सातवां और आठवां पैरामीटर, यदि निर्दिष्ट किया गया है, क्रमशः शीर्ष-बाएं, शीर्ष-दाएं, निचले-दाएं और निचले-बाएं कोनों के लिए कोने त्रिज्या निर्धारित करें। एक छोड़ा गया कोने त्रिज्या पैरामीटर के मान पर सेट किया गया है पैरामीटर सूची में पहले निर्दिष्ट त्रिज्या मान।"
      ],
      "params": {
        "x": "Number: x-coordinate of the rectangle.",
        "y": "Number: y-coordinate of the rectangle.",
        "w": "Number: width of the rectangle.",
        "h": "Number: (Optional) height of the rectangle.",
        "tl": "Number: (Optional) optional radius of top-left corner.",
        "tr": "Number: (Optional) optional radius of top-right corner.",
        "br": "Number: (Optional) optional radius of bottom-right corner.",
        "bl": "Number: (Optional) optional radius of bottom-left corner.",
        "detailX": "Integer: (Optional) number of segments in the x-direction (for WebGL mode)",
        "detailY": "Integer: (Optional) number of segments in the y-direction (for WebGL mode)"
      }
    },
    "square": {
      "description": [
        "Draws a square to the screen. A square is a four-sided shape with every angle at ninety degrees, and equal side size. This function is a special case of the rect() function, where the width and height are the same, and the parameter is called \"s\" for side size. By default, the first two parameters set the location of the upper-left corner, the third sets the side size of the square. The way these parameters are interpreted, may be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.",
        "The fourth, fifth, sixth and seventh parameters, if specified, determine corner radius for the top-left, top-right, lower-right and lower-left corners, respectively. An omitted corner radius parameter is set to the value of the previously specified radius value in the parameter list."
      ],
      "params": {
        "x": "Number: x-coordinate of the square.",
        "y": "Number: y-coordinate of the square.",
        "s": "Number: side size of the square.",
        "tl": "Number: (Optional) optional radius of top-left corner.",
        "tr": "Number: (Optional) optional radius of top-right corner.",
        "br": "Number: (Optional) optional radius of bottom-right corner.",
        "bl": "Number: (Optional) optional radius of bottom-left corner."
      }
    },
    "triangle": {
      "description": [
        "एक त्रिभुज को कैनवास पर खींचता है। एक त्रिभुज तीन बिंदुओं को जोड़कर बनाया गया एक विमान है। पहले दो तर्क पहले बिंदु को निर्दिष्ट करते हैं, मध्य दो तर्क दूसरे बिंदु को निर्दिष्ट करते हैं, और अंतिम दो तर्क तीसरे बिंदु को निर्दिष्ट करते हैं।"
      ],
      "params": {
        "x1": "Number: x-coordinate of the first point",
        "y1": "Number: y-coordinate of the first point",
        "x2": "Number: x-coordinate of the second point",
        "y2": "Number: y-coordinate of the second point",
        "x3": "Number: x-coordinate of the third point",
        "y3": "Number: y-coordinate of the third point"
      }
    },
    "ellipseMode": {
      "description": [
        "उस स्थान को संशोधित करता है जहां से दीर्घवृत्त खींचे जाते हैं, जिस तरह से पैरामीटर दिए गए हैं <a href=\"#/p5/ellipse\">ellipse()</a>, <a href=\"#/p5/circle\">circle()</a> और <a href=\" #/p5/arc\">arc()</a> की व्याख्या की जाती है।",
        "डिफ़ॉल्ट मोड CENTER है, जिसमें पहले दो मापदंडों की व्याख्या आकृति के केंद्र बिंदु के रूप में क्रमशः x और y निर्देशांक के रूप में की जाती है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।",
        "ellipseMode(RADIUS) आकृति के केंद्र बिंदु के x और y निर्देशांक के रूप में पहले दो पैरामीटर का भी उपयोग करता है, लेकिन आकार की चौड़ाई और ऊंचाई के आधे हिस्से को निर्दिष्ट करने के लिए तीसरे और चौथे पैरामीटर का उपयोग करता है।",
        "ellipseMode(CORNER) आकृति के ऊपरी-बाएँ कोने के रूप में पहले दो मापदंडों की व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।",
        "ellipseMode(CORNERS) पहले दो मापदंडों को दीर्घवृत्त के बाउंडिंग बॉक्स के एक कोने के स्थान के रूप में और तीसरे और चौथे पैरामीटर को विपरीत कोने के स्थान के रूप में व्याख्या करता है।",
        "इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।"
      ],
      "params": {
        "mode": "Constant: either CENTER, RADIUS, CORNER, or CORNERS"
      }
    },
    "noSmooth": {
      "description": [
        "सभी ज्यामिति को दांतेदार (उपनाम) किनारों के साथ खींचता है। ध्यान दें कि <a href=\"#/p5/smooth\">smooth()</a> डिफ़ॉल्ट रूप से 2D मोड में सक्रिय है, इसलिए कॉल करना आवश्यक है <a href=\"#/p5/noSmooth\">noSmooth()</a> ज्योमेट्री, इमेज और फॉण्ट की स्मूदिंग को डिसेबल करने के लिए। 3D मोड में <a href=\"#/p5/noSmooth\">noSmooth()</a> डिफ़ॉल्ट रूप से सक्षम है, इसलिए <a href=\"#/p5/smooth\">smooth()</a> को कॉल करना आवश्यक है यदि आप अपनी ज्यामिति पर चिकने (एंटीअलाइज्ड) किनारे चाहते हैं।"
      ]
    },
    "rectMode": {
      "description": [
        "उस स्थान को संशोधित करता है जहां से पैरामीटर दिए गए तरीके को बदलकर आयतें खींची जाती हैं <a href=\"#/p5/rect\">rect()</a> की व्याख्या की जाती है।",
        "डिफ़ॉल्ट मोड कॉर्नर है, जो पहले दो मापदंडों को आकार के ऊपरी-बाएँ कोने के रूप में व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।",
        "रेक्टमोड (कॉर्नर) पहले दो मापदंडों को कोनों में से एक के स्थान के रूप में और तीसरे और चौथे पैरामीटर को तिरछे विपरीत कोने के स्थान के रूप में व्याख्या करता है। ध्यान दें, आयत निर्देशांक के बीच खींचा जाता है, इसलिए यह आवश्यक नहीं है कि पहला कोना ऊपरी बाएँ कोना होगा।",
        "rectMode(CENTER) आकृति के केंद्र बिंदु के रूप में पहले दो मापदंडों की व्याख्या करता है, जबकि तीसरा और चौथा पैरामीटर इसकी चौड़ाई और ऊंचाई है।",
        "rectMode(RADIUS) आकृति के केंद्र बिंदु के रूप में पहले दो मापदंडों का भी उपयोग करता है, लेकिन क्रमशः आकार की चौड़ाई और ऊंचाई के आधे हिस्से को निर्दिष्ट करने के लिए तीसरे और चौथे पैरामीटर का उपयोग करता है।",
        "इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।"
      ],
      "params": {
        "mode": "Constant: either CORNER, CORNERS, CENTER, or RADIUS"
      }
    },
    "smooth": {
      "description": [
        "सभी ज्यामिति को चिकने (एंटी-अलियास) किनारों के साथ खींचता है। <a href=\"#/p5/smooth\">smooth()</a> आकार बदलने वाली छवियों की छवि गुणवत्ता में भी सुधार करेगा। ध्यान दें कि <a href=\"#/p5/smooth\">smooth()</a> डिफ़ॉल्ट रूप से 2D मोड में सक्रिय है; <a href=\"#/p5/noSmooth\">noSmooth()</a> का इस्तेमाल ज्योमेट्री, इमेज और फोंट की स्मूदिंग को डिसेबल करने के लिए किया जा सकता है। 3डी मोड में, <a href=\"#/p5/noSmooth\">noSmooth()</a> डिफ़ॉल्ट रूप से सक्षम है, इसलिए <a href=\"#/p5/smooth\">smooth()</a> को कॉल करना आवश्यक है यदि आप अपनी ज्यामिति पर चिकने (एंटीअलाइज्ड) किनारे चाहते हैं।"
      ]
    },
    "strokeCap": {
      "description": [
        "लाइन एंडिंग को रेंडर करने के लिए स्टाइल सेट करता है। ये सिरे या तो गोल, चौकोर या विस्तारित होते हैं, जिनमें से प्रत्येक को संबंधित मापदंडों के साथ निर्दिष्ट किया जाता है: ROUND, SQUARE और PROJECT। डिफ़ॉल्ट कैप राउंड है।",
        "इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।"
      ],
      "params": {
        "cap": "Constant: either ROUND, SQUARE or PROJECT"
      }
    },
    "strokeJoin": {
      "description": [
        "जोड़ों की शैली सेट करता है जो लाइन सेगमेंट को जोड़ता है। ये जोड़ या तो मिटर्ड, बेवेल या गोलाकार होते हैं और संबंधित पैरामीटर एमआईटीईआर, बेवेल और राउंड के साथ निर्दिष्ट होते हैं। डिफ़ॉल्ट संयुक्त एमआईटीईआर है। इस पद्धति के पैरामीटर को सभी CAPS में लिखा जाना चाहिए क्योंकि वे सभी CAPS में स्थिरांक के रूप में पूर्वनिर्धारित हैं और जावास्क्रिप्ट एक केस-संवेदी भाषा है।",
        "The parameter to this method must be written in ALL CAPS because they are predefined as constants in ALL CAPS and Javascript is a case-sensitive language."
      ],
      "params": {
        "join": "Constant: either MITER, BEVEL, ROUND"
      }
    },
    "strokeWeight": {
      "description": [
        "Sets the width of the stroke used for lines, points and the border around shapes. All widths are set in units of pixels."
      ],
      "params": {
        "weight": "Number: the weight of the stroke (in pixels)"
      }
    },
    "bezier": {
      "description": [
        "स्क्रीन पर एक क्यूबिक बेज़ियर वक्र बनाता है। इन वक्रों को एंकर और नियंत्रण बिंदुओं की एक श्रृंखला द्वारा परिभाषित किया जाता है। पहले दो पैरामीटर पहले एंकर पॉइंट को निर्दिष्ट करते हैं और अंतिम दो पैरामीटर अन्य एंकर पॉइंट को निर्दिष्ट करते हैं, जो पहले और अंतिम बिंदु बन जाते हैं। वक्र पर। मध्य पैरामीटर दो नियंत्रण बिंदुओं को निर्दिष्ट करते हैं जो वक्र के आकार को परिभाषित करते हैं। लगभग बोलते हुए, नियंत्रण बिंदु वक्र को उनकी ओर \"खींचें\"।",
        "बेज़ियर कर्व्स फ्रांसीसी ऑटोमोटिव इंजीनियर पियरे बेज़ियर द्वारा विकसित किए गए थे, और आमतौर पर कंप्यूटर ग्राफिक्स में धीरे-धीरे ढलान वाले वक्रों को परिभाषित करने के लिए उपयोग किए जाते हैं। <a href=\"#/p5/curve\">वक्र()</a> भी देखें।"
      ],
      "params": {
        "x1": "Number: x-coordinate for the first anchor point",
        "y1": "Number: y-coordinate for the first anchor point",
        "x2": "Number: x-coordinate for the first control point",
        "y2": "Number: y-coordinate for the first control point",
        "x3": "Number: x-coordinate for the second control point",
        "y3": "Number: y-coordinate for the second control point",
        "x4": "Number: x-coordinate for the second anchor point",
        "y4": "Number: y-coordinate for the second anchor point",
        "z1": "Number: z-coordinate for the first anchor point",
        "z2": "Number: z-coordinate for the first control point",
        "z3": "Number: z-coordinate for the second control point",
        "z4": "Number: z-coordinate for the second anchor point"
      }
    },
    "bezierDetail": {
      "description": [
        "Sets the resolution at which Bezier's curve is displayed. The default value is 20.",
        "Note, This function is only useful when using the WEBGL renderer as the default canvas renderer does not use this information."
      ],
      "params": {
        "detail": "Number: resolution of the curves"
      }
    },
    "bezierPoint": {
      "description": [
        "बेज़ियर वक्र के नियंत्रण और एंकर बिंदुओं के x या y समन्वय मानों को देखते हुए, यह स्थिति t पर बेज़ियर के x या y निर्देशांक का मूल्यांकन करता है। पैरामीटर a और d पहले और अंतिम बिंदुओं के x या y निर्देशांक हैं। वक्र पर जबकि बी और सी नियंत्रण बिंदुओं के हैं। अंतिम पैरामीटर टी परिणामी बिंदु की स्थिति है जो 0 और 1 के बीच दिया गया है। यह एक बार x निर्देशांक के साथ और दूसरी बार y निर्देशांक के साथ किया जा सकता है t पर एक बेजियर वक्र का स्थान प्राप्त करें।"
      ],
      "returns": "स्थिति टी पर बेज़ियर वक्र का मूल्य",
      "params": {
        "a": "Number: coordinate of first point on the curve",
        "b": "Number: coordinate of first control point",
        "c": "Number: coordinate of second control point",
        "d": "Number: coordinate of second point on the curve",
        "t": "Number: value between 0 and 1"
      }
    },
    "bezierTangent": {
      "description": [
        "A, B, C, D के लिए स्थितिी t पर बेज़ियर के स्पर्शरेखा का मूल्यांकन करता है। पैरामीटर A और D वक्र पर पहले और आखिरी बिंदु हैं, और B और D नियंत्रण बिंदु हैं। अंतिम पैरामीटर t के बीच भिन्न होता है 0 और 1।"
      ],
      "returns": "स्थिति में स्पर्शरेखा t",
      "params": {
        "a": "Number: coordinate of first point on the curve",
        "b": "Number: coordinate of first control point",
        "c": "Number: coordinate of second control point",
        "d": "Number: coordinate of second point on the curve",
        "t": "Number: value between 0 and 1"
      }
    },
    "curve": {
      "description": [
        "स्क्रीन पर दो बिंदुओं के बीच एक घुमावदार रेखा खींचता है, जिसे मध्य चार मापदंडों के रूप में दिया गया है। पहले दो पैरामीटर एक नियंत्रण बिंदु हैं, जैसे कि वक्र इस बिंदु से आया है, भले ही वह खींचा न गया हो। अंतिम दो पैरामीटर समान रूप से दूसरे का वर्णन करते हैं नियंत्रण बिंदु। <br /><br /> <a href=\"#/p5/curve\">curve()</a> कार्यों की श्रृंखला को एक साथ रखकर या <a href= \"#/p5/curveVertex\">curveVertex()</a>। एक अतिरिक्त फ़ंक्शन जिसे <a href=\"#/p5/curveTightness\">curveTightness()</a> कहा जाता है, की दृश्य गुणवत्ता के लिए नियंत्रण प्रदान करता है वक्र। <a href=\"#/p5/curve\">curve()</a> फ़ंक्शन Catmull-Rom splines का कार्यान्वयन है।"
      ],
      "params": {
        "x1": "Number: x-coordinate for the beginning control point",
        "y1": "Number: y-coordinate for the beginning control point",
        "x2": "Number: x-coordinate for the first point",
        "y2": "Number: y-coordinate for the first point",
        "x3": "Number: x-coordinate for the second point",
        "y3": "Number: y-coordinate for the second point",
        "x4": "Number: x-coordinate for the ending control point",
        "y4": "Number: y-coordinate for the ending control point",
        "z1": "Number: z-coordinate for the beginning control point",
        "z2": "Number: z-coordinate for the first point",
        "z3": "Number: z-coordinate for the second point",
        "z4": "Number: z-coordinate for the ending control point"
      }
    },
    "curveDetail": {
      "description": [
        "Sets the resolution at which curves display. The default value is 20 while the minimum value is 3.",
        "This function is only useful when using the WEBGL renderer as the default canvas renderer does not use this information."
      ],
      "params": {
        "resolution": "Number: resolution of the curves"
      }
    },
    "curveTightness": {
      "description": [
        "Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a> and <a href=\"#/p5/curveVertex\">curveVertex()</a>.The parameter tightness determines how the curve fits to the vertex points. The value 0.0 is the default value for tightness (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform."
      ],
      "params": {
        "amount": "Number: amount of deformation from the original vertices"
      }
    },
    "curvePoint": {
      "description": [
        "Evaluates the curve at position t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are control points of the curve, and b and c are the start and end points of the curve. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a curve at t."
      ],
      "returns": "p5 ऑब्जेक्ट",
      "params": {
        "a": "Number: coordinate of first control point of the curve",
        "b": "Number: coordinate of first point",
        "c": "Number: coordinate of second point",
        "d": "Number: coordinate of second control point",
        "t": "Number: value between 0 and 1"
      }
    },
    "curveTangent": {
      "description": [
        "Evaluates the tangent to the curve at position t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points."
      ],
      "returns": "स्थिति में स्पर्शरेखा t",
      "params": {
        "a": "Number: coordinate of first control point",
        "b": "Number: coordinate of first point on the curve",
        "c": "Number: coordinate of second point on the curve",
        "d": "Number: coordinate of second conrol point",
        "t": "Number: value between 0 and 1"
      }
    },
    "beginContour": {
      "description": [
        "नकारात्मक बनाने के लिए <a href=\"#/p5/beginContour\">beginContour()</a> और <a href=\"#/p5/endContour\">endContour()</a> फ़ंक्शन का उपयोग करें अक्षर 'O' के केंद्र जैसे आकार के भीतर आकार। <a href=\"#/p5/beginContour\">beginContour()</a> आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href=\"#/ p5/endContour\">endContour()</a> रिकॉर्डिंग बंद कर देता है। ऋणात्मक आकार को परिभाषित करने वाले शीर्षों को बाहरी आकार से विपरीत दिशा में \"wind\" होना चाहिए। पहले बाहरी दक्षिणावर्त क्रम के लिए शीर्ष बनाएं, फिर आंतरिक के लिए आकृतियाँ, वामावर्त में शीर्ष आकृतियाँ बनाएँ।",
        "इन कार्यों का उपयोग केवल <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> में किया जा सकता है। जोड़ी और रूपांतरण जैसे <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a> , और <a href=\"#/p5/scale\">scale()</a> एक <a href=\"#/p5/beginContour\">beginContour()</a>/ के भीतर काम नहीं करते हैं <a href=\"#/p5/endContour\">endContour()</a> जोड़ी। अन्य आकृतियों का उपयोग करना भी संभव नहीं है, जैसे कि <a href=\"#/p5/ellipse\">ellipse ()</a> या <a href=\"#/p5/rect\">rect()</a> भीतर।"
      ]
    },
    "beginShape": {
      "description": [
        "<a href=\"#/p5/beginShape\">beginShape()</a> और <a href=\"#/p5/endShape\">endShape()</a> फ़ंक्शन का उपयोग करने से और अधिक निर्माण करने की अनुमति मिलती है जटिल रूप। <a href=\"#/p5/beginShape\">beginShape()</a> एक आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href=\"#/p5/endShape\">endShape()</a> रिकॉर्डिंग बंद कर देता है। प्रकार के पैरामीटर का मान यह बताता है कि दिए गए शीर्षों से किस प्रकार की आकृतियाँ बनानी हैं। बिना किसी विधा के निर्दिष्ट किए, आकार कोई भी अनियमित बहुभुज हो सकता है।",
        "<a href=\"#/p5/beginShape\">beginShape()</a> के लिए उपलब्ध पैरामीटर POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, QUAD_STRIP, और TESS (केवल WebGL) हैं। कॉल करने के बाद <a href=\"#/p5/beginShape\">beginShape()</a> फ़ंक्शन, <a href=\"#/p5/vertex\">vertex()</a> कमांड की एक श्रृंखला होनी चाहिए अनुसरण करें। आकृति बनाना बंद करने के लिए, <a href=\"#/p5/endShape\">endShape()</a> पर कॉल करें। प्रत्येक आकृति को वर्तमान स्ट्रोक रंग से रेखांकित किया जाएगा और भरण रंग से भरा जाएगा।",
        "रूपांतरण जैसे <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, और <a href=\"#/p5/scale\">scale()</a> <a href=\"#/p5/beginShape\">beginShape()</a> के भीतर काम नहीं करते। यह भी नहीं है अन्य आकृतियों का उपयोग करना संभव है, जैसे कि <a href=\"#/p5/ellipse\">ellipse()</a> या <a href=\"#/p5/rect\">rect()</a > के भीतर <a href=\"#/p5/beginShape\">beginShape()</a>।",
        "LINES Draw a series of unconnected line segments (individual lines)",
        "TRIANGLES Draw a series of separate triangles",
        "TRIANGLE_FAN Draw a series of connected triangles sharing the first vertex in a fan-like fashion",
        "TRIANGLE_STRIP Draw a series of connected triangles in strip fashion",
        "QUADS Draw a series of seperate quad",
        "QUAD_STRIP Draw quad strip using adjacent edges to form the next quad",
        "TESS (WebGl only) Handle irregular polygon for filling curve by explicit tessellation",
        "After calling the <a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop drawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the current stroke color and filled with the fill color.",
        "Transformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work within <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>."
      ],
      "params": {
        "kind": "Constant: (Optional) either POINTS, LINES, TRIANGLES, TRIANGLE_FAN  TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS"
      }
    },
    "bezierVertex": {
      "description": [
        "बेज़ियर कर्व्स के लिए वर्टेक्स निर्देशांक निर्दिष्ट करता है। bezierVertex() के लिए प्रत्येक कॉल दो नियंत्रण बिंदुओं की स्थिति और एक बेज़ियर वक्र के एक एंकर पॉइंट को परिभाषित करता है, एक लाइन या आकार में एक नया सेगमेंट जोड़ता है। वेबजीएल मोड के लिए bezierVertex() में इस्तेमाल किया जा सकता है 2डी और साथ ही 3डी मोड। 2डी मोड 6 पैरामीटर की अपेक्षा करता है, जबकि 3डी मोड 9 पैरामीटर (जेड निर्देशांक सहित) की अपेक्षा करता है।",
        "पहली बार bezierVertex() का उपयोग <a href=\"#/p5/beginShape\">beginShape()</a> कॉल के भीतर किया जाता है, इसे <a href=\"#/ पहला एंकर बिंदु सेट करने के लिए p5/vertex\">vertex()</a>। इस फ़ंक्शन का उपयोग <a href=\"#/p5/beginShape\">beginShape()</a> और <a के बीच किया जाना चाहिए href=\"#/p5/endShape\">endShape()</a> और केवल तभी जब <a href=\"#/p5/beginShape\">beginShape()</ में निर्दिष्ट कोई MODE या POINTS पैरामीटर न हो। ए>।"
      ],
      "params": {
        "x2": "Number: x-coordinate for the first control point",
        "y2": "Number: y-coordinate for the first control point",
        "x3": "Number: x-coordinate for the second control point",
        "y3": "Number: y-coordinate for the second control point",
        "x4": "Number: x-coordinate for the anchor point",
        "y4": "Number: y-coordinate for the anchor point",
        "z2": "Number: z-coordinate for the first control point (for WebGL mode)",
        "z3": "Number: z-coordinate for the second control point (for WebGL mode)",
        "z4": "Number: z-coordinate for the anchor point (for WebGL mode)"
      }
    },
    "curveVertex": {
      "description": [
        "वक्र के लिए शीर्ष निर्देशांक निर्दिष्ट करता है। इस फ़ंक्शन का उपयोग केवल <a href=\"#/p5/beginShape\">beginShape()</a> और <a href=\"#/p5/endShape\"> endShape()</a>के बीच किया जा सकता है और केवल तभी जब <a href=\"#/p5/beginShape\">beginShape()</a> के लिए निर्दिष्ट कोई मोड पैरामीटर न हो। WebGL मोड के लिए curveVertex() का उपयोग 2D में किया जा सकता है साथ ही 3D मोड। 2D मोड 2 पैरामीटर की अपेक्षा करता है, जबकि 3D मोड 3 पैरामीटर की अपेक्षा करता है।",
        "वक्र की शुरुआत और अंत को निर्देशित करने के लिए curveVertex() लाइनों की एक श्रृंखला में पहले और अंतिम बिंदुओं का उपयोग किया जाएगा। दूसरे और तीसरे बिंदुओं के बीच एक छोटा वक्र खींचने के लिए न्यूनतम चार बिंदुओं की आवश्यकता होती है। पांचवां जोड़ना curveVertex() के साथ बिंदु दूसरे, तीसरे और चौथे बिंदुओं के बीच वक्र खींचेगा। curveVertex() फ़ंक्शन कैटमुल-रोम स्प्लिन का कार्यान्वयन है।"
      ],
      "params": {
        "x": "Number: x-coordinate of the vertex",
        "y": "Number: y-coordinate of the vertex",
        "z": "Number: (Optional) z-coordinate of the vertex (for WebGL mode)"
      }
    },
    "endContour": {
      "description": [
        "ऋण बनाने के लिए <a href=\"#/p5/beginContour\">beginContour()</a> और <a href=\"#/p5/endContour\">endContour()</a> फ़ंक्शन का उपयोग करें अक्षर 'O' के केंद्र जैसे आकार के भीतर आकार। <a href=\"#/p5/beginContour\">beginContour()</a> आकृति के लिए शीर्षों को रिकॉर्ड करना शुरू करता है और <a href=\"#/ p5/endContour\">endContour()</a> रिकॉर्डिंग बंद कर देता है। ऋणात्मक आकार को परिभाषित करने वाले शीर्षों को बाहरी आकार से विपरीत दिशा में \"wind\" होना चाहिए। पहले बाहरी दक्षिणावर्त क्रम के लिए कोने बनाएं, फिर आंतरिक के लिए आकृतियाँ, वामावर्त में शीर्ष आकृतियाँ बनाएँ।",
        "इन कार्यों का उपयोग केवल <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> में किया जा सकता है। जोड़ी और रूपांतरण जैसे <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a> , और <a href=\"#/p5/scale\">scale()</a> एक <a href=\"#/p5/beginContour\">beginContour()</a>/ के भीतर काम नहीं करते हैं <a href=\"#/p5/endContour\">endContour()</a> जोड़ी। अन्य आकृतियों का उपयोग करना भी संभव नहीं है, जैसे कि <a href=\"#/p5/ellipse\">ellipse ()</a> या <a href=\"#/p5/rect\">rect()</a> भीतर।"
      ]
    },
    "endShape": {
      "description": [
        "<a href=\"#/p5/endShape\">endShape()</a> फ़ंक्शन <a href=\"#/p5/beginShape\">beginShape()</a> का सहयोगी है और <a href=\"#/p5/beginShape\">beginShape()</a> के बाद ही कॉल किया जा सकता है। जब <a href=\"#/p5/endshape\">endShape()</a> है कहा जाता है, पिछली कॉल के बाद से परिभाषित सभी छवि डेटा <a href=\"#/p5/beginShape\">beginShape()</a> को छवि बफर में लिखा जाता है। मोड पैरामीटर के मान के रूप में स्थिर बंद करें आकृति को बंद करने के लिए (शुरुआत और अंत को जोड़ने के लिए)।"
      ],
      "params": {
        "mode": "Constant: (Optional) use CLOSE to close the shape"
      }
    },
    "quadraticVertex": {
      "description": [
        "द्विघात बेज़ियर वक्रों के लिए शीर्ष निर्देशांक निर्दिष्ट करता है। quadraticVertex() के लिए प्रत्येक कॉल एक नियंत्रण बिंदु और एक Bezier वक्र के एक एंकर बिंदु की स्थिति को परिभाषित करता है, एक रेखा या आकार में एक नया खंड जोड़ता है। पहली बार quadraticVertex() का उपयोग किया जाता है एक <a href=\"#/p5/beginShape\">beginShape()</a> कॉल, इसे <a href=\"#/p5/vertex\">vertex()</a>पर कॉल के साथ पहले से तैयार किया जाना चाहिए पहला एंकर पॉइंट सेट करने के लिए। WebGL मोड के लिए quadraticVertex() का उपयोग 2D के साथ-साथ 3D मोड में भी किया जा सकता है। 2D मोड 4 पैरामीटर की अपेक्षा करता है, जबकि 3D मोड 6 पैरामीटर (z निर्देशांक सहित) की अपेक्षा करता है।",
        "इस फ़ंक्शन का उपयोग <a href=\"#/p5/beginShape\">beginShape()</a> और <a href=\"#/p5/endShape\">endShape()</a> के बीच किया जाना चाहिए और केवल तभी जब <a href=\"#/p5/beginShape\">beginShape()</a> में निर्दिष्ट कोई मोड या POINTS पैरामीटर न हो।"
      ],
      "params": {
        "cx": "Number: x-coordinate for the control point",
        "cy": "Number: y-coordinate for the control point",
        "x3": "Number: x-coordinate for the anchor point",
        "y3": "Number: y-coordinate for the anchor point",
        "cz": "Number: z-coordinate for the control point (for WebGL mode)",
        "z3": "Number: z-coordinate for the anchor point (for WebGL mode)"
      }
    },
    "vertex": {
      "description": [
        "सभी आकृतियों का निर्माण शीर्षों की एक श्रृंखला को जोड़कर किया जाता है। <a href=\"#/p5/vertex\">vertex()</a> का उपयोग बिंदुओं, रेखाओं, त्रिभुजों, चतुर्भुज और के लिए शीर्ष निर्देशांक निर्दिष्ट करने के लिए किया जाता है। बहुभुज। इसका उपयोग विशेष रूप से <a href=\"#/p5/beginShape\">beginShape()</a> और <a href=\"#/p5/endShape\">endShape()</a> में किया जाता है कार्य।"
      ],
      "params": {
        "x": "Number: x-coordinate of the vertex",
        "y": "Number: y-coordinate of the vertex",
        "z": "Number: z-coordinate of the vertex.  Defaults to 0 if not specified.",
        "u": "Number: the vertex's texture u-coordinate",
        "v": "Number: the vertex's texture v-coordinate"
      }
    },
    "normal": {
      "description": [
        "Sets the 3d vertex normal to use for subsequent vertices drawn with <a href=\"#/p5/vertex\">vertex()</a>. A normal is a vector that is generally nearly perpendicular to a shape's surface which controls how much light will be reflected from that part of the surface."
      ],
      "params": {
        "vector": "Vector: A p5.Vector representing the vertex normal.",
        "x": "Number: The x component of the vertex normal.",
        "y": "Number: The y component of the vertex normal.",
        "z": "Number: The z component of the vertex normal."
      }
    },
    "VERSION": {
      "description": [
        "Version of this p5.js."
      ]
    },
    "P2D": {
      "description": [
        "The default, two-dimensional renderer."
      ]
    },
    "WEBGL": {
      "description": [
        "One of the two render modes in p5.js: P2D (default renderer) and WEBGL Enables 3D render by introducing the third dimension: Z"
      ]
    },
    "ARROW": {},
    "CROSS": {},
    "HAND": {},
    "MOVE": {},
    "TEXT": {},
    "WAIT": {},
    "HALF_PI": {
      "description": [
        "HALF_PI is a mathematical constant with the value 1.57079632679489661923. It is half the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "PI": {
      "description": [
        "PI is a mathematical constant with the value 3.14159265358979323846. It is the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "QUARTER_PI": {
      "description": [
        "QUARTER_PI is a mathematical constant with the value 0.7853982. It is one quarter the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "TAU": {
      "description": [
        "TAU is an alias for TWO_PI, a mathematical constant with the value 6.28318530717958647693. It is twice the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "TWO_PI": {
      "description": [
        "TWO_PI is a mathematical constant with the value 6.28318530717958647693. It is twice the ratio of the circumference of a circle to its diameter. It is useful in combination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>."
      ]
    },
    "DEGREES": {
      "description": [
        "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which p5.js interprets and calculates angles (either DEGREES or RADIANS)."
      ]
    },
    "RADIANS": {
      "description": [
        "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which p5.js interprets and calculates angles (either RADIANS or DEGREES)."
      ]
    },
    "CORNER": {},
    "CORNERS": {},
    "RADIUS": {},
    "RIGHT": {},
    "LEFT": {},
    "CENTER": {},
    "TOP": {},
    "BOTTOM": {},
    "BASELINE": {},
    "POINTS": {},
    "LINES": {},
    "LINE_STRIP": {},
    "LINE_LOOP": {},
    "TRIANGLES": {},
    "TRIANGLE_FAN": {},
    "TRIANGLE_STRIP": {},
    "QUADS": {},
    "QUAD_STRIP": {},
    "TESS": {},
    "CLOSE": {},
    "OPEN": {},
    "CHORD": {},
    "PIE": {},
    "PROJECT": {},
    "SQUARE": {},
    "ROUND": {},
    "BEVEL": {},
    "MITER": {},
    "RGB": {},
    "HSB": {
      "description": [
        "HSB (hue, saturation, brightness) is a type of color model. You can learn more about it at <a href=\"https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html\">HSB</a>."
      ]
    },
    "HSL": {},
    "AUTO": {
      "description": [
        "AUTO allows us to automatically set the width or height of an element (but not both), based on the current height and width of the element. Only one parameter can be passed to the <a href=\"/#/p5.Element/size\">size</a> function as AUTO, at a time."
      ]
    },
    "ALT": {},
    "BACKSPACE": {},
    "CONTROL": {},
    "DELETE": {},
    "DOWN_ARROW": {},
    "ENTER": {},
    "ESCAPE": {},
    "LEFT_ARROW": {},
    "OPTION": {},
    "RETURN": {},
    "RIGHT_ARROW": {},
    "SHIFT": {},
    "TAB": {},
    "UP_ARROW": {},
    "BLEND": {},
    "REMOVE": {},
    "ADD": {},
    "DARKEST": {},
    "LIGHTEST": {},
    "DIFFERENCE": {},
    "SUBTRACT": {},
    "EXCLUSION": {},
    "MULTIPLY": {},
    "SCREEN": {},
    "REPLACE": {},
    "OVERLAY": {},
    "HARD_LIGHT": {},
    "SOFT_LIGHT": {},
    "DODGE": {},
    "BURN": {},
    "THRESHOLD": {},
    "GRAY": {},
    "OPAQUE": {},
    "INVERT": {},
    "POSTERIZE": {},
    "DILATE": {},
    "ERODE": {},
    "BLUR": {},
    "NORMAL": {},
    "ITALIC": {},
    "BOLD": {},
    "BOLDITALIC": {},
    "CHAR": {},
    "WORD": {},
    "LINEAR": {},
    "QUADRATIC": {},
    "BEZIER": {},
    "CURVE": {},
    "STROKE": {},
    "FILL": {},
    "TEXTURE": {},
    "IMMEDIATE": {},
    "IMAGE": {},
    "NEAREST": {},
    "REPEAT": {},
    "CLAMP": {},
    "MIRROR": {},
    "LANDSCAPE": {},
    "PORTRAIT": {},
    "GRID": {},
    "AXES": {},
    "LABEL": {},
    "FALLBACK": {},
    "print": {
      "description": [
        "The <a href=\"#/p5/print\">print()</a> function writes to the console area of your browser. This function is often helpful for looking at the data a program is producing. This function creates a new line of text for each call to the function. Individual elements can be separated with quotes (\"\") and joined with the addition operator (+).",
        "Note that calling print() without any arguments invokes the window.print() function which opens the browser's print dialog. To print a blank line to console you can write print('\\n')."
      ],
      "params": {
        "contents": "Any: any combination of Number, String, Object, Boolean,  Array to print"
      }
    },
    "frameCount": {
      "description": [
        "The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the number of frames that have been displayed since the program started. Inside <a href=\"#/p5/setup\">setup()</a> the value is 0, after the first iteration of draw it is 1, etc."
      ]
    },
    "deltaTime": {
      "description": [
        "The system variable <a href=\"#/p5/deltaTime\">deltaTime</a> contains the time difference between the beginning of the previous frame and the beginning of the current frame in milliseconds.",
        "This variable is useful for creating time sensitive animation or physics calculation that should stay constant regardless of frame rate."
      ]
    },
    "focused": {
      "description": [
        "Confirms if the window a p5.js program is in is \"focused,\" meaning that the sketch will accept mouse or keyboard input. This variable is \"true\" if the window is focused and \"false\" if not."
      ]
    },
    "cursor": {
      "description": [
        "Sets the cursor to a predefined symbol or an image, or makes it visible if already hidden. If you are trying to set an image as the cursor, the recommended size is 16x16 or 32x32 pixels. The values for parameters x and y must be less than the dimensions of the image."
      ],
      "params": {
        "type": "String|Constant: Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT  Native CSS properties: 'grab', 'progress', 'cell' etc.  External: path for cursor's images  (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)  For more information on Native CSS cursors and url visit:  <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a>",
        "x": "Number: (Optional) the horizontal active spot of the cursor (must be less than 32)",
        "y": "Number: (Optional) the vertical active spot of the cursor (must be less than 32)"
      }
    },
    "frameRate": {
      "description": [
        "प्रत्येक सेकंड में प्रदर्शित होने वाले फ़्रेमों की संख्या निर्दिष्ट करता है। उदाहरण के लिए, फ़ंक्शन कॉल frameRate(30) एक सेकंड में 30 बार ताज़ा करने का प्रयास करेगा। यदि प्रोसेसर निर्दिष्ट दर को बनाए रखने के लिए पर्याप्त तेज़ नहीं है, तो फ़्रेम दर नहीं होगी हासिल किया। फ्रेम दर को <a href=\"#/p5/setup\">setup()</a> के भीतर सेट करने की अनुशंसा की जाती है। डिफ़ॉल्ट फ्रेम दर प्रदर्शन की फ्रेम दर पर आधारित होती है (यहां इसे \" भी कहा जाता है) ताज़ा दर\"), जो अधिकांश कंप्यूटरों पर 60 फ़्रेम प्रति सेकंड पर सेट है। 24 फ़्रेम प्रति सेकंड (फ़िल्मों के लिए सामान्य) या इससे अधिक की फ़्रेम दर सुचारू एनिमेशन के लिए पर्याप्त होगी। यह setFrameRate(val) के समान है।",
        "कॉलिंग <a href=\"#/p5/frameRate\">frameRate()</a> बिना किसी तर्क के वर्तमान फ्रैमरेट लौटाती है। ड्रा फ़ंक्शन को मान वापस करने से पहले कम से कम एक बार चलना चाहिए। यह वही है <a href=\"#/p5/getFrameRate\">getFrameRate()</a> के रूप में।",
        "<a href=\"#/p5/frameRate\">frameRate()</a> को ऐसे तर्कों के साथ कॉल करना जो संख्याओं के प्रकार के नहीं हैं या जो सकारात्मक नहीं हैं, वर्तमान फ्रैमरेट भी लौटाते हैं।"
      ],
      "params": {
        "fps": "Number: number of frames to be displayed every second"
      }
    },
    "noCursor": {
      "description": [
        "Hides the cursor from view."
      ]
    },
    "displayWidth": {
      "description": [
        "सिस्टम वैरिएबल जो डिफ़ॉल्ट <a href=\"#/p5/pixelDensity\">pixelDensity</a> के अनुसार स्क्रीन डिस्प्ले की चौड़ाई को स्टोर करता है। इसका उपयोग किसी भी डिस्प्ले साइज पर फुल-स्क्रीन प्रोग्राम चलाने के लिए किया जाता है। वास्तविक स्क्रीन आकार वापस करने के लिए, इसे पिक्सेल घनत्व से गुणा करें।"
      ]
    },
    "displayHeight": {
      "description": [
        "सिस्टम वैरिएबल जो डिफ़ॉल्ट <a href=\"#/p5/pixelDensity\">pixelDensity</a> के अनुसार स्क्रीन डिस्प्ले की ऊंचाई को स्टोर करता है। इसका उपयोग किसी भी डिस्प्ले साइज पर फुल-स्क्रीन प्रोग्राम चलाने के लिए किया जाता है। वास्तविक स्क्रीन आकार वापस करने के लिए, इसे पिक्सेल घनत्व से गुणा करें।"
      ]
    },
    "windowWidth": {
      "description": [
        "System variable that stores the width of the inner window, it maps to window.innerWidth."
      ]
    },
    "windowHeight": {
      "description": [
        "System variable that stores the height of the inner window, it maps to window.innerHeight."
      ]
    },
    "windowResized": {
      "description": [
        "<a href=\"#/p5/windowResized\">windowResized()</a> फ़ंक्शन हर बार ब्राउज़र विंडो का आकार बदलने पर एक बार कॉल किया जाता है। कैनवास का आकार बदलने या इसके लिए कोई अन्य समायोजन करने के लिए यह एक अच्छी जगह है नई विंडो के आकार को समायोजित करें।"
      ],
      "params": {
        "event": "Object: (Optional) optional Event callback argument."
      }
    },
    "width": {
      "description": [
        "सिस्टम वैरिएबल जो ड्रॉइंग कैनवास की चौड़ाई को स्टोर करता है। यह मान <a href=\"#/p5/createCanvas\">createCanvas()</a> फ़ंक्शन के पहले पैरामीटर द्वारा सेट किया गया है। उदाहरण के लिए, फ़ंक्शन कॉल createCanvas(320, 240) चौड़ाई चर को मान 320 पर सेट करता है। चौड़ाई का मान डिफ़ॉल्ट रूप से 100 हो जाता है यदि <a href=\"#/p5/createCanvas\">createCanvas()</a> का उपयोग नहीं किया जाता है कार्यक्रम।"
      ]
    },
    "height": {
      "description": [
        "सिस्टम वैरिएबल जो ड्राइंग कैनवास की ऊंचाई को स्टोर करता है। यह मान <a href=\"#/p5/createCanvas\">createCanvas()</a> फ़ंक्शन के दूसरे पैरामीटर द्वारा सेट किया गया है। उदाहरण के लिए, फ़ंक्शन कॉल createCanvas(320, 240) ऊंचाई चर को 240 मान पर सेट करता है। ऊंचाई का मान डिफ़ॉल्ट रूप से 100 हो जाता है यदि <a href=\"#/p5/createCanvas\">createCanvas()</a> का उपयोग नहीं किया जाता है कार्यक्रम।"
      ]
    },
    "fullscreen": {
      "description": [
        "यदि तर्क दिया गया है, तो तर्क के मूल्य के आधार पर स्केच को पूर्णस्क्रीन पर सेट करता है या नहीं। यदि कोई तर्क नहीं दिया जाता है, तो वर्तमान पूर्णस्क्रीन स्थिति लौटाता है। ध्यान दें कि ब्राउज़र प्रतिबंधों के कारण इसे केवल उपयोगकर्ता इनपुट पर ही कॉल किया जा सकता है, उदाहरण के लिए , माउस प्रेस पर नीचे दिए गए उदाहरण की तरह।"
      ],
      "returns": "बूलियन: वर्तमान पूर्ण स्क्रीन स्थिति",
      "params": {
        "val": "Boolean: (Optional) whether the sketch should be in fullscreen mode or not"
      }
    },
    "pixelDensity": {
      "description": [
        "उच्च पिक्सेल घनत्व डिस्प्ले के लिए पिक्सेल स्केलिंग सेट करता है। डिफ़ॉल्ट रूप से पिक्सेल घनत्व प्रदर्शन घनत्व से मेल खाने के लिए सेट होता है, इसे बंद करने के लिए पिक्सेल घनत्व (1) पर कॉल करें। <a href=\"#/p5/pixelDensity\">pixelDensity() </a>पर कॉल करना बिना किसी तर्क के स्केच का वर्तमान पिक्सेल घनत्व लौटाता है।"
      ],
      "params": {
        "val": "Number: whether or how much the sketch should scale"
      }
    },
    "displayDensity": {
      "description": [
        "Returns the pixel density of the current display the sketch is running on."
      ],
      "returns": "संख्या: मॉनिटर की वर्तमान पिक्सेल घनत्व"
    },
    "getURL": {
      "description": [
        "Gets the current URL. Note: when using the p5 Editor, this will return an empty object because the sketch is embedded in an iframe. It will work correctly if you view the sketch using the editor's present or share URLs."
      ],
      "returns": "स्ट्रिंग: URL"
    },
    "getURLPath": {
      "description": [
        "Gets the current URL path as an array. Note: when using the p5 Editor, this will return an empty object because the sketch is embedded in an iframe. It will work correctly if you view the sketch using the editor's present or share URLs."
      ],
      "returns": "फिक्स: पते के घटक"
    },
    "getURLParams": {
      "description": [
        "Gets the current URL params as an Object. Note: when using the p5 Editor, this will return an empty object because the sketch is embedded in an iframe. It will work correctly if you view the sketch using the editor's present or share URLs."
      ],
      "returns": "ऑब्जेक्ट: URL पैरामीटर"
    },
    "preload": {
      "description": [
        "<a href=\"#/p5/setup\">setup()</a> से पहले सीधे कॉल किया जाता है, <a href=\"#/p5/preload\">preload()</a> फ़ंक्शन है अवरुद्ध तरीके से बाहरी फ़ाइलों के एसिंक्रोनस लोडिंग को संभालने के लिए उपयोग किया जाता है। यदि एक प्रीलोड फ़ंक्शन परिभाषित किया गया है, तो <a href=\"#/p5/setup\">setup()</a> तब तक प्रतीक्षा करेगा जब तक कि कोई भी लोड कॉल समाप्त न हो जाए . लोड कॉल के अलावा कुछ नहीं (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href= \"#/p5/loadFont\">loadFont</a>, <a href=\"#/p5/loadStrings\">loadStrings</a>, आदि) प्रीलोड फ़ंक्शन के अंदर होना चाहिए। यदि एसिंक्रोनस लोडिंग है पसंदीदा, लोड विधियों को इसके बजाय <a href=\"#/p5/setup\">setup()</a> या कहीं भी कॉलबैक पैरामीटर के उपयोग के साथ कॉल किया जा सकता है।",
        "डिफ़ॉल्ट रूप से पाठ \"loading...\" प्रदर्शित किया जाएगा। अपना स्वयं का लोडिंग पृष्ठ बनाने के लिए, अपने पृष्ठ में आईडी \"p5_loading\" के साथ एक HTML तत्व शामिल करें। अधिक जानकारी <a href=\"http:/ /bit.ly/2kQ6Nio\">यहां</a>।"
      ]
    },
    "setup": {
      "description": [
        "<a href=\"#/p5/setup\">setup()</a> फ़ंक्शन को प्रोग्राम शुरू होने पर एक बार कॉल किया जाता है। इसका उपयोग प्रारंभिक पर्यावरण गुणों जैसे स्क्रीन आकार और पृष्ठभूमि रंग को परिभाषित करने और मीडिया लोड करने के लिए किया जाता है जैसे कि प्रोग्राम शुरू होने पर इमेज और फोंट। प्रत्येक प्रोग्राम के लिए केवल एक <a href=\"#/p5/setup\">setup()</a> फ़ंक्शन हो सकता है और इसे इसके बाद फिर से कॉल नहीं किया जाना चाहिए प्रारंभिक निष्पादन।",
        "ध्यान दें: <a href=\"#/p5/setup\">setup()</a> के अंतर्गत घोषित वैरिएबल <a href=\"#/p5/draw\">draw()</a> सहित अन्य कार्यों में पहुंच योग्य नहीं हैं।"
      ]
    },
    "draw": {
      "description": [
        "<a href=\"#/p5/setup\">setup()</a> के बाद सीधे कॉल किया जाता है, <a href=\"#/p5/draw\">draw()</a> लगातार काम करता है प्रोग्राम के बंद होने तक या <a href=\"#/p5/noLoop\">noLoop()</a> कॉल किए जाने तक अपने ब्लॉक के अंदर निहित कोड की पंक्तियों को निष्पादित करता है। नोट करें यदि <a href=\"#/p5 /noLoop\">noLoop()</a> को <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> में कॉल किया जाता है। रुकने से पहले एक बार निष्पादित किया जाएगा। <a href=\"#/p5/draw\">draw()</a> स्वचालित रूप से कॉल किया जाता है और इसे स्पष्ट रूप से कभी नहीं कहा जाना चाहिए।",
        "इसे हमेशा <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> से नियंत्रित किया जाना चाहिए और <a href=\"#/p5/loop\">loop()</a>। <a href=\"#/p5/noLoop\">noLoop()</a> के बाद कोड को में बंद कर देता है। <a href=\"#/p5/draw\">draw()</a> क्रियान्वित होने से, <a href=\"#/p5/redraw\">redraw()</a> कोड को <a href=\"#/p5/draw\">draw()</a> एक बार निष्पादित करने के लिए, और <a href=\"#/p5/loop\">loop()</a> कोड को अंदर कर देगा <a href=\"#/p5/draw\">draw()</a> लगातार क्रियान्वित करना फिर से शुरू करने के लिए।",
        "प्रत्येक सेकंड में <a href=\"#/p5/draw\">draw()</a> निष्पादित होने की संख्या को <a href=\"#/p5/frameRate\">frameRate()</a> से नियंत्रित किया जा सकता है समारोह।",
        "प्रत्येक स्केच के लिए केवल एक <a href=\"#/p5/draw\">draw()</a> फ़ंक्शन हो सकता है, और <a href=\"#/p5/draw\">draw()</a>हो सकता है। मौजूद होना चाहिए यदि आप चाहते हैं कि कोड लगातार चलता रहे, या <a href=\"#/p5/mousePressed\">mousePressed()</a> जैसी घटनाओं को संसाधित करने के लिए। कभी-कभी, आपके पास एक खाली हो सकता है अपने प्रोग्राम में <a href=\"#/p5/draw\">draw()</a> पर कॉल करें, जैसा कि ऊपर दिए गए उदाहरण में दिखाया गया है।",
        "यह ध्यान रखना महत्वपूर्ण है कि ड्रॉइंग कोऑर्डिनेट सिस्टम प्रत्येक"
      ]
    },
    "remove": {
      "description": [
        "Removes the entire p5 sketch. This will remove the canvas and any elements created by p5.js. It will also stop the draw loop and unbind any properties or methods from the window global scope. It will leave a variable p5 in case you wanted to create a new p5 sketch. If you like, you can set p5 = null to erase it. While all functions and variables and objects created by the p5 library will be removed, any other global variables created by your code will remain."
      ]
    },
    "disableFriendlyErrors": {
      "description": [
        "Allows for the friendly error system (FES) to be turned off when creating a sketch, which can give a significant boost to performance when needed. See <a href='https://github.com/processing/p5.js/wiki/Optimizing-p5.js-Code-for-Performance#disable-the-friendly-error-system-fes'> disabling the friendly error system</a>."
      ]
    },
    "let": {
      "description": [
        "Creates and names a new variable. A variable is a container for a value.",
        "Variables that are declared with <a href=\"#/p5/let\">let</a> will have block-scope. This means that the variable only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">the MDN entry</a>: Declares a block scope local variable, optionally initializing it to a value."
      ]
    },
    "const": {
      "description": [
        "Creates and names a new constant. Like a variable created with <a href=\"#/p5/let\">let</a>, a constant that is created with <a href=\"#/p5/const\">const</a> is a container for a value, however constants cannot be reassigned once they are declared. Although it is noteworthy that for non-primitive data types like objects & arrays, their elements can still be changeable. So if a variable is assigned an array, you can still add or remove elements from the array but cannot reassign another array to it. Also unlike <code>let</code>, you cannot declare variables without value using const.",
        "Constants have block-scope. This means that the constant only exists within the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block\"> block</a> that it is created within. A constant cannot be redeclared within a scope in which it already exists.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">the MDN entry</a>: Declares a read-only named constant. Constants are block-scoped, much like variables defined using the 'let' statement. The value of a constant can't be changed through reassignment, and it can't be redeclared."
      ]
    },
    "===": {
      "description": [
        "The strict equality operator <a href=\"#/p5/===\">===</a> checks to see if two values are equal and of the same type. ",
        "A comparison expression always evaluates to a <a href=\"#/p5/boolean\">boolean</a>. ",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">the MDN entry</a>: The non-identity operator returns true if the operands are not equal and/or not of the same type. ",
        "Note: In some examples around the web you may see a double-equals-sign <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\">==</a>, used for comparison instead. This is the non-strict equality operator in Javascript. This will convert the two values being compared to the same type before comparing them."
      ]
    },
    ">": {
      "description": [
        "The greater than operator <a href=\"#/p5/>\">></a> evaluates to true if the left value is greater than the right value. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\"> There is more info on comparison operators on MDN.</a>"
      ]
    },
    ">=": {
      "description": [
        "The greater than or equal to operator <a href=\"#/p5/>=\">>=</a> evaluates to true if the left value is greater than or equal to the right value. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<": {
      "description": [
        "The less than operator <a href=\"#/p5/<\"><</a> evaluates to true if the left value is less than the right value. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "<=": {
      "description": [
        "The less than or equal to operator <a href=\"#/p5/<=\"><=</a> evaluates to true if the left value is less than or equal to the right value. ",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">There is more info on comparison operators on MDN.</a>"
      ]
    },
    "if-else": {
      "description": [
        "The <a href=\"#/p5/if-else\">if-else</a> statement helps control the flow of your code.",
        "A condition is placed between the parenthesis following 'if', when that condition evalues to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a>, the code between the following curly braces is run. Alternatively, when the condition evaluates to <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\">falsy</a>, the code between the curly braces of 'else' block is run instead. Writing an else block is optional.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else\">the MDN entry</a>: The 'if' statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement can be executed"
      ]
    },
    "function": {
      "description": [
        "Creates and names a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions\">function</a>. A <a href=\"#/p5/function\">function</a> is a set of statements that perform a task.",
        "Optionally, functions can have parameters. <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Parameter\">Parameters</a> are variables that are scoped to the function, that can be assigned a value when calling the function.Multiple parameters can be given by seperating them with commmas.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">the MDN entry</a>: Declares a function with the specified parameters."
      ]
    },
    "return": {
      "description": [
        "Specifies the value to be returned by a function. For more info checkout <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return\"> the MDN entry for return</a>."
      ]
    },
    "boolean": {
      "description": [
        "Converts a number or string to its boolean representation. For a number, any non-zero value (positive or negative) evaluates to true, while zero evaluates to false. For a string, the value \"true\" evaluates to true, while any other value evaluates to false. When an array of number or string values is passed in, then a array of booleans of the same length is returned."
      ],
      "returns": "Boolean: boolean representation of value",
      "params": {
        "n": "String|Boolean|Number|Array: value to parse"
      }
    },
    "string": {
      "description": [
        "A <a href=\"#/p5/string\">string</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A string is a series of text characters. In Javascript, a string value must be surrounded by either single-quotation marks(') or double-quotation marks(\").",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/string\">the MDN entry</a>: A string is a sequence of characters used to represent text."
      ]
    },
    "number": {
      "description": [
        "A <a href=\"#/p5/number\">number</a> is one of the 7 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values\">primitive data types</a> in Javascript. A number can be a whole number or a decimal number.",
        "<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/number\">The MDN entry for number</a>"
      ]
    },
    "object": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics\">MDN's object basics</a>:  An <a href=\"#/p5/object\">object</a> is a collection of related data and/or  functionality (which usually consists of several variables and functions —  which are called properties and methods when they are inside objects.)"
      ]
    },
    "class": {
      "description": [
        "Creates and names a <a href=\"#/p5/class\">class</a> which is a template for the creation of <a href=\"#/p5/object\">objects</a>.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class\">the MDN entry</a>: The class declaration creates a new Class with a given name using prototype-based inheritance."
      ]
    },
    "for": {
      "description": [
        "<a href=\"#/p5/for\">for</a> creates a loop that is useful for executing one section of code multiple times.",
        "A 'for loop' consists of three different expressions inside of a parenthesis, all of which are optional.These expressions are used to control the number of times the loop is run.The first expression is a statement that is used to set the initial state for the loop.The second expression is a condition that you would like to check before each loop. If this expression returns false then the loop will exit.The third expression is executed at the end of each loop. These expression are separated by ; (semi-colon).In case of an empty expression, only a semi-colon is written.",
        "The code inside of the loop body (in between the curly braces) is executed between the evaluation of the second and third expression.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. The test condition with a <a href=\"#/p5/for\">for</a> loop is the second expression detailed above. Ensuring that this expression can eventually become false ensures that your loop doesn't attempt to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\">the MDN entry</a>: Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once."
      ]
    },
    "while": {
      "description": [
        "<a href=\"#/p5/while\">while</a> creates a loop that is useful for executing one section of code multiple times.",
        "With a 'while loop', the code inside of the loop body (between the curly braces) is run repeatedly until the test condition (inside of the parenthesis) evaluates to false. The condition is tested before executing the code body with <a href=\"#/p5/while\">while</a>, so if the condition is initially false the loop body, or statement, will never execute.",
        "As with any loop, it is important to ensure that the loop can 'exit', or that the test condition will eventually evaluate to false. This is to keep your loop from trying to run an infinite amount of times, which can crash your browser.",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">the MDN entry</a>: The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true.The condition is evaluated before executing the statement."
      ]
    },
    "createCanvas": {
      "description": [
        "दस्तावेज़ में एक कैनवास तत्व बनाता है, और इसके आयामों को पिक्सेल में सेट करता है। इस विधि को सेटअप के प्रारंभ में केवल एक बार कॉल किया जाना चाहिए। <a href=\"#/p5/createCanvas\">createCanvas</a>को कॉल करना  एक स्केच में एक से अधिक बार बहुत अप्रत्याशित व्यवहार होगा। यदि आप एक से अधिक ड्राइंग कैनवास चाहते हैं तो आप <a href=\"#/p5/createGraphics\">createGraphics</a> का उपयोग कर सकते हैं (डिफ़ॉल्ट रूप से छिपा हुआ लेकिन यह दिखाया जा सकता है)।",
        "महत्वपूर्ण नोट: 2D मोड में (अर्थात जब <code>p5.Renderer</code> सेट नहीं है) मूल (0,0) स्क्रीन के ऊपर बाईं ओर स्थित है। 3D मोड में (अर्थात जब <code> p5.Renderer</code> <code>WEBGL</code> पर सेट है), मूल कैनवास के केंद्र में स्थित है। <a href=\"https://github.com/processing/p5.js/issues/1545\">this issue</a> अधिक जानकारी के लिए।",
        "सिस्टम चर की चौड़ाई और ऊंचाई इस फ़ंक्शन को दिए गए पैरामीटर द्वारा निर्धारित की जाती है। यदि <a href=\"#/p5/createCanvas\">createCanvas()</a> का उपयोग नहीं किया जाता है, तो विंडो को एक डिफ़ॉल्ट दिया जाएगा 100x100 पिक्सेल का आकार।",
        "कैनवास को स्थान देने के और तरीकों के लिए, <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'> कैनवस की स्थिति</a> विकी पृष्ठ देखें।"
      ],
      "returns": "ऑब्जेक्ट: उत्पन्न कैनवास",
      "params": {
        "w": "Number: width of the canvas",
        "h": "Number: height of the canvas",
        "renderer": "Constant: (Optional) either P2D or WEBGL"
      }
    },
    "resizeCanvas": {
      "description": [
        "Resizes the canvas to given width and height. The canvas will be cleared and draw will be called immediately, allowing the sketch to re-render itself in the resized canvas."
      ],
      "params": {
        "w": "Number: width of the canvas",
        "h": "Number: height of the canvas",
        "noRedraw": "Boolean: (Optional) don't redraw the canvas immediately"
      }
    },
    "noCanvas": {
      "description": [
        "Removes the default canvas for a p5 sketch that doesn't require a canvas"
      ]
    },
    "createGraphics": {
      "description": [
        "Creates and returns a new p5.Renderer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels."
      ],
      "returns": "स्क्रीन पर ग्राफिक बफर",
      "params": {
        "w": "Number: width of the offscreen graphics buffer",
        "h": "Number: height of the offscreen graphics buffer",
        "renderer": "Constant: (Optional) either P2D or WEBGL  undefined defaults to p2d"
      }
    },
    "blendMode": {
      "description": [
        "डिस्प्ले विंडो में पिक्सल को परिभाषित मोड के अनुसार ब्लेंड करता है। सोर्स पिक्सल (ए) को डिस्प्ले विंडो में पहले से मौजूद पिक्सल के साथ ब्लेंड करने के लिए निम्नलिखित मोड का विकल्प है: <ul> <li> <code>BLEND</code> - रंगों का रैखिक प्रक्षेप: C = A*factor + B. <b>यह डिफ़ॉल्ट सम्मिश्रण मोड है।</b></li> <li><code>ADD</code > - A और B का योग</li> <li><code>डार्केस्ट</code> - केवल सबसे गहरा रंग सफल होता है: C = min(A*factor, B).</li> <li><code> सबसे हल्का</code> - केवल सबसे हल्का रंग सफल होता है: C = max(A*factor, B).</li> <li><code>DIFFERENCE</code> - अंतर्निहित छवि से रंगों को घटाएं।</li> < li><code>EXCLUSION</code> - <code>DIFFERENCE</code> के समान, लेकिन कम चरम।</li> <li><code>MULTIPLY</code> - रंगों को गुणा करें, परिणाम हमेशा होगा गहरा।</li> <li><code>SCREEN</code> - विपरीत गुणा, रंगों के व्युत्क्रम मानों का उपयोग करता है।</li> <li><code>REPLACE</code> - पिक्सल पूरी तरह से दूसरों की जगह लेते हैं और अल्फ़ा (पारदर्शिता) मानों का उपयोग न करें।</li> <li><code>REMOVE</code> - A के अल्फा स्ट्रेंथ के साथ B से पिक्सेल निकालता है।</li> <li><code>Overlay</code> - <code>MULTIPLY</code> का मिश्रण और <कोड>स्क्रीन </कोड>। डार्क वैल्यू को गुणा करता है, और लाइट वैल्यू को स्क्रीन करता है। <em>(2D)</em></li> <li><code>HARD_LIGHT</code> - <code>SCREEN</code> जब ५०% से अधिक ग्रे, <code>MULTIPLY</code> जब निचला। <em>(2D)</em></li> <li><code>SOFT_LIGHT</code> - <code>DARKEST</code> और <code>LIGHTEST</code> का मिश्रण। <code>OVERLAY</code> की तरह काम करता है, लेकिन उतना कठोर नहीं। <em>(2D)</em> </li> <li><code>DODGE</code> - हल्के टोन को हल्का करता है और कंट्रास्ट को बढ़ाता है, अंधेरे को नज़रअंदाज़ करता है। <em>(2D)</em></li> <li><code>BURN</code> - गहरे रंग के क्षेत्र लगाए जाते हैं, कंट्रास्ट को बढ़ाते हुए, रोशनी को नज़रअंदाज़ किया जाता है। <em>(2D)</em></li> <li><code>सबट्रैक्ट</code> - A और B के शेष <em>(3D)</em></li> </ul>",
        "<em>(2D)</em> इंगित करता है कि यह मिश्रण मोड <b>केवल</b> 2D रेंडरर में काम करता है। <em>(3D)</em> इंगित करता है कि यह मिश्रण मोड <b>केवल< /b> WEBGL रेंडरर में काम करता है।"
      ],
      "params": {
        "mode": "Constant: blend mode to set for canvas.  either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,  EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT"
      }
    },
    "drawingContext": {
      "description": [
        "The p5.js API provides a lot of functionality for creating graphics, but there is some native HTML5 Canvas functionality that is not exposed by p5. You can still call it directly using the variable <code>drawingContext</code>, as in the example shown. This is the equivalent of calling <code>canvas.getContext('2d');</code> or <code>canvas.getContext('webgl');</code>. See this <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\"> reference for the native canvas API</a> for possible drawing functions you can call."
      ]
    },
    "noLoop": {
      "description": [
        "p5.js को <a href=\"#/p5/draw\">draw()</a> में लगातार कोड निष्पादित करने से रोकता है। यदि <a href=\"#/p5/loop\">loop()</a> को कॉल किया जाता है, <a href=\"#/p5/draw\">draw()</a> में कोड लगातार चलने लगता है। यदि <a href=\"#/p5/ noLoop\">noLoop()</a> <a href=\"#/p5/setup\">setup()</a> में, यह ब्लॉक के अंदर की आखिरी लाइन होनी चाहिए।",
        "जब <a href=\"#/p5/noLoop\">noLoop()</a> का उपयोग किया जाता है, तो <a href=\"#/p5 जैसे ईवेंट हैंडलिंग फ़ंक्शंस के अंदर स्क्रीन में हेरफेर या एक्सेस करना संभव नहीं है /mousePressed\">mousePressed()</a> या <a href=\"#/p5/keyPressed\">keyPressed()</a>। इसके बजाय, <a href=\"#/ p5/redraw\">redraw()</a> या <a href=\"#/p5/loop\">loop()</a>, जो <a href=\"#/p5/draw \">draw()</a> चलेगा, जो स्क्रीन को ठीक से अपडेट कर सकता है। इसका मतलब है कि जब <a href=\"#/p5/noLoop\">noLoop()</a> को कॉल किया गया है, तो कोई भी ड्रॉइंग नहीं कर सकता होता है, और <a href=\"#/p5/saveFrames\">saveFrames()</a> या <a href=\"#/p5/loadPixels\">loadPixels()</a> जैसे कार्य नहीं हो सकते हैं इस्तेमाल किया गया।",
        "ध्यान दें कि अगर स्केच का आकार बदला जाता है, तो <a href=\"#/p5/redraw\">redraw()</a> को स्केच को अपडेट करने के लिए <a href=\"#/p5/noLoop\">noLoop()</a>के बाद भी कॉल किया जाएगा। निर्दिष्ट किया गया है। अन्यथा, <a href=\"#/p5/loop\">loop()</a> को कॉल किए जाने तक स्केच एक विषम स्थिति में प्रवेश करेगा।",
        "loop() की वर्तमान स्थिति की जांच करने के लिए <a href=\"#/p5/isLooping\">isLooping()</a> का उपयोग करें।"
      ]
    },
    "loop": {
      "description": [
        "डिफ़ॉल्ट रूप से, p5.js draw() के माध्यम से लगातार लूप करता है, इसके भीतर कोड निष्पादित करता है। हालांकि, <a href=\"#/p5/draw\">draw()</a> लूप को कॉल करके रोका जा सकता है <a href=\"#/p5/noLoop\">noLoop()</a>। उस स्थिति में, <a href=\"#/p5/draw\">draw()</a> लूप कर सकते हैं loop() के साथ फिर से शुरू करें।",
        "अंदर के setup() से loop() को कॉल करने से बचें।",
        "loop() की वर्तमान स्थिति की जांच करने के लिए <a href=\"#/p5/isLooping\">isLooping()</a> का उपयोग करें।"
      ]
    },
    "isLooping": {
      "description": [
        "By default, p5.js loops through <a href=\"#/p5/draw\">draw()</a> continuously, executing the code within it. If the sketch is stopped with <a href=\"#/p5/noLoop\">noLoop()</a> or resumed with <a href=\"#/p5/loop\">loop()</a>, isLooping() returns the current state for use within custom event handlers."
      ]
    },
    "push": {
      "description": [
        "<a href=\"#/p5/push\">push()</a> फ़ंक्शन वर्तमान आरेखण शैली सेटिंग्स और परिवर्तनों को सहेजता है, जबकि <a href=\"#/p5/pop\">pop()</a> इन सेटिंग्स को पुनर्स्थापित करता है। ध्यान दें कि ये फ़ंक्शन हमेशा एक साथ उपयोग किए जाते हैं। वे आपको शैली और परिवर्तन सेटिंग्स को बदलने की अनुमति देते हैं और बाद में जो आपके पास था उस पर वापस लौटते हैं। जब एक नया राज्य शुरू होता है <a href=\"# /p5/push\">push()</a>, यह वर्तमान शैली पर आधारित है और जानकारी को रूपांतरित करता है। <a href=\"#/p5/push\">push()</a> और <a href=\"#/p5/pop\">pop()</a> अधिक नियंत्रण प्रदान करने के लिए कार्यों को एम्बेड किया जा सकता है। (प्रदर्शन के लिए दूसरा उदाहरण देखें।)",
        "<a href=\"#/p5/push\">push()</a> निम्नलिखित कार्यों द्वारा नियंत्रित वर्तमान परिवर्तन स्थिति और शैली सेटिंग्स से संबंधित जानकारी संग्रहीत करता है: <a href=\"#/p5/fill \">भरें()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke() </a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"# /p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>, <a href=\"#/p5/imageMode\" >imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href =\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5 /textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix ()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\" #/p5/noiseSeed\">noiseSeed()</a>.",
        "WEBGL मोड में अतिरिक्त स्टाइल सेटिंग्स संग्रहीत की जाती हैं। इन्हें निम्नलिखित कार्यों द्वारा नियंत्रित किया जाता है: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ ambientLight\">ambientLight ()</a>, <a href=\"#/p5/directionLight\">directionLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">shininess()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> और <a href=\" #/p5/shader\">shader()</a>।"
      ]
    },
    "pop": {
      "description": [
        "<a href=\"#/p5/push\">push()</a> फ़ंक्शन वर्तमान आरेखण शैली सेटिंग्स और परिवर्तनों को सहेजता है, जबकि <a href=\"#/p5/pop\">pop()</a> इन सेटिंग्स को पुनर्स्थापित करता है। ध्यान दें कि ये फ़ंक्शन हमेशा एक साथ उपयोग किए जाते हैं। वे आपको शैली और परिवर्तन सेटिंग्स को बदलने की अनुमति देते हैं और बाद में जो आपके पास था उस पर वापस लौटते हैं। जब एक नया राज्य शुरू होता है <a href=\"# /p5/push\">push()</a>, यह वर्तमान शैली पर आधारित है और जानकारी को रूपांतरित करता है। <a href=\"#/p5/push\">push()</a> और <a href=\"#/p5/pop\">pop()</a> अधिक नियंत्रण प्रदान करने के लिए कार्यों को एम्बेड किया जा सकता है। (प्रदर्शन के लिए दूसरा उदाहरण देखें।)",
        "<a href=\"#/p5/push\">push()</a> निम्नलिखित कार्यों द्वारा नियंत्रित वर्तमान परिवर्तन स्थिति और शैली सेटिंग्स से संबंधित जानकारी संग्रहीत करता है: <a href=\"#/p5/fill \">भरें()</a>, <a href=\"#/p5/noFill\">noFill()</a>, <a href=\"#/p5/noStroke\">noStroke() </a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/noTint\">noTint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"# /p5/स्ट्रोककैप\">स्ट्रोककैप()</a>, <a href=\"#/p5/stokeJoint\">strokeJoint()</a>, <a href=\"#/p5/imageMode\" >imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a> a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>, <a href =\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5 /textLeading\">textLeading()</a>, <a href=\"#/p5/applyMatrix\">applyMatrix()</a>, <a href=\"#/p5/resetMatrix\">resetMatrix ()</a>, <a href=\"#/p5/rotate\">rotate()</a>, <a href=\"#/p5/scale\">scale()</a>, <a href=\"#/p5/shearX\">shearX()</a>, <a href=\"#/p5/shearY\">shearY()</a>, <a href=\"#/p5/translate\">translate()</a>, <a href=\" #/p5/noiseSeed\">noiseSeed()</a>.",
        "WEBGL मोड में अतिरिक्त स्टाइल सेटिंग्स संग्रहीत की जाती हैं। इन्हें निम्नलिखित कार्यों द्वारा नियंत्रित किया जाता है: <a href=\"#/p5/setCamera\">setCamera()</a>, <a href=\"#/p5/ ambientLight\">ambientLight()</a>, <a href=\"#/p5/directionLight\">directionLight()</a>, <a href=\"#/p5/pointLight\">pointLight()</a>, <a href=\"#/p5/texture\">texture()</a>, <a href=\"#/p5/specularMaterial\">specularMaterial()</a>, <a href=\"#/p5/shininess\">चमकता()</a>, <a href=\"#/p5/normalMaterial\">normalMaterial()</a> और <a href=\" #/p5/shader\">shader()</a>।"
      ]
    },
    "redraw": {
      "description": [
        "कोड को एक बार <a href=\"#/p5/draw\">draw()</a> के भीतर निष्पादित करता है। यह फ़ंक्शन प्रोग्राम को केवल आवश्यक होने पर ही डिस्प्ले विंडो को अपडेट करने की अनुमति देता है, उदाहरण के लिए जब कोई ईवेंट पंजीकृत किया जाता है <a href=\"#/p5/mousePressed\">mousePressed()</a> या <a href=\"#/p5/keyPressed\">keyPressed()</a> होता है।",
        "किसी प्रोग्राम की संरचना में, <a href=\"#/p5/mousePressed\" जैसे ईवेंट में </a> <a href=\"#/p5/redraw\">redraw()</a> को कॉल करना ही समझदारी है। >mousePressed()</a>. ऐसा इसलिए है क्योंकि <a href=\"#/p5/redraw\">redraw()</a> नहीं चलता है <a href=\"#/p5/draw\"> draw() </a> तुरंत (यह केवल एक ध्वज सेट करता है जो इंगित करता है कि एक अद्यतन की आवश्यकता है)।",
        "<a href=\"#/p5/redraw\">redraw()</a> फ़ंक्शन ठीक से काम नहीं करता है जब <a href=\"#/p5/draw\">draw()</a>के अंदर कॉल किया जाता है।. एनिमेशन को सक्षम/अक्षम करने के लिए, <a href=\"#/p5/loop\">loop()</a> और <a href=\"#/p5/noLoop\">noLoop()</a>का उपयोग करें।",
        "इसके अलावा आप प्रति मेथड कॉल के लिए रेड्रा की संख्या निर्धारित कर सकते हैं। बस एक पूर्णांक को एकल पैरामीटर के रूप में जोड़ें।"
      ],
      "params": {
        "n": "Integer: (Optional) Redraw for n-times. The default value is 1."
      }
    },
    "p5": {
      "description": [
        "The <code>p5()</code> constructor enables you to activate \"instance mode\" instead of normal \"global mode\". This is an advanced topic. A short description and example is included below. Please see <a target=\"blank\" href=\"https://www.youtube.com/watch?v=Su792jEauZg&feature=youtu.be\"> Dan Shiffman's Coding Train video tutorial</a> or this <a target=\"blank\" href=\"https://github.com/processing/p5.js/wiki/p5.js-overview#instantiation--namespace\">tutorial page</a> for more info.",
        "By default, all p5.js functions are in the global namespace (i.e. bound to the window object), meaning you can call them simply <code>ellipse()</code>, <code>fill()</code>, etc. However, this might be inconvenient if you are mixing with other JS libraries (synchronously or asynchronously) or writing long programs of your own. p5.js currently supports a way around this problem called \"instance mode\". In instance mode, all p5 functions are bound up in a single variable instead of polluting your global namespace.",
        "Optionally, you can specify a default container for the canvas and any other elements to append to with a second argument. You can give the ID of an element in your html, or an html node itself.",
        "Note that creating instances like this also allows you to have more than one p5 sketch on a single web page, as they will each be wrapped up with their own set up variables. Of course, you could also use iframes to have multiple sketches in global mode."
      ],
      "params": {
        "sketch": "Object: a function containing a p5.js sketch",
        "node": "String|Object: ID or pointer to HTML DOM node to contain sketch in"
      }
    },
    "applyMatrix": {
      "description": [
        "Multiplies the current matrix by the one specified through the parameters. This is a powerful operation that can perform the equivalent of translate, scale, shear and rotate all at once. You can learn more about transformation matrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\"> Wikipedia</a>.",
        "The naming of the arguments here follows the naming of the <a href= \"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\"> WHATWG specification</a> and corresponds to a transformation matrix of the form: <blockquote>",
        "<img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\" alt=\"The transformation matrix used when applyMatrix is called\"/> </blockquote>"
      ],
      "params": {
        "a": "Number|Array: numbers which define the 2x3 matrix to be multiplied, or an array of numbers",
        "b": "Number: numbers which define the 2x3 matrix to be multiplied",
        "c": "Number: numbers which define the 2x3 matrix to be multiplied",
        "d": "Number: numbers which define the 2x3 matrix to be multiplied",
        "e": "Number: numbers which define the 2x3 matrix to be multiplied",
        "f": "Number: numbers which define the 2x3 matrix to be multiplied"
      }
    },
    "resetMatrix": {
      "description": [
        "Replaces the current matrix with the identity matrix."
      ]
    },
    "rotate": {
      "description": [
        "कोण पैरामीटर द्वारा निर्दिष्ट राशि से एक आकृति को घुमाता है। यह फ़ंक्शन <a href=\"#/p5/angleMode\">angleMode</a> के लिए जिम्मेदार है, इसलिए कोणों को रेडियन या डिग्री में दर्ज किया जा सकता है।",
        "ऑब्जेक्ट्स को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल में घुमाया जाता है और सकारात्मक संख्याएं वस्तुओं को एक दक्षिणावर्त दिशा में घुमाती हैं। परिवर्तन उन सभी चीजों पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करते हैं। उदाहरण के लिए, रोटेट (HALF_PI) को कॉल करना और फिर घुमाएं (HALF_PI) रोटेट (PI) के समान है। <a href=\"#/p5/draw\">draw()</a> फिर से शुरू होने पर सभी रूपांतरण रीसेट हो जाते हैं।",
        "तकनीकी रूप से, <a href=\"#/p5/rotate\">rotate()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href=\"#/p5/push\">push()</a>द्वारा और नियंत्रित किया जा सकता है।  और <a href=\"#/p5/pop\">pop()</a>।"
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode",
        "axis": "p5.Vector|Number[]: (Optional) (in 3d) the axis to rotate around"
      }
    },
    "rotateX": {
      "description": [
        "कोण पैरामीटर में निर्दिष्ट राशि द्वारा एक्स अक्ष के चारों ओर एक आकृति घुमाता है। कोणों को रेडियंस या डिग्री में दर्ज किया जा सकता है।",
        "ऑब्जेक्ट हमेशा अपनी सापेक्ष स्थिति के आसपास मूल के लिए घुमाए जाते हैं और सकारात्मक संख्याएं वस्तुओं को दक्षिणावर्त दिशा में घुमाती हैं। सभी रूपांतरण रीसेट हो जाते हैं जब <a href=\"#/p5/draw\">draw()</a> फिर से शुरू होता है ।"
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "rotateY": {
      "description": [
        "कोण पैरामीटर में निर्दिष्ट राशि द्वारा Z अक्ष के चारों ओर एक आकृति को घुमाता है। कोणों को रेडियन या डिग्री में दर्ज किया जा सकता है।",
        "यह विधि केवल WEBGL मोड में काम करती है।"
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "rotateZ": {
      "description": [
        "Rotates a shape around Z axis by the amount specified in angle parameter. The angles can be entered in either RADIANS or DEGREES.",
        "This method works in WEBGL mode only.",
        "Objects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction. All transformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again."
      ],
      "params": {
        "angle": "Number: the angle of rotation, specified in radians  or degrees, depending on current angleMode"
      }
    },
    "scale": {
      "description": [
        "शीर्षों को विस्तारित या अनुबंधित करके आकार के आकार को बढ़ाता या घटाता है। वस्तुएं हमेशा अपने सापेक्ष मूल से समन्वय प्रणाली तक स्केल करती हैं। स्केल मान दशमलव प्रतिशत के रूप में निर्दिष्ट होते हैं। उदाहरण के लिए, फ़ंक्शन कॉल स्केल (2.0) एक के आयाम को बढ़ाता है 200% से आकार।",
        "रूपांतरण हर उस चीज़ पर लागू होता है जो फ़ंक्शन के बाद और बाद में होने वाली कॉल के प्रभाव को गुणा करती है। उदाहरण के लिए, कॉलिंग स्केल (2.0) और फिर स्केल (1.5) स्केल (3.0) के समान है। यदि <a href=\"#/ p5/scale\">scale()</a> को <a href=\"#/p5/draw\">draw()</a> में कॉल किया जाता है, जब लूप दोबारा शुरू होता है तो ट्रांसफॉर्मेशन रीसेट हो जाता है।",
        "Z पैरामीटर के साथ इस फ़ंक्शन का उपयोग करना केवल WEBGL मोड में उपलब्ध है। इस फ़ंक्शन को <a href=\"#/p5/push\">push()</a> और <a href=\"#/p5/pop\">pop()</a>के साथ और अधिक नियंत्रित किया जा सकता है।"
      ],
      "params": {
        "s": "Number|p5.Vector|Number[]: percent to scale the object, or percentage to  scale the object in the x-axis if multiple arguments  are given",
        "y": "Number: (Optional) percent to scale the object in the y-axis",
        "z": "Number: (Optional) percent to scale the object in the z-axis (webgl only)",
        "scales": "p5.Vector|Number[]: per-axis percents to scale the object"
      }
    },
    "shearX": {
      "description": [
        "कोण पैरामीटर द्वारा निर्दिष्ट राशि द्वारा एक्स-अक्ष के चारों ओर एक आकृति को कतरता है। कोणों को वर्तमान कोण मोड में निर्दिष्ट किया जाना चाहिए। वस्तुओं को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल और सकारात्मक संख्याएं घड़ी की दिशा में वस्तुओं को कतरनी करती हैं।",
        "परिवर्तन सब कुछ पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करता है। उदाहरण के लिए, शीयरएक्स (पीआई/2) और फिर शीयरएक्स (पीआई/2) को कॉल करना शीयरएक्स (पीआई) के समान है। यदि <a href= \"#/p5/shearX\">shearX()</a> को <a href=\"#/p5/draw\">draw()</a> के अंदर कॉल किया जाता है, जब लूप में ट्रांसफ़ॉर्मेशन रीसेट हो जाता है फिर से शुरू होता है।",
        "तकनीकी रूप से, <a href=\"#/p5/shearX\">shearX()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href=\"#/p5/push\">push()</a>द्वारा और नियंत्रित किया जा सकता है और <a href=\"#/p5/pop\">pop()</a> फंक्शन।"
      ],
      "params": {
        "angle": "Number: angle of shear specified in radians or degrees,  depending on current angleMode"
      }
    },
    "shearY": {
      "description": [
        "y-अक्ष के चारों ओर एक आकार को कोण पैरामीटर द्वारा निर्दिष्ट राशि को कतरता है। कोणों को वर्तमान कोण मोड में निर्दिष्ट किया जाना चाहिए। वस्तुओं को हमेशा उनकी सापेक्ष स्थिति के आसपास मूल और सकारात्मक संख्याएं वस्तुओं को दक्षिणावर्त दिशा में कतरती हैं।",
        "परिवर्तन सब कुछ पर लागू होता है जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करता है। उदाहरण के लिए, शीयरवाई (PI/2) और फिर शीयरवाई (PI/2) को कॉल करना शीयरवाई (PI) के समान है। यदि <a href= \"#/p5/shearY\">shearY()</a> को <a href=\"#/p5/draw\">draw()</a> में कॉल किया जाता है, जब लूप में ट्रांसफॉर्मेशन रीसेट हो जाता है फिर से शुरू होता है।",
        "तकनीकी रूप से, <a href=\"#/p5/shearY\">shearY()</a> वर्तमान रूपांतरण मैट्रिक्स को एक रोटेशन मैट्रिक्स से गुणा करता है। इस फ़ंक्शन को <a href=\"#/ द्वारा और नियंत्रित किया जा सकता है। p5/push\">push()</a> और <a href=\"#/p5/pop\">pop()</a> फंक्शन।"
      ],
      "params": {
        "angle": "Number: angle of shear specified in radians or degrees,  depending on current angleMode"
      }
    },
    "translate": {
      "description": [
        "डिस्प्ले विंडो के भीतर वस्तुओं को विस्थापित करने के लिए एक राशि निर्दिष्ट करता है। x पैरामीटर बाएँ/दाएँ अनुवाद निर्दिष्ट करता है, y पैरामीटर ऊपर/नीचे अनुवाद निर्दिष्ट करता है।",
        "रूपांतरण संचयी होते हैं और उन सभी चीजों पर लागू होते हैं जो फ़ंक्शन के बाद और बाद में कॉल के प्रभाव को जमा करते हैं। उदाहरण के लिए, अनुवाद को कॉल करना (50, 0) और फिर अनुवाद (20, 0) अनुवाद (70, 0) के समान है। यदि <a href=\"#/p5/translate\">translate()</a> को <a href=\"#/p5/draw\">draw()</a> में कॉल किया जाता है, तो रूपांतरण है लूप के फिर से शुरू होने पर रीसेट करें। इस फ़ंक्शन को <a href=\"#/p5/push\">push()</a> और <a href=\"#/p5/pop\">pop()</a>का उपयोग करके नियंत्रित किया जा सकता है।"
      ],
      "params": {
        "x": "Number: left/right translation",
        "y": "Number: up/down translation",
        "z": "Number: (Optional) forward/backward translation (webgl only)",
        "vector": "p5.Vector: the vector to translate by"
      }
    },
    "storeItem": {
      "description": [
        "Stores a value in local storage under the key name.  Local storage is saved in the browser and persists  between browsing sessions and page reloads.  The key can be the name of the variable but doesn't  have to be. To retrieve stored items  see <a href=\"#/p5/getItem\">getItem</a>. Sensitive data such as passwords or personal information  should not be stored in local storage."
      ],
      "params": {
        "key": "String",
        "value": "String|Number|Object|Boolean|p5.Color|p5.Vector"
      }
    },
    "getItem": {
      "description": [
        "Returns the value of an item that was stored in local storage  using storeItem()"
      ],
      "returns": "Number|Object|String|Boolean|p5.Color|p5.Vector: Value of stored item",
      "params": {
        "key": "String: name that you wish to use to store in local storage"
      }
    },
    "clearStorage": {
      "description": [
        "Clears all local storage items set with storeItem()  for the current domain."
      ]
    },
    "removeItem": {
      "description": [
        "Removes an item that was stored with storeItem()"
      ],
      "params": {
        "key": "String"
      }
    },
    "createStringDict": {
      "description": [
        "Creates a new instance of p5.StringDict using the key-value pair  or the object you provide."
      ],
      "returns": "p5.StringDict:",
      "params": {
        "key": "String",
        "value": "String",
        "object": "Object: object"
      }
    },
    "createNumberDict": {
      "description": [
        "Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair  or object you provide."
      ],
      "returns": "p5.NumberDict:",
      "params": {
        "key": "Number",
        "value": "Number",
        "object": "Object: object"
      }
    },
    "select": {
      "description": [
        "Searches the page for the first element that matches the given CSS selector string (can be an ID, class, tag name or a combination) and returns it as a <a href=\"#/p5.Element\">p5.Element</a>. The DOM node itself can be accessed with .elt. Returns null if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element|null: <a href=\"#/p5.Element\">p5.Element</a> containing node found",
      "params": {
        "selectors": "String: CSS selector string of element to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>, or  HTML element to search within"
      }
    },
    "selectAll": {
      "description": [
        "Searches the page for elements that match the given CSS selector string (can be an ID a class, tag name or a combination) and returns them as <a href=\"#/p5.Element\">p5.Element</a>s in an array. The DOM node itself can be accessed with .elt. Returns an empty array if none found. You can also specify a container to search within."
      ],
      "returns": "p5.Element[]: Array of <a href=\"#/p5.Element\">p5.Element</a>s containing nodes found",
      "params": {
        "selectors": "String: CSS selector string of elements to search for",
        "container": "String|p5.Element|HTMLElement: (Optional) CSS selector string, <a href=\"#/p5.Element\">p5.Element</a>  , or HTML element to search within"
      }
    },
    "removeElements": {
      "description": [
        "Removes all elements created by p5, except any canvas / graphics elements created by <a href=\"#/p5/createCanvas\">createCanvas</a> or <a href=\"#/p5/createGraphics\">createGraphics</a>. Event handlers are removed, and element is removed from the DOM."
      ]
    },
    "changed": {
      "description": [
        "The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an element changes. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when the value of  an element changes.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "input": {
      "description": [
        "The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is detected with an element. The input event is often used to detect keystrokes in a input element, or changes on a slider element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when any user input is  detected within the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "createDiv": {
      "description": [
        "Creates a <code>&lt;div&gt;&lt;/div&gt;</code> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createP": {
      "description": [
        "Creates a <code>&lt;p&gt;&lt;/p&gt;</code> element in the DOM with given inner HTML. Used for paragraph length text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createSpan": {
      "description": [
        "Creates a <code>&lt;span&gt;&lt;/span&gt;</code> element in the DOM with given inner HTML."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "html": "String: (Optional) inner HTML for element created"
      }
    },
    "createImg": {
      "description": [
        "Creates an <code>&lt;img&gt;</code> element in the DOM with given src and alternate text."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "src": "String: src path or url for image",
        "alt": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes\">alternate text</a> to be used if image does not load. You can use also an empty string (<code>\"\"</code>) if that an image is not intended to be viewed.",
        "crossOrigin": "String: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used",
        "successCallback": "Function: (Optional) callback to be called once image data is loaded with the <a href=\"#/p5.Element\">p5.Element</a> as argument"
      }
    },
    "createA": {
      "description": [
        "Creates an <code>&lt;a&gt;&lt;/a&gt;</code> element in the DOM for including a hyperlink."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "href": "String: url of page to link to",
        "html": "String: inner html of link element to display",
        "target": "String: (Optional) target where new link should open,  could be _blank, _self, _parent, _top."
      }
    },
    "createSlider": {
      "description": [
        "Creates a slider <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM. Use .size() to set the display length of the slider."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "min": "Number: minimum value of the slider",
        "max": "Number: maximum value of the slider",
        "value": "Number: (Optional) default value of the slider",
        "step": "Number: (Optional) step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)"
      }
    },
    "createButton": {
      "description": [
        "Creates a <code>&lt;button&gt;&lt;/button&gt;</code> element in the DOM. Use .size() to set the display size of the button. Use .mousePressed() to specify behavior on press."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "label": "String: label displayed on the button",
        "value": "String: (Optional) value of the button"
      }
    },
    "createCheckbox": {
      "description": [
        "Creates a checkbox <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM. Calling .checked() on a checkbox returns if it is checked or not"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "label": "String: (Optional) label displayed after checkbox",
        "value": "Boolean: (Optional) value of the checkbox; checked is true, unchecked is false"
      }
    },
    "createSelect": {
      "description": [
        "Creates a dropdown menu <code>&lt;select&gt;&lt;/select&gt;</code> element in the DOM. It also helps to assign select-box methods to <a href=\"#/p5.Element\">p5.Element</a> when selecting existing select box. <ul> <li><code>.option(name, [value])</code> can be used to set options for the select after it is created.</li> <li><code>.value()</code> will return the currently selected option.</li> <li><code>.selected()</code> will return current dropdown element which is an instance of <a href=\"#/p5.Element\">p5.Element</a></li> <li><code>.selected(value)</code> can be used to make given option selected by default when the page first loads.</li> <li><code>.disable()</code> marks whole of dropdown element as disabled.</li> <li><code>.disable(value)</code> marks given option as disabled</li> </ul>"
      ],
      "returns": "p5.Element:",
      "params": {
        "multiple": "Boolean: (Optional) true if dropdown should support multiple selections",
        "existing": "Object: DOM select element"
      }
    },
    "createRadio": {
      "description": [
        "Creates a radio button element in the DOM.It also helps existing radio buttons assign methods of <a href=\"#/p5.Element/\">p5.Element</a>. <ul> <li><code>.option(value, [label])</code> can be used to create a new option for the element. If an option with a value already exists, it will be returned. Optionally, a label can be provided as second argument for the option.</li> <li><code>.remove(value)</code> can be used to remove an option for the element.</li> <li><code>.value()</code> method will return the currently selected value.</li> <li><code>.selected()</code> method will return the currently selected input element.</li> <li><code>.selected(value)</code> method will select the option and return it.</li> <li><code>.disable(Boolean)</code> method will enable/disable the whole radio button element.</li> </ul>"
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "containerElement": "Object: An container HTML Element either a div or span inside which all existing radio inputs will be considered as options.",
        "name": "String: (Optional) A name parameter for each Input Element."
      }
    },
    "createColorPicker": {
      "description": [
        "Creates a colorPicker element in the DOM for color input. The .value() method will return a hex string (#rrggbb) of the color. The .color() method will return a p5.Color object with the current chosen color."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String|p5.Color: (Optional) default color of element"
      }
    },
    "createInput": {
      "description": [
        "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM for text input. Use .<a href=\"#/p5.Element/size\">size()</a> to set the display length of the box."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "value": "String: default value of the input box",
        "type": "String: (Optional) type of text, ie text, password etc. Defaults to text.  Needs a value to be specified first."
      }
    },
    "createFileInput": {
      "description": [
        "Creates an <code>&lt;input&gt;&lt;/input&gt;</code> element in the DOM of type 'file'. This allows users to select local files for use in a sketch."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created DOM element",
      "params": {
        "callback": "Function: callback function for when a file is loaded",
        "multiple": "Boolean: (Optional) optional, to allow multiple files to be selected"
      }
    },
    "createVideo": {
      "description": [
        "Creates an HTML5 <code>&lt;video&gt;</code> element in the DOM for simple playback of audio/video. Shown by default, can be hidden with .<a href=\"#/p5.Element/hide\">hide()</a> and drawn into canvas using <a href=\"#/p5/image\">image()</a>. The first parameter can be either a single string path to a video file, or an array of string paths to different formats of the same video. This is useful for ensuring that your video can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page</a> for further information about supported formats."
      ],
      "returns": "p5.MediaElement: pointer to video <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "src": "String|String[]: path to a video file, or array of paths for  supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "createAudio": {
      "description": [
        "Creates a hidden HTML5 <code>&lt;audio&gt;</code> element in the DOM for simple audio playback. The first parameter can be either a single string path to a audio file, or an array of string paths to different formats of the same audio. This is useful for ensuring that your audio can play across different browsers, as each supports different formats. See <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats'>this page for further information about supported formats</a>."
      ],
      "returns": "p5.MediaElement: pointer to audio <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "src": "String|String[]: (Optional) path to an audio file, or array of paths  for supporting different browsers",
        "callback": "Function: (Optional) callback function to be called upon  'canplaythrough' event fire, that is, when the  browser can play the media, and estimates that  enough data has been loaded to play the media  up to its end without having to stop for  further buffering of content"
      }
    },
    "VIDEO": {},
    "AUDIO": {},
    "createCapture": {
      "description": [
        "Creates a new HTML5 <code>&lt;video&gt;</code> element that contains the audio/video feed from a webcam. The element is separate from the canvas and is displayed by default. The element can be hidden using .<a href=\"#/p5.Element/hide\">hide()</a>. The feed can be drawn onto the canvas using <a href=\"#/p5/image\">image()</a>. The loadedmetadata property can be used to detect when the element has fully loaded (see second example).",
        "More specific properties of the feed can be passing in a Constraints object. See the <a href='http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints'> W3C spec</a> for possible properties. Note that not all of these are supported by all browsers.",
        "<em>Security note</em>: A new browser security specification requires that getUserMedia, which is behind <a href=\"#/p5/createCapture\">createCapture()</a>, only works when you're running the code locally, or on HTTPS. Learn more <a href='http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https'>here</a> and <a href='https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia'>here</a>."
      ],
      "returns": "p5.Element: capture video <a href=\"#/p5.Element\">p5.Element</a>",
      "params": {
        "type": "String|Constant|Object: type of capture, either VIDEO or  AUDIO if none specified, default both,  or a Constraints object",
        "callback": "Function: (Optional) function to be called once  stream has loaded"
      }
    },
    "createElement": {
      "description": [
        "Creates element with given tag in the DOM with given content."
      ],
      "returns": "p5.Element: pointer to <a href=\"#/p5.Element\">p5.Element</a> holding created node",
      "params": {
        "tag": "String: tag for the new element",
        "content": "String: (Optional) html content to be inserted into the element"
      }
    },
    "deviceOrientation": {
      "description": [
        "The system variable deviceOrientation always contains the orientation of the device. The value of this variable will either be set 'landscape' or 'portrait'. If no data is available it will be set to 'undefined'. either LANDSCAPE or PORTRAIT."
      ]
    },
    "accelerationX": {
      "description": [
        "The system variable accelerationX always contains the acceleration of the device along the x axis. Value is represented as meters per second squared."
      ]
    },
    "accelerationY": {
      "description": [
        "The system variable accelerationY always contains the acceleration of the device along the y axis. Value is represented as meters per second squared."
      ]
    },
    "accelerationZ": {
      "description": [
        "The system variable accelerationZ always contains the acceleration of the device along the z axis. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationX": {
      "description": [
        "The system variable pAccelerationX always contains the acceleration of the device along the x axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationY": {
      "description": [
        "The system variable pAccelerationY always contains the acceleration of the device along the y axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "pAccelerationZ": {
      "description": [
        "The system variable pAccelerationZ always contains the acceleration of the device along the z axis in the frame previous to the current frame. Value is represented as meters per second squared."
      ]
    },
    "rotationX": {
      "description": [
        "The system variable rotationX always contains the rotation of the device along the x axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -180 to 180. If it is set to RADIANS, the value will be -PI to PI.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationY": {
      "description": [
        "The system variable rotationY always contains the rotation of the device along the y axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -90 to 90. If it is set to RADIANS, the value will be -PI/2 to PI/2.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "rotationZ": {
      "description": [
        "The system variable rotationZ always contains the rotation of the device along the z axis. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be 0 to 360. If it is set to RADIANS, the value will be 0 to 2*PI.",
        "Unlike rotationX and rotationY, this variable is available for devices with a built-in compass only.",
        "Note: The order the rotations are called is important, ie. if used together, it must be called in the order Z-X-Y or there might be unexpected behaviour."
      ]
    },
    "pRotationX": {
      "description": [
        "The system variable pRotationX always contains the rotation of the device along the x axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -180 to 180. If it is set to RADIANS, the value will be -PI to PI.",
        "pRotationX can also be used with rotationX to determine the rotate direction of the device along the X-axis."
      ]
    },
    "pRotationY": {
      "description": [
        "The system variable pRotationY always contains the rotation of the device along the y axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be -90 to 90. If it is set to RADIANS, the value will be -PI/2 to PI/2.",
        "pRotationY can also be used with rotationY to determine the rotate direction of the device along the Y-axis."
      ]
    },
    "pRotationZ": {
      "description": [
        "The system variable pRotationZ always contains the rotation of the device along the z axis in the frame previous to the current frame. If the sketch <a href=\"#/p5/angleMode\"> angleMode()</a> is set to DEGREES, the value will be 0 to 360. If it is set to RADIANS, the value will be 0 to 2*PI.",
        "pRotationZ can also be used with rotationZ to determine the rotate direction of the device along the Z-axis."
      ]
    },
    "turnAxis": {
      "description": [
        "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The turnAxis variable is only defined within the scope of deviceTurned()."
      ]
    },
    "setMoveThreshold": {
      "description": [
        "The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for the <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5."
      ],
      "params": {
        "value": "Number: The threshold value"
      }
    },
    "setShakeThreshold": {
      "description": [
        "The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for the <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30."
      ],
      "params": {
        "value": "Number: The threshold value"
      }
    },
    "deviceMoved": {
      "description": [
        "The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than the threshold value along X, Y or Z axis. The default threshold is set to 0.5. The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setMoveThreshold\">setMoveThreshold()</a>."
      ]
    },
    "deviceTurned": {
      "description": [
        "The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by more than 90 degrees continuously.",
        "The axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis variable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis: X, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'."
      ]
    },
    "deviceShaken": {
      "description": [
        "The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration changes of accelerationX and accelerationY values is more than the threshold value. The default threshold is set to 30. The threshold value can be changed using <a href=\"https://p5js.org/reference/#/p5/setShakeThreshold\">setShakeThreshold()</a>."
      ]
    },
    "keyIsPressed": {
      "description": [
        "The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed and false if no keys are pressed."
      ]
    },
    "key": {
      "description": [
        "The system variable key always contains the value of the most recent key on the keyboard that was typed. To get the proper capitalization, it is best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a> variable."
      ]
    },
    "keyCode": {
      "description": [
        "The variable keyCode is used to detect special keys such as BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. You can also check for custom keys by looking up the keyCode of any key on a site like this: <a href=\"http://keycode.info/\">keycode.info</a>."
      ]
    },
    "keyPressed": {
      "description": [
        "The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The keyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.",
        "For non-ASCII keys, use the keyCode variable. You can check if the keyCode equals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.",
        "For ASCII keys, the key that was pressed is stored in the key variable. However, it does not distinguish between uppercase and lowercase. For this reason, it is recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the case of the variable will be distinguished.",
        "Because of how operating systems handle key repeats, holding down a key may cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyReleased": {
      "description": [
        "The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released. See <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyTyped": {
      "description": [
        "The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but action keys such as Backspace, Delete, Ctrl, Shift, and Alt are ignored. If you are trying to detect a keyCode for one of these keys, use the <a href=\"#/p5/keyPressed\">keyPressed()</a> function instead. The most recent key typed will be stored in the key variable.",
        "Because of how operating systems handle key repeats, holding down a key will cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The rate of repeat is set by the operating system and how each computer is configured. Browsers may have different default behaviors attached to various key events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional KeyboardEvent callback argument."
      }
    },
    "keyIsDown": {
      "description": [
        "The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed. It can be used if you have an object that moves, and you want several keys to be able to affect its behaviour simultaneously, such as moving a sprite diagonally. You can put in any number representing the keyCode of the key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed <a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>."
      ],
      "returns": "Boolean: whether key is down or not",
      "params": {
        "code": "Number: The key to check for."
      }
    },
    "movedX": {
      "description": [
        "The variable movedX contains the horizontal movement of the mouse since the last frame"
      ]
    },
    "movedY": {
      "description": [
        "The variable movedY contains the vertical movement of the mouse since the last frame"
      ]
    },
    "mouseX": {
      "description": [
        "The system variable mouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseX will hold the x value of the most recent touch point."
      ]
    },
    "mouseY": {
      "description": [
        "The system variable mouseY always contains the current vertical position of the mouse, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. If touch is used instead of mouse input, mouseY will hold the y value of the most recent touch point."
      ]
    },
    "pmouseX": {
      "description": [
        "The system variable pmouseX always contains the horizontal position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseX will be reset to the current mouseX value at the start of each touch event."
      ]
    },
    "pmouseY": {
      "description": [
        "The system variable pmouseY always contains the vertical position of the mouse or finger in the frame previous to the current frame, relative to (0, 0) of the canvas. The value at the top-left corner is (0, 0) for 2-D and (-width/2, -height/2) for WebGL. Note: pmouseY will be reset to the current mouseY value at the start of each touch event."
      ]
    },
    "winMouseX": {
      "description": [
        "The system variable winMouseX always contains the current horizontal position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "winMouseY": {
      "description": [
        "The system variable winMouseY always contains the current vertical position of the mouse, relative to (0, 0) of the window."
      ]
    },
    "pwinMouseX": {
      "description": [
        "The system variable pwinMouseX always contains the horizontal position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX value at the start of each touch event."
      ]
    },
    "pwinMouseY": {
      "description": [
        "The system variable pwinMouseY always contains the vertical position of the mouse in the frame previous to the current frame, relative to (0, 0) of the window. Note: pwinMouseY will be reset to the current winMouseY value at the start of each touch event."
      ]
    },
    "mouseButton": {
      "description": [
        "p5 automatically tracks if the mouse button is pressed and which button is pressed. The value of the system variable mouseButton is either LEFT, RIGHT, or CENTER depending on which button was pressed last. Warning: different browsers may track mouseButton differently."
      ]
    },
    "mouseIsPressed": {
      "description": [
        "The boolean system variable mouseIsPressed is true if the mouse is pressed and false if not."
      ]
    },
    "mouseMoved": {
      "description": [
        "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse button is not pressed. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseDragged": {
      "description": [
        "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and a mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the <a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mousePressed": {
      "description": [
        "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button is pressed. The mouseButton variable (see the related reference entry) can be used to determine which button has been pressed. If no <a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is released. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseClicked": {
      "description": [
        "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been pressed and then released. Browsers handle clicks differently, so this function is only guaranteed to be run when the left mouse button is clicked. To handle other mouse buttons being pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>. Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "doubleClicked": {
      "description": [
        "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event listener has detected a dblclick event which is a part of the DOM L3 specification. The doubleClicked event is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element. For more info on the dblclick event refer to mozilla's documentation here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\">https://developer.mozilla.org/en-US/docs/Web/Events/dblclick</a>"
      ],
      "params": {
        "event": "Object: (Optional) optional MouseEvent callback argument."
      }
    },
    "mouseWheel": {
      "description": [
        "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel event is detected either triggered by an actual mouse wheel or by a touchpad. The event.delta property returns the amount the mouse wheel have scrolled. The values can be positive or negative depending on the scroll direction (on OS X with \"natural\" scrolling enabled, the signs are inverted). Browsers may have different default behaviors attached to various mouse events. To prevent any default behavior for this event, add \"return false\" to the end of the method. Due to the current support of the \"wheel\" event on Safari, the function may only work as expected if \"return false\" is included while using Safari."
      ],
      "params": {
        "event": "Object: (Optional) optional WheelEvent callback argument."
      }
    },
    "requestPointerLock": {
      "description": [
        "The function <a href=\"#/p5/requestPointerLock\">requestPointerLock()</a> locks the pointer to its current position and makes it invisible. Use <a href=\"#/p5/movedX\">movedX</a> and <a href=\"#/p5/movedY\">movedY</a> to get the difference the mouse was moved since the last call of draw. Note that not all browsers support this feature. This enables you to create experiences that aren't limited by the mouse moving out of the screen even if it is repeatedly moved into one direction. For example, a first person perspective experience."
      ]
    },
    "exitPointerLock": {
      "description": [
        "The function <a href=\"#/p5/exitPointerLock\">exitPointerLock()</a> exits a previously triggered <a href=\"#/p5/requestPointerLock\">pointer Lock</a> for example to make ui elements usable etc"
      ]
    },
    "touches": {
      "description": [
        "The system variable touches[] contains an array of the positions of all current touch points, relative to (0, 0) of the canvas, and IDs identifying a unique touch as it moves. Each element in the array is an object with x, y, and id properties.",
        "The touches[] array is not supported on Safari and IE on touch-based desktops (laptops)."
      ]
    },
    "touchStarted": {
      "description": [
        "The touchStarted() function is called once after every time a touch is registered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchMoved": {
      "description": [
        "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered. If no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "touchEnded": {
      "description": [
        "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no <a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be called instead if it is defined. Browsers may have different default behaviors attached to various touch events. To prevent any default behavior for this event, add \"return false\" to the end of the method."
      ],
      "params": {
        "event": "Object: (Optional) optional TouchEvent callback argument."
      }
    },
    "createImage": {
      "description": [
        "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a fresh buffer of pixels to play with. Set the size of the buffer with the width and height parameters.",
        ".<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels in the display window. These values are numbers. This array is the size (including an appropriate factor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for more info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.",
        "Before accessing the pixels of an image, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "width": "Integer: width in pixels",
        "height": "Integer: height in pixels"
      }
    },
    "saveCanvas": {
      "description": [
        "Save the current canvas as an image. The browser will either save the file immediately, or prompt the user with a dialogue window."
      ],
      "params": {
        "selectedCanvas": "p5.Element|HTMLCanvasElement: a variable  representing a specific html5 canvas (optional)",
        "filename": "String (Optional)",
        "extension": "String: (Optional) 'jpg' or 'png'"
      }
    },
    "saveFrames": {
      "description": [
        "Capture a sequence of frames that can be used to create a movie. Accepts a callback. For example, you may wish to send the frames to a server where they can be stored or converted into a movie. If no callback is provided, the browser will pop up save dialogues in an attempt to download all of the images that have just been created. With the callback provided the image data isn't saved by default but instead passed as an argument to the callback function as an array of objects, with the size of array equal to the total number of frames.",
        "Note that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation. To export longer animations, you might look into a library like <a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>."
      ],
      "params": {
        "filename": "String",
        "extension": "String: 'jpg' or 'png'",
        "duration": "Number: Duration in seconds to save the frames for.",
        "framerate": "Number: Framerate to save the frames in.",
        "callback": "Function(Array): (Optional) A callback function that will be executed  to handle the image data. This function  should accept an array as argument. The  array will contain the specified number of  frames of objects. Each object has three  properties: imageData - an  image/octet-stream, filename and extension."
      }
    },
    "loadImage": {
      "description": [
        "Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.",
        "The image may not be immediately available for rendering. If you want to ensure that the image is ready before doing anything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>. You may also supply a callback function to handle the image when it's ready.",
        "The path to the image should be relative to the HTML file that links in your sketch. Loading an image from a URL or other remote location may be blocked due to your browser's built-in security.",
        "You can also pass in a string of a base64 encoded image as an alternative to the file path. Remember to add \"data:image/png;base64,\" in front of the string."
      ],
      "returns": "p5.Image: the <a href=\"#/p5.Image\">p5.Image</a> object",
      "params": {
        "path": "String: Path of the image to be loaded",
        "successCallback": "function(p5.Image): (Optional) Function to be called once  the image is loaded. Will be passed the  <a href=\"#/p5.Image\">p5.Image</a>.",
        "failureCallback": "Function(Event): (Optional) called with event error if  the image fails to load."
      }
    },
    "image": {
      "description": [
        "Draw an image to the p5.js canvas.",
        "This function can be used with different numbers of parameters. The simplest use requires only three parameters: img, x, and y—where (x, y) is the position of the image. Two more parameters can optionally be added to specify the width and height of the image.",
        "This function can also be used with all eight Number parameters. To differentiate between all these parameters, p5.js uses the language of \"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source image\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the \"source image\" dimensions can be useful when you want to display a subsection of the source image instead of the whole thing. Here's a diagram to explain further: <img src=\"assets/drawImage.png\"></img>"
      ],
      "params": {
        "img": "p5.Image|p5.Element: the image to display",
        "x": "Number: the x-coordinate of the top-left corner of the image",
        "y": "Number: the y-coordinate of the top-left corner of the image",
        "width": "Number: (Optional) the width to draw the image",
        "height": "Number: (Optional) the height to draw the image",
        "dx": "Number: the x-coordinate of the destination  rectangle in which to draw the source image",
        "dy": "Number: the y-coordinate of the destination  rectangle in which to draw the source image",
        "dWidth": "Number: the width of the destination rectangle",
        "dHeight": "Number: the height of the destination rectangle",
        "sx": "Number: the x-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sy": "Number: the y-coordinate of the subsection of the source image to draw into the destination rectangle",
        "sWidth": "Number: (Optional) the width of the subsection of the  source image to draw into the destination  rectangle",
        "sHeight": "Number: (Optional) the height of the subsection of the  source image to draw into the destination rectangle"
      }
    },
    "tint": {
      "description": [
        "Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.",
        "To apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, tint(255, 128) will make an image 50% transparent (assuming the default alpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).",
        "The value for the gray parameter must be less than or equal to the current maximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is 255."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number (Optional)",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the tint color"
      }
    },
    "noTint": {
      "description": [
        "Removes the current fill value for displaying images and reverts to displaying images with their original hues."
      ]
    },
    "imageMode": {
      "description": [
        "Set image mode. Modifies the location from which images are drawn by changing the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted. The default mode is imageMode(CORNER), which interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.",
        "imageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the location of one corner, and the fourth and fifth parameters as the opposite corner.",
        "imageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a> as the image's center point. If two additional parameters are specified, they are used to set the image's width and height."
      ],
      "params": {
        "mode": "Constant: either CORNER, CORNERS, or CENTER"
      }
    },
    "pixels": {
      "description": [
        "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference /Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a> containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays will have more pixels[] (by a factor of pixelDensity^2). For example, if the image is 100x100 pixels, there will be 40,000. On a retina display, there will be 160,000.",
        "The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre>",
        "While the above method is complex, it is flexible enough to work with any pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of setting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at any pixelDensity, but the performance may not be as fast when lots of modifications are made to the pixel array.",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a> function must be run to update the changes.",
        "Note that this is not a standard javascript array. This means that standard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or <a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not work."
      ]
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL."
      }
    },
    "copy": {
      "description": [
        "Copies a region of the canvas to another region of the canvas and copies a region of pixels from an image used as the srcImg parameter into the canvas srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "filter": {
      "description": [
        "Applies a filter to the canvas. The presets options are:",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used.",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used.",
        "INVERT Sets each pixel to its inverse value. No parameter is used.",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur.",
        "ERODE Reduces the light areas. No parameter is used.",
        "DILATE Increases the light areas. No parameter is used.",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, BLUR, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels, or a single pixel, from the canvas.",
        "Returns an array of [R,G,B,A] values for any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned. Use the x and y parameters to get the value of one pixel. Get a section of the display window by specifying additional w and h parameters. When getting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.",
        "Getting the color of a single pixel with get(x, y) is easy, but not as fast as grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to get(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is <pre><code class=\"language-javascript\">let x, y, d; // set these to the coordinates let off = (y * width + x) * d * 4; let components = [  pixels[off],  pixels[off + 1],  pixels[off + 2],  pixels[off + 3] ]; print(components);</code></pre>",
        "See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.",
        "If you want to extract an array of colors or a subimage from an p5.Image object, take a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>"
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "loadPixels": {
      "description": [
        "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This function must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>. Note that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ]
    },
    "set": {
      "description": [
        "Changes the color of any pixel, or writes an image directly to the display window. The x and y parameters specify the pixel to change and the c parameter specifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A] pixel array. It can also be a single grayscale value. When setting an image, the x and y parameters define the coordinates for the upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.",
        "After using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear. This should be called once all pixels have been set, and must be called before calling .<a href=\"#/p5/get\">get()</a> or drawing the image.",
        "Setting the color of a single pixel with set(x, y) is easy, but not as fast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a> values directly may be complicated when working with a retina display, but will perform better when lots of pixels need to be set directly on every loop. See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "c": "Number|Number[]|Object: insert a grayscale value | a pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy"
      }
    },
    "updatePixels": {
      "description": [
        "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array. Use in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from the array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only necessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the pixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with <a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur."
      ],
      "params": {
        "x": "Number: (Optional) x-coordinate of the upper-left corner of region  to update",
        "y": "Number: (Optional) y-coordinate of the upper-left corner of region  to update",
        "w": "Number: (Optional) width of region to update",
        "h": "Number: (Optional) height of region to update"
      }
    },
    "loadJSON": {
      "description": [
        "Loads a JSON file from a file or a URL, and returns an Object. Note that even if the JSON file contains an Array, an Object will be returned with index numbers as keys.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. JSONP is supported via a polyfill and you can pass in as the second argument an object with definitions of the json callback following the syntax specified <a href=\"https://github.com/camsong/ fetch-jsonp\">here</a>.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object|Array: JSON data",
      "params": {
        "path": "String: name of the file or url to load",
        "jsonpOptions": "Object: (Optional) options object for jsonp related settings",
        "datatype": "String: (Optional) \"json\" or \"jsonp\"",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed  in as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadStrings": {
      "description": [
        "Reads the contents of a file and creates a String array of its individual lines. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "filename": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>  completes, Array is passed in as first  argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadTable": {
      "description": [
        "Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with its values. If a file is specified, it must be located in the sketch's \"data\" folder. The filename parameter can also be a URL to a file found online. By default, the file is assumed to be comma-separated (in CSV format). Table only looks for a header row if the 'header' option is included.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called. Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object:",
        "All files loaded and saved use UTF-8 encoding. This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: <a href=\"#/p5.Table\">Table</a> object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "extension": "String: (Optional) parse the table by comma-separated values \"csv\", semicolon-separated  values \"ssv\", or tab-separated values \"tsv\"",
        "header": "String: (Optional) \"header\" to indicate table has header row",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the  <a href=\"#/p5.Table\">Table</a> object is passed in as the  first argument.",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadXML": {
      "description": [
        "Reads the contents of a file and creates an XML object with its values. If the name of the file is used as the parameter, as in the above example, the file must be located in the sketch directory/folder.",
        "Alternatively, the file maybe be loaded from anywhere on the local computer using an absolute path (something that starts with / on Unix and Linux, or a drive letter on Windows), or the filename parameter can be a URL for a file found on a network.",
        "This method is asynchronous, meaning it may not finish before the next line in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.",
        "Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the object.",
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: XML object containing data",
      "params": {
        "filename": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>  completes, XML object is passed in as  first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "loadBytes": {
      "description": [
        "This method is suitable for fetching files up to size of 64MB."
      ],
      "returns": "Object: an object whose 'bytes' property will be the loaded buffer",
      "params": {
        "file": "String: name of the file or URL to load",
        "callback": "Function: (Optional) function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>  completes",
        "errorCallback": "Function: (Optional) function to be executed if there  is an error"
      }
    },
    "httpGet": {
      "description": [
        "Method for executing an HTTP GET request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return a Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer which can be used to initialize typed arrays (such as Uint8Array)."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"binary\", \"arrayBuffer\",  \"xml\", or \"text\"",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpPost": {
      "description": [
        "Method for executing an HTTP POST request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. This is equivalent to calling <code>httpDo(path, 'POST')</code>."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\".  If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
        "data": "Object|Boolean: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument"
      }
    },
    "httpDo": {
      "description": [
        "Method for executing an HTTP request. If data type is not specified, p5 will try to guess based on the URL, defaulting to text. For more advanced use, you may also pass in the path as the first argument and a object as the second argument, the signature follows the one specified in the Fetch API specification. This method is suitable for fetching files up to size of 64MB when \"GET\" is used."
      ],
      "returns": "Promise: A promise that resolves with the data when the operation  completes successfully or rejects with the error after  one occurs.",
      "params": {
        "path": "String: name of the file or url to load",
        "method": "String: (Optional) either \"GET\", \"POST\", or \"PUT\",  defaults to \"GET\"",
        "datatype": "String: (Optional) \"json\", \"jsonp\", \"xml\", or \"text\"",
        "data": "Object: (Optional) param data passed sent with request",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in  as first argument",
        "errorCallback": "Function: (Optional) function to be executed if  there is an error, response is passed  in as first argument",
        "options": "Object: Request object options as documented in the  \"fetch\" API <a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>"
      }
    },
    "createWriter": {
      "returns": "p5.PrintWriter:",
      "params": {
        "name": "String: name of the file to be created",
        "extension": "String (Optional)"
      }
    },
    "save": {
      "description": [
        "Saves a given element(image, text, json, csv, wav, or html) to the client's computer. The first parameter can be a pointer to element we want to save. The element can be one of <a href=\"#/p5.Element\">p5.Element</a>,an Array of Strings, an Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table </a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a p5.SoundFile (requires p5.sound). The second parameter is a filename (including extension).The third parameter is for options specific to this type of object. This method will save a file that fits the given parameters. If it is called without specifying an element, by default it will save the whole canvas as an image file. You can optionally specify a filename as the first parameter in such a case. <strong>Note that it is not recommended to call this method within draw, as it will open a new save dialog on every render.</strong>"
      ],
      "params": {
        "objectOrFilename": "Object|String: (Optional) If filename is provided, will  save canvas as an image with  either png or jpg extension  depending on the filename.  If object is provided, will  save depending on the object  and filename (see examples  above).",
        "filename": "String: (Optional) If an object is provided as the first  parameter, then the second parameter  indicates the filename,  and should include an appropriate  file extension (see examples above).",
        "options": "Boolean|String: (Optional) Additional options depend on  filetype. For example, when saving JSON,  <code>true</code> indicates that the  output will be optimized for filesize,  rather than readability."
      }
    },
    "saveJSON": {
      "description": [
        "Writes the contents of an Array or a JSON object to a .json file. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "json": "Array|Object",
        "filename": "String",
        "optimize": "Boolean: (Optional) If true, removes line breaks  and spaces from the output  file to optimize filesize  (but not readability)."
      }
    },
    "saveStrings": {
      "description": [
        "Writes an array of Strings to a text file, one line per String. The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "list": "String[]: string array to be written",
        "filename": "String: filename for output",
        "extension": "String: (Optional) the filename's extension",
        "isCRLF": "Boolean: (Optional) if true, change line-break to CRLF"
      }
    },
    "saveTable": {
      "description": [
        "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a text file with comma-separated-values ('csv') but can also use tab separation ('tsv'), or generate an HTML table ('html'). The file saving process and location of the saved file will vary between web browsers."
      ],
      "params": {
        "Table": "p5.Table: the <a href=\"#/p5.Table\">Table</a> object to save to a file",
        "filename": "String: the filename to which the Table should be saved",
        "options": "String: (Optional) can be one of \"tsv\", \"csv\", or \"html\""
      }
    },
    "abs": {
      "description": [
        "Calculates the absolute value (magnitude) of a number. Maps to Math.abs(). The absolute value of a number is always positive."
      ],
      "returns": "Number: absolute value of given number",
      "params": {
        "n": "Number: number to compute"
      }
    },
    "ceil": {
      "description": [
        "Calculates the closest int value that is greater than or equal to the value of the parameter. Maps to Math.ceil(). For example, ceil(9.03) returns the value 10."
      ],
      "returns": "Integer: rounded up number",
      "params": {
        "n": "Number: number to round up"
      }
    },
    "constrain": {
      "description": [
        "Constrains a value between a minimum and maximum value."
      ],
      "returns": "Number: constrained number",
      "params": {
        "n": "Number: number to constrain",
        "low": "Number: minimum limit",
        "high": "Number: maximum limit"
      }
    },
    "dist": {
      "description": [
        "Calculates the distance between two points, in either two or three dimensions. If you looking for distance between two vectors see <a herf=\"#/p5.Vector/dist\">dist()</a>"
      ],
      "returns": "Number: distance between the two points",
      "params": {
        "x1": "Number: x-coordinate of the first point",
        "y1": "Number: y-coordinate of the first point",
        "x2": "Number: x-coordinate of the second point",
        "y2": "Number: y-coordinate of the second point",
        "z1": "Number: z-coordinate of the first point",
        "z2": "Number: z-coordinate of the second point"
      }
    },
    "exp": {
      "description": [
        "Returns Euler's number e (2.71828...) raised to the power of the n parameter. Maps to Math.exp()."
      ],
      "returns": "Number: e^n",
      "params": {
        "n": "Number: exponent to raise"
      }
    },
    "floor": {
      "description": [
        "Calculates the closest int value that is less than or equal to the value of the parameter. Maps to Math.floor()."
      ],
      "returns": "Integer: rounded down number",
      "params": {
        "n": "Number: number to round down"
      }
    },
    "lerp": {
      "description": [
        "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, and 1.0 is equal to the second point. If the value of amt is more than 1.0 or less than 0.0, the number will be calculated accordingly in the ratio of the two given numbers. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines."
      ],
      "returns": "Number: lerped value",
      "params": {
        "start": "Number: first value",
        "stop": "Number: second value",
        "amt": "Number: number"
      }
    },
    "log": {
      "description": [
        "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the n parameter to be a value greater than 0.0. Maps to Math.log()."
      ],
      "returns": "Number: natural logarithm of n",
      "params": {
        "n": "Number: number greater than 0"
      }
    },
    "mag": {
      "description": [
        "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is a shortcut for writing dist(0, 0, x, y)."
      ],
      "returns": "Number: magnitude of vector from (0,0) to (a,b)",
      "params": {
        "a": "Number: first value",
        "b": "Number: second value"
      }
    },
    "map": {
      "description": [
        "Re-maps a number from one range to another.",
        "In the first example above, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width)."
      ],
      "returns": "Number: remapped number",
      "params": {
        "value": "Number: the incoming value to be converted",
        "start1": "Number: lower bound of the value's current range",
        "stop1": "Number: upper bound of the value's current range",
        "start2": "Number: lower bound of the value's target range",
        "stop2": "Number: upper bound of the value's target range",
        "withinBounds": "Boolean: (Optional) constrain the value to the newly mapped range"
      }
    },
    "max": {
      "description": [
        "Determines the largest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: maximum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "min": {
      "description": [
        "Determines the smallest value in a sequence of numbers, and then returns that value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array of any length."
      ],
      "returns": "Number: minimum Number",
      "params": {
        "n0": "Number: Number to compare",
        "n1": "Number: Number to compare",
        "nums": "Number[]: Numbers to compare"
      }
    },
    "norm": {
      "description": [
        "Normalizes a number from another range into a value between 0 and 1. Identical to map(value, low, high, 0, 1). Numbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. (See the example above.)"
      ],
      "returns": "Number: normalized number",
      "params": {
        "value": "Number: incoming value to be normalized",
        "start": "Number: lower bound of the value's current range",
        "stop": "Number: upper bound of the value's current range"
      }
    },
    "pow": {
      "description": [
        "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient way of multiplying numbers by themselves (or their reciprocals) in large quantities. For example, pow(3, 5) is equivalent to the expression 3 × 3 × 3 × 3 × 3 and pow(3, -5) is equivalent to 1 / 3 × 3 × 3 × 3 × 3. Maps to Math.pow()."
      ],
      "returns": "Number: n^e",
      "params": {
        "n": "Number: base of the exponential expression",
        "e": "Number: power by which to raise the base"
      }
    },
    "round": {
      "description": [
        "Calculates the integer closest to the n parameter. For example, round(133.8) returns the value 134. Maps to Math.round()."
      ],
      "returns": "Integer: rounded number",
      "params": {
        "n": "Number: number to round",
        "decimals": "Number: (Optional) number of decimal places to round to, default is 0"
      }
    },
    "sq": {
      "description": [
        "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1."
      ],
      "returns": "Number: squared number",
      "params": {
        "n": "Number: number to square"
      }
    },
    "sqrt": {
      "description": [
        "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring. Maps to Math.sqrt()."
      ],
      "returns": "Number: square root of number",
      "params": {
        "n": "Number: non-negative number to square root"
      }
    },
    "fract": {
      "description": [
        "Calculates the fractional part of a number."
      ],
      "returns": "Number: fractional part of x, i.e, {x}",
      "params": {
        "num": "Number: Number whose fractional part needs to be found out"
      }
    },
    "createVector": {
      "description": [
        "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction."
      ],
      "returns": "p5.Vector:",
      "params": {
        "x": "Number: (Optional) x component of the vector",
        "y": "Number: (Optional) y component of the vector",
        "z": "Number: (Optional) z component of the vector"
      }
    },
    "noise": {
      "description": [
        "Returns the Perlin noise value at specified coordinates. Perlin noise is a random sequence generator producing a more naturally ordered, harmonic succession of numbers compared to the standard <b>random()</b> function. It was invented by Ken Perlin in the 1980s and been used since in graphical applications to produce procedural textures, natural motion, shapes, terrains etc.<br /><br /> The main difference to the <b>random()</b> function is that Perlin noise is defined in an infinite n-dimensional space where each pair of coordinates corresponds to a fixed semi-random value (fixed only for the lifespan of the program; see the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise, depending on the number of coordinates given. The resulting value will always be between 0.0 and 1.0. The noise value can be animated by moving through the noise space as demonstrated in the example above. The 2nd and 3rd dimension can also be interpreted as time.<br /><br />The actual noise is structured similar to an audio signal, in respect to the function's use of frequencies. Similar to the concept of harmonics in physics, perlin noise is computed over several octaves which are added together for the final result. <br /><br />Another way to adjust the character of the resulting sequence is the scale of the input coordinates. As the function works within an infinite space the value of the coordinates doesn't matter as such, only the distance between successive coordinates does (eg. when using <b>noise()</b> within a loop). As a general rule the smaller the difference between coordinates, the smoother the resulting noise sequence will be. Steps of 0.005-0.03 work best for most applications, but this will differ depending on use."
      ],
      "returns": "Number: Perlin noise value (between 0 and 1) at specified  coordinates",
      "params": {
        "x": "Number: x-coordinate in noise space",
        "y": "Number: (Optional) y-coordinate in noise space",
        "z": "Number: (Optional) z-coordinate in noise space"
      }
    },
    "noiseDetail": {
      "description": [
        "Adjusts the character and level of detail produced by the Perlin noise  function. Similar to harmonics in physics, noise is computed over  several octaves. Lower octaves contribute more to the output signal and  as such define the overall intensity of the noise, whereas higher octaves  create finer grained details in the noise sequence. By default, noise is computed over 4 octaves with each octave contributing  exactly half than its predecessor, starting at 50% strength for the 1st  octave. This falloff amount can be changed by adding an additional function  parameter. Eg. a falloff factor of 0.75 means each octave will now have  75% impact (25% less) of the previous lower octave. Any value between  0.0 and 1.0 is valid, however note that values greater than 0.5 might  result in greater than 1.0 values returned by <b>noise()</b>. By changing these parameters, the signal created by the <b>noise()</b>  function can be adapted to fit very specific needs and characteristics."
      ],
      "params": {
        "lod": "Number: number of octaves to be used by the noise",
        "falloff": "Number: falloff factor for each octave"
      }
    },
    "noiseSeed": {
      "description": [
        "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b> produces different results each time the program is run. Set the <b>value</b> parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "randomSeed": {
      "description": [
        "Sets the seed value for <a href=\"#/p5/random\">random()</a>.",
        "By default, <a href=\"#/p5/random\">random()</a> produces different results each time the program is run. Set the seed parameter to a constant to return the same pseudo-random numbers each time the software is run."
      ],
      "params": {
        "seed": "Number: the seed value"
      }
    },
    "random": {
      "description": [
        "Return a random floating-point number.",
        "Takes either 0, 1 or 2 arguments.",
        "If no argument is given, returns a random number from 0 up to (but not including) 1.",
        "If one argument is given and it is a number, returns a random number from 0 up to (but not including) the number.",
        "If one argument is given and it is an array, returns a random element from that array.",
        "If two arguments are given, returns a random number from the first argument up to (but not including) the second argument."
      ],
      "returns": "Number: the random number",
      "params": {
        "min": "Number: (Optional) the lower bound (inclusive)",
        "max": "Number: (Optional) the upper bound (exclusive)",
        "choices": "Array: the array to choose from"
      }
    },
    "randomGaussian": {
      "description": [
        "Returns a random number fitting a Gaussian, or  normal, distribution. There is theoretically no minimum or maximum  value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is  just a very low probability that values far from the mean will be  returned; and a higher probability that numbers near the mean will  be returned. Takes either 0, 1 or 2 arguments.  If no args, returns a mean of 0 and standard deviation of 1.  If one arg, that arg is the mean (standard deviation is 1).  If two args, first is mean, second is standard deviation."
      ],
      "returns": "Number: the random number",
      "params": {
        "mean": "Number: (Optional) the mean",
        "sd": "Number: (Optional) the standard deviation"
      }
    },
    "acos": {
      "description": [
        "The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927) if the angleMode is RADIANS or 0 to 180 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc cosine of the given value",
      "params": {
        "value": "Number: the value whose arc cosine is to be returned"
      }
    },
    "asin": {
      "description": [
        "The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc sine of the given value",
      "params": {
        "value": "Number: the value whose arc sine is to be returned"
      }
    },
    "atan": {
      "description": [
        "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function expects the values in the range of -Infinity to Infinity (exclusive) and values are returned in the range -PI/2 to PI/2 if the angleMode is RADIANS or -90 to 90 if the angle mode is DEGREES."
      ],
      "returns": "Number: the arc tangent of the given value",
      "params": {
        "value": "Number: the value whose arc tangent is to be returned"
      }
    },
    "atan2": {
      "description": [
        "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI if the angleMode is RADIANS or 180 to -180 if the angleMode is DEGREES. The atan2<a href=\"#/p5/\">()</a> function is most often used for orienting geometry to the position of the cursor.",
        "Note: The y-coordinate of the point is the first parameter, and the x-coordinate is the second parameter, due the the structure of calculating the tangent."
      ],
      "returns": "Number: the arc tangent of the given point",
      "params": {
        "y": "Number: y-coordinate of the point",
        "x": "Number: x-coordinate of the point"
      }
    },
    "cos": {
      "description": [
        "Calculates the cosine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the cosine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "sin": {
      "description": [
        "Calculates the sine of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1."
      ],
      "returns": "Number: the sine of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "tan": {
      "description": [
        "Calculates the tangent of an angle. This function takes into account the current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range of all real numbers."
      ],
      "returns": "Number: the tangent of the angle",
      "params": {
        "angle": "Number: the angle"
      }
    },
    "degrees": {
      "description": [
        "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "radians": "Number: the radians value to convert to degrees"
      }
    },
    "radians": {
      "description": [
        "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. This function does not take into account the current <a href=\"#/p5/angleMode\">angleMode</a>."
      ],
      "returns": "Number: the converted angle",
      "params": {
        "degrees": "Number: the degree value to convert to radians"
      }
    },
    "angleMode": {
      "description": [
        "Sets the current mode of p5 to given mode. Default mode is RADIANS."
      ],
      "params": {
        "mode": "Constant: either RADIANS or DEGREES"
      }
    },
    "textAlign": {
      "description": [
        "Sets the current alignment for drawing text. Accepts two arguments: horizAlign (LEFT, CENTER, or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or BASELINE).",
        "The horizAlign parameter is in reference to the x value of the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is in reference to the y value.",
        "So if you write textAlign(LEFT), you are aligning the left edge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you write textAlign(RIGHT, TOP), you are aligning the right edge of your text to the x value and the top of edge of the text to the y value."
      ],
      "params": {
        "horizAlign": "Constant: horizontal alignment, either LEFT,  CENTER, or RIGHT",
        "vertAlign": "Constant: (Optional) vertical alignment, either TOP,  BOTTOM, CENTER, or BASELINE"
      }
    },
    "textLeading": {
      "description": [
        "Sets/gets the spacing, in pixels, between lines of text. This setting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function."
      ],
      "params": {
        "leading": "Number: the size in pixels for spacing between lines"
      }
    },
    "textSize": {
      "description": [
        "Sets/gets the current font size. This size will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels."
      ],
      "params": {
        "theSize": "Number: the size of the letters in units of pixels"
      }
    },
    "textStyle": {
      "description": [
        "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, BOLD or BOLDITALIC. Note: this may be is overridden by CSS styling. For non-system fonts (opentype, truetype, etc.) please load styled fonts instead."
      ],
      "params": {
        "theStyle": "Constant: styling for text, either NORMAL,  ITALIC, BOLD or BOLDITALIC"
      }
    },
    "textWidth": {
      "description": [
        "Calculates and returns the width of any character or text string."
      ],
      "returns": "Number: the calculated width",
      "params": {
        "theText": "String: the String of characters to measure"
      }
    },
    "textAscent": {
      "description": [
        "Returns the ascent of the current font at its current size. The ascent represents the distance, in pixels, of the tallest character above the baseline."
      ],
      "returns": "Number:"
    },
    "textDescent": {
      "description": [
        "Returns the descent of the current font at its current size. The descent represents the distance, in pixels, of the character with the longest descender below the baseline."
      ],
      "returns": "Number:"
    },
    "textWrap": {
      "description": [
        "Specifies how lines of text are wrapped within a text box. This requires a max-width set on the text area, specified in <a href=\"#/p5/text\">text()</a> as parameter <code>x2</code>.",
        "WORD wrap style only breaks lines at spaces. A single string without spaces that exceeds the boundaries of the canvas or text area is not truncated, and will overflow the desired area, disappearing at the canvas edge.",
        "CHAR wrap style breaks lines wherever needed to stay within the text box.",
        "WORD is the default wrap style, and both styles will still break lines at any line breaks (<code>\\n</code>) specified in the original text. The text area max-height parameter (<code>y2</code>) also still applies to wrapped text in both styles, lines of text that do not fit within the text area will not be drawn to the screen."
      ],
      "returns": "String: wrapStyle",
      "params": {
        "wrapStyle": "Constant: text wrapping style, either WORD or CHAR"
      }
    },
    "loadFont": {
      "description": [
        "Loads an opentype font file (.otf, .ttf) from a file or a URL, and returns a PFont Object. This method is asynchronous, meaning it may not finish before the next line in your sketch is executed.",
        "The path to the font should be relative to the HTML file that links in your sketch. Loading fonts from a URL or other remote location may be blocked due to your browser's built-in security."
      ],
      "returns": "p5.Font: <a href=\"#/p5.Font\">p5.Font</a> object",
      "params": {
        "path": "String: name of the file or url to load",
        "callback": "Function: (Optional) function to be executed after  <a href=\"#/p5/loadFont\">loadFont()</a> completes",
        "onError": "Function: (Optional) function to be executed if  an error occurs"
      }
    },
    "text": {
      "description": [
        "Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the <a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set with <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function. Change the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a> functions.",
        "The text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the option to draw to the left, right, and center of the coordinates.",
        "The x2 and y2 parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen. If x2 and y2 are not specified, the baseline alignment is the default, which means that the text will be drawn upwards from x and y.",
        "<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the <a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above). <a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode."
      ],
      "params": {
        "str": "String|Object|Array|Number|Boolean: the alphanumeric  symbols to be displayed",
        "x": "Number: x-coordinate of text",
        "y": "Number: y-coordinate of text",
        "x2": "Number: (Optional) by default, the width of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info",
        "y2": "Number: (Optional) by default, the height of the text box,  see <a href=\"#/p5/rectMode\">rectMode()</a> for more info"
      }
    },
    "textFont": {
      "description": [
        "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function. If textFont() is called without any argument, it will return the current font if one has been set already. If not, it will return the name of the default font as a string. If textFont() is called with a font to use, it will return the p5 object.",
        "<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported."
      ],
      "returns": "Object: the current font / p5 Object",
      "params": {
        "font": "Object|String: a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String representing a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font that is generally available across all systems)",
        "size": "Number: (Optional) the font size to use"
      }
    },
    "append": {
      "description": [
        "Adds a value to the end of an array. Extends the length of the array by one. Maps to Array.push()."
      ],
      "returns": "Array: the array that was appended to",
      "params": {
        "array": "Array: Array to append",
        "value": "Any: to be added to the Array"
      }
    },
    "arrayCopy": {
      "description": [
        "Copies an array (or part of an array) to another array. The src array is copied to the dst array, beginning at the position specified by srcPosition and into the position specified by dstPosition. The number of elements to copy is determined by length. Note that copying values overwrites existing values in the destination array. To append values instead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.",
        "The simplified version with only two arguments, arrayCopy(src, dst), copies an entire array to another of the same size. It is equivalent to arrayCopy(src, 0, dst, 0, src.length).",
        "Using this function is far more efficient for copying array data than iterating through a for() loop and copying each element individually."
      ],
      "params": {
        "src": "Array: the source Array",
        "srcPosition": "Integer: starting position in the source Array",
        "dst": "Array: the destination Array",
        "dstPosition": "Integer: starting position in the destination Array",
        "length": "Integer: number of Array elements to be copied"
      }
    },
    "concat": {
      "description": [
        "Concatenates two arrays, maps to Array.concat(). Does not modify the input arrays."
      ],
      "returns": "Array: concatenated array",
      "params": {
        "a": "Array: first Array to concatenate",
        "b": "Array: second Array to concatenate"
      }
    },
    "reverse": {
      "description": [
        "Reverses the order of an array, maps to Array.reverse()"
      ],
      "returns": "Array: the reversed list",
      "params": {
        "list": "Array: Array to reverse"
      }
    },
    "shorten": {
      "description": [
        "Decreases an array by one element and returns the shortened array, maps to Array.pop()."
      ],
      "returns": "Array: shortened Array",
      "params": {
        "list": "Array: Array to shorten"
      }
    },
    "shuffle": {
      "description": [
        "Randomizes the order of the elements of an array. Implements <a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank> Fisher-Yates Shuffle Algorithm</a>."
      ],
      "returns": "Array: shuffled Array",
      "params": {
        "array": "Array: Array to shuffle",
        "bool": "Boolean: (Optional) modify passed array"
      }
    },
    "sort": {
      "description": [
        "Sorts an array of numbers from smallest to largest, or puts an array of words in alphabetical order. The original array is not modified; a re-ordered array is returned. The count parameter states the number of elements to sort. For example, if there are 12 elements in an array and count is set to 5, only the first 5 elements in the array will be sorted."
      ],
      "returns": "Array: the sorted list",
      "params": {
        "list": "Array: Array to sort",
        "count": "Integer: (Optional) number of elements to sort, starting from 0"
      }
    },
    "splice": {
      "description": [
        "Inserts a value or an array of values into an existing array. The first parameter specifies the initial array to be modified, and the second parameter defines the data to be inserted. The third parameter is an index value which specifies the array position from which to insert data. (Remember that array index numbering starts at zero, so the first position is 0, the second position is 1, and so on.)"
      ],
      "returns": "Array: the list",
      "params": {
        "list": "Array: Array to splice into",
        "value": "Any: value to be spliced in",
        "position": "Integer: in the array from which to insert data"
      }
    },
    "subset": {
      "description": [
        "Extracts an array of elements from an existing array. The list parameter defines the array from which the elements will be copied, and the start and count parameters specify which elements to extract. If no count is given, elements will be extracted from the start to the end of the array. When specifying the start, remember that the first array element is 0. This function does not change the source array."
      ],
      "returns": "Array: Array of extracted elements",
      "params": {
        "list": "Array: Array to extract from",
        "start": "Integer: position to begin",
        "count": "Integer: (Optional) number of values to extract"
      }
    },
    "float": {
      "description": [
        "Converts a string to its floating point representation. The contents of a string must resemble a number, or NaN (not a number) will be returned. For example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\") will return NaN.",
        "When an array of values is passed in, then an array of floats of the same length is returned."
      ],
      "returns": "Number: floating point representation of string",
      "params": {
        "str": "String: float string to parse"
      }
    },
    "int": {
      "description": [
        "Converts a boolean, string, or float to its integer representation. When an array of values is passed in, then an int array of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "radix": "Integer: (Optional) the radix to convert to (default: 10)",
        "ns": "Array: values to parse"
      }
    },
    "str": {
      "description": [
        "Converts a boolean, string or number to its string representation. When an array of values is passed in, then an array of strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Boolean|Number|Array: value to parse"
      }
    },
    "byte": {
      "description": [
        "Converts a number, string representation of a number, or boolean to its byte representation. A byte can be only a whole number between -128 and 127, so when a value outside of this range is converted, it wraps around to the corresponding byte representation. When an array of number, string or boolean values is passed in, then an array of bytes the same length is returned."
      ],
      "returns": "Number: byte representation of value",
      "params": {
        "n": "String|Boolean|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "char": {
      "description": [
        "Converts a number or string to its corresponding single-character string representation. If a string parameter is provided, it is first parsed as an integer and then translated into a single-character string. When an array of number or string values is passed in, then an array of single-character strings of the same length is returned."
      ],
      "returns": "String: string representation of value",
      "params": {
        "n": "String|Number: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "unchar": {
      "description": [
        "Converts a single-character string to its corresponding integer representation. When an array of single-character string values is passed in, then an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "hex": {
      "description": [
        "Converts a number to a string in its equivalent hexadecimal notation. If a second parameter is passed, it is used to set the number of characters to generate in the hexadecimal notation. When an array is passed in, an array of strings in hexadecimal notation of the same length is returned."
      ],
      "returns": "String: hexadecimal string representation of value",
      "params": {
        "n": "Number: value to parse",
        "digits": "Number (Optional)",
        "ns": "Number[]: array of values to parse"
      }
    },
    "unhex": {
      "description": [
        "Converts a string representation of a hexadecimal number to its equivalent integer value. When an array of strings in hexadecimal notation is passed in, an array of integers of the same length is returned."
      ],
      "returns": "Number: integer representation of hexadecimal value",
      "params": {
        "n": "String: value to parse",
        "ns": "Array: values to parse"
      }
    },
    "join": {
      "description": [
        "Combines an array of Strings into one String, each separated by the character(s) used for the separator parameter. To join arrays of ints or floats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or nfs()."
      ],
      "returns": "String: joined String",
      "params": {
        "list": "Array: array of Strings to be joined",
        "separator": "String: String to be placed between each item"
      }
    },
    "match": {
      "description": [
        "This function is used to apply a regular expression to a piece of text, and return matching groups (elements found inside parentheses) as a String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, an array of length 1 (with the matched text as the first element of the array) will be returned.",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, an array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Element [0] of a regular expression match returns the entire matching string, and the match groups start at element [1] (the first group is [1], the second [2], and so on)."
      ],
      "returns": "String[]: Array of Strings found",
      "params": {
        "str": "String: the String to be searched",
        "regexp": "String: the regexp to be used for matching"
      }
    },
    "matchAll": {
      "description": [
        "This function is used to apply a regular expression to a piece of text, and return a list of matching groups (elements found inside parentheses) as a two-dimensional String array. If there are no matches, a null value will be returned. If no groups are specified in the regular expression, but the sequence matches, a two dimensional array is still returned, but the second dimension is only of length one.",
        "To use the function, first check to see if the result is null. If the result is null, then the sequence did not match at all. If the sequence did match, a 2D array is returned.",
        "If there are groups (specified by sets of parentheses) in the regular expression, then the contents of each will be returned in the array. Assuming a loop with counter variable i, element [i][0] of a regular expression match returns the entire matching string, and the match groups start at element [i][1] (the first group is [i][1], the second [i][2], and so on)."
      ],
      "returns": "String[]: 2d Array of Strings found",
      "params": {
        "str": "String: the String to be searched",
        "regexp": "String: the regexp to be used for matching"
      }
    },
    "nf": {
      "description": [
        "Utility function for formatting numbers into strings. There are two versions: one for formatting floats, and one for formatting ints. The values for the digits, left, and right parameters should always be positive integers. (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter if greater than the current length of the number. For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123 (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than the result will be 123.200."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number|String: the Number to format",
        "left": "Integer|String: (Optional) number of digits to the left of the  decimal point",
        "right": "Integer|String: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfc": {
      "description": [
        "Utility function for formatting numbers into strings and placing appropriate commas to mark units of 1000. There are two versions: one for formatting ints, and one for formatting an array of ints. The value for the right parameter should always be a positive integer."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number|String: the Number to format",
        "right": "Integer|String: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "nfp": {
      "description": [
        "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but puts a \"+\" in front of positive numbers and a \"-\" in front of negative numbers. There are two versions: one for formatting floats, and one for formatting ints. The values for left, and right parameters should always be positive integers."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number: the Number to format",
        "left": "Integer: (Optional) number of digits to the left of the decimal  point",
        "right": "Integer: (Optional) number of digits to the right of the  decimal point",
        "nums": "Number[]: the Numbers to format"
      }
    },
    "nfs": {
      "description": [
        "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but puts an additional \"_\" (space) in front of positive numbers just in case to align it with negative numbers which includes \"-\" (minus) sign. The main usecase of nfs() can be seen when one wants to align the digits (place values) of a non-negative number with some negative number (See the example to get a clear picture). There are two versions: one for formatting float, and one for formatting int. The values for the digits, left, and right parameters should always be positive integers. (IMP): The result on the canvas basically the expected alignment can vary based on the typeface you are using. (NOTE): Be cautious when using left and right parameters as it prepends numbers of 0's if the parameter if greater than the current length of the number. For example if number is 123.2 and left parameter passed is 4 which is greater than length of 123 (integer part) i.e 3 than result will be 0123.2. Same case for right parameter i.e. if right is 3 than the result will be 123.200."
      ],
      "returns": "String: formatted String",
      "params": {
        "num": "Number: the Number to format",
        "left": "Integer: (Optional) number of digits to the left of the decimal  point",
        "right": "Integer: (Optional) number of digits to the right of the  decimal point",
        "nums": "Array: the Numbers to format"
      }
    },
    "split": {
      "description": [
        "The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into pieces using a character or string as the delimiter. The delim parameter specifies the character or characters that mark the boundaries between each piece. A String[] array is returned that contains each of the pieces.",
        "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it splits using a range of characters instead of a specific character or sequence."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "value": "String: the String to be split",
        "delim": "String: the String used to separate the data"
      }
    },
    "splitTokens": {
      "description": [
        "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character delimiters or \"tokens.\" The delim parameter specifies the character or characters to be used as a boundary.",
        "If no delim characters are specified, any whitespace character is used to split. Whitespace characters include tab (\\t), line feed (\\n), carriage return (\\r), form feed (\\f), and space."
      ],
      "returns": "String[]: Array of Strings",
      "params": {
        "value": "String: the String to be split",
        "delim": "String: (Optional) list of individual Strings that will be used as  separators"
      }
    },
    "trim": {
      "description": [
        "Removes whitespace characters from the beginning and end of a String. In addition to standard whitespace characters such as space, carriage return, and tab, this function also removes the Unicode \"nbsp\" character."
      ],
      "returns": "String: a trimmed String",
      "params": {
        "str": "String: a String to be trimmed",
        "strs": "Array: an Array of Strings to be trimmed"
      }
    },
    "day": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function returns the current day as a value from 1 - 31."
      ],
      "returns": "Integer: the current day"
    },
    "hour": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function returns the current hour as a value from 0 - 23."
      ],
      "returns": "Integer: the current hour"
    },
    "minute": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function returns the current minute as a value from 0 - 59."
      ],
      "returns": "Integer: the current minute"
    },
    "millis": {
      "description": [
        "Returns the number of milliseconds (thousandths of a second) since starting the sketch (when <code>setup()</code> is called). This information is often used for timing events and animation sequences."
      ],
      "returns": "Number: the number of milliseconds since starting the sketch"
    },
    "month": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function returns the current month as a value from 1 - 12."
      ],
      "returns": "Integer: the current month"
    },
    "second": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function returns the current second as a value from 0 - 59."
      ],
      "returns": "Integer: the current second"
    },
    "year": {
      "description": [
        "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function returns the current year as an integer (2014, 2015, 2016, etc)."
      ],
      "returns": "Integer: the current year"
    },
    "plane": {
      "description": [
        "Draw a plane with given a width and height"
      ],
      "params": {
        "width": "Number: (Optional) width of the plane",
        "height": "Number: (Optional) height of the plane",
        "detailX": "Integer: (Optional) Optional number of triangle  subdivisions in x-dimension",
        "detailY": "Integer: (Optional) Optional number of triangle  subdivisions in y-dimension"
      }
    },
    "box": {
      "description": [
        "Draw a box with given width, height and depth"
      ],
      "params": {
        "width": "Number: (Optional) width of the box",
        "Height": "Number: (Optional) height of the box",
        "depth": "Number: (Optional) depth of the box",
        "detailX": "Integer: (Optional) Optional number of triangle  subdivisions in x-dimension",
        "detailY": "Integer: (Optional) Optional number of triangle  subdivisions in y-dimension"
      }
    },
    "sphere": {
      "description": [
        "Draw a sphere with given radius.",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a sphere. More subdivisions make the sphere seem smoother. The recommended maximum values are both 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of circle",
        "detailX": "Integer: (Optional) optional number of subdivisions in x-dimension",
        "detailY": "Integer: (Optional) optional number of subdivisions in y-dimension"
      }
    },
    "cylinder": {
      "description": [
        "Draw a cylinder with given radius and height",
        "DetailX and detailY determines the number of subdivisions in the x-dimension and the y-dimension of a cylinder. More subdivisions make the cylinder seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the surface",
        "height": "Number: (Optional) height of the cylinder",
        "detailX": "Integer: (Optional) number of subdivisions in x-dimension;  default is 24",
        "detailY": "Integer: (Optional) number of subdivisions in y-dimension;  default is 1",
        "bottomCap": "Boolean: (Optional) whether to draw the bottom of the cylinder",
        "topCap": "Boolean: (Optional) whether to draw the top of the cylinder"
      }
    },
    "cone": {
      "description": [
        "Draw a cone with given radius and height",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the cone seem smoother. The recommended maximum value for detailX is 24. Using a value greater than 24 may cause a warning or slow down the browser."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the bottom surface",
        "height": "Number: (Optional) height of the cone",
        "detailX": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 24",
        "detailY": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 1",
        "cap": "Boolean: (Optional) whether to draw the base of the cone"
      }
    },
    "ellipsoid": {
      "description": [
        "Draw an ellipsoid with given radius",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a cone. More subdivisions make the ellipsoid appear to be smoother. Avoid detail number above 150, it may crash the browser."
      ],
      "params": {
        "radiusx": "Number: (Optional) x-radius of ellipsoid",
        "radiusy": "Number: (Optional) y-radius of ellipsoid",
        "radiusz": "Number: (Optional) z-radius of ellipsoid",
        "detailX": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 24. Avoid detail number above  150, it may crash the browser.",
        "detailY": "Integer: (Optional) number of segments,  the more segments the smoother geometry  default is 16. Avoid detail number above  150, it may crash the browser."
      }
    },
    "torus": {
      "description": [
        "Draw a torus with given radius and tube radius",
        "DetailX and detailY determine the number of subdivisions in the x-dimension and the y-dimension of a torus. More subdivisions make the torus appear to be smoother. The default and maximum values for detailX and detailY are 24 and 16, respectively. Setting them to relatively small values like 4 and 6 allows you to create new shapes other than a torus."
      ],
      "params": {
        "radius": "Number: (Optional) radius of the whole ring",
        "tubeRadius": "Number: (Optional) radius of the tube",
        "detailX": "Integer: (Optional) number of segments in x-dimension,  the more segments the smoother geometry  default is 24",
        "detailY": "Integer: (Optional) number of segments in y-dimension,  the more segments the smoother geometry  default is 16"
      }
    },
    "orbitControl": {
      "description": [
        "Allows movement around a 3D sketch using a mouse or trackpad. Left-clicking and dragging will rotate the camera position about the center of the sketch, right-clicking and dragging will pan the camera position without rotation, and using the mouse wheel (scrolling) will move the camera closer or further from the center of the sketch. This function can be called with parameters dictating sensitivity to mouse movement along the X and Y axes. Calling this function without parameters is equivalent to calling orbitControl(1,1). To reverse direction of movement in either axis, enter a negative number for sensitivity."
      ],
      "params": {
        "sensitivityX": "Number: (Optional) sensitivity to mouse movement along X axis",
        "sensitivityY": "Number: (Optional) sensitivity to mouse movement along Y axis",
        "sensitivityZ": "Number: (Optional) sensitivity to scroll movement along Z axis"
      }
    },
    "debugMode": {
      "description": [
        "debugMode() helps visualize 3D space by adding a grid to indicate where the ‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z directions. This function can be called without parameters to create a default grid and axes icon, or it can be called according to the examples above to customize the size and position of the grid and/or axes icon. The grid is drawn using the most recently set stroke color and weight. To specify these parameters, add a call to stroke() and strokeWeight() just before the end of the draw() loop.",
        "By default, the grid will run through the origin (0,0,0) of the sketch along the XZ plane and the axes icon will be offset from the origin. Both the grid and axes icon will be sized according to the current canvas size. Note that because the grid runs parallel to the default camera view, it is often helpful to use debugMode along with orbitControl to allow full view of the grid."
      ],
      "params": {
        "mode": "Constant: either GRID or AXES",
        "gridSize": "Number: (Optional) size of one side of the grid",
        "gridDivisions": "Number: (Optional) number of divisions in the grid",
        "xOff": "Number: (Optional) X axis offset from origin (0,0,0)",
        "yOff": "Number: (Optional) Y axis offset from origin (0,0,0)",
        "zOff": "Number: (Optional) Z axis offset from origin (0,0,0)",
        "axesSize": "Number: (Optional) size of axes icon",
        "gridXOff": "Number (Optional)",
        "gridYOff": "Number (Optional)",
        "gridZOff": "Number (Optional)",
        "axesXOff": "Number (Optional)",
        "axesYOff": "Number (Optional)",
        "axesZOff": "Number (Optional)"
      }
    },
    "noDebugMode": {
      "description": [
        "Turns off debugMode() in a 3D sketch."
      ]
    },
    "ambientLight": {
      "description": [
        "Creates an ambient light with a color. Ambient light is light that comes from everywhere on the canvas. It has no particular source."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "alpha": "Number: (Optional) the alpha value",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the ambient light color"
      }
    },
    "specularColor": {
      "description": [
        "Set's the color of the specular highlight when using a specular material and specular light.",
        "This method can be combined with specularMaterial() and shininess() functions to set specular highlights. The default color is white, ie (255, 255, 255), which is used if this method is not called before specularMaterial(). If this method is called without specularMaterial(), There will be no effect.",
        "Note: specularColor is equivalent to the processing function <a href=\"https://processing.org/reference/lightSpecular_.html\">lightSpecular</a>."
      ],
      "params": {
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "value": "String: a color string",
        "gray": "Number: a gray value",
        "values": "Number[]: an array containing the red,green,blue &  and alpha components of the color",
        "color": "p5.Color: the ambient light color"
      }
    },
    "directionalLight": {
      "description": [
        "Creates a directional light with a color and a direction",
        "A maximum of 5 directionalLight can be active at one time"
      ],
      "params": {
        "v1": "Number: red or hue value (depending on the current color mode),",
        "v2": "Number: green or saturation value",
        "v3": "Number: blue or brightness value",
        "position": "p5.Vector: the direction of the light",
        "color": "Number[]|String|p5.Color: color Array, CSS color string,  or <a href=\"#/p5.Color\">p5.Color</a> value",
        "x": "Number: x axis direction",
        "y": "Number: y axis direction",
        "z": "Number: z axis direction"
      }
    },
    "pointLight": {
      "description": [
        "Creates a point light with a color and a light position",
        "A maximum of 5 pointLight can be active at one time"
      ],
      "params": {
        "v1": "Number: red or hue value (depending on the current color mode),",
        "v2": "Number: green or saturation value",
        "v3": "Number: blue or brightness value",
        "x": "Number: x axis position",
        "y": "Number: y axis position",
        "z": "Number: z axis position",
        "position": "p5.Vector: the position of the light",
        "color": "Number[]|String|p5.Color: color Array, CSS color string, or <a href=\"#/p5.Color\">p5.Color</a> value"
      }
    },
    "lights": {
      "description": [
        "Sets the default ambient and directional light. The defaults are <a href=\"#/p5/ambientLight\">ambientLight(128, 128, 128)</a> and <a href=\"#/p5/directionalLight\">directionalLight(128, 128, 128, 0, 0, -1)</a>. Lights need to be included in the <a href=\"#/p5/draw\">draw()</a> to remain persistent in a looping program. Placing them in the <a href=\"#/p5/setup\">setup()</a> of a looping program will cause them to only have an effect the first time through the loop."
      ]
    },
    "lightFalloff": {
      "description": [
        "Sets the falloff rates for point lights. It affects only the elements which are created after it in the code. The default value is lightFalloff(1.0, 0.0, 0.0), and the parameters are used to calculate the falloff with the following equation:",
        "d = distance from light position to vertex position",
        "falloff = 1 / (CONSTANT + d * LINEAR + ( d * d ) * QUADRATIC)"
      ],
      "params": {
        "constant": "Number: constant value for determining falloff",
        "linear": "Number: linear value for determining falloff",
        "quadratic": "Number: quadratic value for determining falloff"
      }
    },
    "spotLight": {
      "description": [
        "Creates a spotlight with a given color, position, direction of light, angle and concentration. Here, angle refers to the opening or aperture of the cone of the spotlight, and concentration is used to focus the light towards the center. Both angle and concentration are optional, but if you want to provide concentration, you will also have to specify the angle.",
        "A maximum of 5 spotLight can be active at one time"
      ],
      "params": {
        "v1": "Number: red or hue value (depending on the current color mode),",
        "v2": "Number: green or saturation value",
        "v3": "Number: blue or brightness value",
        "x": "Number: x axis position",
        "y": "Number: y axis position",
        "z": "Number: z axis position",
        "rx": "Number: x axis direction of light",
        "ry": "Number: y axis direction of light",
        "rz": "Number: z axis direction of light",
        "angle": "Number: (Optional) optional parameter for angle. Defaults to PI/3",
        "conc": "Number: (Optional) optional parameter for concentration. Defaults to 100",
        "color": "Number[]|String|p5.Color: color Array, CSS color string, or <a href=\"#/p5.Color\">p5.Color</a> value",
        "position": "p5.Vector: the position of the light",
        "direction": "p5.Vector: the direction of the light"
      }
    },
    "noLights": {
      "description": [
        "This function will remove all the lights from the sketch for the subsequent materials rendered. It affects all the subsequent methods. Calls to lighting methods made after noLights() will re-enable lights in the sketch."
      ]
    },
    "loadModel": {
      "description": [
        "किसी OBJ या STL फ़ाइल से 3D मॉडल लोड करें।",
        "<a href=\"#/p5/loadModel\">loadModel()</a> को <a href=\"#/p5/preload\">preload()</a> के अंदर रखा जाना चाहिए। यह आपके शेष कोड के चलने से पहले मॉडल को पूरी तरह से लोड होने देता है।",
        "ओबीजे और एसटीएल प्रारूप की सीमाओं में से एक यह है कि इसमें अंतर्निहित पैमाने की भावना नहीं है। इसका मतलब है कि विभिन्न कार्यक्रमों से निर्यात किए गए मॉडल बहुत भिन्न आकार के हो सकते हैं। यदि आपका मॉडल प्रदर्शित नहीं हो रहा है, तो कॉल करने का प्रयास करें <a href=\"#/p5/loadModel\">loadModel()</a> सामान्यीकृत पैरामीटर के साथ सत्य पर सेट है। यह मॉडल को p5 के लिए उपयुक्त पैमाने पर आकार देगा। आप फाइनल में अतिरिक्त परिवर्तन भी कर सकते हैं <a href=\"#/p5/scale\">scale()</a> फ़ंक्शन के साथ आपके मॉडल का आकार।",
        "साथ ही, रंगीन एसटीएल फाइलों के लिए समर्थन मौजूद नहीं है। रंग के साथ एसटीएल फाइलें रंग गुणों के बिना प्रस्तुत की जाएंगी।"
      ],
      "returns": "p5.Geometry3D ऑब्जेक्ट",
      "params": {
        "path": "String: Path of the model to be loaded",
        "normalize": "Boolean: If true, scale the model to a  standardized size when loading",
        "successCallback": "function(p5.Geometry): (Optional) Function to be called  once the model is loaded. Will be passed  the 3D model object.",
        "failureCallback": "Function(Event): (Optional) called with event error if  the model fails to load.",
        "fileType": "String: (Optional) The file extension of the model  (<code>.stl</code>, <code>.obj</code>)."
      }
    },
    "model": {
      "description": [
        "Render a 3d model to the screen."
      ],
      "params": {
        "model": "p5.Geometry: Loaded 3d model to be rendered"
      }
    },
    "loadShader": {
      "description": [
        "Loads a custom shader from the provided vertex and fragment shader paths. The shader files are loaded asynchronously in the background, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.",
        "For now, there are three main types of shaders. p5 will automatically supply appropriate vertices, normals, colors, and lighting attributes if the parameters defined in the shader match the names."
      ],
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shader files.",
      "params": {
        "vertFilename": "String: path to file containing vertex shader source code",
        "fragFilename": "String: path to file containing fragment shader source code",
        "callback": "Function: (Optional) callback to be executed after loadShader completes. On success, the Shader object is passed as the first argument.",
        "errorCallback": "Function: (Optional) callback to be executed when an error occurs inside loadShader. On error, the error is passed as the first argument."
      }
    },
    "createShader": {
      "returns": "p5.Shader: a shader object created from the provided vertex and fragment shaders.",
      "params": {
        "vertSrc": "String: source code for the vertex shader",
        "fragSrc": "String: source code for the fragment shader"
      }
    },
    "shader": {
      "description": [
        "The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader to fill in shapes in WEBGL mode. Users can create their own shaders by loading vertex and fragment shaders with <a href=\"#/p5/loadShader\">loadShader()</a>."
      ],
      "params": {
        "s": "p5.Shader: (Optional) the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering shapes."
      }
    },
    "resetShader": {
      "description": [
        "This function restores the default shaders in WEBGL mode. Code that runs after resetShader() will not be affected by previously defined shaders. Should be run after <a href=\"#/p5/shader\">shader()</a>."
      ]
    },
    "texture": {
      "description": [
        "Texture for geometry. You can view other possible materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ],
      "params": {
        "tex": "p5.Image|p5.MediaElement|p5.Graphics: 2-dimensional graphics  to render as texture"
      }
    },
    "textureMode": {
      "description": [
        "Sets the coordinate space for texture mapping. The default mode is IMAGE which refers to the actual coordinates of the image. NORMAL refers to a normalized space of values ranging from 0 to 1. This function only works in WEBGL mode.",
        "With IMAGE, if an image is 100 x 200 pixels, mapping the image onto the entire size of a quad would require the points (0,0) (100, 0) (100,200) (0,200). The same mapping in NORMAL is (0,0) (1,0) (1,1) (0,1)."
      ],
      "params": {
        "mode": "Constant: either IMAGE or NORMAL"
      }
    },
    "textureWrap": {
      "description": [
        "Sets the global texture wrapping mode. This controls how textures behave when their uv's go outside of the 0 - 1 range. There are three options: CLAMP, REPEAT, and MIRROR.",
        "CLAMP causes the pixels at the edge of the texture to extend to the bounds REPEAT causes the texture to tile repeatedly until reaching the bounds MIRROR works similarly to REPEAT but it flips the texture with every new tile",
        "REPEAT & MIRROR are only available if the texture is a power of two size (128, 256, 512, 1024, etc.).",
        "This method will affect all textures in your sketch until a subsequent textureWrap call is made.",
        "If only one argument is provided, it will be applied to both the horizontal and vertical axes."
      ],
      "params": {
        "wrapX": "Constant: either CLAMP, REPEAT, or MIRROR",
        "wrapY": "Constant: (Optional) either CLAMP, REPEAT, or MIRROR"
      }
    },
    "normalMaterial": {
      "description": [
        "Normal material for geometry is a material that is not affected by light. It is not reflective and is a placeholder material often used for debugging. Surfaces facing the X-axis, become red, those facing the Y-axis, become green and those facing the Z-axis, become blue. You can view all possible materials in this <a href=\"https://p5js.org/examples/3d-materials.html\">example</a>."
      ]
    },
    "ambientMaterial": {
      "description": [
        "Ambient material for geometry with a given color. Ambient material defines the color the object reflects under any lighting. For example, if the ambient material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light. Here's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>."
      ],
      "params": {
        "v1": "Number: gray value, red or hue value  (depending on the current color mode),",
        "v2": "Number: (Optional) green or saturation value",
        "v3": "Number: (Optional) blue or brightness value",
        "color": "Number[]|String|p5.Color: color, color Array, or CSS color string"
      }
    },
    "emissiveMaterial": {
      "description": [
        "Sets the emissive color of the material used for geometry drawn to the screen. This is a misnomer in the sense that the material does not actually emit light that effects surrounding polygons. Instead, it gives the appearance that the object is glowing. An emissive material will display at full strength even if there is no light for it to reflect."
      ],
      "params": {
        "v1": "Number: gray value, red or hue value  (depending on the current color mode),",
        "v2": "Number: (Optional) green or saturation value",
        "v3": "Number: (Optional) blue or brightness value",
        "a": "Number: (Optional) opacity",
        "color": "Number[]|String|p5.Color: color, color Array, or CSS color string"
      }
    },
    "specularMaterial": {
      "description": [
        "Specular material for geometry with a given color. Specular material is a shiny reflective material. Like ambient material it also defines the color the object reflects under ambient lighting. For example, if the specular material of an object is pure red, but the ambient lighting only contains green, the object will not reflect any light. For all other types of light like point and directional light, a specular material will reflect the color of the light source to the viewer. Here's an <a href=\"https://p5js.org/examples/3d-materials.html\">example containing all possible materials</a>."
      ],
      "params": {
        "gray": "Number: number specifying value between white and black.",
        "alpha": "Number: (Optional) alpha value relative to current color range  (default is 0-255)",
        "v1": "Number: red or hue value relative to  the current color range",
        "v2": "Number: green or saturation value  relative to the current color range",
        "v3": "Number: blue or brightness value  relative to the current color range",
        "color": "Number[]|String|p5.Color: color Array, or CSS color string"
      }
    },
    "shininess": {
      "description": [
        "Sets the amount of gloss in the surface of shapes. Used in combination with specularMaterial() in setting the material properties of shapes. The default and minimum value is 1."
      ],
      "params": {
        "shine": "Number: Degree of Shininess.  Defaults to 1."
      }
    },
    "camera": {
      "description": [
        "Sets the position of the current camera in a 3D sketch. Parameters for this function define the camera's position, the center of the sketch (where the camera is pointing), and an up direction (the orientation of the camera).",
        "This function simulates the movements of the camera, allowing objects to be viewed from various angles. Remember, it does not move the objects themselves but the camera instead. For example when the centerX value is positive, and the camera is rotating to the right side of the sketch, the object will seem like it's moving to the left.",
        "See this <a href = \"https://www.openprocessing.org/sketch/740258\">example</a> to view the position of your camera.",
        "If no parameters are given, the following default is used: camera(0, 0, (height/2) / tan(PI/6), 0, 0, 0, 0, 1, 0)"
      ],
      "params": {
        "x": "Number: (Optional) camera position value on x axis",
        "y": "Number: (Optional) camera position value on y axis",
        "z": "Number: (Optional) camera position value on z axis",
        "centerX": "Number: (Optional) x coordinate representing center of the sketch",
        "centerY": "Number: (Optional) y coordinate representing center of the sketch",
        "centerZ": "Number: (Optional) z coordinate representing center of the sketch",
        "upX": "Number: (Optional) x component of direction 'up' from camera",
        "upY": "Number: (Optional) y component of direction 'up' from camera",
        "upZ": "Number: (Optional) z component of direction 'up' from camera"
      }
    },
    "perspective": {
      "description": [
        "Sets a perspective projection for the current camera in a 3D sketch. This projection represents depth through foreshortening: objects that are close to the camera appear their actual size while those that are further away from the camera appear smaller.",
        "The parameters to this function define the viewing frustum (the truncated pyramid within which objects are seen by the camera) through vertical field of view, aspect ratio (usually width/height), and near and far clipping planes.",
        "If no parameters are given, the following default is used: perspective(PI/3, width/height, eyeZ/10, eyeZ*10), where eyeZ is equal to ((height/2) / tan(PI/6))."
      ],
      "params": {
        "fovy": "Number: (Optional) camera frustum vertical field of view,  from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units",
        "aspect": "Number: (Optional) camera frustum aspect ratio",
        "near": "Number: (Optional) frustum near plane length",
        "far": "Number: (Optional) frustum far plane length"
      }
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection for the current camera in a 3D sketch and defines a box-shaped viewing frustum within which objects are seen. In this projection, all objects with the same dimension appear the same size, regardless of whether they are near or far from the camera.",
        "The parameters to this function specify the viewing frustum where left and right are the minimum and maximum x values, top and bottom are the minimum and maximum y values, and near and far are the minimum and maximum z values.",
        "If no parameters are given, the following default is used: ortho(-width/2, width/2, -height/2, height/2)."
      ],
      "params": {
        "left": "Number: (Optional) camera frustum left plane",
        "right": "Number: (Optional) camera frustum right plane",
        "bottom": "Number: (Optional) camera frustum bottom plane",
        "top": "Number: (Optional) camera frustum top plane",
        "near": "Number: (Optional) camera frustum near plane",
        "far": "Number: (Optional) camera frustum far plane"
      }
    },
    "frustum": {
      "description": [
        "Sets the frustum of the current camera as defined by the parameters.",
        "A frustum is a geometric form: a pyramid with its top cut off. With the viewer's eye at the imaginary top of the pyramid, the six planes of the frustum act as clipping planes when rendering a 3D view. Thus, any form inside the clipping planes is visible; anything outside those planes is not visible.",
        "Setting the frustum changes the perspective of the scene being rendered. This can be achieved more simply in many cases by using <a href=\"https://p5js.org/reference/#/p5/perspective\">perspective()</a>.",
        "If no parameters are given, the following default is used: frustum(-width/2, width/2, -height/2, height/2, 0, max(width, height))."
      ],
      "params": {
        "left": "Number: (Optional) camera frustum left plane",
        "right": "Number: (Optional) camera frustum right plane",
        "bottom": "Number: (Optional) camera frustum bottom plane",
        "top": "Number: (Optional) camera frustum top plane",
        "near": "Number: (Optional) camera frustum near plane",
        "far": "Number: (Optional) camera frustum far plane"
      }
    },
    "createCamera": {
      "description": [
        "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and sets it as the current (active) camera.",
        "The new camera is initialized with a default position (see <a href=\"#/p5.Camera/camera\">camera()</a>) and a default perspective projection (see <a href=\"#/p5.Camera/perspective\">perspective()</a>). Its properties can be controlled with the <a href=\"#/p5.Camera\">p5.Camera</a> methods.",
        "Note: Every 3D sketch starts with a default camera initialized. This camera can be controlled with the global methods <a href=\"#/p5/camera\">camera()</a>, <a href=\"#/p5/perspective\">perspective()</a>, <a href=\"#/p5/ortho\">ortho()</a>, and <a href=\"#/p5/frustum\">frustum()</a> if it is the only camera in the scene."
      ],
      "returns": "p5.Camera: The newly created camera object."
    },
    "setCamera": {
      "description": [
        "Sets the current (active) camera of a 3D sketch. Allows for switching between multiple cameras."
      ],
      "params": {
        "cam": "p5.Camera: p5.Camera object"
      }
    },
    "setAttributes": {
      "description": [
        "Set attributes for the WebGL Drawing context. This is a way of adjusting how the WebGL renderer works to fine-tune the display and performance.",
        "Note that this will reinitialize the drawing context if called after the WebGL canvas is made.",
        "If an object is passed as the parameter, all attributes not declared in the object will be set to defaults.",
        "The available attributes are:  alpha - indicates if the canvas contains an alpha buffer default is true",
        "depth - indicates whether the drawing buffer has a depth buffer of at least 16 bits - default is true",
        "stencil - indicates whether the drawing buffer has a stencil buffer of at least 8 bits",
        "antialias - indicates whether or not to perform anti-aliasing default is false (true in Safari)",
        "premultipliedAlpha - indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha default is false",
        "preserveDrawingBuffer - if true the buffers will not be cleared and and will preserve their values until cleared or overwritten by author (note that p5 clears automatically on draw loop) default is true",
        "perPixelLighting - if true, per-pixel lighting will be used in the lighting shader otherwise per-vertex lighting is used. default is true."
      ],
      "params": {
        "key": "String: Name of attribute",
        "value": "Boolean: New value of named attribute",
        "obj": "Object: object with key-value pairs"
      }
    },
    "getAudioContext": {
      "description": [
        "Returns the Audio Context for this sketch. Useful for users who would like to dig deeper into the <a target='_blank' href= 'http://webaudio.github.io/web-audio-api/'>Web Audio API </a>.",
        "Some browsers require users to startAudioContext with a user gesture, such as touchStarted in the example below."
      ],
      "returns": "Object: AudioContext for this sketch"
    },
    "userStartAudio": {
      "description": [
        "It is not only a good practice to give users control over starting audio. This policy is enforced by many web browsers, including iOS and <a href=\"https://goo.gl/7K7WLu\" title=\"Google Chrome's autoplay policy\">Google Chrome</a>, which create the Web Audio API's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\" title=\"Audio Context @ MDN\">Audio Context</a> in a suspended state.",
        "In these browser-specific policies, sound will not play until a user interaction event (i.e. <code>mousePressed()</code>) explicitly resumes the AudioContext, or starts an audio node. This can be accomplished by calling <code>start()</code> on a <code>p5.Oscillator</code>, <code> play()</code> on a <code>p5.SoundFile</code>, or simply <code>userStartAudio()</code>.",
        "<code>userStartAudio()</code> starts the AudioContext on a user gesture. The default behavior will enable audio on any mouseUp or touchEnd event. It can also be placed in a specific interaction function, such as <code>mousePressed()</code> as in the example below. This method utilizes <a href=\"https://github.com/tambien/StartAudioContext\">StartAudioContext </a>, a library by Yotam Mann (MIT Licence, 2016)."
      ],
      "returns": "Promise: Returns a Promise that resolves when  the AudioContext state is 'running'",
      "params": {
        "element(s)": "Element|Array: (Optional) This argument can be an Element,  Selector String, NodeList, p5.Element,  jQuery Element, or an Array of any of those.",
        "callback": "Function: (Optional) Callback to invoke when the AudioContext  has started"
      }
    },
    "getOutputVolume": {
      "description": [
        "Returns a number representing the output volume for sound in this sketch."
      ],
      "returns": "Number: Output volume for sound in this sketch.  Should be between 0.0 (silence) and 1.0."
    },
    "outputVolume": {
      "description": [
        "Scale the output of all sound in this sketch Scaled between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class.",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal.",
        "<b>How This Works</b>: When you load the p5.sound module, it creates a single instance of p5sound. All sound objects in this module output to p5sound before reaching your computer's output. So if you change the amplitude of p5sound, it impacts all of the sound in this module.",
        "If no value is provided, returns a Web Audio API Gain Node"
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "soundOut": {
      "description": [
        "<code>p5.soundOut</code> is the p5.sound final output bus. It sends output to the destination of this window's web audio context. It contains Web Audio API nodes including a dyanmicsCompressor (<code>.limiter</code>), and Gain Nodes for <code>.input</code> and <code>.output</code>."
      ]
    },
    "sampleRate": {
      "description": [
        "Returns a number representing the sample rate, in samples per second, of all sound objects in this audio context. It is determined by the sampling rate of your operating system's sound card, and it is not currently possile to change. It is often 44100, or twice the range of human hearing."
      ],
      "returns": "Number: samplerate samples per second"
    },
    "freqToMidi": {
      "description": [
        "Returns the closest MIDI note value for a given frequency."
      ],
      "returns": "Number: MIDI note value",
      "params": {
        "frequency": "Number: A freqeuncy, for example, the \"A\"  above Middle C is 440Hz"
      }
    },
    "midiToFreq": {
      "description": [
        "Returns the frequency value of a MIDI note value. General MIDI treats notes as integers where middle C is 60, C# is 61, D is 62 etc. Useful for generating musical frequencies with oscillators."
      ],
      "returns": "Number: Frequency value of the given MIDI note",
      "params": {
        "midiNote": "Number: The number of a MIDI note"
      }
    },
    "soundFormats": {
      "description": [
        "List the SoundFile formats that you will include. LoadSound will search your directory for these extensions, and will pick a format that is compatable with the client's web browser. <a href=\"http://media.io/\">Here</a> is a free online file converter."
      ],
      "params": {
        "formats": "String: (Optional) i.e. 'mp3', 'wav', 'ogg'"
      }
    },
    "saveSound": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. For uploading audio to a server, use <a href=\"/docs/reference/#/p5.SoundFile/saveBlob\"><code>p5.SoundFile.saveBlob</code></a>."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile that you wish to save",
        "fileName": "String: name of the resulting .wav file."
      }
    },
    "loadSound": {
      "description": [
        "loadSound() returns a new p5.SoundFile from a specified path. If called during preload(), the p5.SoundFile will be ready to play in time for setup() and draw(). If called outside of preload, the p5.SoundFile will not be ready immediately, so loadSound accepts a callback as the second parameter. Using a <a href=\"https://github.com/processing/p5.js/wiki/Local-server\"> local server</a> is recommended when loading external files."
      ],
      "returns": "SoundFile: Returns a p5.SoundFile",
      "params": {
        "path": "String|Array: Path to the sound file, or an array with  paths to soundfiles in multiple formats  i.e. ['sound.ogg', 'sound.mp3'].  Alternately, accepts an object: either  from the HTML5 File API, or a p5.File.",
        "successCallback": "Function: (Optional) Name of a function to call once file loads",
        "errorCallback": "Function: (Optional) Name of a function to call if there is  an error loading the file.",
        "whileLoading": "Function: (Optional) Name of a function to call while file is loading.  This function will receive the percentage loaded  so far, from 0.0 to 1.0."
      }
    },
    "createConvolver": {
      "description": [
        "Create a p5.Convolver. Accepts a path to a soundfile that will be used to generate an impulse response."
      ],
      "returns": "p5.Convolver:",
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: (Optional) function to call if loading is successful.  The object will be passed in as the argument  to the callback function.",
        "errorCallback": "Function: (Optional) function to call if loading is not successful.  A custom error will be passed in as the argument  to the callback function."
      }
    },
    "setBPM": {
      "description": [
        "Set the global tempo, in beats per minute, for all p5.Parts. This method will impact all active p5.Parts."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.Color": {
    "description": [
      "Each color stores the color mode and level maxes that was applied at the time of its construction. These are used to interpret the input arguments (at construction and later for that instance of color) and to format the output e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested. ",
      "Internally, we store an array representing the ideal RGBA values in floating point form, normalized from 0 to 1. From this we calculate the closest screen color (RGBA levels from 0 to 255) and expose this to the renderer. ",
      "We also cache normalized, floating point components of the color in various representations as they are calculated. This is done to prevent repeating a conversion that has already been performed."
    ],
    "setRed": {
      "description": [
        "The setRed function sets the red component of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "red": "Number: the new red value"
      }
    },
    "setGreen": {
      "description": [
        "The setGreen function sets the green component of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "green": "Number: the new green value"
      }
    },
    "setBlue": {
      "description": [
        "The setBlue function sets the blue component of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "blue": "Number: the new blue value"
      }
    },
    "setAlpha": {
      "description": [
        "The setAlpha function sets the transparency (alpha) value of a color. The range depends on your color mode, in the default RGB mode it's between 0 and 255."
      ],
      "params": {
        "alpha": "Number: the new alpha value"
      }
    }
  },
  "p5.Element": {
    "description": [
      "Base class for all elements added to a sketch, including canvas, graphics buffers, and other HTML elements. It is not called directly, but <a href=\"#/p5.Element\">p5.Element</a> objects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "elt": {
      "description": [
        "Underlying HTML element. All normal HTML methods can be called on this."
      ]
    },
    "parent": {
      "description": [
        "Attaches the element to the parent specified. A way of setting  the container for the element. Accepts either a string ID, DOM  node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.  For more ways to position the canvas, see the  <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>  positioning the canvas</a> wiki page."
      ],
      "params": {
        "parent": "String|p5.Element|Object: the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  of desired parent element"
      }
    },
    "id": {
      "description": [
        "Sets the ID of the element. If no ID argument is passed in, it instead  returns the current ID of the element.  Note that only one element can have a particular id in a page.  The <a href=\"#/p5.Element/class\">.class()</a> function can be used  to identify multiple elements with the same class name."
      ],
      "params": {
        "id": "String: ID of the element"
      }
    },
    "class": {
      "description": [
        "Adds given class to the element. If no class argument is passed in, it  instead returns a string containing the current class(es) of the element."
      ],
      "params": {
        "class": "String: class to add"
      }
    },
    "mousePressed": {
      "description": [
        "The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called once after every time a mouse button is pressed over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  pressed over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "doubleClicked": {
      "description": [
        "The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a mouse button is pressed twice over the element. This can be used to attach element and action specific event listeners."
      ],
      "returns": "p5.Element: ",
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  double clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseWheel": {
      "description": [
        "The <a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called once after every time a mouse wheel is scrolled over the element. This can be used to attach element specific event listeners. ",
        "The function accepts a callback function as argument which will be executed when the <code>wheel</code> event is triggered on the element, the callback function is passed one argument <code>event</code>. The <code>event.deltaY</code> property returns negative values if the mouse wheel is rotated up or away from the user and positive in the other direction. The <code>event.deltaX</code> does the same as <code>event.deltaY</code> except it reads the horizontal wheel scroll of the mouse wheel. ",
        "On OS X with \"natural\" scrolling enabled, the <code>event.deltaY</code> values are reversed."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  scrolled over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseReleased": {
      "description": [
        "The <a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is called once after every time a mouse button is released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  released over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseClicked": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is called once after a mouse button is pressed and released over the element. Some mobile browsers may also trigger this event on a touch screen, if the user performs a quick tap.This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when mouse is  clicked over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseMoved": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a mouse moves over the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOver": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a mouse moves onto the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse moves  onto the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "mouseOut": {
      "description": [
        "The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a mouse moves off the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a mouse  moves off of an element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchStarted": {
      "description": [
        "The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch  starts over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchMoved": {
      "description": [
        "The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch moves over  the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "touchEnded": {
      "description": [
        "The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is registered. This can be used to attach element specific event listeners."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a touch ends  over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragOver": {
      "description": [
        "The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a file is dragged over the element. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged over the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "dragLeave": {
      "description": [
        "The .dragLeave() function is called once after every time a dragged file leaves the element area. This can be used to attach an element specific event listener."
      ],
      "params": {
        "fxn": "Function|Boolean: function to be fired when a file is  dragged off the element.  if <code>false</code> is passed instead, the previously  firing function will no longer fire."
      }
    },
    "addClass": {
      "description": [
        "Adds specified class to the element."
      ],
      "params": {
        "class": "String: name of class to add"
      }
    },
    "removeClass": {
      "description": [
        "Removes specified class from the element."
      ],
      "params": {
        "class": "String: name of class to remove"
      }
    },
    "hasClass": {
      "description": [
        "Checks if specified class already set to element"
      ],
      "returns": "Boolean: a boolean value if element has specified class",
      "params": {
        "c": "String: class name of class to check"
      }
    },
    "toggleClass": {
      "description": [
        "Toggles element class"
      ],
      "params": {
        "c": "String: class name to toggle"
      }
    },
    "child": {
      "description": [
        "Attaches the element as a child to the parent specified.  Accepts either a string ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>.  If no argument is specified, an array of children DOM nodes is returned."
      ],
      "returns": "Node[]: an array of child nodes",
      "params": {
        "child": "String|p5.Element: (Optional) the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>  to add to the current element"
      }
    },
    "center": {
      "description": [
        "Centers a p5 Element either vertically, horizontally, or both, relative to its parent or according to the body if the Element has no parent. If no argument is passed the Element is aligned both vertically and horizontally."
      ],
      "params": {
        "align": "String: (Optional) passing 'vertical', 'horizontal' aligns element accordingly"
      }
    },
    "html": {
      "description": [
        "If an argument is given, sets the inner HTML of the element,  replacing any existing html. If true is included as a second  argument, html is appended instead of replacing existing html.  If no arguments are given, returns  the inner HTML of the element."
      ],
      "returns": "String: the inner HTML of the element",
      "params": {
        "html": "String: (Optional) the HTML to be placed inside the element",
        "append": "Boolean: (Optional) whether to append HTML to existing"
      }
    },
    "position": {
      "description": [
        "Sets the position of the element. If no position type argument is given, the  position will be relative to (0, 0) of the window.  Essentially, this sets position:absolute and left and top  properties of style. If an optional third argument specifying position type is given,  the x and y coordinates will be interpreted based on the <a target=\"_blank\"  href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">positioning scheme</a>.  If no arguments given, the function returns the x and y position of the element. found documentation on how to be more specific with object type  <a href=\"https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc\">https://stackoverflow.com/questions/14714314/how-do-i-comment-object-literals-in-yuidoc</a>"
      ],
      "returns": "Object: object of form { x: 0, y: 0 } containing the position of the element in an object",
      "params": {
        "x": "Number: (Optional) x-position relative to upper left of window (optional)",
        "y": "Number: (Optional) y-position relative to upper left of window (optional)",
        "positionType": "String: it can be static, fixed, relative, sticky, initial or inherit (optional)"
      }
    },
    "style": {
      "description": [
        "Sets the given style (css) property (1st arg) of the element with the given value (2nd arg). If a single argument is given, .style() returns the value of the given property; however, if the single argument is given in css syntax ('text-align:center'), .style() sets the css appropriately."
      ],
      "returns": "String: value of property",
      "params": {
        "property": "String: property to be set",
        "value": "String|p5.Color: value to assign to property"
      }
    },
    "attribute": {
      "description": [
        "Adds a new attribute or changes the value of an existing attribute  on the specified element. If no value is specified, returns the  value of the given attribute, or null if attribute is not set."
      ],
      "returns": "String: value of attribute",
      "params": {
        "attr": "String: attribute to set",
        "value": "String: value to assign to attribute"
      }
    },
    "removeAttribute": {
      "description": [
        "Removes an attribute on the specified element."
      ],
      "params": {
        "attr": "String: attribute to remove"
      }
    },
    "value": {
      "description": [
        "Either returns the value of the element if no arguments given, or sets the value of the element."
      ],
      "returns": "String|Number: value of the element",
      "params": {
        "value": "String|Number"
      }
    },
    "show": {
      "description": [
        "Shows the current element. Essentially, setting display:block for the style."
      ]
    },
    "hide": {
      "description": [
        "Hides the current element. Essentially, setting display:none for the style."
      ]
    },
    "size": {
      "description": [
        "Sets the width and height of the element. AUTO can be used to  only adjust one dimension at a time. If no arguments are given, it  returns the width and height of the element in an object. In case of  elements which need to be loaded, such as images, it is recommended  to call the function after the element has finished loading."
      ],
      "returns": "Object: the width and height of the element in an object",
      "params": {
        "w": "Number|Constant: width of the element, either AUTO, or a number",
        "h": "Number|Constant: (Optional) height of the element, either AUTO, or a number"
      }
    },
    "remove": {
      "description": [
        "Removes the element, stops all media streams, and deregisters all listeners."
      ]
    },
    "drop": {
      "description": [
        "Registers a callback that gets called every time a file that is dropped on the element has been loaded. p5 will load every dropped file into memory and pass it as a p5.File object to the callback. Multiple files dropped at the same time will result in multiple calls to the callback. ",
        "You can optionally pass a second callback which will be registered to the raw <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event. The callback will thus be provided the original <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>. Dropping multiple files at the same time will trigger the second callback once per drop, whereas the first callback will trigger for each loaded file."
      ],
      "params": {
        "callback": "Function: callback to receive loaded file, called for each file dropped.",
        "fxn": "Function: (Optional) callback triggered once when files are dropped with the drop event."
      }
    }
  },
  "p5.Graphics": {
    "description": [
      "Thin wrapper around a renderer, to be used for creating a graphics buffer object. Use this class if you need to draw into an off-screen graphics buffer. The two parameters define the width and height in pixels. The fields and methods for this class are extensive, but mirror the normal drawing API for p5."
    ],
    "params": {
      "w": "Number: width",
      "h": "Number: height",
      "renderer": "Constant: the renderer to use, either P2D or WEBGL",
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "reset": {
      "description": [
        "Resets certain values such as those modified by functions in the Transform category and in the Lights category that are not automatically reset with graphics buffer objects. Calling this in <a href='#/p5/draw'>draw()</a> will copy the behavior of the standard canvas."
      ]
    },
    "remove": {
      "description": [
        "Removes a Graphics object from the page and frees any resources associated with it."
      ]
    }
  },
  "p5.Renderer": {
    "description": [
      "Main graphics and rendering context, as well as the base API implementation for p5.js \"core\". To be used as the superclass for Renderer2D and Renderer3D classes, respectively."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped",
      "pInst": "P5: (Optional) pointer to p5 instance",
      "isMainCanvas": "Boolean: (Optional) whether we're using it as main canvas"
    }
  },
  "JSON": {
    "stringify": {
      "description": [
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">the MDN entry</a>: The JSON.stringify() method converts a JavaScript object or value to a JSON <a href=\"#/p5/string\">string</a>."
      ],
      "params": {
        "object": "Object: :Javascript object that you would like to convert to JSON"
      }
    }
  },
  "console": {
    "log": {
      "description": [
        "Prints a message to your browser's web console. When using p5, you can use <a href=\"#/p5/print\">print</a> and <a href=\"#/p5/console/log\">console.log</a> interchangeably. ",
        "The console is opened differently depending on which browser you are using. Here are links on how to open the console in <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Web_Console/Opening_the_Web_Console\">Firefox</a> , <a href=\"https://developers.google.com/web/tools/chrome-devtools/open\">Chrome</a>, <a href=\"https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide/console\">Edge</a>, and <a href=\"https://support.apple.com/en-ca/guide/safari/sfri20948/mac\">Safari</a>. With the <a href=\"https://editor.p5js.org/\">online p5 editor</a> the console is embedded directly in the page underneath the code editor. ",
        "From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\">the MDN entry</a>: The Console method log() outputs a message to the web console. The message may be a single <a href=\"#/p5/string\">string</a> (with optional substitution values), or it may be any one or more JavaScript <a href=\"#/p5/object\">objects</a>."
      ],
      "params": {
        "message": "String|Expression|Object: :Message that you would like to print to the console"
      }
    }
  },
  "p5.TypedDict": {
    "description": [
      "Base class for all p5.Dictionary types. Specifically  typed Dictionary classes inherit from this class."
    ],
    "size": {
      "description": [
        "Returns the number of key-value pairs currently stored in the Dictionary."
      ],
      "returns": "Integer: the number of key-value pairs in the Dictionary"
    },
    "hasKey": {
      "description": [
        "Returns true if the given key exists in the Dictionary, otherwise returns false."
      ],
      "returns": "Boolean: whether that key exists in Dictionary",
      "params": {
        "key": "Number|String: that you want to look up"
      }
    },
    "get": {
      "description": [
        "Returns the value stored at the given key."
      ],
      "returns": "Number|String: the value stored at that key",
      "params": {
        "the": "Number|String: key you want to access"
      }
    },
    "set": {
      "description": [
        "Updates the value associated with the given key in case it already exists in the Dictionary. Otherwise a new key-value pair is added."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String"
      }
    },
    "create": {
      "description": [
        "Creates a new key-value pair in the Dictionary."
      ],
      "params": {
        "key": "Number|String",
        "value": "Number|String",
        "obj": "Object: key/value pair"
      }
    },
    "clear": {
      "description": [
        "Removes all previously stored key-value pairs from the Dictionary."
      ]
    },
    "remove": {
      "description": [
        "Removes the key-value pair stored at the given key from the Dictionary."
      ],
      "params": {
        "key": "Number|String: for the pair to remove"
      }
    },
    "print": {
      "description": [
        "Logs the set of items currently stored in the Dictionary to the console."
      ]
    },
    "saveTable": {
      "description": [
        "Converts the Dictionary into a CSV file for local download."
      ]
    },
    "saveJSON": {
      "description": [
        "Converts the Dictionary into a JSON file for local download."
      ]
    }
  },
  "p5.StringDict": {
    "description": [
      "A simple Dictionary class for Strings."
    ]
  },
  "p5.NumberDict": {
    "description": [
      "A simple Dictionary class for Numbers."
    ],
    "add": {
      "description": [
        "Add the given number to the value currently stored at the given key. The sum then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to add to",
        "Number": "Number: to add to the value"
      }
    },
    "sub": {
      "description": [
        "Subtract the given number from the value currently stored at the given key. The difference then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for the value you wish to subtract from",
        "Number": "Number: to subtract from the value"
      }
    },
    "mult": {
      "description": [
        "Multiply the given number with the value currently stored at the given key. The product then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to multiply",
        "Amount": "Number: to multiply the value by"
      }
    },
    "div": {
      "description": [
        "Divide the given number with the value currently stored at the given key. The quotient then replaces the value previously stored in the Dictionary."
      ],
      "params": {
        "Key": "Number: for value you wish to divide",
        "Amount": "Number: to divide the value by"
      }
    },
    "minValue": {
      "description": [
        "Return the lowest number currently stored in the Dictionary."
      ],
      "returns": "Number: "
    },
    "maxValue": {
      "description": [
        "Return the highest number currently stored in the Dictionary."
      ],
      "returns": "Number: "
    },
    "minKey": {
      "description": [
        "Return the lowest key currently used in the Dictionary."
      ],
      "returns": "Number: "
    },
    "maxKey": {
      "description": [
        "Return the highest key currently used in the Dictionary."
      ],
      "returns": "Number: "
    }
  },
  "p5.MediaElement": {
    "description": [
      "Extends <a href=\"#/p5.Element\">p5.Element</a> to handle audio and video. In addition to the methods of <a href=\"#/p5.Element\">p5.Element</a>, it also contains methods for controlling media. It is not called directly, but <a href=\"#/p5.MediaElement\">p5.MediaElement</a>s are created by calling <a href=\"#/p5/createVideo\">createVideo</a>, <a href=\"#/p5/createAudio\">createAudio</a>, and <a href=\"#/p5/createCapture\">createCapture</a>."
    ],
    "params": {
      "elt": "String: DOM node that is wrapped"
    },
    "src": {
      "description": [
        "Path to the media element source."
      ],
      "returns": "String: src"
    },
    "play": {
      "description": [
        "Play an HTML5 media element."
      ]
    },
    "stop": {
      "description": [
        "Stops an HTML5 media element (sets current time to zero)."
      ]
    },
    "pause": {
      "description": [
        "Pauses an HTML5 media element."
      ]
    },
    "loop": {
      "description": [
        "Set 'loop' to true for an HTML5 media element, and starts playing."
      ]
    },
    "noLoop": {
      "description": [
        "Set 'loop' to false for an HTML5 media element. Element will stop when it reaches the end."
      ]
    },
    "autoplay": {
      "description": [
        "Set HTML5 media element to autoplay or not. If no argument is specified, by default it will autoplay."
      ],
      "params": {
        "shouldAutoplay": "Boolean: whether the element should autoplay"
      }
    },
    "volume": {
      "description": [
        "Sets volume for this HTML5 media element. If no argument is given, returns the current volume."
      ],
      "returns": "Number: current volume",
      "params": {
        "val": "Number: volume between 0.0 and 1.0"
      }
    },
    "speed": {
      "description": [
        "If no arguments are given, returns the current playback speed of the element. The speed parameter sets the speed where 2.0 will play the element twice as fast, 0.5 will play at half the speed, and -1 will play the element in normal speed in reverse.(Note that not all browsers support backward playback and even if they do, playback might not be smooth.)"
      ],
      "returns": "Number: current playback speed of the element",
      "params": {
        "speed": "Number: speed multiplier for element playback"
      }
    },
    "time": {
      "description": [
        "If no arguments are given, returns the current time of the element. If an argument is given the current time of the element is set to it."
      ],
      "returns": "Number: current time (in seconds)",
      "params": {
        "time": "Number: time to jump to (in seconds)"
      }
    },
    "duration": {
      "description": [
        "Returns the duration of the HTML5 media element."
      ],
      "returns": "Number: duration"
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the audio or video element reaches the end. If the element is looping, this will not be called. The element is passed in as the argument to the onended callback."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended. The  media element will be passed  in as the argument to the  callback."
      }
    },
    "connect": {
      "description": [
        "Send the audio output of this element to a specified audioNode or p5.sound object. If no element is provided, connects to p5's main output. That connection is established when this method is first called. All connections are removed by the .disconnect() method. ",
        "This method is meant to be used with the p5.sound.js addon library."
      ],
      "params": {
        "audioNode": "AudioNode|Object: AudioNode from the Web Audio API, or an object from the p5.sound library"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all Web Audio routing, including to main output. This is useful if you want to re-route the output through audio effects, for example."
      ]
    },
    "showControls": {
      "description": [
        "Show the default MediaElement controls, as determined by the web browser."
      ]
    },
    "hideControls": {
      "description": [
        "Hide the default mediaElement controls."
      ]
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point. ",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback. ",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    }
  },
  "p5.File": {
    "description": [
      "Base class for a file. Used for Element.drop and createFileInput."
    ],
    "params": {
      "file": "File: File that is wrapped"
    },
    "file": {
      "description": [
        "Underlying File object. All normal File methods can be called on this."
      ]
    },
    "type": {
      "description": [
        "File type (image, text, etc.)"
      ]
    },
    "subtype": {
      "description": [
        "File subtype (usually the file extension jpg, png, xml, etc.)"
      ]
    },
    "name": {
      "description": [
        "File name"
      ]
    },
    "size": {
      "description": [
        "File size"
      ]
    },
    "data": {
      "description": [
        "URL string containing either image data, the text contents of the file or a parsed object if file is JSON and p5.XML if XML"
      ]
    }
  },
  "p5.Image": {
    "description": [
      "Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an image. ",
      "p5 can display .gif, .jpg and .png images. Images may be displayed in 2D and 3D space. Before an image is used, it must be loaded with the <a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and height of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the values for every pixel in the image. ",
      "The methods described below allow easy access to the image's pixels and alpha channel and simplify the process of compositing. ",
      "Before using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on the image to make sure that the pixel data is properly loaded."
    ],
    "params": {
      "width": "Number",
      "height": "Number"
    },
    "width": {
      "description": [
        "Image width."
      ]
    },
    "height": {
      "description": [
        "Image height."
      ]
    },
    "pixels": {
      "description": [
        "Array containing the values for all the pixels in the display window. These values are numbers. This array is the size (include an appropriate factor for pixelDensity) of the display window x4, representing the R, G, B, A values in order for each pixel, moving from left to right across each row, then down each column. Retina and other high density displays may have more pixels (by a factor of pixelDensity^2). For example, if the image is 100x100 pixels, there will be 40,000. With pixelDensity = 2, there will be 160,000. The first four values (indices 0-3) in the array will be the R, G, B, A values of the pixel at (0, 0). The second four values (indices 4-7) will contain the R, G, B, A values of the pixel at (1, 0). More generally, to set values for a pixel at (x, y): <pre><code class=\"language-javascript\">let d = pixelDensity(); for (let i = 0; i < d; i++) {  for (let j = 0; j < d; j++) {  // loop over  index = 4 * ((y * d + j) * width * d + (x * d + i));  pixels[index] = r;  pixels[index+1] = g;  pixels[index+2] = b;  pixels[index+3] = a;  } }</code></pre> ",
        "Before accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes."
      ]
    },
    "loadPixels": {
      "description": [
        "Loads the pixels data for this image into the [pixels] attribute."
      ]
    },
    "updatePixels": {
      "description": [
        "Updates the backing canvas for this image with the contents of the [pixels] array. ",
        "If this image is an animated GIF then the pixels will be updated in the frame that is currently displayed."
      ],
      "params": {
        "x": "Integer: x-offset of the target update area for the  underlying canvas",
        "y": "Integer: y-offset of the target update area for the  underlying canvas",
        "w": "Integer: height of the target update area for the  underlying canvas",
        "h": "Integer: height of the target update area for the  underlying canvas"
      }
    },
    "get": {
      "description": [
        "Get a region of pixels from an image. ",
        "If no params are passed, the whole image is returned. If x and y are the only params passed a single pixel is extracted. If all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a> is returned."
      ],
      "returns": "p5.Image: the rectangle <a href=\"#/p5.Image\">p5.Image</a>",
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "w": "Number: width",
        "h": "Number: height"
      }
    },
    "set": {
      "description": [
        "Set the color of a single pixel or write an image into this <a href=\"#/p5.Image\">p5.Image</a>. ",
        "Note that for a large number of pixels this will be slower than directly manipulating the pixels array and then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>."
      ],
      "params": {
        "x": "Number: x-coordinate of the pixel",
        "y": "Number: y-coordinate of the pixel",
        "a": "Number|Number[]|Object: grayscale value | pixel array |  a <a href=\"#/p5.Color\">p5.Color</a> | image to copy"
      }
    },
    "resize": {
      "description": [
        "Resize the image to a new width and height. To make the image scale proportionally, use 0 as the value for the wide or high parameter. For instance, to make the width of an image 150 pixels, and change the height using the same proportion, use resize(150, 0)."
      ],
      "params": {
        "width": "Number: the resized image width",
        "height": "Number: the resized image height"
      }
    },
    "copy": {
      "description": [
        "Copies a region of pixels from one image to another. If no srcImage is specified this is used as the source. If the source and destination regions aren't the same size, it will automatically resize source pixels to fit the specified target region."
      ],
      "params": {
        "srcImage": "p5.Image|p5.Element: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height"
      }
    },
    "mask": {
      "description": [
        "Masks part of an image from displaying by loading another image and using its alpha channel as an alpha channel for this image. Masks are cumulative, one applied to an image object, they cannot be removed."
      ],
      "params": {
        "srcImage": "p5.Image: source image"
      }
    },
    "filter": {
      "description": [
        "Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a> ",
        "THRESHOLD Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used. ",
        "GRAY Converts any colors in the image to grayscale equivalents. No parameter is used. ",
        "OPAQUE Sets the alpha channel to entirely opaque. No parameter is used. ",
        "INVERT Sets each pixel to its inverse value. No parameter is used. ",
        "POSTERIZE Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges. ",
        "BLUR Executes a Gaussian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Gaussian blur of radius 1. Larger values increase the blur. ",
        "ERODE Reduces the light areas. No parameter is used. ",
        "DILATE Increases the light areas. No parameter is used. ",
        "filter() does not work in WEBGL mode. A similar effect can be achieved in WEBGL mode using custom shaders. Adam Ferriss has written a <a href=\"https://github.com/aferriss/p5jsShaderExamples\" target='_blank'>selection of shader examples</a> that contains many of the effects present in the filter examples."
      ],
      "params": {
        "filterType": "Constant: either THRESHOLD, GRAY, OPAQUE, INVERT,  POSTERIZE, ERODE, DILATE or BLUR.  See Filters.js for docs on  each available filter",
        "filterParam": "Number: (Optional) an optional parameter unique  to each filter, see above"
      }
    },
    "blend": {
      "description": [
        "Copies a region of pixels from one image to another, using a specified blend mode to do the operation."
      ],
      "params": {
        "srcImage": "p5.Image: source image",
        "sx": "Integer: X coordinate of the source's upper left corner",
        "sy": "Integer: Y coordinate of the source's upper left corner",
        "sw": "Integer: source image width",
        "sh": "Integer: source image height",
        "dx": "Integer: X coordinate of the destination's upper left corner",
        "dy": "Integer: Y coordinate of the destination's upper left corner",
        "dw": "Integer: destination image width",
        "dh": "Integer: destination image height",
        "blendMode": "Constant: the blend mode. either  BLEND, DARKEST, LIGHTEST, DIFFERENCE,  MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,  SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. Available blend modes are: normal | multiply | screen | overlay |  darken | lighten | color-dodge | color-burn | hard-light |  soft-light | difference | exclusion | hue | saturation |  color | luminosity <a href=\"http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a>"
      }
    },
    "save": {
      "description": [
        "Saves the image to a file and force the browser to download it. Accepts two strings for filename and file extension Supports png (default), jpg, and gif  Note that the file will only be downloaded as an animated GIF if the p5.Image was loaded from a GIF file."
      ],
      "params": {
        "filename": "String: give your file a name",
        "extension": "String: 'png' or 'jpg'"
      }
    },
    "reset": {
      "description": [
        "Starts an animated GIF over at the beginning state."
      ]
    },
    "getCurrentFrame": {
      "description": [
        "Gets the index for the frame that is currently visible in an animated GIF."
      ],
      "returns": "Number: The index for the currently displaying frame in animated GIF"
    },
    "setFrame": {
      "description": [
        "Sets the index of the frame that is currently visible in an animated GIF"
      ],
      "params": {
        "index": "Number: the index for the frame that should be displayed"
      }
    },
    "numFrames": {
      "description": [
        "Returns the number of frames in an animated GIF"
      ],
      "returns": "Number: "
    },
    "play": {
      "description": [
        "Plays an animated GIF that was paused with <a href=\"#/p5.Image/pause\">pause()</a>"
      ]
    },
    "pause": {
      "description": [
        "Pauses an animated GIF."
      ]
    },
    "delay": {
      "description": [
        "Changes the delay between frames in an animated GIF. There is an optional second parameter that indicates an index for a specific frame that should have its delay modified. If no index is given, all frames will have the new delay."
      ],
      "params": {
        "d": "Number: the amount in milliseconds to delay between switching frames",
        "index": "Number: (Optional) the index of the frame that should have the new delay value {optional}"
      }
    }
  },
  "p5.PrintWriter": {
    "params": {
      "filename": "String",
      "extension": "String (Optional)"
    },
    "write": {
      "description": [
        "Writes data to the PrintWriter stream"
      ],
      "params": {
        "data": "Array: all data to be written by the PrintWriter"
      }
    },
    "print": {
      "description": [
        "Writes data to the PrintWriter stream, and adds a new line at the end"
      ],
      "params": {
        "data": "Array: all data to be printed by the PrintWriter"
      }
    },
    "clear": {
      "description": [
        "Clears the data already written to the PrintWriter object"
      ]
    },
    "close": {
      "description": [
        "Closes the PrintWriter"
      ]
    }
  },
  "p5.Table": {
    "description": [
      "<a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much like in a traditional spreadsheet. Tables can be generated from scratch, dynamically, or using data from an existing file."
    ],
    "params": {
      "rows": "p5.TableRow[]: (Optional) An array of p5.TableRow objects"
    },
    "columns": {
      "description": [
        "An array containing the names of the columns in the table, if the \"header\" the table is loaded with the \"header\" parameter."
      ]
    },
    "rows": {
      "description": [
        "An array containing the <a href=\"#/p5.Table\">p5.TableRow</a> objects that make up the rows of the table. The same result as calling <a href=\"#/p5/getRows\">getRows()</a>"
      ]
    },
    "addRow": {
      "description": [
        "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default, an empty row is created. Typically, you would store a reference to the new row in a TableRow object (see newRow in the example above), and then set individual values using <a href=\"#/p5/set\">set()</a>. ",
        "If a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is duplicated and added to the table."
      ],
      "returns": "p5.TableRow: the row that was added",
      "params": {
        "row": "p5.TableRow: (Optional) row to be added to the table"
      }
    },
    "removeRow": {
      "description": [
        "Removes a row from the table object."
      ],
      "params": {
        "id": "Integer: ID number of the row to remove"
      }
    },
    "getRow": {
      "description": [
        "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference can then be used to get and set values of the selected row."
      ],
      "returns": "p5.TableRow: <a href=\"#/p5.TableRow\">p5.TableRow</a> object",
      "params": {
        "rowID": "Integer: ID number of the row to get"
      }
    },
    "getRows": {
      "description": [
        "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s."
      ],
      "returns": "p5.TableRow[]: Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s"
    },
    "findRow": {
      "description": [
        "Finds the first row in the Table that contains the value provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow: ",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "findRows": {
      "description": [
        "Finds the rows in the Table that contain the value provided, and returns references to those rows. Returns an Array, so for must be used to iterate through all the rows, as shown in the example above. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "value": "String: The value to match",
        "column": "Integer|String: ID number or title of the  column to search"
      }
    },
    "matchRow": {
      "description": [
        "Finds the first row in the Table that matches the regular expression provided, and returns a reference to that row. Even if multiple rows are possible matches, only the first matching row is returned. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow: TableRow object",
      "params": {
        "regexp": "String|RegExp: The regular expression to match",
        "column": "String|Integer: The column ID (number) or  title (string)"
      }
    },
    "matchRows": {
      "description": [
        "Finds the rows in the Table that match the regular expression provided, and returns references to those rows. Returns an array, so for must be used to iterate through all the rows, as shown in the example. The column to search may be specified by either its ID or title."
      ],
      "returns": "p5.TableRow[]: An Array of TableRow objects",
      "params": {
        "regexp": "String: The regular expression to match",
        "column": "String|Integer: (Optional) The column ID (number) or  title (string)"
      }
    },
    "getColumn": {
      "description": [
        "Retrieves all values in the specified column, and returns them as an array. The column may be specified by either its ID or title."
      ],
      "returns": "Array: Array of column values",
      "params": {
        "column": "String|Number: String or Number of the column to return"
      }
    },
    "clearRows": {
      "description": [
        "Removes all rows from a Table. While all rows are removed, columns and column titles are maintained."
      ]
    },
    "addColumn": {
      "description": [
        "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object. Typically, you will want to specify a title, so the column may be easily referenced later by name. (If no title is specified, the new column's title will be null.)"
      ],
      "params": {
        "title": "String: (Optional) title of the given column"
      }
    },
    "getColumnCount": {
      "description": [
        "Returns the total number of columns in a Table."
      ],
      "returns": "Integer: Number of columns in this table"
    },
    "getRowCount": {
      "description": [
        "Returns the total number of rows in a Table."
      ],
      "returns": "Integer: Number of rows in this table"
    },
    "removeTokens": {
      "description": [
        "Removes any of the specified characters (or \"tokens\"). ",
        "If no column is specified, then the values in all columns and rows are processed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "chars": "String: String listing characters to be removed",
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "trim": {
      "description": [
        "Trims leading and trailing whitespace, such as spaces and tabs, from String table values. If no column is specified, then the values in all columns and rows are trimmed. A specific column may be referenced by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: (Optional) Column ID (number)  or name (string)"
      }
    },
    "removeColumn": {
      "description": [
        "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table object. The column to be removed may be identified by either its title (a String) or its index value (an int). removeColumn(0) would remove the first column, removeColumn(1) would remove the second column, and so on."
      ],
      "params": {
        "column": "String|Integer: columnName (string) or ID (number)"
      }
    },
    "set": {
      "description": [
        "Stores a value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String|Number: value to assign"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "Number: value to assign"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: column ID (Number)  or title (String)",
        "value": "String: value to assign"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String|Number: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "Number: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves a String value from the Table's specified row and column. The row is specified by its ID, while the column may be specified by either its ID or title."
      ],
      "returns": "String: ",
      "params": {
        "row": "Integer: row ID",
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getObject": {
      "description": [
        "Retrieves all table data and returns as an object. If a column name is passed in, each row object will be stored with that attribute as its title."
      ],
      "returns": "Object: ",
      "params": {
        "headerColumn": "String: (Optional) Name of the column which should be used to  title each row object (optional)"
      }
    },
    "getArray": {
      "description": [
        "Retrieves all table data and returns it as a multidimensional array."
      ],
      "returns": "Array: "
    }
  },
  "p5.TableRow": {
    "description": [
      "A TableRow object represents a single row of data values, stored in columns, from a table. ",
      "A Table Row contains both an ordered array, and an unordered JSON object."
    ],
    "params": {
      "str": "String: (Optional) optional: populate the row with a  string of values, separated by the  separator",
      "separator": "String: (Optional) comma separated values (csv) by default"
    },
    "set": {
      "description": [
        "Stores a value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number: The value to be stored"
      }
    },
    "setNum": {
      "description": [
        "Stores a Float value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "Number|String: The value to be stored  as a Float"
      }
    },
    "setString": {
      "description": [
        "Stores a String value in the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "params": {
        "column": "String|Integer: Column ID (Number)  or Title (String)",
        "value": "String|Number|Boolean|Object: The value to be stored  as a String"
      }
    },
    "get": {
      "description": [
        "Retrieves a value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String|Number: ",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getNum": {
      "description": [
        "Retrieves a Float value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "Number: Float Floating point number",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    },
    "getString": {
      "description": [
        "Retrieves an String value from the TableRow's specified column. The column may be specified by either its ID or title."
      ],
      "returns": "String: String",
      "params": {
        "column": "String|Integer: columnName (string) or  ID (number)"
      }
    }
  },
  "p5.XML": {
    "description": [
      "XML is a representation of an XML object, able to parse XML code. Use <a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
    ],
    "getParent": {
      "description": [
        "Gets a copy of the element's parent. Returns the parent as another <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "returns": "p5.XML: element parent"
    },
    "getName": {
      "description": [
        "Gets the element's full name, which is returned as a String."
      ],
      "returns": "String: the name of the node"
    },
    "setName": {
      "description": [
        "Sets the element's name, which is specified as a String."
      ],
      "params": {
        "the": "String: new name of the node"
      }
    },
    "hasChildren": {
      "description": [
        "Checks whether or not the element has any children, and returns the result as a boolean."
      ],
      "returns": "Boolean: "
    },
    "listChildren": {
      "description": [
        "Get the names of all of the element's children, and returns the names as an array of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a> on each child element individually."
      ],
      "returns": "String[]: names of the children of the element"
    },
    "getChildren": {
      "description": [
        "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When the name parameter is specified, then it will return all children that match that name."
      ],
      "returns": "p5.XML[]: children of the element",
      "params": {
        "name": "String: (Optional) element name"
      }
    },
    "getChild": {
      "description": [
        "Returns the first of the element's children that matches the name parameter or the child of the given index.It returns undefined if no matching child is found."
      ],
      "returns": "p5.XML: ",
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "addChild": {
      "description": [
        "Appends a new child to the element. The child can be specified with either a String, which will be used as the new tag's name, or as a reference to an existing <a href=\"#/p5.XML\">p5.XML</a> object. A reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object."
      ],
      "params": {
        "node": "p5.XML: a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added"
      }
    },
    "removeChild": {
      "description": [
        "Removes the element specified by name or index."
      ],
      "params": {
        "name": "String|Integer: element name or index"
      }
    },
    "getAttributeCount": {
      "description": [
        "Counts the specified element's number of attributes, returned as an Number."
      ],
      "returns": "Integer: "
    },
    "listAttributes": {
      "description": [
        "Gets all of the specified element's attributes, and returns them as an array of Strings."
      ],
      "returns": "String[]: an array of strings containing the names of attributes"
    },
    "hasAttribute": {
      "description": [
        "Checks whether or not an element has the specified attribute."
      ],
      "returns": "Boolean: true if attribute found else false",
      "params": {
        "the": "String: attribute to be checked"
      }
    },
    "getNum": {
      "description": [
        "Returns an attribute value of the element as an Number. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, the value 0 is returned."
      ],
      "returns": "Number: ",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "getString": {
      "description": [
        "Returns an attribute value of the element as an String. If the defaultValue parameter is specified and the attribute doesn't exist, then defaultValue is returned. If no defaultValue is specified and the attribute doesn't exist, null is returned."
      ],
      "returns": "String: ",
      "params": {
        "name": "String: the non-null full name of the attribute",
        "defaultValue": "Number: (Optional) the default value of the attribute"
      }
    },
    "setAttribute": {
      "description": [
        "Sets the content of an element's attribute. The first parameter specifies the attribute name, while the second specifies the new content."
      ],
      "params": {
        "name": "String: the full name of the attribute",
        "value": "Number|String|Boolean: the value of the attribute"
      }
    },
    "getContent": {
      "description": [
        "Returns the content of an element. If there is no such content, defaultValue is returned if specified, otherwise null is returned."
      ],
      "returns": "String: ",
      "params": {
        "defaultValue": "String: (Optional) value returned if no content is found"
      }
    },
    "setContent": {
      "description": [
        "Sets the element's content."
      ],
      "params": {
        "text": "String: the new content"
      }
    },
    "serialize": {
      "description": [
        "Serializes the element into a string. This function is useful for preparing the content to be sent over a http request or saved to file."
      ],
      "returns": "String: Serialized string of the element"
    }
  },
  "p5.Vector": {
    "description": [
      "A class to describe a two or three dimensional vector, specifically a Euclidean (also known as geometric) vector. A vector is an entity that has both magnitude and direction. The datatype, however, stores the components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude and direction can be accessed via the methods <a href=\"#/p5.Vector/mag\">mag()</a> and <a href=\"#/p5.Vector/heading\">heading()</a>. ",
      "In many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a position, velocity, or acceleration. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (a vector that points from the origin to its location), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). ",
      "Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class."
    ],
    "params": {
      "x": "Number: (Optional) x component of the vector",
      "y": "Number: (Optional) y component of the vector",
      "z": "Number: (Optional) z component of the vector"
    },
    "x": {
      "description": [
        "The x component of the vector"
      ]
    },
    "y": {
      "description": [
        "The y component of the vector"
      ]
    },
    "z": {
      "description": [
        "The z component of the vector"
      ]
    },
    "set": {
      "description": [
        "Sets the x, y, and z component of the vector using two or three separate variables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array."
      ],
      "params": {
        "x": "Number: (Optional) the x component of the vector",
        "y": "Number: (Optional) the y component of the vector",
        "z": "Number: (Optional) the z component of the vector",
        "value": "p5.Vector|Number[]: the vector to set"
      }
    },
    "copy": {
      "description": [
        "Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object."
      ],
      "returns": "p5.Vector: the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "add": {
      "description": [
        "Adds x, y, and z components to a vector, adds one vector to another, or adds two independent vectors together. The version of the method that adds two vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others acts directly on the vector. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: the x component of the vector to be added",
        "y": "Number: (Optional) the y component of the vector to be added",
        "z": "Number: (Optional) the z component of the vector to be added",
        "value": "p5.Vector|Number[]: the vector to add",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
        "target": "p5.Vector: (Optional) the vector to receive the result"
      }
    },
    "rem": {
      "description": [
        "Gives remainder of a vector when it is divided by another vector. See examples for more context."
      ],
      "params": {
        "x": "Number: the x component of divisor vector",
        "y": "Number: the y component of divisor vector",
        "z": "Number: the z component of divisor vector",
        "value": "p5.Vector | Number[]: divisor vector",
        "v1": "p5.Vector: dividend <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: divisor <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "sub": {
      "description": [
        "Subtracts x, y, and z components from a vector, subtracts one vector from another, or subtracts two independent vectors. The version of the method that subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the other acts directly on the vector. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "x": "Number: the x component of the vector to subtract",
        "y": "Number: (Optional) the y component of the vector to subtract",
        "z": "Number: (Optional) the z component of the vector to subtract",
        "value": "p5.Vector|Number[]: the vector to subtract",
        "v1": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
        "v2": "p5.Vector: a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
        "target": "p5.Vector: (Optional) the vector to receive the result"
      }
    },
    "mult": {
      "description": [
        "Multiplies the vector by a scalar, multiplies the x, y, and z components from a vector, or multiplies the x, y, and z components of two independent vectors. When multiplying a vector by a scalar, the x, y, and z components of the vector are all multiplied by the scalar. When multiplying a vector by a vector, the x, y, z components of both vectors are multiplied by each other (for example, with two vectors a and b: a.x * b.x, a.y * b.y, a.z * b.z). The static version of this method creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "n": "Number: The number to multiply with the vector",
        "x": "Number: The number to multiply with the x component of the vector",
        "y": "Number: The number to multiply with the y component of the vector",
        "z": "Number: (Optional) The number to multiply with the z component of the vector",
        "arr": "Number[]: The array to multiply with the components of the vector",
        "v": "p5.Vector: The vector to multiply with the components of the original vector",
        "target": "p5.Vector: (Optional) the vector to receive the result",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "div": {
      "description": [
        "Divides the vector by a scalar, divides a vector by the x, y, and z arguments, or divides the x, y, and z components of two vectors against each other. When dividing a vector by a scalar, the x, y, and z components of the vector are all divided by the scalar. When dividing a vector by a vector, the x, y, z components of the source vector are treated as the dividend, and the x, y, z components of the argument is treated as the divisor (for example with two vectors a and b: a.x / b.x, a.y / b.y, a.z / b.z). The static version of this method creates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly. Additionally, you may provide arguments to this function as an array. See the examples for more context."
      ],
      "params": {
        "n": "Number: The number to divide the vector by",
        "x": "Number: The number to divide with the x component of the vector",
        "y": "Number: The number to divide with the y component of the vector",
        "z": "Number: (Optional) The number to divide with the z component of the vector",
        "arr": "Number[]: The array to divide the components of the vector by",
        "v": "p5.Vector: The vector to divide the components of the original vector by",
        "target": "p5.Vector: (Optional) the vector to receive the result",
        "v0": "p5.Vector",
        "v1": "p5.Vector"
      }
    },
    "mag": {
      "description": [
        "Calculates the magnitude (length) of the vector and returns the result as a float (this is simply the equation sqrt(x*x + y*y + z*z).)"
      ],
      "returns": "Number: magnitude of the vector",
      "params": {
        "vecT": "p5.Vector: the vector to return the magnitude of"
      }
    },
    "magSq": {
      "description": [
        "Calculates the squared magnitude of the vector and returns the result as a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.) Faster if the real length is not required in the case of comparing vectors, etc."
      ],
      "returns": "Number: squared magnitude of the vector"
    },
    "dot": {
      "description": [
        "Calculates the dot product of two vectors. The version of the method that computes the dot product of two independent vectors is a static method. See the examples for more context."
      ],
      "returns": "Number: the dot product",
      "params": {
        "x": "Number: x component of the vector",
        "y": "Number: (Optional) y component of the vector",
        "z": "Number: (Optional) z component of the vector",
        "value": "p5.Vector: value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "cross": {
      "description": [
        "Calculates and returns a vector composed of the cross product between two vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>. See the examples for more context."
      ],
      "returns": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product",
      "params": {
        "v": "p5.Vector: <a href=\"#/p5.Vector\">p5.Vector</a> to be crossed",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "dist": {
      "description": [
        "Calculates the Euclidean distance between two points (considering a point as a vector object). If you are looking to calculate distance with 2 points see <a href=\"#/p5/dist\">dist()</a>"
      ],
      "returns": "Number: the distance",
      "params": {
        "v": "p5.Vector: the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v1": "p5.Vector: the first <a href=\"#/p5.Vector\">p5.Vector</a>",
        "v2": "p5.Vector: the second <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "normalize": {
      "description": [
        "Normalize the vector to length 1 (make it a unit vector)."
      ],
      "returns": "p5.Vector: normalized <a href=\"#/p5.Vector\">p5.Vector</a>",
      "params": {
        "v": "p5.Vector: the vector to normalize",
        "target": "p5.Vector: (Optional) the vector to receive the result"
      }
    },
    "limit": {
      "description": [
        "Limit the magnitude of this vector to the value used for the <b>max</b> parameter."
      ],
      "params": {
        "max": "Number: the maximum magnitude for the vector"
      }
    },
    "setMag": {
      "description": [
        "Set the magnitude of this vector to the value used for the <b>len</b> parameter."
      ],
      "params": {
        "len": "Number: the new length for this vector"
      }
    },
    "heading": {
      "description": [
        "Calculate the angle of rotation for this vector(only 2D vectors). p5.Vectors created using <a href=\"#/p5/createVector\">createVector()</a> will take the current <a href=\"#/p5/angleMode\">angleMode</a> into consideration, and give the angle in radians or degree accordingly."
      ],
      "returns": "Number: the angle of rotation"
    },
    "setHeading": {
      "description": [
        "Rotate the vector to a specific angle (only 2D vectors), magnitude remains the same"
      ],
      "params": {
        "angle": "Number: the angle of rotation"
      }
    },
    "rotate": {
      "description": [
        "Rotate the vector by an angle (only 2D vectors), magnitude remains the same"
      ],
      "params": {
        "angle": "Number: the angle of rotation",
        "v": "p5.Vector",
        "target": "p5.Vector: (Optional) the vector to receive the result"
      }
    },
    "angleBetween": {
      "description": [
        "Calculates and returns the angle between two vectors. This function will take the current <a href=\"#/p5/angleMode\">angleMode</a> into consideration, and give the angle in radians or degree accordingly."
      ],
      "returns": "Number: the angle between (in radians)",
      "params": {
        "value": "p5.Vector: the x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>"
      }
    },
    "lerp": {
      "description": [
        "Linear interpolate the vector to another vector"
      ],
      "params": {
        "x": "Number: the x component",
        "y": "Number: the y component",
        "z": "Number: the z component",
        "amt": "Number: the amount of interpolation; some value between 0.0  (old vector) and 1.0 (new vector). 0.9 is very near  the new vector. 0.5 is halfway in between.",
        "v": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to",
        "v1": "p5.Vector",
        "v2": "p5.Vector",
        "target": "p5.Vector: (Optional) the vector to receive the result"
      }
    },
    "reflect": {
      "description": [
        "Reflect the incoming vector about a normal to a line in 2D, or about a normal to a plane in 3D This method acts on the vector directly"
      ],
      "params": {
        "surfaceNormal": "p5.Vector: the <a href=\"#/p5.Vector\">p5.Vector</a> to reflect about, will be normalized by this method"
      }
    },
    "array": {
      "description": [
        "Return a representation of this vector as a float array. This is only for temporary use. If used in any other fashion, the contents should be copied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own array."
      ],
      "returns": "Number[]: an Array with the 3 values"
    },
    "equals": {
      "description": [
        "Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>"
      ],
      "returns": "Boolean: whether the vectors are equals",
      "params": {
        "x": "Number: (Optional) the x component of the vector",
        "y": "Number: (Optional) the y component of the vector",
        "z": "Number: (Optional) the z component of the vector",
        "value": "p5.Vector|Array: the vector to compare"
      }
    },
    "fromAngle": {
      "description": [
        "Make a new 2D vector from an angle"
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "angle": "Number: the desired angle, in radians (unaffected by <a href=\"#/p5/angleMode\">angleMode</a>)",
        "length": "Number: (Optional) the length of the new vector (defaults to 1)"
      }
    },
    "fromAngles": {
      "description": [
        "Make a new 3D vector from a pair of ISO spherical angles"
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
      "params": {
        "theta": "Number: the polar angle, in radians (zero is up)",
        "phi": "Number: the azimuthal angle, in radians  (zero is out of the screen)",
        "length": "Number: (Optional) the length of the new vector (defaults to 1)"
      }
    },
    "random2D": {
      "description": [
        "Make a new 2D unit vector from a random angle"
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    },
    "random3D": {
      "description": [
        "Make a new random 3D unit vector."
      ],
      "returns": "p5.Vector: the new <a href=\"#/p5.Vector\">p5.Vector</a> object"
    }
  },
  "p5.Font": {
    "description": [
      "Base class for font handling"
    ],
    "params": {
      "pInst": "P5: (Optional) pointer to p5 instance"
    },
    "font": {
      "description": [
        "Underlying opentype font implementation"
      ]
    },
    "textBounds": {
      "description": [
        "Returns a tight bounding box for the given text string using this font"
      ],
      "returns": "Object: a rectangle object with properties: x, y, w, h",
      "params": {
        "line": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: (Optional) font size to use (optional) Default is 12.",
        "options": "Object: (Optional) opentype options (optional)  opentype fonts contains alignment and baseline options.  Default is 'LEFT' and 'alphabetic'"
      }
    },
    "textToPoints": {
      "description": [
        "Computes an array of points following the path for specified text"
      ],
      "returns": "Array: an array of points, each with x, y, alpha (the path angle)",
      "params": {
        "txt": "String: a line of text",
        "x": "Number: x-position",
        "y": "Number: y-position",
        "fontSize": "Number: font size to use (optional)",
        "options": "Object: (Optional) an (optional) object that can contain: sampleFactor - the ratio of path-length to number of samples (default=.1); higher values yield more points and are therefore more precise simplifyThreshold - if set to a non-zero value, collinear points will be be removed from the polygon; the value represents the threshold angle to use when determining whether two edges are collinear"
      }
    }
  },
  "p5.Camera": {
    "description": [
      "This class describes a camera for use in p5's <a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\"> WebGL mode</a>. It contains camera position, orientation, and projection information necessary for rendering a 3D scene. ",
      "New p5.Camera objects can be made through the <a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through the methods described below. A camera created in this way will use a default position in the scene and a default perspective projection until these properties are changed through the various methods available. It is possible to create multiple cameras, in which case the current camera can be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method. ",
      "Note: The methods below operate in two coordinate systems: the 'world' coordinate system describe positions in terms of their relationship to the origin along the X, Y and Z axes whereas the camera's 'local' coordinate system describes positions from the camera's point of view: left-right, up-down, and forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method, for instance, moves the camera along its own axes, whereas the <a href=\"#/p5.Camera/setPosition\">setPosition()</a> method sets the camera's position in world-space. ",
      "The camera object propreties <code>eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ</code> which describes camera position, orientation, and projection are also accessible via the camera object generated using <a href=\"#/p5/createCamera\">createCamera()</a>"
    ],
    "params": {
      "rendererGL": "RendererGL: instance of WebGL renderer"
    },
    "eyeX": {
      "description": [
        "camera position value on x axis"
      ]
    },
    "eyeY": {
      "description": [
        "camera position value on y axis"
      ]
    },
    "eyeZ": {
      "description": [
        "camera position value on z axis"
      ]
    },
    "centerX": {
      "description": [
        "x coordinate representing center of the sketch"
      ]
    },
    "centerY": {
      "description": [
        "y coordinate representing center of the sketch"
      ]
    },
    "centerZ": {
      "description": [
        "z coordinate representing center of the sketch"
      ]
    },
    "upX": {
      "description": [
        "x component of direction 'up' from camera"
      ]
    },
    "upY": {
      "description": [
        "y component of direction 'up' from camera"
      ]
    },
    "upZ": {
      "description": [
        "z component of direction 'up' from camera"
      ]
    },
    "perspective": {
      "description": [
        "Sets a perspective projection. Accepts the same parameters as the global <a href=\"#/p5/perspective\">perspective()</a>. More information on this function can be found there."
      ]
    },
    "ortho": {
      "description": [
        "Sets an orthographic projection. Accepts the same parameters as the global <a href=\"#/p5/ortho\">ortho()</a>. More information on this function can be found there."
      ]
    },
    "frustum": {
      "description": [
        "Sets the camera's frustum. Accepts the same parameters as the global <a href=\"#/p5/frustum\">frustum()</a>. More information on this function can be found there."
      ]
    },
    "pan": {
      "description": [
        "Panning rotates the camera view to the left and right."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "tilt": {
      "description": [
        "Tilting rotates the camera view up and down."
      ],
      "params": {
        "angle": "Number: amount to rotate camera in current <a href=\"#/p5/angleMode\">angleMode</a> units. Greater than 0 values rotate counterclockwise (to the left)."
      }
    },
    "lookAt": {
      "description": [
        "Reorients the camera to look at a position in world space."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    },
    "camera": {
      "description": [
        "Sets the camera's position and orientation. Accepts the same parameters as the global <a href=\"#/p5/camera\">camera()</a>. More information on this function can be found there."
      ]
    },
    "move": {
      "description": [
        "Move camera along its local axes while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: amount to move along camera's left-right axis",
        "y": "Number: amount to move along camera's up-down axis",
        "z": "Number: amount to move along camera's forward-backward axis"
      }
    },
    "setPosition": {
      "description": [
        "Set camera position in world-space while maintaining current camera orientation."
      ],
      "params": {
        "x": "Number: x position of a point in world space",
        "y": "Number: y position of a point in world space",
        "z": "Number: z position of a point in world space"
      }
    }
  },
  "p5.Geometry": {
    "description": [
      "p5 Geometry class"
    ],
    "params": {
      "detailX": "Integer: (Optional) number of vertices on horizontal surface",
      "detailY": "Integer: (Optional) number of vertices on horizontal surface",
      "callback": "Function: (Optional) function to call upon object instantiation."
    },
    "computeFaces": {
      "description": [
        "computes faces for geometry objects based on the vertices."
      ]
    },
    "computeNormals": {
      "description": [
        "computes smooth normals per vertex as an average of each face."
      ]
    },
    "averageNormals": {
      "description": [
        "Averages the vertex normals. Used in curved surfaces"
      ]
    },
    "averagePoleNormals": {
      "description": [
        "Averages pole normals. Used in spherical primitives"
      ]
    },
    "normalize": {
      "description": [
        "Modifies all vertices to be centered within the range -100 to 100."
      ]
    }
  },
  "p5.Shader": {
    "description": [
      "Shader class for WEBGL Mode"
    ],
    "params": {
      "renderer": "p5.RendererGL: an instance of p5.RendererGL that will provide the GL context for this new p5.Shader",
      "vertSrc": "String: source code for the vertex shader (as a string)",
      "fragSrc": "String: source code for the fragment shader (as a string)"
    },
    "setUniform": {
      "description": [
        "Wrapper around gl.uniform functions. As we store uniform info in the shader we can use that to do type checking on the supplied data and call the appropriate function."
      ],
      "params": {
        "uniformName": "String: the name of the uniform in the shader program",
        "data": "Object|Number|Boolean|Number[]: the data to be associated with that uniform; type varies (could be a single numerical value, array, matrix, or texture / sampler reference)"
      }
    }
  },
  "p5.sound": {},
  "p5.SoundFile": {
    "description": [
      "SoundFile object with a path to a file.  ",
      "The p5.SoundFile may not be available immediately because it loads the file information asynchronously.  ",
      "To do something with the sound as soon as it loads pass the name of a function as the second parameter.  ",
      "Only one file path is required. However, audio file formats (i.e. mp3, ogg, wav and m4a/aac) are not supported by all web browsers. If you want to ensure compatability, instead of a single file path, you may include an Array of filepaths, and the browser will choose a format that works."
    ],
    "params": {
      "path": "String|Array: path to a sound file (String). Optionally,  you may include multiple file formats in  an array. Alternately, accepts an object  from the HTML5 File API, or a p5.File.",
      "successCallback": "Function: (Optional) Name of a function to call once file loads",
      "errorCallback": "Function: (Optional) Name of a function to call if file fails to  load. This function will receive an error or  XMLHttpRequest object with information  about what went wrong.",
      "whileLoadingCallback": "Function: (Optional) Name of a function to call while file  is loading. That function will  receive progress of the request to  load the sound file  (between 0 and 1) as its first  parameter. This progress  does not account for the additional  time needed to decode the audio data."
    },
    "isLoaded": {
      "description": [
        "Returns true if the sound file finished loading successfully."
      ],
      "returns": "Boolean: "
    },
    "play": {
      "description": [
        "Play the p5.SoundFile"
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule playback to start (in seconds from now).",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) amplitude (volume)  of playback",
        "cueStart": "Number: (Optional) (optional) cue start time in seconds",
        "duration": "Number: (Optional) (optional) duration of playback in seconds"
      }
    },
    "playMode": {
      "description": [
        "p5.SoundFile has two play modes: <code>restart</code> and <code>sustain</code>. Play Mode determines what happens to a p5.SoundFile if it is triggered while in the middle of playback. In sustain mode, playback will continue simultaneous to the new playback. In restart mode, play() will stop playback and start over. With untilDone, a sound will play only if it's not already playing. Sustain is the default mode."
      ],
      "params": {
        "str": "String: 'restart' or 'sustain' or 'untilDone'"
      }
    },
    "pause": {
      "description": [
        "Pauses a file that is currently playing. If the file is not playing, then nothing will happen. ",
        "After pausing, .play() will resume from the paused position. If p5.SoundFile had been set to loop before it was paused, it will continue to loop after it is unpaused with .play()."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop the p5.SoundFile. Accepts optional parameters to set the playback rate, playback volume, loopStart, loopEnd."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  seconds from now",
        "rate": "Number: (Optional) (optional) playback rate",
        "amp": "Number: (Optional) (optional) playback volume",
        "cueLoopStart": "Number: (Optional) (optional) startTime in seconds",
        "duration": "Number: (Optional) (optional) loop duration in seconds"
      }
    },
    "setLoop": {
      "description": [
        "Set a p5.SoundFile's looping flag to true or false. If the sound is currently playing, this change will take effect when it reaches the end of the current playback."
      ],
      "params": {
        "Boolean": "Boolean: set looping to true or false"
      }
    },
    "isLooping": {
      "description": [
        "Returns 'true' if a p5.SoundFile is currently looping and playing, 'false' if not."
      ],
      "returns": "Boolean: "
    },
    "isPlaying": {
      "description": [
        "Returns true if a p5.SoundFile is playing, false if not (i.e. paused or stopped)."
      ],
      "returns": "Boolean: "
    },
    "isPaused": {
      "description": [
        "Returns true if a p5.SoundFile is paused, false if not (i.e. playing or stopped)."
      ],
      "returns": "Boolean: "
    },
    "stop": {
      "description": [
        "Stop soundfile playback."
      ],
      "params": {
        "startTime": "Number: (Optional) (optional) schedule event to occur  in seconds from now"
      }
    },
    "pan": {
      "description": [
        "Set the stereo panning of a p5.sound object to a floating point number between -1.0 (left) and 1.0 (right). Default is 0.0 (center)."
      ],
      "params": {
        "panValue": "Number: (Optional) Set the stereo panner",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current stereo pan position (-1.0 to 1.0)"
      ],
      "returns": "Number: Returns the stereo pan setting of the Oscillator  as a number between -1.0 (left) and 1.0 (right).  0.0 is center and default."
    },
    "rate": {
      "description": [
        "Set the playback rate of a sound file. Will change the speed and the pitch. Values less than zero will reverse the audio buffer."
      ],
      "params": {
        "playbackRate": "Number: (Optional) Set the playback rate. 1.0 is normal,  .5 is half-speed, 2.0 is twice as fast.  Values less than zero play backwards."
      }
    },
    "setVolume": {
      "description": [
        "Multiply the output volume (amplitude) of a sound file between 0.0 (silence) and 1.0 (full volume). 1.0 is the maximum amplitude of a digital sound, so multiplying by greater than 1.0 may cause digital distortion. To fade, provide a <code>rampTime</code> parameter. For more complex fades, see the Envelope class. ",
        "Alternately, you can pass in a signal source such as an oscillator to modulate the amplitude with an audio signal."
      ],
      "params": {
        "volume": "Number|Object: Volume (amplitude) between 0.0  and 1.0 or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Fade for t seconds",
        "timeFromNow": "Number: (Optional) Schedule this event to happen at  t seconds in the future"
      }
    },
    "duration": {
      "description": [
        "Returns the duration of a sound file in seconds."
      ],
      "returns": "Number: The duration of the soundFile in seconds."
    },
    "currentTime": {
      "description": [
        "Return the current position of the p5.SoundFile playhead, in seconds. Time is relative to the normal buffer direction, so if <code>reverseBuffer</code> has been called, currentTime will count backwards."
      ],
      "returns": "Number: currentTime of the soundFile in seconds."
    },
    "jump": {
      "description": [
        "Move the playhead of a soundfile that is currently playing to a new position and a new duration, in seconds. If none are given, will reset the file to play entire duration from start to finish. To set the position of a soundfile that is not currently playing, use the <code>play</code> or <code>loop</code> methods."
      ],
      "params": {
        "cueTime": "Number: cueTime of the soundFile in seconds.",
        "duration": "Number: duration in seconds."
      }
    },
    "channels": {
      "description": [
        "Return the number of channels in a sound file. For example, Mono = 1, Stereo = 2."
      ],
      "returns": "Number: [channels]"
    },
    "sampleRate": {
      "description": [
        "Return the sample rate of the sound file."
      ],
      "returns": "Number: [sampleRate]"
    },
    "frames": {
      "description": [
        "Return the number of samples in a sound file. Equal to sampleRate * duration."
      ],
      "returns": "Number: [sampleCount]"
    },
    "getPeaks": {
      "description": [
        "Returns an array of amplitude peaks in a p5.SoundFile that can be used to draw a static waveform. Scans through the p5.SoundFile's audio buffer to find the greatest amplitudes. Accepts one parameter, 'length', which determines size of the array. Larger arrays result in more precise waveform visualizations. ",
        "Inspired by Wavesurfer.js."
      ],
      "returns": "Float32Array: Array of peaks.",
      "params": {
        "length": "Number: (Optional) length is the size of the returned array.  Larger length results in more precision.  Defaults to 5*width of the browser window."
      }
    },
    "reverseBuffer": {
      "description": [
        "Reverses the p5.SoundFile's buffer source. Playback must be handled separately (see example)."
      ]
    },
    "onended": {
      "description": [
        "Schedule an event to be called when the soundfile reaches the end of a buffer. If the soundfile is playing through once, this will be called when it ends. If it is looping, it will be called when stop is called."
      ],
      "params": {
        "callback": "Function: function to call when the  soundfile has ended."
      }
    },
    "connect": {
      "description": [
        "Connects the output of a p5sound object to input of another p5.sound object. For example, you may connect a p5.SoundFile to an FFT or an Effect. If no parameter is given, it will connect to the main output. Most p5sound objects connect to the master output when they are created."
      ],
      "params": {
        "object": "Object: (Optional) Audio object that accepts an input"
      }
    },
    "disconnect": {
      "description": [
        "Disconnects the output of this p5sound object."
      ]
    },
    "setPath": {
      "description": [
        "Reset the source for this SoundFile to a new path (URL)."
      ],
      "params": {
        "path": "String: path to audio file",
        "callback": "Function: Callback"
      }
    },
    "setBuffer": {
      "description": [
        "Replace the current Audio Buffer with a new Buffer."
      ],
      "params": {
        "buf": "Array: Array of Float32 Array(s). 2 Float32 Arrays  will create a stereo source. 1 will create  a mono source."
      }
    },
    "addCue": {
      "description": [
        "Schedule events to trigger every time a MediaElement (audio/video) reaches a playback cue point. ",
        "Accepts a callback function, a time (in seconds) at which to trigger the callback, and an optional parameter for the callback. ",
        "Time will be passed as the first parameter to the callback function, and param will be the second parameter."
      ],
      "returns": "Number: id ID of this cue,  useful for removeCue(id)",
      "params": {
        "time": "Number: Time in seconds, relative to this media  element's playback. For example, to trigger  an event every time playback reaches two  seconds, pass in the number 2. This will be  passed as the first parameter to  the callback function.",
        "callback": "Function: Name of a function that will be  called at the given time. The callback will  receive time and (optionally) param as its  two parameters.",
        "value": "Object: (Optional) An object to be passed as the  second parameter to the  callback function."
      }
    },
    "removeCue": {
      "description": [
        "Remove a callback based on its ID. The ID is returned by the addCue method."
      ],
      "params": {
        "id": "Number: ID of the cue, as returned by addCue"
      }
    },
    "clearCues": {
      "description": [
        "Remove all of the callbacks that had originally been scheduled via the addCue method."
      ]
    },
    "save": {
      "description": [
        "Save a p5.SoundFile as a .wav file. The browser will prompt the user to download the file to their device. To upload a file to a server, see <a href=\"/reference/#/p5.SoundFile/getBlob\">getBlob</a>"
      ],
      "params": {
        "fileName": "String: (Optional) name of the resulting .wav file."
      }
    },
    "getBlob": {
      "description": [
        "This method is useful for sending a SoundFile to a server. It returns the .wav-encoded audio data as a \"<a target=\"_blank\" title=\"Blob reference at MDN\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\">Blob</a>\". A Blob is a file-like data object that can be uploaded to a server with an <a href=\"/reference/#/p5/httpDo\">http</a> request. We'll use the <code>httpDo</code> options object to send a POST request with some specific options: we encode the request as <code>multipart/form-data</code>, and attach the blob as one of the form values using <code>FormData</code>."
      ],
      "returns": "Blob: A file-like data object"
    }
  },
  "p5.Amplitude": {
    "description": [
      "Amplitude measures volume between 0.0 and 1.0. Listens to all p5sound by default, or use setInput() to listen to a specific sound source. Accepts an optional smoothing value, which defaults to 0."
    ],
    "params": {
      "smoothing": "Number: (Optional) between 0.0 and .999 to smooth  amplitude readings (defaults to 0)"
    },
    "setInput": {
      "description": [
        "Connects to the p5sound instance (main output) by default. Optionally, you can pass in a specific source (i.e. a soundfile)."
      ],
      "params": {
        "snd": "SoundObject|undefined: (Optional) set the sound source  (optional, defaults to  main output)",
        "smoothing": "Number|undefined: (Optional) a range between 0.0 and 1.0  to smooth amplitude readings"
      }
    },
    "getLevel": {
      "description": [
        "Returns a single Amplitude reading at the moment it is called. For continuous readings, run in the draw loop."
      ],
      "returns": "Number: Amplitude as a number between 0.0 and 1.0",
      "params": {
        "channel": "Number: (Optional) Optionally return only channel 0 (left) or 1 (right)"
      }
    },
    "toggleNormalize": {
      "description": [
        "Determines whether the results of Amplitude.process() will be Normalized. To normalize, Amplitude finds the difference the loudest reading it has processed and the maximum amplitude of 1.0. Amplitude adds this difference to all values to produce results that will reliably map between 0.0 and 1.0. However, if a louder moment occurs, the amount that Normalize adds to all the values will change. Accepts an optional boolean parameter (true or false). Normalizing is off by default."
      ],
      "params": {
        "boolean": "Boolean: (Optional) set normalize to true (1) or false (0)"
      }
    },
    "smooth": {
      "description": [
        "Smooth Amplitude analysis by averaging with the last analysis frame. Off by default."
      ],
      "params": {
        "set": "Number: smoothing from 0.0 <= 1"
      }
    }
  },
  "p5.FFT": {
    "description": [
      "FFT (Fast Fourier Transform) is an analysis algorithm that isolates individual <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\"> audio frequencies</a> within a waveform.  ",
      "Once instantiated, a p5.FFT object can return an array based on two types of analyses: • <code>FFT.waveform()</code> computes amplitude values along the time domain. The array indices correspond to samples across a brief moment in time. Each value represents amplitude of the waveform at that sample of time. • <code>FFT.analyze() </code> computes amplitude values along the frequency domain. The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Use with <code>getEnergy()</code> to measure amplitude at specific frequencies, or within a range of frequencies. ",
      "FFT analyzes a very short snapshot of sound called a sample buffer. It returns an array of amplitude measurements, referred to as <code>bins</code>. The array is 1024 bins long by default. You can change the bin array length, but it must be a power of 2 between 16 and 1024 in order for the FFT algorithm to function correctly. The actual size of the FFT buffer is twice the number of bins, so given a standard sample rate, the buffer is 2048/44100 seconds long."
    ],
    "params": {
      "smoothing": "Number: (Optional) Smooth results of Freq Spectrum.  0.0 < smoothing < 1.0.  Defaults to 0.8.",
      "bins": "Number: (Optional) Length of resulting array.  Must be a power of two between  16 and 1024. Defaults to 1024."
    },
    "setInput": {
      "description": [
        "Set the input source for the FFT analysis. If no source is provided, FFT will analyze all sound in the sketch."
      ],
      "params": {
        "source": "Object: (Optional) p5.sound object (or web audio API source node)"
      }
    },
    "waveform": {
      "description": [
        "Returns an array of amplitude values (between -1.0 and +1.0) that represent a snapshot of amplitude readings in a single buffer. Length will be equal to bins (defaults to 1024). Can be used to draw the waveform of a sound."
      ],
      "returns": "Array: Array Array of amplitude values (-1 to 1)  over time. Array length = bins.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "precision": "String: (Optional) If any value is provided, will return results  in a Float32 Array which is more precise  than a regular array."
      }
    },
    "analyze": {
      "description": [
        "Returns an array of amplitude values (between 0 and 255) across the frequency spectrum. Length is equal to FFT bins (1024 by default). The array indices correspond to frequencies (i.e. pitches), from the lowest to the highest that humans can hear. Each value represents amplitude at that slice of the frequency spectrum. Must be called prior to using <code>getEnergy()</code>."
      ],
      "returns": "Array: spectrum Array of energy (amplitude/volume)  values across the frequency spectrum.  Lowest energy (silence) = 0, highest  possible is 255.",
      "params": {
        "bins": "Number: (Optional) Must be a power of two between  16 and 1024. Defaults to 1024.",
        "scale": "Number: (Optional) If \"dB,\" returns decibel  float measurements between  -140 and 0 (max).  Otherwise returns integers from 0-255."
      }
    },
    "getEnergy": {
      "description": [
        "Returns the amount of energy (volume) at a specific <a href=\"https://en.wikipedia.org/wiki/Audio_frequency\" target=\"_blank\"> frequency</a>, or the average amount of energy between two frequencies. Accepts Number(s) corresponding to frequency (in Hz), or a \"string\" corresponding to predefined frequency ranges (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). Returns a range between 0 (no energy/volume at that frequency) and 255 (maximum energy). <em>NOTE: analyze() must be called prior to getEnergy(). analyze() tells the FFT to analyze frequency data, and getEnergy() uses the results to determine the value at a specific frequency or range of frequencies.</em>"
      ],
      "returns": "Number: Energy Energy (volume/amplitude) from  0 and 255.",
      "params": {
        "frequency1": "Number|String: Will return a value representing  energy at this frequency. Alternately,  the strings \"bass\", \"lowMid\" \"mid\",  \"highMid\", and \"treble\" will return  predefined frequency ranges.",
        "frequency2": "Number: (Optional) If a second frequency is given,  will return average amount of  energy that exists between the  two frequencies."
      }
    },
    "getCentroid": {
      "description": [
        "Returns the <a href=\"http://en.wikipedia.org/wiki/Spectral_centroid\" target=\"_blank\"> spectral centroid</a> of the input signal. <em>NOTE: analyze() must be called prior to getCentroid(). Analyze() tells the FFT to analyze frequency data, and getCentroid() uses the results determine the spectral centroid.</em>"
      ],
      "returns": "Number: Spectral Centroid Frequency of the spectral centroid in Hz."
    },
    "smooth": {
      "description": [
        "Smooth FFT analysis by averaging with the last analysis frame."
      ],
      "params": {
        "smoothing": "Number: 0.0 < smoothing < 1.0.  Defaults to 0.8."
      }
    },
    "linAverages": {
      "description": [
        "Returns an array of average amplitude values for a given number of frequency bands split equally. N defaults to 16. <em>NOTE: analyze() must be called prior to linAverages(). Analyze() tells the FFT to analyze frequency data, and linAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: linearAverages Array of average amplitude values for each group",
      "params": {
        "N": "Number: Number of returned frequency groups"
      }
    },
    "logAverages": {
      "description": [
        "Returns an array of average amplitude values of the spectrum, for a given set of <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\"> Octave Bands</a> <em>NOTE: analyze() must be called prior to logAverages(). Analyze() tells the FFT to analyze frequency data, and logAverages() uses the results to group them into a smaller set of averages.</em>"
      ],
      "returns": "Array: logAverages Array of average amplitude values for each group",
      "params": {
        "octaveBands": "Array: Array of Octave Bands objects for grouping"
      }
    },
    "getOctaveBands": {
      "description": [
        "Calculates and Returns the 1/N <a href=\"https://en.wikipedia.org/wiki/Octave_band\" target=\"_blank\">Octave Bands</a> N defaults to 3 and minimum central frequency to 15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) Setting fCtr0 to a central value of a higher octave will ignore the lower bands and produce less frequency groups."
      ],
      "returns": "Array: octaveBands Array of octave band objects with their bounds",
      "params": {
        "N": "Number: Specifies the 1/N type of generated octave bands",
        "fCtr0": "Number: Minimum central frequency for the lowest band"
      }
    }
  },
  "p5.Oscillator": {
    "description": [
      "Creates a signal that oscillates between -1.0 and 1.0. By default, the oscillation takes the form of a sinusoidal shape ('sine'). Additional types include 'triangle', 'sawtooth' and 'square'. The frequency defaults to 440 oscillations per second (440Hz, equal to the pitch of an 'A' note).  ",
      "Set the type of oscillation with setType(), or by instantiating a specific oscillator: <a href=\"/reference/#/p5.SinOsc\">p5.SinOsc</a>, <a href=\"/reference/#/p5.TriOsc\">p5.TriOsc</a>, <a href=\"/reference/#/p5.SqrOsc\">p5.SqrOsc</a>, or <a href=\"/reference/#/p5.SawOsc\">p5.SawOsc</a>. "
    ],
    "params": {
      "freq": "Number: (Optional) frequency defaults to 440Hz",
      "type": "String: (Optional) type of oscillator. Options:  'sine' (default), 'triangle',  'sawtooth', 'square'"
    },
    "start": {
      "description": [
        "Start an oscillator. ",
        "Starting an oscillator on a user gesture will enable audio in browsers that have a strict autoplay policy, including Chrome and most mobile devices. See also: <code>userStartAudio()</code>."
      ],
      "params": {
        "time": "Number: (Optional) startTime in seconds from now.",
        "frequency": "Number: (Optional) frequency in Hz."
      }
    },
    "stop": {
      "description": [
        "Stop an oscillator. Accepts an optional parameter to determine how long (in seconds from now) until the oscillator stops."
      ],
      "params": {
        "secondsFromNow": "Number: Time, in seconds from now."
      }
    },
    "amp": {
      "description": [
        "Set the amplitude between 0 and 1.0. Or, pass in an object such as an oscillator to modulate amplitude with an audio signal."
      ],
      "returns": "AudioParam: gain If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's  gain/amplitude/volume)",
      "params": {
        "vol": "Number|Object: between 0 and 1.0  or a modulating signal/oscillator",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "getAmp": {
      "description": [
        "Returns the value of output gain"
      ],
      "returns": "Number: Amplitude value between 0.0 and 1.0"
    },
    "freq": {
      "description": [
        "Set frequency of an oscillator to a value. Or, pass in an object such as an oscillator to modulate the frequency with an audio signal."
      ],
      "returns": "AudioParam: Frequency If no value is provided,  returns the Web Audio API  AudioParam that controls  this oscillator's frequency",
      "params": {
        "Frequency": "Number|Object: Frequency in Hz  or modulating signal/oscillator",
        "rampTime": "Number: (Optional) Ramp time (in seconds)",
        "timeFromNow": "Number: (Optional) Schedule this event to happen  at x seconds from now"
      }
    },
    "getFreq": {
      "description": [
        "Returns the value of frequency of oscillator"
      ],
      "returns": "Number: Frequency of oscillator in Hertz"
    },
    "setType": {
      "description": [
        "Set type to 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "params": {
        "type": "String: 'sine', 'triangle', 'sawtooth' or 'square'."
      }
    },
    "getType": {
      "description": [
        "Returns current type of oscillator eg. 'sine', 'triangle', 'sawtooth' or 'square'."
      ],
      "returns": "String: type of oscillator eg . 'sine', 'triangle', 'sawtooth' or 'square'."
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "pan": {
      "description": [
        "Pan between Left (-1) and Right (1)"
      ],
      "params": {
        "panning": "Number: Number between -1 and 1",
        "timeFromNow": "Number: schedule this event to happen  seconds from now"
      }
    },
    "getPan": {
      "description": [
        "Returns the current value of panPosition , between Left (-1) and Right (1)"
      ],
      "returns": "Number: panPosition of oscillator , between Left (-1) and Right (1)"
    },
    "phase": {
      "description": [
        "Set the phase of an oscillator between 0.0 and 1.0. In this implementation, phase is a delay time based on the oscillator's current frequency."
      ],
      "params": {
        "phase": "Number: float between 0.0 and 1.0"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Oscillator's output amplitude by a fixed value (i.e. turn it up!). Calling this method again will override the initial mult() with a new value."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with multiplied output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this oscillator's amplitude values to a given range, and return the oscillator. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Oscillator: Oscillator Returns this oscillator  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.SinOsc": {
    "description": [
      "Constructor: <code>new p5.SinOsc()</code>. This creates a Sine Wave Oscillator and is equivalent to <code> new p5.Oscillator('sine') </code> or creating a p5.Oscillator and then calling its method <code>setType('sine')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.TriOsc": {
    "description": [
      "Constructor: <code>new p5.TriOsc()</code>. This creates a Triangle Wave Oscillator and is equivalent to <code>new p5.Oscillator('triangle') </code> or creating a p5.Oscillator and then calling its method <code>setType('triangle')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SawOsc": {
    "description": [
      "Constructor: <code>new p5.SawOsc()</code>. This creates a SawTooth Wave Oscillator and is equivalent to <code> new p5.Oscillator('sawtooth') </code> or creating a p5.Oscillator and then calling its method <code>setType('sawtooth')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.SqrOsc": {
    "description": [
      "Constructor: <code>new p5.SqrOsc()</code>. This creates a Square Wave Oscillator and is equivalent to <code> new p5.Oscillator('square') </code> or creating a p5.Oscillator and then calling its method <code>setType('square')</code>. See p5.Oscillator for methods."
    ],
    "params": {
      "freq": "Number: (Optional) Set the frequency"
    }
  },
  "p5.Envelope": {
    "description": [
      "Envelopes are pre-defined amplitude distribution over time. Typically, envelopes are used to control the output volume of an object, a series of fades referred to as Attack, Decay, Sustain and Release ( <a href=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">ADSR</a> ). Envelopes can also control other Web Audio Parameters—for example, a p5.Envelope can control an Oscillator's frequency like this: <code>osc.freq(env)</code>. ",
      "Use <code><a href=\"#/p5.Envelope/setRange\">setRange</a></code> to change the attack/release level. Use <code><a href=\"#/p5.Envelope/setADSR\">setADSR</a></code> to change attackTime, decayTime, sustainPercent and releaseTime. ",
      "Use the <code><a href=\"#/p5.Envelope/play\">play</a></code> method to play the entire envelope, the <code><a href=\"#/p5.Envelope/ramp\">ramp</a></code> method for a pingable trigger, or <code><a href=\"#/p5.Envelope/triggerAttack\">triggerAttack</a></code>/ <code><a href=\"#/p5.Envelope/triggerRelease\">triggerRelease</a></code> to trigger noteOn/noteOff."
    ],
    "attackTime": {
      "description": [
        "Time until envelope reaches attackLevel"
      ]
    },
    "attackLevel": {
      "description": [
        "Level once attack is complete."
      ]
    },
    "decayTime": {
      "description": [
        "Time until envelope reaches decayLevel."
      ]
    },
    "decayLevel": {
      "description": [
        "Level after decay. The envelope will sustain here until it is released."
      ]
    },
    "releaseTime": {
      "description": [
        "Duration of the release portion of the envelope."
      ]
    },
    "releaseLevel": {
      "description": [
        "Level at the end of the release."
      ]
    },
    "set": {
      "description": [
        "Reset the envelope with a series of time/value pairs."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds) before level  reaches attackLevel",
        "attackLevel": "Number: Typically an amplitude between  0.0 and 1.0",
        "decayTime": "Number: Time",
        "decayLevel": "Number: Amplitude (In a standard ADSR envelope,  decayLevel = sustainLevel)",
        "releaseTime": "Number: Release Time (in seconds)",
        "releaseLevel": "Number: Amplitude"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setRange": {
      "description": [
        "Set max (attackLevel) and min (releaseLevel) of envelope."
      ],
      "params": {
        "aLevel": "Number: attack level (defaults to 1)",
        "rLevel": "Number: release level (defaults to 0)"
      }
    },
    "setInput": {
      "description": [
        "Assign a parameter to be controlled by this envelope. If a p5.Sound object is given, then the p5.Envelope will control its output gain. If multiple inputs are provided, the env will control all of them."
      ],
      "params": {
        "inputs": "Object: (Optional) A p5.sound object or  Web Audio Param."
      }
    },
    "setExp": {
      "description": [
        "Set whether the envelope ramp is linear (default) or exponential. Exponential ramps can be useful because we perceive amplitude and frequency logarithmically."
      ],
      "params": {
        "isExp": "Boolean: true is exponential, false is linear"
      }
    },
    "play": {
      "description": [
        "Play tells the envelope to start acting on a given input. If the input is a p5.sound object (i.e. AudioIn, Oscillator, SoundFile), then Envelope will control its output volume. Envelopes can also be used to control any <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Audio Param.</a>"
      ],
      "params": {
        "unit": "Object: A p5.sound object or  Web Audio Param.",
        "startTime": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go. Input can be any p5.sound object, or a <a href=\" http://docs.webplatform.org/wiki/apis/webaudio/AudioParam\"> Web Audio Param</a>."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time from now (in seconds)"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the Release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "ramp": {
      "description": [
        "Exponentially ramp to a value using the first two values from <code><a href=\"#/p5.Envelope/setADSR\">setADSR(attackTime, decayTime)</a></code> as <a href=\"https://en.wikipedia.org/wiki/RC_time_constant\"> time constants</a> for simple exponential ramps. If the value is higher than current value, it uses attackTime, while a decrease uses decayTime."
      ],
      "params": {
        "unit": "Object: p5.sound Object or Web Audio Param",
        "secondsFromNow": "Number: When to trigger the ramp",
        "v": "Number: Target value",
        "v2": "Number: (Optional) Second target value"
      }
    },
    "add": {
      "description": [
        "Add a value to the p5.Oscillator's output amplitude, and return the oscillator. Calling this method again will override the initial add() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to add"
      }
    },
    "mult": {
      "description": [
        "Multiply the p5.Envelope's output amplitude by a fixed value. Calling this method again will override the initial mult() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "number": "Number: Constant number to multiply"
      }
    },
    "scale": {
      "description": [
        "Scale this envelope's amplitude values to a given range, and return the envelope. Calling this method again will override the initial scale() with new values."
      ],
      "returns": "p5.Envelope: Envelope Returns this envelope  with scaled output",
      "params": {
        "inMin": "Number: input range minumum",
        "inMax": "Number: input range maximum",
        "outMin": "Number: input range minumum",
        "outMax": "Number: input range maximum"
      }
    }
  },
  "p5.Noise": {
    "description": [
      "Noise is a type of oscillator that generates a buffer with random values."
    ],
    "params": {
      "type": "String: Type of noise can be 'white' (default),  'brown' or 'pink'."
    },
    "setType": {
      "description": [
        "Set type of noise to 'white', 'pink' or 'brown'. White is the default."
      ],
      "params": {
        "type": "String: (Optional) 'white', 'pink' or 'brown'"
      }
    }
  },
  "p5.Pulse": {
    "description": [
      "Creates a Pulse object, an oscillator that implements Pulse Width Modulation. The pulse is created with two oscillators. Accepts a parameter for frequency, and to set the width between the pulses. See <a href=\" http://p5js.org/hi/reference/#/p5.Oscillator\"> <code>p5.Oscillator</code> for a full list of methods."
    ],
    "params": {
      "freq": "Number: (Optional) Frequency in oscillations per second (Hz)",
      "w": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
    },
    "width": {
      "description": [
        "Set the width of a Pulse object (an oscillator that implements Pulse Width Modulation)."
      ],
      "params": {
        "width": "Number: (Optional) Width between the pulses (0 to 1.0,  defaults to 0)"
      }
    }
  },
  "p5.AudioIn": {
    "description": [
      "Get audio from an input, i.e. your computer's microphone.  ",
      "Turn the mic on/off with the start() and stop() methods. When the mic is on, its volume can be measured with getLevel or by connecting an FFT object.  ",
      "If you want to hear the AudioIn, use the .connect() method. AudioIn does not connect to p5.sound output by default to prevent feedback.  ",
      "<em>Note: This uses the <a href=\"http://caniuse.com/stream\">getUserMedia/ Stream</a> API, which is not supported by certain browsers. Access in Chrome browser is limited to localhost and https, but access over http may be limited.</em>"
    ],
    "params": {
      "errorCallback": "Function: (Optional) A function to call if there is an error  accessing the AudioIn. For example,  Safari and iOS devices do not  currently allow microphone access."
    },
    "input": {},
    "output": {},
    "stream": {},
    "mediaStream": {},
    "currentSource": {},
    "enabled": {
      "description": [
        "Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access."
      ]
    },
    "amplitude": {
      "description": [
        "Input amplitude, connect to it by default but not to master out"
      ]
    },
    "start": {
      "description": [
        "Start processing audio input. This enables the use of other AudioIn methods like getLevel(). Note that by default, AudioIn is not connected to p5.sound's output. So you won't hear anything unless you use the connect() method.<br/> ",
        "Certain browsers limit access to the user's microphone. For example, Chrome only allows access from localhost and over https. For this reason, you may want to include an errorCallback—a function that is called in case the browser won't provide mic access."
      ],
      "params": {
        "successCallback": "Function: (Optional) Name of a function to call on  success.",
        "errorCallback": "Function: (Optional) Name of a function to call if  there was an error. For example,  some browsers do not support  getUserMedia."
      }
    },
    "stop": {
      "description": [
        "Turn the AudioIn off. If the AudioIn is stopped, it cannot getLevel(). If re-starting, the user may be prompted for permission access."
      ]
    },
    "connect": {
      "description": [
        "Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).<br/>"
      ],
      "params": {
        "unit": "Object: (Optional) An object that accepts audio input,  such as an FFT"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.<br/>"
      ]
    },
    "getLevel": {
      "description": [
        "Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). <em>NOTE: AudioIn must .start() before using .getLevel().</em><br/>"
      ],
      "returns": "Number: Volume level (between 0.0 and 1.0)",
      "params": {
        "smoothing": "Number: (Optional) Smoothing is 0.0 by default.  Smooths values based on previous values."
      }
    },
    "amp": {
      "description": [
        "Set amplitude (volume) of a mic input between 0 and 1.0. <br/>"
      ],
      "params": {
        "vol": "Number: between 0 and 1.0",
        "time": "Number: (Optional) ramp time (optional)"
      }
    },
    "getSources": {
      "description": [
        "Returns a list of available input sources. This is a wrapper for <a href=\"https://developer.mozilla.org/ en-US/docs/Web/API/MediaDevices/enumerateDevices\" target=\"_blank\"> MediaDevices.enumerateDevices() - Web APIs | MDN</a> and it returns a Promise."
      ],
      "returns": "Promise: Returns a Promise that can be used in place of the callbacks, similar  to the enumerateDevices() method",
      "params": {
        "successCallback": "Function: (Optional) This callback function handles the sources when they  have been enumerated. The callback function  receives the deviceList array as its only argument",
        "errorCallback": "Function: (Optional) This optional callback receives the error  message as its argument."
      }
    },
    "setSource": {
      "description": [
        "Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support  <a href=\"https://developer.mozilla.org/  en-US/docs/Web/API/MediaDevices/enumerateDevices\" target=\"_blank\">  navigator.mediaDevices.enumerateDevices()</a>"
      ],
      "params": {
        "num": "Number: position of input source in the array"
      }
    }
  },
  "p5.Effect": {
    "description": [
      "Effect is a base class for audio effects in p5. This module handles the nodes and methods that are common and useful for current and future effects. ",
      "This class is extended by <a href=\"/reference/#/p5.Distortion\">p5.Distortion</a>, <a href=\"/reference/#/p5.Compressor\">p5.Compressor</a>, <a href=\"/reference/#/p5.Delay\">p5.Delay</a>, <a href=\"/reference/#/p5.Filter\">p5.Filter</a>, <a href=\"/reference/#/p5.Reverb\">p5.Reverb</a>."
    ],
    "params": {
      "ac": "Object: (Optional) Reference to the audio context of the p5 object",
      "input": "AudioNode: (Optional) Gain Node effect wrapper",
      "output": "AudioNode: (Optional) Gain Node effect wrapper",
      "_drywet": "Object: (Optional) Tone.JS CrossFade node (defaults to value: 1)",
      "wet": "AudioNode: (Optional) Effects that extend this class should connect  to the wet signal to this gain node, so that dry and wet  signals are mixed properly."
    },
    "amp": {
      "description": [
        "Set the output volume of the filter."
      ],
      "params": {
        "vol": "Number: (Optional) amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts until rampTime",
        "tFromNow": "Number: (Optional) schedule this event to happen in tFromNow seconds"
      }
    },
    "chain": {
      "description": [
        "Link effects together in a chain Example usage: filter.chain(reverb, delay, panner); May be used with an open-ended number of arguments"
      ],
      "params": {
        "arguments": "Object: (Optional) Chain together multiple sound objects"
      }
    },
    "drywet": {
      "description": [
        "Adjust the dry/wet value."
      ],
      "params": {
        "fade": "Number: (Optional) The desired drywet value (0 - 1.0)"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.js-sound, Web Audio Node, or use signal to control an AudioParam"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Filter": {
    "description": [
      "A p5.Filter uses a Web Audio Biquad Filter to filter the frequency response of an input source. Subclasses include: <a href=\"/reference/#/p5.LowPass\"><code>p5.LowPass</code></a>: Allows frequencies below the cutoff frequency to pass through, and attenuates frequencies above the cutoff.<br/> <a href=\"/reference/#/p5.HighPass\"><code>p5.HighPass</code></a>: The opposite of a lowpass filter. <br/> <a href=\"/reference/#/p5.BandPass\"><code>p5.BandPass</code></a>: Allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range.<br/>  ",
      "The <code>.res()</code> method controls either width of the bandpass, or resonance of the low/highpass cutoff frequency. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "type": "String: (Optional) 'lowpass' (default), 'highpass', 'bandpass'"
    },
    "biquadFilter": {
      "description": [
        "The p5.Filter is built with a <a href=\"http://www.w3.org/TR/webaudio/#BiquadFilterNode\"> Web Audio BiquadFilter Node</a>."
      ]
    },
    "process": {
      "description": [
        "Filter an audio signal according to a set of filter parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance/Width of the filter frequency  from 0.001 to 1000"
      }
    },
    "set": {
      "description": [
        "Set the frequency and the resonance of the filter."
      ],
      "params": {
        "freq": "Number: (Optional) Frequency in Hz, from 10 to 22050",
        "res": "Number: (Optional) Resonance (Q) from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "freq": {
      "description": [
        "Set the filter frequency, in Hz, from 10 to 22050 (the range of human hearing, although in reality most people hear in a narrower range)."
      ],
      "returns": "Number: value Returns the current frequency value",
      "params": {
        "freq": "Number: Filter Frequency",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "res": {
      "description": [
        "Controls either width of a bandpass frequency, or the resonance of a low/highpass cutoff frequency."
      ],
      "returns": "Number: value Returns the current res value",
      "params": {
        "res": "Number: Resonance/Width of filter freq  from 0.001 to 1000",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "gain": {
      "description": [
        "Controls the gain attribute of a Biquad Filter. This is distinctly different from .amp() which is inherited from p5.Effect .amp() controls the volume via the output gain node p5.Filter.gain() controls the gain parameter of a Biquad Filter node."
      ],
      "returns": "Number: Returns the current or updated gain value",
      "params": {
        "gain": "Number"
      }
    },
    "toggle": {
      "description": [
        "Toggle function. Switches between the specified type and allpass"
      ],
      "returns": "Boolean: [Toggle value]"
    },
    "setType": {
      "description": [
        "Set the type of a p5.Filter. Possible types include: \"lowpass\" (default), \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \"notch\", \"allpass\"."
      ],
      "params": {
        "t": "String"
      }
    }
  },
  "p5.LowPass": {
    "description": [
      "Constructor: <code>new p5.LowPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('lowpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.HighPass": {
    "description": [
      "Constructor: <code>new p5.HighPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('highpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.BandPass": {
    "description": [
      "Constructor: <code>new p5.BandPass()</code> Filter. This is the same as creating a p5.Filter and then calling its method <code>setType('bandpass')</code>. See p5.Filter for methods."
    ]
  },
  "p5.EQ": {
    "description": [
      "p5.EQ is an audio effect that performs the function of a multiband audio equalizer. Equalization is used to adjust the balance of frequency compoenents of an audio signal. This process is commonly used in sound production and recording to change the waveform before it reaches a sound output device. EQ can also be used as an audio effect to create interesting distortions by filtering out parts of the spectrum. p5.EQ is built using a chain of Web Audio Biquad Filter Nodes and can be instantiated with 3 or 8 bands. Bands can be added or removed from the EQ by directly modifying p5.EQ.bands (the array that stores filters). ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "returns": "Object: p5.EQ object",
    "params": {
      "_eqsize": "Number: (Optional) Constructor will accept 3 or 8, defaults to 3"
    },
    "bands": {
      "description": [
        "The p5.EQ is built with abstracted p5.Filter objects. To modify any bands, use methods of the <a href=\"/reference/#/p5.Filter\" title=\"p5.Filter reference\"> p5.Filter</a> API, especially <code>gain</code> and <code>freq</code>. Bands are stored in an array, with indices 0 - 3, or 0 - 7"
      ]
    },
    "process": {
      "description": [
        "Process an input by connecting it to the EQ"
      ],
      "params": {
        "src": "Object: Audio source"
      }
    }
  },
  "p5.Panner3D": {
    "description": [
      "Panner3D is based on the <a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a>. This panner is a spatial processing node that allows audio to be positioned and oriented in 3D space. ",
      "The position is relative to an <a title=\"Web Audio Listener docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/AudioListener\"> Audio Context Listener</a>, which can be accessed by <code>p5.soundOut.audiocontext.listener</code>"
    ],
    "panner": {
      "description": [
        "<a title=\"Web Audio Panner docs\" href= \"https://developer.mozilla.org/en-US/docs/Web/API/PannerNode\"> Web Audio Spatial Panner Node</a> ",
        "Properties include  <a href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\">Panning Model</a>  : \"equal power\" or \"HRTF\"  <a href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\">DistanceModel</a> : \"linear\", \"inverse\", or \"exponential\""
      ]
    },
    "process": {
      "description": [
        "Connect an audio sorce"
      ],
      "params": {
        "src": "Object: Input source"
      }
    },
    "set": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "positionX": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionY": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "positionZ": {
      "description": [
        "Getter and setter methods for position coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orient": {
      "description": [
        "Set the X,Y,Z position of the Panner"
      ],
      "returns": "Array: Updated x, y, z values as an array",
      "params": {
        "xVal": "Number",
        "yVal": "Number",
        "zVal": "Number",
        "time": "Number"
      }
    },
    "orientX": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientY": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "orientZ": {
      "description": [
        "Getter and setter methods for orient coordinates"
      ],
      "returns": "Number: updated coordinate value"
    },
    "setFalloff": {
      "description": [
        "Set the rolloff factor and max distance"
      ],
      "params": {
        "maxDistance": "Number (Optional)",
        "rolloffFactor": "Number (Optional)"
      }
    },
    "maxDist": {
      "description": [
        "Maxium distance between the source and the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "maxDistance": "Number"
      }
    },
    "rollof": {
      "description": [
        "How quickly the volume is reduced as the source moves away from the listener"
      ],
      "returns": "Number: updated value",
      "params": {
        "rolloffFactor": "Number"
      }
    }
  },
  "p5.Delay": {
    "description": [
      "Delay is an echo effect. It processes an existing sound source, and outputs a delayed version of that sound. The p5.Delay can produce different effects depending on the delayTime, feedback, filter, and type. In the example below, a feedback of 0.5 (the default value) will produce a looping delay that decreases in volume by 50% each repeat. A filter will cut out the high frequencies so that the delay does not sound as piercing as the original source. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "leftDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "rightDelay": {
      "description": [
        "The p5.Delay is built with two <a href=\"http://www.w3.org/TR/webaudio/#DelayNode\"> Web Audio Delay Nodes</a>, one for each stereo channel."
      ]
    },
    "process": {
      "description": [
        "Add delay to an audio signal according to a set of delay parameters."
      ],
      "params": {
        "Signal": "Object: An object that outputs audio",
        "delayTime": "Number: (Optional) Time (in seconds) of the delay/echo.  Some browsers limit delayTime to  1 second.",
        "feedback": "Number: (Optional) sends the delay back through itself  in a loop that decreases in volume  each time.",
        "lowPass": "Number: (Optional) Cutoff frequency. Only frequencies  below the lowPass will be part of the  delay."
      }
    },
    "delayTime": {
      "description": [
        "Set the delay (echo) time, in seconds. Usually this value will be a floating point number between 0.0 and 1.0."
      ],
      "params": {
        "delayTime": "Number: Time (in seconds) of the delay"
      }
    },
    "feedback": {
      "description": [
        "Feedback occurs when Delay sends its signal back through its input in a loop. The feedback amount determines how much signal to send each time through the loop. A feedback greater than 1.0 is not desirable because it will increase the overall output each time through the loop, creating an infinite feedback loop. The default value is 0.5"
      ],
      "returns": "Number: Feedback value",
      "params": {
        "feedback": "Number|Object: 0.0 to 1.0, or an object such as an  Oscillator that can be used to  modulate this param"
      }
    },
    "filter": {
      "description": [
        "Set a lowpass filter frequency for the delay. A lowpass filter will cut off any frequencies higher than the filter frequency."
      ],
      "params": {
        "cutoffFreq": "Number|Object: A lowpass filter will cut off any  frequencies higher than the filter frequency.",
        "res": "Number|Object: Resonance of the filter frequency  cutoff, or an object (i.e. a p5.Oscillator)  that can be used to modulate this parameter.  High numbers (i.e. 15) will produce a resonance,  low numbers (i.e. .2) will produce a slope."
      }
    },
    "setType": {
      "description": [
        "Choose a preset type of delay. 'pingPong' bounces the signal from the left to the right channel to produce a stereo effect. Any other parameter will revert to the default delay setting."
      ],
      "params": {
        "type": "String|Number: 'pingPong' (1) or 'default' (0)"
      }
    },
    "amp": {
      "description": [
        "Set the output level of the delay effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Reverb": {
    "description": [
      "Reverb adds depth to a sound through a large number of decaying echoes. It creates the perception that sound is occurring in a physical space. The p5.Reverb has paramters for Time (how long does the reverb last) and decayRate (how much the sound decays with each echo) that can be set with the .set() or .process() methods. The p5.Convolver extends p5.Reverb allowing you to recreate the sound of actual physical spaces through convolution. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "process": {
      "description": [
        "Connect a source to the reverb, and assign reverb parameters."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output.",
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "set": {
      "description": [
        "Set the reverb settings. Similar to .process(), but without assigning a new input."
      ],
      "params": {
        "seconds": "Number: (Optional) Duration of the reverb, in seconds.  Min: 0, Max: 10. Defaults to 3.",
        "decayRate": "Number: (Optional) Percentage of decay with each echo.  Min: 0, Max: 100. Defaults to 2.",
        "reverse": "Boolean: (Optional) Play the reverb backwards or forwards."
      }
    },
    "amp": {
      "description": [
        "Set the output level of the reverb effect."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    }
  },
  "p5.Convolver": {
    "description": [
      "p5.Convolver extends p5.Reverb. It can emulate the sound of real physical spaces through a process called <a href=\" https://en.wikipedia.org/wiki/Convolution_reverb#Real_space_simulation\"> convolution</a>.  ",
      "Convolution multiplies any audio input by an \"impulse response\" to simulate the dispersion of sound over time. The impulse response is generated from an audio file that you provide. One way to generate an impulse response is to pop a balloon in a reverberant space and record the echo. Convolution can also be used to experiment with sound.  ",
      "Use the method <code>createConvolution(path)</code> to instantiate a p5.Convolver with a path to your impulse response audio file."
    ],
    "params": {
      "path": "String: path to a sound file",
      "callback": "Function: (Optional) function to call when loading succeeds",
      "errorCallback": "Function: (Optional) function to call if loading fails.  This function will receive an error or  XMLHttpRequest object with information  about what went wrong."
    },
    "convolverNode": {
      "description": [
        "Internally, the p5.Convolver uses the a <a href=\"http://www.w3.org/TR/webaudio/#ConvolverNode\"> Web Audio Convolver Node</a>."
      ]
    },
    "impulses": {
      "description": [
        "If you load multiple impulse files using the .addImpulse method, they will be stored as Objects in this Array. Toggle between them with the <code>toggleImpulse(id)</code> method."
      ]
    },
    "process": {
      "description": [
        "Connect a source to the convolver."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "addImpulse": {
      "description": [
        "Load and assign a new Impulse Response to the p5.Convolver. The impulse is added to the <code>.impulses</code> array. Previous impulses can be accessed with the <code>.toggleImpulse(id)</code> method."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "resetImpulse": {
      "description": [
        "Similar to .addImpulse, except that the <code>.impulses</code> Array is reset to save memory. A new <code>.impulses</code> array is created with this impulse as the only item."
      ],
      "params": {
        "path": "String: path to a sound file",
        "callback": "Function: function (optional)",
        "errorCallback": "Function: function (optional)"
      }
    },
    "toggleImpulse": {
      "description": [
        "If you have used <code>.addImpulse()</code> to add multiple impulses to a p5.Convolver, then you can use this method to toggle between the items in the <code>.impulses</code> Array. Accepts a parameter to identify which impulse you wish to use, identified either by its original filename (String) or by its position in the <code>.impulses </code> Array (Number).<br/> You can access the objects in the .impulses Array directly. Each Object has two attributes: an <code>.audioBuffer</code> (type: Web Audio <a href=\" http://webaudio.github.io/web-audio-api/#the-audiobuffer-interface\"> AudioBuffer)</a> and a <code>.name</code>, a String that corresponds with the original filename."
      ],
      "params": {
        "id": "String|Number: Identify the impulse by its original filename  (String), or by its position in the  <code>.impulses</code> Array (Number)."
      }
    }
  },
  "p5.Phrase": {
    "description": [
      "A phrase is a pattern of musical events over time, i.e. a series of notes and rests.  ",
      "Phrases must be added to a p5.Part for playback, and each part can play multiple phrases at the same time. For example, one Phrase might be a kick drum, another could be a snare, and another could be the bassline.  ",
      "The first parameter is a name so that the phrase can be modified or deleted later. The callback is a a function that this phrase will call at every step—for example it might be called <code>playNote(value){}</code>. The array determines which value is passed into the callback at each step of the phrase. It can be numbers, an object with multiple numbers, or a zero (0) indicates a rest so the callback won't be called)."
    ],
    "params": {
      "name": "String: Name so that you can access the Phrase.",
      "callback": "Function: The name of a function that this phrase  will call. Typically it will play a sound,  and accept two parameters: a time at which  to play the sound (in seconds from now),  and a value from the sequence array. The  time should be passed into the play() or  start() method to ensure precision.",
      "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
    },
    "sequence": {
      "description": [
        "Array of values to pass into the callback at each step of the phrase. Depending on the callback function's requirements, these values may be numbers, strings, or an object with multiple parameters. Zero (0) indicates a rest."
      ]
    }
  },
  "p5.Part": {
    "description": [
      "A p5.Part plays back one or more p5.Phrases. Instantiate a part with steps and tatums. By default, each step represents a 1/16th note.  ",
      "See p5.Phrase for more about musical timing."
    ],
    "params": {
      "steps": "Number: (Optional) Steps in the part",
      "tatums": "Number: (Optional) Divisions of a beat, e.g. use 1/4, or 0.25 for a quater note (default is 1/16, a sixteenth note)"
    },
    "setBPM": {
      "description": [
        "Set the tempo of this part, in Beats Per Minute."
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: (Optional) Seconds from now"
      }
    },
    "getBPM": {
      "description": [
        "Returns the tempo, in Beats Per Minute, of this part."
      ],
      "returns": "Number: "
    },
    "start": {
      "description": [
        "Start playback of this part. It will play through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "loop": {
      "description": [
        "Loop playback of this part. It will begin looping through all of its phrases at a speed determined by setBPM."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "noLoop": {
      "description": [
        "Tell the part to stop looping."
      ]
    },
    "stop": {
      "description": [
        "Stop the part and cue it to step 0. Playback will resume from the begining of the Part when it is played again."
      ],
      "params": {
        "time": "Number: (Optional) seconds from now"
      }
    },
    "pause": {
      "description": [
        "Pause the part. Playback will resume from the current step."
      ],
      "params": {
        "time": "Number: seconds from now"
      }
    },
    "addPhrase": {
      "description": [
        "Add a p5.Phrase to this Part."
      ],
      "params": {
        "phrase": "p5.Phrase: reference to a p5.Phrase"
      }
    },
    "removePhrase": {
      "description": [
        "Remove a phrase from this part, based on the name it was given when it was created."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "getPhrase": {
      "description": [
        "Get a phrase from this part, based on the name it was given when it was created. Now you can modify its array."
      ],
      "params": {
        "phraseName": "String"
      }
    },
    "replaceSequence": {
      "description": [
        "Find all sequences with the specified name, and replace their patterns with the specified array."
      ],
      "params": {
        "phraseName": "String",
        "sequence": "Array: Array of values to pass into the callback  at each step of the phrase."
      }
    },
    "onStep": {
      "description": [
        "Set the function that will be called at every step. This will clear the previous function."
      ],
      "params": {
        "callback": "Function: The name of the callback  you want to fire  on every beat/tatum."
      }
    }
  },
  "p5.Score": {
    "description": [
      "A Score consists of a series of Parts. The parts will be played back in order. For example, you could have an A part, a B part, and a C part, and play them back in this order <code>new p5.Score(a, a, b, a, c)</code>"
    ],
    "params": {
      "parts": "p5.Part: (Optional) One or multiple parts, to be played in sequence."
    },
    "start": {
      "description": [
        "Start playback of the score."
      ]
    },
    "stop": {
      "description": [
        "Stop playback of the score."
      ]
    },
    "pause": {
      "description": [
        "Pause playback of the score."
      ]
    },
    "loop": {
      "description": [
        "Loop playback of the score."
      ]
    },
    "noLoop": {
      "description": [
        "Stop looping playback of the score. If it is currently playing, this will go into effect after the current round of playback completes."
      ]
    },
    "setBPM": {
      "description": [
        "Set the tempo for all parts in the score"
      ],
      "params": {
        "BPM": "Number: Beats Per Minute",
        "rampTime": "Number: Seconds from now"
      }
    }
  },
  "p5.SoundLoop": {
    "description": [
      "SoundLoop"
    ],
    "params": {
      "callback": "Function: this function will be called on each iteration of theloop",
      "interval": "Number|String: (Optional) amount of time (if a number) or beats (if a string, following <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention) for each iteration of the loop. Defaults to 1 second."
    },
    "bpm": {
      "description": [
        "Getters and Setters, setting any paramter will result in a change in the clock's frequency, that will be reflected after the next callback beats per minute (defaults to 60)"
      ]
    },
    "timeSignature": {
      "description": [
        "number of quarter notes in a measure (defaults to 4)"
      ]
    },
    "interval": {
      "description": [
        "length of the loops interval"
      ]
    },
    "iterations": {
      "description": [
        "how many times the callback has been called so far"
      ]
    },
    "musicalTimeMode": {
      "description": [
        "musicalTimeMode uses <a href = \"https://github.com/Tonejs/Tone.js/wiki/Time\">Tone.Time</a> convention true if string, false if number"
      ]
    },
    "maxIterations": {
      "description": [
        "Set a limit to the number of loops to play. defaults to Infinity"
      ]
    },
    "start": {
      "description": [
        "Start the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a starting time"
      }
    },
    "stop": {
      "description": [
        "Stop the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a stopping time"
      }
    },
    "pause": {
      "description": [
        "Pause the loop"
      ],
      "params": {
        "timeFromNow": "Number: (Optional) schedule a pausing time"
      }
    },
    "syncedStart": {
      "description": [
        "Synchronize loops. Use this method to start two or more loops in synchronization or to start a loop in synchronization with a loop that is already playing This method will schedule the implicit loop in sync with the explicit master loop i.e. loopToStart.syncedStart(loopToSyncWith)"
      ],
      "params": {
        "otherLoop": "Object: a p5.SoundLoop to sync with",
        "timeFromNow": "Number: (Optional) Start the loops in sync after timeFromNow seconds"
      }
    }
  },
  "p5.Compressor": {
    "description": [
      "Compressor is an audio effect class that performs dynamics compression on an audio input source. This is a very commonly used technique in music and sound production. Compression creates an overall louder, richer, and fuller sound by lowering the volume of louds and raising that of softs. Compression can be used to avoid clipping (sound distortion due to peaks in volume) and is especially useful when many sounds are played at once. Compression can be used on indivudal sound sources in addition to the main output. ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "compressor": {
      "description": [
        "The p5.Compressor is built with a <a href=\"https://www.w3.org/TR/webaudio/#the-dynamicscompressornode-interface\"  target=\"_blank\" title=\"W3 spec for Dynamics Compressor Node\">Web Audio Dynamics Compressor Node  </a>"
      ]
    },
    "process": {
      "description": [
        "Performs the same function as .connect, but also accepts optional parameters to set compressor's audioParams"
      ],
      "params": {
        "src": "Object: Sound source to be connected",
        "attack": "Number: (Optional) The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: (Optional) The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: (Optional) The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "set": {
      "description": [
        "Set the paramters of a compressor."
      ],
      "params": {
        "attack": "Number: The amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "knee": "Number: A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "ratio": "Number: The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1"
      }
    },
    "attack": {
      "description": [
        "Get current attack or set value w/ time ramp"
      ],
      "params": {
        "attack": "Number: (Optional) Attack is the amount of time (in seconds) to reduce the gain by 10dB,  default = .003, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "knee": {
      "description": [
        "Get current knee or set value w/ time ramp"
      ],
      "params": {
        "knee": "Number: (Optional) A decibel value representing the range above the  threshold where the curve smoothly transitions to the \"ratio\" portion.  default = 30, range 0 - 40",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "ratio": {
      "description": [
        "Get current ratio or set value w/ time ramp"
      ],
      "params": {
        "ratio": "Number: (Optional) The amount of dB change in input for a 1 dB change in output  default = 12, range 1 - 20",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "threshold": {
      "description": [
        "Get current threshold or set value w/ time ramp"
      ],
      "params": {
        "threshold": "Number: The decibel value above which the compression will start taking effect  default = -24, range -100 - 0",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "release": {
      "description": [
        "Get current release or set value w/ time ramp"
      ],
      "params": {
        "release": "Number: The amount of time (in seconds) to increase the gain by 10dB  default = .25, range 0 - 1",
        "time": "Number: (Optional) Assign time value to schedule the change in value"
      }
    },
    "reduction": {
      "description": [
        "Return the current reduction value"
      ],
      "returns": "Number: Value of the amount of gain reduction that is applied to the signal"
    }
  },
  "p5.PeakDetect": {
    "description": [
      "PeakDetect works in conjunction with p5.FFT to look for onsets in some or all of the frequency spectrum.  ",
      " To use p5.PeakDetect, call <code>update</code> in the draw loop and pass in a p5.FFT object.  ",
      " You can listen for a specific part of the frequency spectrum by setting the range between <code>freq1</code> and <code>freq2</code>.   ",
      "<code>threshold</code> is the threshold for detecting a peak, scaled between 0 and 1. It is logarithmic, so 0.1 is half as loud as 1.0.  ",
      " The update method is meant to be run in the draw loop, and <b>frames</b> determines how many loops must pass before another peak can be detected. For example, if the frameRate() = 60, you could detect the beat of a 120 beat-per-minute song with this equation: <code> framesPerPeak = 60 / (estimatedBPM / 60 );</code>   ",
      " Based on example contribtued by @b2renger, and a simple beat detection explanation by <a href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" target=\"_blank\">Felix Turner</a>. "
    ],
    "params": {
      "freq1": "Number: (Optional) lowFrequency - defaults to 20Hz",
      "freq2": "Number: (Optional) highFrequency - defaults to 20000 Hz",
      "threshold": "Number: (Optional) Threshold for detecting a beat between 0 and 1  scaled logarithmically where 0.1 is 1/2 the loudness  of 1.0. Defaults to 0.35.",
      "framesPerPeak": "Number: (Optional) Defaults to 20."
    },
    "isDetected": {
      "description": [
        "isDetected is set to true when a peak is detected."
      ]
    },
    "update": {
      "description": [
        "The update method is run in the draw loop. ",
        "Accepts an FFT object. You must call .analyze() on the FFT object prior to updating the peakDetect because it relies on a completed FFT analysis."
      ],
      "params": {
        "fftObject": "p5.FFT: A p5.FFT object"
      }
    },
    "onPeak": {
      "description": [
        "onPeak accepts two arguments: a function to call when a peak is detected. The value of the peak, between 0.0 and 1.0, is passed to the callback."
      ],
      "params": {
        "callback": "Function: Name of a function that will  be called when a peak is  detected.",
        "val": "Object: (Optional) Optional value to pass  into the function when  a peak is detected."
      }
    }
  },
  "p5.SoundRecorder": {
    "description": [
      "Record sounds for playback and/or to save as a .wav file. The p5.SoundRecorder records all sound output from your sketch, or can be assigned a specific source with setInput(). ",
      "The record() method accepts a p5.SoundFile as a parameter. When playback is stopped (either after the given amount of time, or with the stop() method), the p5.SoundRecorder will send its recording to that p5.SoundFile for playback."
    ],
    "setInput": {
      "description": [
        "Connect a specific device to the p5.SoundRecorder. If no parameter is given, p5.SoundRecorer will record all audible p5.sound from your sketch."
      ],
      "params": {
        "unit": "Object: (Optional) p5.sound object or a web audio unit  that outputs sound"
      }
    },
    "record": {
      "description": [
        "Start recording. To access the recording, provide a p5.SoundFile as the first parameter. The p5.SoundRecorder will send its recording to that p5.SoundFile for playback once recording is complete. Optional parameters include duration (in seconds) of the recording, and a callback function that will be called once the complete recording has been transfered to the p5.SoundFile."
      ],
      "params": {
        "soundFile": "p5.SoundFile: p5.SoundFile",
        "duration": "Number: (Optional) Time (in seconds)",
        "callback": "Function: (Optional) The name of a function that will be  called once the recording completes"
      }
    },
    "stop": {
      "description": [
        "Stop the recording. Once the recording is stopped, the results will be sent to the p5.SoundFile that was given on .record(), and if a callback function was provided on record, that function will be called."
      ]
    }
  },
  "p5.Distortion": {
    "description": [
      "A Distortion effect created with a Waveshaper Node, with an approach adapted from <a href=\"http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\">Kevin Ennis</a> ",
      "This class extends <a href = \"/reference/#/p5.Effect\">p5.Effect</a>. Methods <a href = \"/reference/#/p5.Effect/amp\">amp()</a>, <a href = \"/reference/#/p5.Effect/chain\">chain()</a>, <a href = \"/reference/#/p5.Effect/drywet\">drywet()</a>, <a href = \"/reference/#/p5.Effect/connect\">connect()</a>, and <a href = \"/reference/#/p5.Effect/disconnect\">disconnect()</a> are available."
    ],
    "params": {
      "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
      "oversample": "String: (Optional) 'none', '2x', or '4x'."
    },
    "WaveShaperNode": {
      "description": [
        "The p5.Distortion is built with a <a href=\"http://www.w3.org/TR/webaudio/#WaveShaperNode\"> Web Audio WaveShaper Node</a>."
      ]
    },
    "process": {
      "description": [
        "Process a sound source, optionally specify amount and oversample values."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "set": {
      "description": [
        "Set the amount and oversample of the waveshaper distortion."
      ],
      "params": {
        "amount": "Number: (Optional) Unbounded distortion amount.  Normal values range from 0-1.",
        "oversample": "String: (Optional) 'none', '2x', or '4x'."
      }
    },
    "getAmount": {
      "description": [
        "Return the distortion amount, typically between 0-1."
      ],
      "returns": "Number: Unbounded distortion amount.  Normal values range from 0-1."
    },
    "getOversample": {
      "description": [
        "Return the oversampling."
      ],
      "returns": "String: Oversample can either be 'none', '2x', or '4x'."
    }
  },
  "p5.Gain": {
    "description": [
      "A gain node is usefull to set the relative volume of sound. It's typically used to build mixers."
    ],
    "setInput": {
      "description": [
        "Connect a source to the gain node."
      ],
      "params": {
        "src": "Object: p5.sound / Web Audio object with a sound  output."
      }
    },
    "connect": {
      "description": [
        "Send output to a p5.sound or web audio object"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all output."
      ]
    },
    "amp": {
      "description": [
        "Set the output level of the gain node."
      ],
      "params": {
        "volume": "Number: amplitude between 0 and 1.0",
        "rampTime": "Number: (Optional) create a fade that lasts rampTime",
        "timeFromNow": "Number: (Optional) schedule this event to happen  seconds from now"
      }
    }
  },
  "p5.AudioVoice": {
    "description": [
      "Base class for monophonic synthesizers. Any extensions of this class should follow the API and implement the methods below in order to remain compatible with p5.PolySynth();"
    ],
    "connect": {
      "description": [
        "Connect to p5 objects or Web Audio Nodes"
      ],
      "params": {
        "unit": "Object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect from soundOut"
      ]
    }
  },
  "p5.MonoSynth": {
    "description": [
      "A MonoSynth is used as a single voice for sound synthesis. This is a class to be used in conjunction with the PolySynth class. Custom synthetisers should be built inheriting from this class."
    ],
    "attack": {
      "description": [
        "Getters and Setters"
      ]
    },
    "decay": {},
    "sustain": {},
    "release": {},
    "play": {
      "description": [
        "Play tells the MonoSynth to start playing a note. This method schedules the calling of .triggerAttack and .triggerRelease."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope. Defaults to 0.15 seconds."
      }
    },
    "triggerAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of the Envelope. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "String | Number: the note you want to play, specified as a  frequency in Hertz (Number) or as a midi  value in Note/Octave format (\"C4\", \"Eb3\"...etc\")  See <a href = \"https://github.com/Tonejs/Tone.js/wiki/Instruments\">  Tone</a>. Defaults to 440 hz",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play"
      }
    },
    "triggerRelease": {
      "description": [
        "Trigger the release of the Envelope. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "secondsFromNow": "Number: time to trigger the release"
      }
    },
    "setADSR": {
      "description": [
        "Set values like a traditional <a href=\"https://en.wikipedia.org/wiki/Synthesizer#/media/File:ADSR_parameter.svg\"> ADSR envelope </a>."
      ],
      "params": {
        "attackTime": "Number: Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "amp": {
      "description": [
        "MonoSynth amp"
      ],
      "returns": "Number: new volume value",
      "params": {
        "vol": "Number: desired volume",
        "rampTime": "Number: (Optional) Time to reach new volume"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  },
  "p5.OnsetDetect": {
    "description": [
      "Listen for onsets (a sharp increase in volume) within a given frequency range."
    ],
    "params": {
      "freqLow": "Number: Low frequency",
      "freqHigh": "Number: High frequency",
      "threshold": "Number: Amplitude threshold between 0 (no energy) and 1 (maximum)",
      "callback": "Function: Function to call when an onset is detected"
    }
  },
  "p5.PolySynth": {
    "description": [
      "An AudioVoice is used as a single voice for sound synthesis. The PolySynth class holds an array of AudioVoice, and deals with voices allocations, with setting notes to be played, and parameters to be set."
    ],
    "params": {
      "synthVoice": "Number: (Optional) A monophonic synth voice inheriting  the AudioVoice class. Defaults to p5.MonoSynth",
      "maxVoices": "Number: (Optional) Number of voices, defaults to 8;"
    },
    "notes": {
      "description": [
        "An object that holds information about which notes have been played and which notes are currently being played. New notes are added as keys on the fly. While a note has been attacked, but not released, the value of the key is the audiovoice which is generating that note. When notes are released, the value of the key becomes undefined."
      ]
    },
    "polyvalue": {
      "description": [
        "A PolySynth must have at least 1 voice, defaults to 8"
      ]
    },
    "AudioVoice": {
      "description": [
        "Monosynth that generates the sound for each note that is triggered. The p5.PolySynth defaults to using the p5.MonoSynth as its voice."
      ]
    },
    "play": {
      "description": [
        "Play a note by triggering noteAttack and noteRelease with sustain time"
      ],
      "params": {
        "note": "Number: (Optional) midi note to play (ranging from 0 to 127 - 60 being a middle C)",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)",
        "secondsFromNow": "Number: (Optional) time from now (in seconds) at which to play",
        "sustainTime": "Number: (Optional) time to sustain before releasing the envelope"
      }
    },
    "noteADSR": {
      "description": [
        "noteADSR sets the envelope for a specific note that has just been triggered. Using this method modifies the envelope of whichever audiovoice is being used to play the desired note. The envelope should be reset before noteRelease is called in order to prevent the modified envelope from being used on other notes."
      ],
      "params": {
        "note": "Number: (Optional) Midi note on which ADSR should be set.",
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "setADSR": {
      "description": [
        "Set the PolySynths global envelope. This method modifies the envelopes of each monosynth so that all notes are played with this envelope."
      ],
      "params": {
        "attackTime": "Number: (Optional) Time (in seconds before envelope  reaches Attack Level",
        "decayTime": "Number: (Optional) Time (in seconds) before envelope  reaches Decay/Sustain Level",
        "susRatio": "Number: (Optional) Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,  where 1.0 = attackLevel, 0.0 = releaseLevel.  The susRatio determines the decayLevel and the level at which the  sustain portion of the envelope will sustain.  For example, if attackLevel is 0.4, releaseLevel is 0,  and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is  increased to 1.0 (using <code>setRange</code>),  then decayLevel would increase proportionally, to become 0.5.",
        "releaseTime": "Number: (Optional) Time in seconds from now (defaults to 0)"
      }
    },
    "noteAttack": {
      "description": [
        "Trigger the Attack, and Decay portion of a MonoSynth. Similar to holding down a key on a piano, but it will hold the sustain level until you let go."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.",
        "velocity": "Number: (Optional) velocity of the note to play (ranging from 0 to 1)/",
        "secondsFromNow": "Number: (Optional) time from now (in seconds)"
      }
    },
    "noteRelease": {
      "description": [
        "Trigger the Release of an AudioVoice note. This is similar to releasing the key on a piano and letting the sound fade according to the release level and release time."
      ],
      "params": {
        "note": "Number: (Optional) midi note on which attack should be triggered.  If no value is provided, all notes will be released.",
        "secondsFromNow": "Number: (Optional) time to trigger the release"
      }
    },
    "connect": {
      "description": [
        "Connect to a p5.sound / Web Audio object."
      ],
      "params": {
        "unit": "Object: A p5.sound or Web Audio object"
      }
    },
    "disconnect": {
      "description": [
        "Disconnect all outputs"
      ]
    },
    "dispose": {
      "description": [
        "Get rid of the MonoSynth and free up its resources / memory."
      ]
    }
  }
}